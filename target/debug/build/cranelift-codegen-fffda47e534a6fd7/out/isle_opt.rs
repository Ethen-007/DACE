// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_opt.isle
// - src\opts\arithmetic.isle
// - src\opts\bitops.isle
// - src\opts\cprop.isle
// - src\opts\extends.isle
// - src\opts\icmp.isle
// - src\opts\remat.isle
// - src\opts\selects.isle
// - src\opts\shifts.isle
// - src\opts\spaceship.isle
// - src\opts\spectre.isle
// - src\opts\vector.isle
// - D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    type inst_data_etor_returns: Default + IntoContextIter<Context = Self, Output = (Type, InstructionData)>;
    fn inst_data_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_etor_returns) -> ();
    type inst_data_tupled_etor_returns: Default + IntoContextIter<Context = Self, Output = TypeAndInstructionData>;
    fn inst_data_tupled_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_tupled_etor_returns) -> ();
    fn make_inst_ctor(&mut self, arg0: Type, arg1: &InstructionData) -> Value;
    fn value_array_2_ctor(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn value_array_3_ctor(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn remat(&mut self, arg0: Value) -> Value;
    fn subsume(&mut self, arg0: Value) -> Value;
    fn iconst_sextend_etor(&mut self, arg0: TypeAndInstructionData) -> Option<(Type, i64)>;
    type sextend_maybe_etor_returns: Default + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn sextend_maybe_etor(&mut self, arg0: Value, returns: &mut Self::sextend_maybe_etor_returns) -> ();
    type uextend_maybe_etor_returns: Default + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn uextend_maybe_etor(&mut self, arg0: Value, returns: &mut Self::uextend_maybe_etor_returns) -> ();
    fn splat64(&mut self, arg0: u64) -> Constant;
    fn f32_from_uint(&mut self, arg0: u64) -> Ieee32;
    fn f64_from_uint(&mut self, arg0: u64) -> Ieee64;
    fn f32_from_sint(&mut self, arg0: i64) -> Ieee32;
    fn f64_from_sint(&mut self, arg0: i64) -> Ieee64;
    fn u64_bswap16(&mut self, arg0: u64) -> u64;
    fn u64_bswap32(&mut self, arg0: u64) -> u64;
    fn u64_bswap64(&mut self, arg0: u64) -> u64;
    fn ieee128_constant_extractor(&mut self, arg0: Constant) -> Option<Ieee128>;
    fn ieee128_constant(&mut self, arg0: Ieee128) -> Constant;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src\prelude.isle line 408.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        R32 => {
            // Rule at src\prelude.isle line 415.
            return true;
        }
        R64 => {
            // Rule at src\prelude.isle line 416.
            return true;
        }
        _ => {}
    }
    // Rule at src\prelude.isle line 417.
    return false;
}

// Generated as internal constructor for term eq.
pub fn constructor_eq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg1, arg2);
    // Rule at src\prelude_opt.isle line 30.
    return v4;
}

// Generated as internal constructor for term ne.
pub fn constructor_ne<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 31.
    return v4;
}

// Generated as internal constructor for term ult.
pub fn constructor_ult<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 32.
    return v4;
}

// Generated as internal constructor for term ule.
pub fn constructor_ule<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 33.
    return v4;
}

// Generated as internal constructor for term ugt.
pub fn constructor_ugt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 34.
    return v4;
}

// Generated as internal constructor for term uge.
pub fn constructor_uge<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 35.
    return v4;
}

// Generated as internal constructor for term slt.
pub fn constructor_slt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 36.
    return v4;
}

// Generated as internal constructor for term sle.
pub fn constructor_sle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 37.
    return v4;
}

// Generated as internal constructor for term sgt.
pub fn constructor_sgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg1, arg2);
    // Rule at src\prelude_opt.isle line 38.
    return v4;
}

// Generated as internal constructor for term sge.
pub fn constructor_sge<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src\prelude_opt.isle line 39.
    return v4;
}

// Generated as internal constructor for term spaceship_s.
pub fn constructor_spaceship_s<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_sgt(ctx, arg0, arg1, arg2);
    let v5 = constructor_slt(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src\prelude_opt.isle line 43.
    return v6;
}

// Generated as internal constructor for term spaceship_u.
pub fn constructor_spaceship_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_ugt(ctx, arg0, arg1, arg2);
    let v5 = constructor_ult(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src\prelude_opt.isle line 46.
    return v6;
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Smin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1149 = C::lane_type(ctx, v2.0);
                                                        let v1305 = constructor_smin(ctx, v1149, v30, v27);
                                                        let v1306 = constructor_splat(ctx, v2.0, v1305);
                                                        // Rule at src\opts\vector.isle line 55.
                                                        returns.extend(Some(v1306));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1149 = C::lane_type(ctx, v2.0);
                                                        let v1307 = constructor_umin(ctx, v1149, v30, v27);
                                                        let v1308 = constructor_splat(ctx, v2.0, v1307);
                                                        // Rule at src\opts\vector.isle line 58.
                                                        returns.extend(Some(v1308));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1149 = C::lane_type(ctx, v2.0);
                                                        let v1309 = constructor_smax(ctx, v1149, v30, v27);
                                                        let v1310 = constructor_splat(ctx, v2.0, v1309);
                                                        // Rule at src\opts\vector.isle line 61.
                                                        returns.extend(Some(v1310));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1149 = C::lane_type(ctx, v2.0);
                                                        let v1311 = constructor_umax(ctx, v1149, v30, v27);
                                                        let v1312 = constructor_splat(ctx, v2.0, v1311);
                                                        // Rule at src\opts\vector.isle line 64.
                                                        returns.extend(Some(v1312));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    match &v110.1 {
                                                        &InstructionData::Binary {
                                                            opcode: ref v113,
                                                            args: ref v114,
                                                        } => {
                                                            match v113 {
                                                                &Opcode::Iadd => {
                                                                    if v2.0 == v110.0 {
                                                                        let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                        let v115 = C::unpack_value_array_2(ctx, v114);
                                                                        let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                        let v120 = constructor_iadd(ctx, v2.0, v118, v119);
                                                                        let v121 = C::subsume(ctx, v120);
                                                                        // Rule at src\opts\arithmetic.isle line 135.
                                                                        returns.extend(Some(v121));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                                &Opcode::Isub => {
                                                                    if v2.0 == v110.0 {
                                                                        let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                        let v115 = C::unpack_value_array_2(ctx, v114);
                                                                        let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                        let v178 = constructor_iadd(ctx, v2.0, v118, v165);
                                                                        let v179 = C::subsume(ctx, v178);
                                                                        // Rule at src\opts\arithmetic.isle line 183.
                                                                        returns.extend(Some(v179));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                        &InstructionData::UnaryImm {
                                                            opcode: ref v686,
                                                            imm: v687,
                                                        } => {
                                                            if let &Opcode::Iconst = v686 {
                                                                let mut v18 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                                let mut v18 = v18.into_context_iter();
                                                                while let Some(v19) = v18.next(ctx) {
                                                                    if let &InstructionData::Binary {
                                                                        opcode: ref v122,
                                                                        args: ref v123,
                                                                    } = &v19.1 {
                                                                        if let &Opcode::Iadd = v122 {
                                                                            if v2.0 == v19.0 {
                                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                let mut v199 = v199.into_context_iter();
                                                                                while let Some(v200) = v199.next(ctx) {
                                                                                    if let &InstructionData::UnaryImm {
                                                                                        opcode: ref v226,
                                                                                        imm: v227,
                                                                                    } = &v200.1 {
                                                                                        if let &Opcode::Iconst = v226 {
                                                                                            let v688 = constructor_iadd(ctx, v2.0, v124.0, v106.0);
                                                                                            let v689 = constructor_iadd(ctx, v2.0, v124.1, v106.1);
                                                                                            let v690 = constructor_iadd(ctx, v2.0, v688, v689);
                                                                                            // Rule at src\opts\cprop.isle line 225.
                                                                                            returns.extend(Some(v690));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } = &v110.1 {
                                                        match v113 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v110.0 {
                                                                    let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                    let v176 = constructor_isub(ctx, v2.0, v118, v119);
                                                                    let v177 = C::subsume(ctx, v176);
                                                                    // Rule at src\opts\arithmetic.isle line 179.
                                                                    returns.extend(Some(v177));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v110.0 {
                                                                    let v118 = constructor_iadd(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                    let v174 = constructor_isub(ctx, v2.0, v118, v165);
                                                                    let v175 = C::subsume(ctx, v174);
                                                                    // Rule at src\opts\arithmetic.isle line 175.
                                                                    returns.extend(Some(v175));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1149 = C::lane_type(ctx, v2.0);
                                                                let v1289 = constructor_iadd(ctx, v1149, v30, v27);
                                                                let v1290 = constructor_splat(ctx, v2.0, v1289);
                                                                // Rule at src\opts\vector.isle line 31.
                                                                returns.extend(Some(v1290));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v28 = constructor_isub(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\arithmetic.isle line 24.
                                                returns.extend(Some(v28));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        match v122 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v199 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v2.0 == v200.0 {
                                                                                    let v611 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                                    let v612 = constructor_iadd(ctx, v2.0, v124.0, v611);
                                                                                    // Rule at src\opts\cprop.isle line 126.
                                                                                    returns.extend(Some(v612));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                    let mut v127 = v127.into_context_iter();
                                                                    while let Some(v128) = v127.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v617,
                                                                            imm: v618,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Iconst = v617 {
                                                                                if v2.0 == v128.0 {
                                                                                    let v619 = C::u64_from_imm64(ctx, v618);
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v629 = C::u64_add(ctx, v619, v16);
                                                                                    let v630 = C::imm64_masked(ctx, v2.0, v629);
                                                                                    let v631 = constructor_iconst(ctx, v2.0, v630);
                                                                                    let v632 = constructor_isub(ctx, v2.0, v631, v124.1);
                                                                                    // Rule at src\opts\cprop.isle line 152.
                                                                                    returns.extend(Some(v632));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    let mut v199 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v2.0 == v200.0 {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v228 = C::u64_from_imm64(ctx, v227);
                                                                                    let v624 = C::u64_sub(ctx, v16, v228);
                                                                                    let v625 = C::imm64_masked(ctx, v2.0, v624);
                                                                                    let v626 = constructor_iconst(ctx, v2.0, v625);
                                                                                    let v628 = constructor_iadd(ctx, v2.0, v124.0, v626);
                                                                                    // Rule at src\opts\cprop.isle line 148.
                                                                                    returns.extend(Some(v628));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                if v2.0 == v19.0 {
                                                                    let v65 = constructor_ineg(ctx, v2.0, v30);
                                                                    // Rule at src\opts\arithmetic.isle line 69.
                                                                    returns.extend(Some(v65));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\arithmetic.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v528 = C::u64_add(ctx, v24, v16);
                                                                let v529 = C::imm64_masked(ctx, v527, v528);
                                                                let v530 = constructor_iconst(ctx, v527, v529);
                                                                let v531 = C::subsume(ctx, v530);
                                                                // Rule at src\opts\cprop.isle line 3.
                                                                returns.extend(Some(v531));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 6.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v138 = constructor_iadd(ctx, v2.0, v136, v137);
                                                                    let v139 = C::subsume(ctx, v138);
                                                                    // Rule at src\opts\arithmetic.isle line 137.
                                                                    returns.extend(Some(v139));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v188 = constructor_iadd(ctx, v2.0, v180, v137);
                                                                    let v189 = C::subsume(ctx, v188);
                                                                    // Rule at src\opts\arithmetic.isle line 201.
                                                                    returns.extend(Some(v189));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v192 = constructor_isub(ctx, v2.0, v136, v183);
                                                                    let v193 = C::subsume(ctx, v192);
                                                                    // Rule at src\opts\arithmetic.isle line 209.
                                                                    returns.extend(Some(v193));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v184 = constructor_isub(ctx, v2.0, v180, v183);
                                                                    let v185 = C::subsume(ctx, v184);
                                                                    // Rule at src\opts\arithmetic.isle line 193.
                                                                    returns.extend(Some(v185));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Ineg = v29 {
                                        if v2.0 == v19.0 {
                                            let v31 = constructor_isub(ctx, v2.0, v7.1, v30);
                                            // Rule at src\opts\arithmetic.isle line 26.
                                            returns.extend(Some(v31));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v602 = constructor_iadd(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 95.
                                            returns.extend(Some(v602));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 4.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } = &v110.1 {
                                                        match v113 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                    let v172 = constructor_isub(ctx, v2.0, v164, v119);
                                                                    let v173 = C::subsume(ctx, v172);
                                                                    // Rule at src\opts\arithmetic.isle line 171.
                                                                    returns.extend(Some(v173));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                    let v170 = constructor_isub(ctx, v2.0, v164, v165);
                                                                    let v171 = C::subsume(ctx, v170);
                                                                    // Rule at src\opts\arithmetic.isle line 167.
                                                                    returns.extend(Some(v171));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v11.0 {
                                                let v106 = C::unpack_value_array_2(ctx, v105);
                                                let mut v109 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v106.1, &mut v109);
                                                let mut v109 = v109.into_context_iter();
                                                while let Some(v110) = v109.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } = &v110.1 {
                                                        match v113 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v119 = constructor_iadd(ctx, v2.0, v115.0, v115.1);
                                                                    let v168 = constructor_iadd(ctx, v2.0, v164, v119);
                                                                    let v169 = C::subsume(ctx, v168);
                                                                    // Rule at src\opts\arithmetic.isle line 163.
                                                                    returns.extend(Some(v169));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v110.0 {
                                                                    let v164 = constructor_isub(ctx, v2.0, v7.0, v106.0);
                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                    let v165 = constructor_isub(ctx, v2.0, v115.0, v115.1);
                                                                    let v166 = constructor_iadd(ctx, v2.0, v164, v165);
                                                                    let v167 = C::subsume(ctx, v166);
                                                                    // Rule at src\opts\arithmetic.isle line 159.
                                                                    returns.extend(Some(v167));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1149 = C::lane_type(ctx, v2.0);
                                                                let v1291 = constructor_isub(ctx, v1149, v30, v27);
                                                                let v1292 = constructor_splat(ctx, v2.0, v1291);
                                                                // Rule at src\opts\vector.isle line 34.
                                                                returns.extend(Some(v1292));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v44 = constructor_iadd(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\arithmetic.isle line 31.
                                                returns.extend(Some(v44));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    match v122 {
                                                        &Opcode::Iadd => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                let v624 = C::u64_sub(ctx, v16, v228);
                                                                                let v625 = C::imm64_masked(ctx, v2.0, v624);
                                                                                let v626 = constructor_iconst(ctx, v2.0, v625);
                                                                                let v627 = constructor_isub(ctx, v2.0, v124.0, v626);
                                                                                // Rule at src\opts\cprop.isle line 144.
                                                                                returns.extend(Some(v627));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Isub => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v617,
                                                                        imm: v618,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v617 {
                                                                            if v2.0 == v128.0 {
                                                                                let v619 = C::u64_from_imm64(ctx, v618);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v620 = C::u64_sub(ctx, v619, v16);
                                                                                let v621 = C::imm64_masked(ctx, v2.0, v620);
                                                                                let v622 = constructor_iconst(ctx, v2.0, v621);
                                                                                let v623 = constructor_isub(ctx, v2.0, v622, v124.1);
                                                                                // Rule at src\opts\cprop.isle line 140.
                                                                                returns.extend(Some(v623));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v613 = C::u64_add(ctx, v228, v16);
                                                                                let v614 = C::imm64_masked(ctx, v2.0, v613);
                                                                                let v615 = constructor_iconst(ctx, v2.0, v614);
                                                                                let v616 = constructor_isub(ctx, v2.0, v124.0, v615);
                                                                                // Rule at src\opts\cprop.isle line 136.
                                                                                returns.extend(Some(v616));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\arithmetic.isle line 13.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v532 = C::u64_sub(ctx, v24, v16);
                                                                let v533 = C::imm64_masked(ctx, v527, v532);
                                                                let v534 = constructor_iconst(ctx, v527, v533);
                                                                let v535 = C::subsume(ctx, v534);
                                                                // Rule at src\opts\cprop.isle line 9.
                                                                returns.extend(Some(v535));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 10.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v194 = constructor_iadd(ctx, v2.0, v136, v183);
                                                                    let v195 = C::subsume(ctx, v194);
                                                                    // Rule at src\opts\arithmetic.isle line 213.
                                                                    returns.extend(Some(v195));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v183 = constructor_isub(ctx, v2.0, v124.1, v7.1);
                                                                    let v186 = constructor_iadd(ctx, v2.0, v180, v183);
                                                                    let v187 = C::subsume(ctx, v186);
                                                                    // Rule at src\opts\arithmetic.isle line 197.
                                                                    returns.extend(Some(v187));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let mut v127 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                let mut v127 = v127.into_context_iter();
                                                while let Some(v128) = v127.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v131,
                                                        args: ref v132,
                                                    } = &v128.1 {
                                                        match v131 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v136 = constructor_iadd(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v190 = constructor_isub(ctx, v2.0, v136, v137);
                                                                    let v191 = C::subsume(ctx, v190);
                                                                    // Rule at src\opts\arithmetic.isle line 205.
                                                                    returns.extend(Some(v191));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v128.0 {
                                                                    let v133 = C::unpack_value_array_2(ctx, v132);
                                                                    let v180 = constructor_isub(ctx, v2.0, v133.0, v133.1);
                                                                    let v137 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                    let v181 = constructor_isub(ctx, v2.0, v180, v137);
                                                                    let v182 = C::subsume(ctx, v181);
                                                                    // Rule at src\opts\arithmetic.isle line 189.
                                                                    returns.extend(Some(v182));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v24 = C::u64_from_imm64(ctx, v23);
                                            if v24 == 0x0 {
                                                let v25 = constructor_ineg(ctx, v2.0, v7.1);
                                                // Rule at src\opts\arithmetic.isle line 18.
                                                returns.extend(Some(v25));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            let v603 = constructor_isub(ctx, v2.0, v7.1, v7.0);
                                            let v604 = constructor_ineg(ctx, v2.0, v603);
                                            // Rule at src\opts\cprop.isle line 100.
                                            returns.extend(Some(v604));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 8.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src\opts\arithmetic.isle line 50.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                let v647 = C::i64_neg(ctx, v61.1);
                                let v648 = C::i64_as_u64(ctx, v647);
                                let v649 = C::i64_as_u64(ctx, v61.1);
                                let v650 = C::u64_lt(ctx, v648, v649);
                                if v650 == true {
                                    if v2.0 == v61.0 {
                                        let v651 = C::imm64_masked(ctx, v2.0, v648);
                                        let v652 = constructor_iconst(ctx, v2.0, v651);
                                        let v653 = constructor_iadd(ctx, v2.0, v7.0, v652);
                                        // Rule at src\opts\cprop.isle line 181.
                                        returns.extend(Some(v653));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Imul = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Imul = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v140 = constructor_imul(ctx, v2.0, v7.0, v106.0);
                                                                let v115 = C::unpack_value_array_2(ctx, v114);
                                                                let v141 = constructor_imul(ctx, v2.0, v115.0, v115.1);
                                                                let v142 = constructor_imul(ctx, v2.0, v140, v141);
                                                                let v143 = C::subsume(ctx, v142);
                                                                // Rule at src\opts\arithmetic.isle line 140.
                                                                returns.extend(Some(v143));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v686,
                                                        imm: v687,
                                                    } => {
                                                        if let &Opcode::Iconst = v686 {
                                                            let mut v18 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1 {
                                                                    if let &Opcode::Imul = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v199 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                            let mut v199 = v199.into_context_iter();
                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v226,
                                                                                    imm: v227,
                                                                                } = &v200.1 {
                                                                                    if let &Opcode::Iconst = v226 {
                                                                                        let v691 = constructor_imul(ctx, v2.0, v124.0, v106.0);
                                                                                        let v692 = constructor_imul(ctx, v2.0, v124.1, v106.1);
                                                                                        let v693 = constructor_imul(ctx, v2.0, v691, v692);
                                                                                        // Rule at src\opts\cprop.isle line 229.
                                                                                        returns.extend(Some(v693));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1149 = C::lane_type(ctx, v2.0);
                                                                let v1293 = constructor_imul(ctx, v1149, v30, v27);
                                                                let v1294 = constructor_splat(ctx, v2.0, v1293);
                                                                // Rule at src\opts\vector.isle line 37.
                                                                returns.extend(Some(v1294));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1 {
                                                        if let &Opcode::Ineg = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v48 = constructor_imul(ctx, v2.0, v30, v27);
                                                                let v49 = C::subsume(ctx, v48);
                                                                // Rule at src\opts\arithmetic.isle line 38.
                                                                returns.extend(Some(v49));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        match v16 {
                                            0x0 => {
                                                if v2.0 == v11.0 {
                                                    let v57 = C::subsume(ctx, v7.1);
                                                    // Rule at src\opts\arithmetic.isle line 59.
                                                    returns.extend(Some(v57));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            0x1 => {
                                                if v2.0 == v11.0 {
                                                    let v17 = C::subsume(ctx, v7.0);
                                                    // Rule at src\opts\arithmetic.isle line 53.
                                                    returns.extend(Some(v17));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            0x2 => {
                                                let v73 = constructor_iadd(ctx, v2.0, v7.0, v7.0);
                                                // Rule at src\opts\arithmetic.isle line 92.
                                                returns.extend(Some(v73));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Imul = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v633 = constructor_imul(ctx, v2.0, v124.1, v7.1);
                                                                                let v634 = constructor_imul(ctx, v2.0, v124.0, v633);
                                                                                // Rule at src\opts\cprop.isle line 157.
                                                                                returns.extend(Some(v634));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v527 {
                                                                    let v24 = C::u64_from_imm64(ctx, v23);
                                                                    let v536 = C::u64_mul(ctx, v24, v16);
                                                                    let v537 = C::imm64_masked(ctx, v527, v536);
                                                                    let v538 = constructor_iconst(ctx, v527, v537);
                                                                    let v539 = C::subsume(ctx, v538);
                                                                    // Rule at src\opts\cprop.isle line 15.
                                                                    returns.extend(Some(v539));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v74 = C::imm64_power_of_two(ctx, v15);
                                        if let Some(v75) = v74 {
                                            let v76 = C::imm64(ctx, v75);
                                            let v77 = constructor_iconst(ctx, v2.0, v76);
                                            let v78 = constructor_ishl(ctx, v2.0, v7.0, v77);
                                            // Rule at src\opts\arithmetic.isle line 99.
                                            returns.extend(Some(v78));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Imul = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1 {
                                                    if let &Opcode::Imul = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                            let v144 = constructor_imul(ctx, v2.0, v133.0, v133.1);
                                                            let v145 = constructor_imul(ctx, v2.0, v124.1, v7.1);
                                                            let v146 = constructor_imul(ctx, v2.0, v144, v145);
                                                            let v147 = C::subsume(ctx, v146);
                                                            // Rule at src\opts\arithmetic.isle line 142.
                                                            returns.extend(Some(v147));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        let v79 = C::imm64_power_of_two(ctx, v23);
                                        if let Some(v80) = v79 {
                                            let v81 = C::imm64(ctx, v80);
                                            let v82 = constructor_iconst(ctx, v2.0, v81);
                                            let v83 = constructor_ishl(ctx, v2.0, v7.1, v82);
                                            // Rule at src\opts\arithmetic.isle line 101.
                                            returns.extend(Some(v83));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        if v2.0 == v19.0 {
                                            let v605 = constructor_imul(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 103.
                                            returns.extend(Some(v605));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v64 = constructor_ineg(ctx, v2.0, v7.0);
                                        // Rule at src\opts\arithmetic.isle line 65.
                                        returns.extend(Some(v64));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1149 = C::lane_type(ctx, v2.0);
                                                        let v1297 = constructor_umulhi(ctx, v1149, v30, v27);
                                                        let v1298 = constructor_splat(ctx, v2.0, v1297);
                                                        // Rule at src\opts\vector.isle line 43.
                                                        returns.extend(Some(v1298));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1 {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1 {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1149 = C::lane_type(ctx, v2.0);
                                                        let v1295 = constructor_smulhi(ctx, v1149, v30, v27);
                                                        let v1296 = constructor_splat(ctx, v2.0, v1295);
                                                        // Rule at src\opts\vector.isle line 40.
                                                        returns.extend(Some(v1296));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Udiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1 {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src\opts\arithmetic.isle line 83.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    let v526 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v527) = v526 {
                                        if v11.0 == v527 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1 {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v545 = C::u64_udiv(ctx, v24, v16);
                                                        if let Some(v546) = v545 {
                                                            if v11.0 == v19.0 {
                                                                let v547 = C::imm64_masked(ctx, v527, v546);
                                                                let v548 = constructor_iconst(ctx, v527, v547);
                                                                let v549 = C::subsume(ctx, v548);
                                                                // Rule at src\opts\cprop.isle line 28.
                                                                returns.extend(Some(v549));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sdiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1 {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src\opts\arithmetic.isle line 79.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    let v526 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v527) = v526 {
                                        if v11.0 == v527 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1 {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v540 = C::u64_sdiv(ctx, v24, v16);
                                                        if let Some(v541) = v540 {
                                                            if v11.0 == v19.0 {
                                                                let v542 = C::imm64_masked(ctx, v527, v541);
                                                                let v543 = constructor_iconst(ctx, v527, v542);
                                                                let v544 = C::subsume(ctx, v543);
                                                                // Rule at src\opts\cprop.isle line 21.
                                                                returns.extend(Some(v544));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Band => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Band = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Band = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v148 = constructor_band(ctx, v2.0, v7.0, v106.0);
                                                                let v115 = C::unpack_value_array_2(ctx, v114);
                                                                let v149 = constructor_band(ctx, v2.0, v115.0, v115.1);
                                                                let v150 = constructor_band(ctx, v2.0, v148, v149);
                                                                let v151 = C::subsume(ctx, v150);
                                                                // Rule at src\opts\arithmetic.isle line 145.
                                                                returns.extend(Some(v151));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v686,
                                                        imm: v687,
                                                    } => {
                                                        if let &Opcode::Iconst = v686 {
                                                            let mut v18 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1 {
                                                                    if let &Opcode::Band = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v199 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                            let mut v199 = v199.into_context_iter();
                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v226,
                                                                                    imm: v227,
                                                                                } = &v200.1 {
                                                                                    if let &Opcode::Iconst = v226 {
                                                                                        let v694 = constructor_band(ctx, v2.0, v124.0, v106.0);
                                                                                        let v695 = constructor_band(ctx, v2.0, v124.1, v106.1);
                                                                                        let v696 = constructor_band(ctx, v2.0, v694, v695);
                                                                                        // Rule at src\opts\cprop.isle line 233.
                                                                                        returns.extend(Some(v696));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v1015,
                                    args: ref v1016,
                                    cond: ref v1017,
                                } => {
                                    if let &Opcode::Icmp = v1015 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v985,
                                                        args: ref v986,
                                                        cond: ref v987,
                                                    } = &v19.1 {
                                                        if let &Opcode::Icmp = v985 {
                                                            let v1021 = constructor_intcc_comparable(ctx, v987, v1017);
                                                            if let Some(v1022) = v1021 {
                                                                if v11.0 == v19.0 {
                                                                    let v988 = C::unpack_value_array_2(ctx, v986);
                                                                    let v1018 = C::unpack_value_array_2(ctx, v1016);
                                                                    if v988.0 == v1018.0 {
                                                                        if v988.1 == v1018.1 {
                                                                            let v1023 = constructor_decompose_intcc(ctx, v987);
                                                                            let v1024 = constructor_decompose_intcc(ctx, v1017);
                                                                            let v1025 = C::u64_and(ctx, v1023, v1024);
                                                                            let v1026 = constructor_compose_icmp(ctx, v527, v1025, v1022, v988.0, v988.1);
                                                                            // Rule at src\opts\icmp.isle line 146.
                                                                            returns.extend(Some(v1026));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1279 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1280) = v1279 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1 {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1149 = C::lane_type(ctx, v2.0);
                                                                    let v1281 = constructor_band(ctx, v1149, v30, v27);
                                                                    let v1282 = constructor_splat(ctx, v2.0, v1281);
                                                                    // Rule at src\opts\vector.isle line 15.
                                                                    returns.extend(Some(v1282));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                                        let v56 = C::subsume(ctx, v55);
                                                        // Rule at src\opts\bitops.isle line 35.
                                                        returns.extend(Some(v56));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v901 = C::value_type(ctx, v30);
                                                        let v936 = C::value_type(ctx, v27);
                                                        if v901 == v936 {
                                                            let v937 = constructor_band(ctx, v901, v30, v27);
                                                            let v938 = constructor_uextend(ctx, v2.0, v937);
                                                            // Rule at src\opts\extends.isle line 71.
                                                            returns.extend(Some(v938));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Band = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v637 = constructor_band(ctx, v2.0, v124.1, v7.1);
                                                                                let v638 = constructor_band(ctx, v2.0, v124.0, v637);
                                                                                // Rule at src\opts\cprop.isle line 163.
                                                                                returns.extend(Some(v638));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref v985,
                                                    args: ref v986,
                                                    cond: ref v987,
                                                } => {
                                                    if let &Opcode::Icmp = v985 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v52 = C::ty_int(ctx, v2.0);
                                                            if let Some(v53) = v52 {
                                                                // Rule at src\opts\icmp.isle line 57.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } => {
                                                    match v29 {
                                                        &Opcode::Uextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                let v52 = C::ty_int(ctx, v2.0);
                                                                if let Some(v53) = v52 {
                                                                    let mut v991 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v30, &mut v991);
                                                                    let mut v991 = v991.into_context_iter();
                                                                    while let Some(v992) = v991.next(ctx) {
                                                                        if let &InstructionData::IntCompare {
                                                                            opcode: ref v995,
                                                                            args: ref v996,
                                                                            cond: ref v997,
                                                                        } = &v992.1 {
                                                                            if let &Opcode::Icmp = v995 {
                                                                                // Rule at src\opts\icmp.isle line 62.
                                                                                returns.extend(Some(v7.0));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let v901 = C::value_type(ctx, v30);
                                                            let v902 = C::ty_mask(ctx, v901);
                                                            let v903 = C::u64_and(ctx, v16, v902);
                                                            let v904 = C::u64_eq(ctx, v902, v903);
                                                            if v904 == true {
                                                                // Rule at src\opts\extends.isle line 17.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v901 = C::value_type(ctx, v30);
                                                            let v902 = C::ty_mask(ctx, v901);
                                                            let v905 = C::u64_eq(ctx, v16, v902);
                                                            if v905 == true {
                                                                let v906 = constructor_uextend(ctx, v2.0, v30);
                                                                // Rule at src\opts\extends.isle line 23.
                                                                returns.extend(Some(v906));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v527 {
                                                                    let v24 = C::u64_from_imm64(ctx, v23);
                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                    let v554 = C::u64_and(ctx, v24, v16);
                                                                    let v555 = C::imm64_masked(ctx, v527, v554);
                                                                    let v556 = constructor_iconst(ctx, v527, v555);
                                                                    let v557 = C::subsume(ctx, v556);
                                                                    // Rule at src\opts\cprop.isle line 41.
                                                                    returns.extend(Some(v557));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v57 = C::subsume(ctx, v7.1);
                                                // Rule at src\opts\bitops.isle line 34.
                                                returns.extend(Some(v57));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 14.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Band = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1 {
                                                    if let &Opcode::Band = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                            let v152 = constructor_band(ctx, v2.0, v133.0, v133.1);
                                                            let v153 = constructor_band(ctx, v2.0, v124.1, v7.1);
                                                            let v154 = constructor_band(ctx, v2.0, v152, v153);
                                                            let v155 = C::subsume(ctx, v154);
                                                            // Rule at src\opts\arithmetic.isle line 147.
                                                            returns.extend(Some(v155));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                                    let v56 = C::subsume(ctx, v55);
                                                    // Rule at src\opts\bitops.isle line 36.
                                                    returns.extend(Some(v56));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v607 = constructor_band(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 110.
                                            returns.extend(Some(v607));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 12.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src\opts\bitops.isle line 29.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v17 = C::subsume(ctx, v7.0);
                                        // Rule at src\opts\bitops.isle line 30.
                                        returns.extend(Some(v17));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Band => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        if let &Opcode::Band = v122 {
                                                            let v1086 = C::ty_vec128(ctx, v2.0);
                                                            if let Some(v1087) = v1086 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v1087 {
                                                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v106.1, &mut v109);
                                                                        let mut v109 = v109.into_context_iter();
                                                                        while let Some(v110) = v109.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v1091,
                                                                                arg: v1092,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Bnot = v1091 {
                                                                                    if v11.0 == v110.0 {
                                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                        if v124.0 == v1092 {
                                                                                            let v1093 = constructor_bitselect(ctx, v1087, v124.0, v124.1, v106.0);
                                                                                            // Rule at src\opts\selects.isle line 71.
                                                                                            returns.extend(Some(v1093));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v1092 {
                                                                                            let v1095 = constructor_bitselect(ctx, v1087, v124.1, v124.0, v106.0);
                                                                                            // Rule at src\opts\selects.isle line 73.
                                                                                            returns.extend(Some(v1095));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                        let mut v127 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                        let mut v127 = v127.into_context_iter();
                                                                        while let Some(v128) = v127.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v196,
                                                                                arg: v197,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Bnot = v196 {
                                                                                    if v11.0 == v128.0 {
                                                                                        if v106.1 == v197 {
                                                                                            let v1097 = constructor_bitselect(ctx, v1087, v197, v106.0, v124.1);
                                                                                            // Rule at src\opts\selects.isle line 75.
                                                                                            returns.extend(Some(v1097));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v197 {
                                                                                            let v1096 = constructor_bitselect(ctx, v1087, v197, v106.1, v124.1);
                                                                                            // Rule at src\opts\selects.isle line 74.
                                                                                            returns.extend(Some(v1096));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v199 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                        let mut v199 = v199.into_context_iter();
                                                                        while let Some(v200) = v199.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v203,
                                                                                arg: v204,
                                                                            } = &v200.1 {
                                                                                if let &Opcode::Bnot = v203 {
                                                                                    if v11.0 == v200.0 {
                                                                                        if v106.1 == v204 {
                                                                                            let v1099 = constructor_bitselect(ctx, v1087, v204, v106.0, v124.0);
                                                                                            // Rule at src\opts\selects.isle line 77.
                                                                                            returns.extend(Some(v1099));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v204 {
                                                                                            let v1098 = constructor_bitselect(ctx, v1087, v204, v106.1, v124.0);
                                                                                            // Rule at src\opts\selects.isle line 76.
                                                                                            returns.extend(Some(v1098));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v309 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v106.0, &mut v309);
                                                                        let mut v309 = v309.into_context_iter();
                                                                        while let Some(v310) = v309.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v1088,
                                                                                arg: v1089,
                                                                            } = &v310.1 {
                                                                                if let &Opcode::Bnot = v1088 {
                                                                                    if v11.0 == v310.0 {
                                                                                        if v124.0 == v1089 {
                                                                                            let v1090 = constructor_bitselect(ctx, v1087, v124.0, v124.1, v106.1);
                                                                                            // Rule at src\opts\selects.isle line 70.
                                                                                            returns.extend(Some(v1090));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v1089 {
                                                                                            let v1094 = constructor_bitselect(ctx, v1087, v124.1, v124.0, v106.1);
                                                                                            // Rule at src\opts\selects.isle line 72.
                                                                                            returns.extend(Some(v1094));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v106 = C::unpack_value_array_2(ctx, v105);
                                                                    if v30 == v106.1 {
                                                                        let v225 = constructor_bor(ctx, v2.0, v106.0, v7.0);
                                                                        // Rule at src\opts\bitops.isle line 59.
                                                                        returns.extend(Some(v225));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    if let &Opcode::Bor = v122 {
                                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                        C::inst_data_etor(ctx, v106.1, &mut v109);
                                                        let mut v109 = v109.into_context_iter();
                                                        while let Some(v110) = v109.next(ctx) {
                                                            match &v110.1 {
                                                                &InstructionData::Binary {
                                                                    opcode: ref v113,
                                                                    args: ref v114,
                                                                } => {
                                                                    match v113 {
                                                                        &Opcode::Bor => {
                                                                            if v2.0 == I64 {
                                                                                if v11.0 == I64 {
                                                                                    if v19.0 == I64 {
                                                                                        if v110.0 == I64 {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_etor_returns::default();
                                                                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I64 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Bor = v131 {
                                                                                                            let mut v199 = C::inst_data_etor_returns::default();
                                                                                                            C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                                            let mut v199 = v199.into_context_iter();
                                                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                                                if v200.0 == I64 {
                                                                                                                    if let &InstructionData::Binary {
                                                                                                                        opcode: ref v281,
                                                                                                                        args: ref v282,
                                                                                                                    } = &v200.1 {
                                                                                                                        if let &Opcode::Bor = v281 {
                                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                                            let mut v274 = C::inst_data_etor_returns::default();
                                                                                                                            C::inst_data_etor(ctx, v133.1, &mut v274);
                                                                                                                            let mut v274 = v274.into_context_iter();
                                                                                                                            while let Some(v275) = v274.next(ctx) {
                                                                                                                                if v275.0 == I64 {
                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                        opcode: ref v365,
                                                                                                                                        args: ref v366,
                                                                                                                                    } = &v275.1 {
                                                                                                                                        if let &Opcode::Ishl = v365 {
                                                                                                                                            let v283 = C::unpack_value_array_2(ctx, v282);
                                                                                                                                            let mut v286 = C::inst_data_etor_returns::default();
                                                                                                                                            C::inst_data_etor(ctx, v283.0, &mut v286);
                                                                                                                                            let mut v286 = v286.into_context_iter();
                                                                                                                                            while let Some(v287) = v286.next(ctx) {
                                                                                                                                                if v287.0 == I64 {
                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                        opcode: ref v290,
                                                                                                                                                        args: ref v291,
                                                                                                                                                    } = &v287.1 {
                                                                                                                                                        if let &Opcode::Ishl = v290 {
                                                                                                                                                            let v292 = C::unpack_value_array_2(ctx, v291);
                                                                                                                                                            let mut v295 = C::inst_data_etor_returns::default();
                                                                                                                                                            C::inst_data_etor(ctx, v292.1, &mut v295);
                                                                                                                                                            let mut v295 = v295.into_context_iter();
                                                                                                                                                            while let Some(v296) = v295.next(ctx) {
                                                                                                                                                                if v296.0 == I64 {
                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                        opcode: ref v299,
                                                                                                                                                                        imm: v300,
                                                                                                                                                                    } = &v296.1 {
                                                                                                                                                                        if let &Opcode::Iconst = v299 {
                                                                                                                                                                            let v301 = C::u64_from_imm64(ctx, v300);
                                                                                                                                                                            if v301 == 0x18 {
                                                                                                                                                                                let mut v302 = C::inst_data_etor_returns::default();
                                                                                                                                                                                C::inst_data_etor(ctx, v283.1, &mut v302);
                                                                                                                                                                                let mut v302 = v302.into_context_iter();
                                                                                                                                                                                while let Some(v303) = v302.next(ctx) {
                                                                                                                                                                                    if v303.0 == I64 {
                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                            opcode: ref v409,
                                                                                                                                                                                            args: ref v410,
                                                                                                                                                                                        } = &v303.1 {
                                                                                                                                                                                            if let &Opcode::Ishl = v409 {
                                                                                                                                                                                                let mut v309 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                C::inst_data_etor(ctx, v106.0, &mut v309);
                                                                                                                                                                                                let mut v309 = v309.into_context_iter();
                                                                                                                                                                                                while let Some(v310) = v309.next(ctx) {
                                                                                                                                                                                                    if v310.0 == I64 {
                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                            opcode: ref v313,
                                                                                                                                                                                                            args: ref v314,
                                                                                                                                                                                                        } = &v310.1 {
                                                                                                                                                                                                            if let &Opcode::Bor = v313 {
                                                                                                                                                                                                                let v315 = C::unpack_value_array_2(ctx, v314);
                                                                                                                                                                                                                let mut v318 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_etor(ctx, v315.0, &mut v318);
                                                                                                                                                                                                                let mut v318 = v318.into_context_iter();
                                                                                                                                                                                                                while let Some(v319) = v318.next(ctx) {
                                                                                                                                                                                                                    if v319.0 == I64 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v322,
                                                                                                                                                                                                                            args: ref v323,
                                                                                                                                                                                                                        } = &v319.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v322 {
                                                                                                                                                                                                                                let v324 = C::unpack_value_array_2(ctx, v323);
                                                                                                                                                                                                                                let mut v327 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_etor(ctx, v324.1, &mut v327);
                                                                                                                                                                                                                                let mut v327 = v327.into_context_iter();
                                                                                                                                                                                                                                while let Some(v328) = v327.next(ctx) {
                                                                                                                                                                                                                                    if v328.0 == I64 {
                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                            opcode: ref v331,
                                                                                                                                                                                                                                            imm: v332,
                                                                                                                                                                                                                                        } = &v328.1 {
                                                                                                                                                                                                                                            if let &Opcode::Iconst = v331 {
                                                                                                                                                                                                                                                let v333 = C::u64_from_imm64(ctx, v332);
                                                                                                                                                                                                                                                if v333 == 0xFF000000 {
                                                                                                                                                                                                                                                    let mut v334 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v315.1, &mut v334);
                                                                                                                                                                                                                                                    let mut v334 = v334.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v335) = v334.next(ctx) {
                                                                                                                                                                                                                                                        if v335.0 == I64 {
                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                opcode: ref v453,
                                                                                                                                                                                                                                                                args: ref v454,
                                                                                                                                                                                                                                                            } = &v335.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Band = v453 {
                                                                                                                                                                                                                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                                                                                                                                                                                    let mut v341 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v115.1, &mut v341);
                                                                                                                                                                                                                                                                    let mut v341 = v341.into_context_iter();
                                                                                                                                                                                                                                                                    while let Some(v342) = v341.next(ctx) {
                                                                                                                                                                                                                                                                        if v342.0 == I64 {
                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                opcode: ref v513,
                                                                                                                                                                                                                                                                                args: ref v514,
                                                                                                                                                                                                                                                                            } = &v342.1 {
                                                                                                                                                                                                                                                                                if let &Opcode::Ushr = v513 {
                                                                                                                                                                                                                                                                                    let mut v349 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v133.0, &mut v349);
                                                                                                                                                                                                                                                                                    let mut v349 = v349.into_context_iter();
                                                                                                                                                                                                                                                                                    while let Some(v350) = v349.next(ctx) {
                                                                                                                                                                                                                                                                                        if v350.0 == I64 {
                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                opcode: ref v353,
                                                                                                                                                                                                                                                                                                args: ref v354,
                                                                                                                                                                                                                                                                                            } = &v350.1 {
                                                                                                                                                                                                                                                                                                if let &Opcode::Ishl = v353 {
                                                                                                                                                                                                                                                                                                    let v355 = C::unpack_value_array_2(ctx, v354);
                                                                                                                                                                                                                                                                                                    let v515 = C::unpack_value_array_2(ctx, v514);
                                                                                                                                                                                                                                                                                                    if v355.0 == v515.0 {
                                                                                                                                                                                                                                                                                                        let mut v358 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v355.1, &mut v358);
                                                                                                                                                                                                                                                                                                        let mut v358 = v358.into_context_iter();
                                                                                                                                                                                                                                                                                                        while let Some(v359) = v358.next(ctx) {
                                                                                                                                                                                                                                                                                                            if v359.0 == I64 {
                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                    opcode: ref v362,
                                                                                                                                                                                                                                                                                                                    imm: v363,
                                                                                                                                                                                                                                                                                                                } = &v359.1 {
                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v362 {
                                                                                                                                                                                                                                                                                                                        let v364 = C::u64_from_imm64(ctx, v363);
                                                                                                                                                                                                                                                                                                                        if v364 == 0x38 {
                                                                                                                                                                                                                                                                                                                            let v367 = C::unpack_value_array_2(ctx, v366);
                                                                                                                                                                                                                                                                                                                            let mut v370 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v367.0, &mut v370);
                                                                                                                                                                                                                                                                                                                            let mut v370 = v370.into_context_iter();
                                                                                                                                                                                                                                                                                                                            while let Some(v371) = v370.next(ctx) {
                                                                                                                                                                                                                                                                                                                                if v371.0 == I64 {
                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                        opcode: ref v374,
                                                                                                                                                                                                                                                                                                                                        args: ref v375,
                                                                                                                                                                                                                                                                                                                                    } = &v371.1 {
                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Band = v374 {
                                                                                                                                                                                                                                                                                                                                            let v376 = C::unpack_value_array_2(ctx, v375);
                                                                                                                                                                                                                                                                                                                                            if v355.0 == v376.0 {
                                                                                                                                                                                                                                                                                                                                                let mut v379 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v376.1, &mut v379);
                                                                                                                                                                                                                                                                                                                                                let mut v379 = v379.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                while let Some(v380) = v379.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                    if v380.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                            opcode: ref v383,
                                                                                                                                                                                                                                                                                                                                                            imm: v384,
                                                                                                                                                                                                                                                                                                                                                        } = &v380.1 {
                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v383 {
                                                                                                                                                                                                                                                                                                                                                                let v385 = C::u64_from_imm64(ctx, v384);
                                                                                                                                                                                                                                                                                                                                                                if v385 == 0xFF00 {
                                                                                                                                                                                                                                                                                                                                                                    let mut v386 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v367.1, &mut v386);
                                                                                                                                                                                                                                                                                                                                                                    let mut v386 = v386.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                    while let Some(v387) = v386.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                        if v387.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v390,
                                                                                                                                                                                                                                                                                                                                                                                imm: v391,
                                                                                                                                                                                                                                                                                                                                                                            } = &v387.1 {
                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v390 {
                                                                                                                                                                                                                                                                                                                                                                                    let v392 = C::u64_from_imm64(ctx, v391);
                                                                                                                                                                                                                                                                                                                                                                                    if v392 == 0x28 {
                                                                                                                                                                                                                                                                                                                                                                                        let mut v393 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v292.0, &mut v393);
                                                                                                                                                                                                                                                                                                                                                                                        let mut v393 = v393.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v394) = v393.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                            if v394.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v397,
                                                                                                                                                                                                                                                                                                                                                                                                    args: ref v398,
                                                                                                                                                                                                                                                                                                                                                                                                } = &v394.1 {
                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Band = v397 {
                                                                                                                                                                                                                                                                                                                                                                                                        let v399 = C::unpack_value_array_2(ctx, v398);
                                                                                                                                                                                                                                                                                                                                                                                                        if v355.0 == v399.0 {
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v402 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v399.1, &mut v402);
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v402 = v402.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v403) = v402.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                if v403.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v406,
                                                                                                                                                                                                                                                                                                                                                                                                                        imm: v407,
                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v403.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v406 {
                                                                                                                                                                                                                                                                                                                                                                                                                            let v408 = C::u64_from_imm64(ctx, v407);
                                                                                                                                                                                                                                                                                                                                                                                                                            if v408 == 0xFF0000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                let v411 = C::unpack_value_array_2(ctx, v410);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v414 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v411.0, &mut v414);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v414 = v414.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v415) = v414.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if v415.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v418,
                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v419,
                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v415.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Band = v418 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let v420 = C::unpack_value_array_2(ctx, v419);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if v355.0 == v420.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v423 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v420.1, &mut v423);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v423 = v423.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v424) = v423.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v424.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v427,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                imm: v428,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v424.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v427 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v429 = C::u64_from_imm64(ctx, v428);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v429 == 0xFF000000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v430 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v411.1, &mut v430);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v430 = v430.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v431) = v430.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v431.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v434,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v435,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v431.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v434 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v436 = C::u64_from_imm64(ctx, v435);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v436 == 0x8 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v437 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v324.0, &mut v437);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v437 = v437.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v438) = v437.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v438.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v441,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        args: ref v442,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v438.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Ushr = v441 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v443 = C::unpack_value_array_2(ctx, v442);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v355.0 == v443.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v446 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v443.1, &mut v446);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v446 = v446.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v447) = v446.next(ctx) {
if v447.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v450,
imm: v451,
} = &v447.1 {
if let &Opcode::Iconst = v450 {
let v452 = C::u64_from_imm64(ctx, v451);
if v452 == 0x8 {
let v455 = C::unpack_value_array_2(ctx, v454);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v458 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v455.0, &mut v458);
let mut v458 = v458.into_context_iter();
while let Some(v459) = v458.next(ctx) {
if v459.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
opcode: ref v462,
args: ref v463,
} = &v459.1 {
if let &Opcode::Ushr = v462 {
let v464 = C::unpack_value_array_2(ctx, v463);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v355.0 == v464.0 {
let mut v467 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v464.1, &mut v467);
let mut v467 = v467.into_context_iter();
while let Some(v468) = v467.next(ctx) {
if v468.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v471,
imm: v472,
} = &v468.1 {
if let &Opcode::Iconst = v471 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v473 = C::u64_from_imm64(ctx, v472);
if v473 == 0x18 {
let mut v474 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v455.1, &mut v474);
let mut v474 = v474.into_context_iter();
while let Some(v475) = v474.next(ctx) {
if v475.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v478,
imm: v479,
} = &v475.1 {
if let &Opcode::Iconst = v478 {
let v480 = C::u64_from_imm64(ctx, v479);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v480 == 0xFF0000 {
let mut v481 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v115.0, &mut v481);
let mut v481 = v481.into_context_iter();
while let Some(v482) = v481.next(ctx) {
if v482.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v485,
args: ref v486,
} = &v482.1 {
if let &Opcode::Band = v485 {
let v487 = C::unpack_value_array_2(ctx, v486);
let mut v490 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v487.0, &mut v490);
let mut v490 = v490.into_context_iter();
while let Some(v491) = v490.next(ctx) {
if v491.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
opcode: ref v494,
args: ref v495,
} = &v491.1 {
if let &Opcode::Ushr = v494 {
let v496 = C::unpack_value_array_2(ctx, v495);
if v355.0 == v496.0 {
let mut v499 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v496.1, &mut v499);
let mut v499 = v499.into_context_iter();
while let Some(v500) = v499.next(ctx) {
if v500.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v503,
imm: v504,
} = &v500.1 {
if let &Opcode::Iconst = v503 {
let v505 = C::u64_from_imm64(ctx, v504);
if v505 == 0x28 {
let mut v506 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v487.1, &mut v506);
let mut v506 = v506.into_context_iter();
while let Some(v507) = v506.next(ctx) {
if v507.0 == I64 {
if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v510,
imm: v511,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v507.1 {
if let &Opcode::Iconst = v510 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v512 = C::u64_from_imm64(ctx, v511);
if v512 == 0xFF00 {
let mut v518 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v515.1, &mut v518);
let mut v518 = v518.into_context_iter();
while let Some(v519) = v518.next(ctx) {
if v519.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
opcode: ref v522,
imm: v523,
} = &v519.1 {
if let &Opcode::Iconst = v522 {
let v524 = C::u64_from_imm64(ctx, v523);
if v524 == 0x38 {
let v525 = constructor_bswap(ctx, v2.0, v355.0);
ule at src\opts\bitops.isle line 161.
returns.extend(Some(v525));
if returns.len() >= MAX_ISLE_RETURNS { return; }
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        &Opcode::Ushr => {
                                                                            if v2.0 == I32 {
                                                                                if v11.0 == I32 {
                                                                                    if v19.0 == I32 {
                                                                                        if v110.0 == I32 {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_etor_returns::default();
                                                                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I32 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Ishl = v131 {
                                                                                                            let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                            if v115.0 == v133.0 {
                                                                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                                                let mut v199 = v199.into_context_iter();
                                                                                                                while let Some(v200) = v199.next(ctx) {
                                                                                                                    if v200.0 == I32 {
                                                                                                                        if let &InstructionData::Binary {
                                                                                                                            opcode: ref v281,
                                                                                                                            args: ref v282,
                                                                                                                        } = &v200.1 {
                                                                                                                            if let &Opcode::Ishl = v281 {
                                                                                                                                let mut v274 = C::inst_data_etor_returns::default();
                                                                                                                                C::inst_data_etor(ctx, v133.1, &mut v274);
                                                                                                                                let mut v274 = v274.into_context_iter();
                                                                                                                                while let Some(v275) = v274.next(ctx) {
                                                                                                                                    if v275.0 == I32 {
                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                            opcode: ref v278,
                                                                                                                                            imm: v279,
                                                                                                                                        } = &v275.1 {
                                                                                                                                            if let &Opcode::Iconst = v278 {
                                                                                                                                                let v280 = C::u64_from_imm64(ctx, v279);
                                                                                                                                                if v280 == 0x18 {
                                                                                                                                                    let v283 = C::unpack_value_array_2(ctx, v282);
                                                                                                                                                    let mut v286 = C::inst_data_etor_returns::default();
                                                                                                                                                    C::inst_data_etor(ctx, v283.0, &mut v286);
                                                                                                                                                    let mut v286 = v286.into_context_iter();
                                                                                                                                                    while let Some(v287) = v286.next(ctx) {
                                                                                                                                                        if v287.0 == I32 {
                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                opcode: ref v290,
                                                                                                                                                                args: ref v291,
                                                                                                                                                            } = &v287.1 {
                                                                                                                                                                if let &Opcode::Band = v290 {
                                                                                                                                                                    let v292 = C::unpack_value_array_2(ctx, v291);
                                                                                                                                                                    if v115.0 == v292.0 {
                                                                                                                                                                        let mut v295 = C::inst_data_etor_returns::default();
                                                                                                                                                                        C::inst_data_etor(ctx, v292.1, &mut v295);
                                                                                                                                                                        let mut v295 = v295.into_context_iter();
                                                                                                                                                                        while let Some(v296) = v295.next(ctx) {
                                                                                                                                                                            if v296.0 == I32 {
                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                    opcode: ref v299,
                                                                                                                                                                                    imm: v300,
                                                                                                                                                                                } = &v296.1 {
                                                                                                                                                                                    if let &Opcode::Iconst = v299 {
                                                                                                                                                                                        let v301 = C::u64_from_imm64(ctx, v300);
                                                                                                                                                                                        if v301 == 0xFF00 {
                                                                                                                                                                                            let mut v302 = C::inst_data_etor_returns::default();
                                                                                                                                                                                            C::inst_data_etor(ctx, v283.1, &mut v302);
                                                                                                                                                                                            let mut v302 = v302.into_context_iter();
                                                                                                                                                                                            while let Some(v303) = v302.next(ctx) {
                                                                                                                                                                                                if v303.0 == I32 {
                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                        opcode: ref v306,
                                                                                                                                                                                                        imm: v307,
                                                                                                                                                                                                    } = &v303.1 {
                                                                                                                                                                                                        if let &Opcode::Iconst = v306 {
                                                                                                                                                                                                            let v308 = C::u64_from_imm64(ctx, v307);
                                                                                                                                                                                                            if v308 == 0x8 {
                                                                                                                                                                                                                let mut v309 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_etor(ctx, v106.0, &mut v309);
                                                                                                                                                                                                                let mut v309 = v309.into_context_iter();
                                                                                                                                                                                                                while let Some(v310) = v309.next(ctx) {
                                                                                                                                                                                                                    if v310.0 == I32 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v313,
                                                                                                                                                                                                                            args: ref v314,
                                                                                                                                                                                                                        } = &v310.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v313 {
                                                                                                                                                                                                                                let v315 = C::unpack_value_array_2(ctx, v314);
                                                                                                                                                                                                                                let mut v318 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_etor(ctx, v315.0, &mut v318);
                                                                                                                                                                                                                                let mut v318 = v318.into_context_iter();
                                                                                                                                                                                                                                while let Some(v319) = v318.next(ctx) {
                                                                                                                                                                                                                                    if v319.0 == I32 {
                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                            opcode: ref v322,
                                                                                                                                                                                                                                            args: ref v323,
                                                                                                                                                                                                                                        } = &v319.1 {
                                                                                                                                                                                                                                            if let &Opcode::Ushr = v322 {
                                                                                                                                                                                                                                                let v324 = C::unpack_value_array_2(ctx, v323);
                                                                                                                                                                                                                                                if v115.0 == v324.0 {
                                                                                                                                                                                                                                                    let mut v327 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v324.1, &mut v327);
                                                                                                                                                                                                                                                    let mut v327 = v327.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v328) = v327.next(ctx) {
                                                                                                                                                                                                                                                        if v328.0 == I32 {
                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                opcode: ref v331,
                                                                                                                                                                                                                                                                imm: v332,
                                                                                                                                                                                                                                                            } = &v328.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v331 {
                                                                                                                                                                                                                                                                    let v333 = C::u64_from_imm64(ctx, v332);
                                                                                                                                                                                                                                                                    if v333 == 0x8 {
                                                                                                                                                                                                                                                                        let mut v334 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v315.1, &mut v334);
                                                                                                                                                                                                                                                                        let mut v334 = v334.into_context_iter();
                                                                                                                                                                                                                                                                        while let Some(v335) = v334.next(ctx) {
                                                                                                                                                                                                                                                                            if v335.0 == I32 {
                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                    opcode: ref v338,
                                                                                                                                                                                                                                                                                    imm: v339,
                                                                                                                                                                                                                                                                                } = &v335.1 {
                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v338 {
                                                                                                                                                                                                                                                                                        let v340 = C::u64_from_imm64(ctx, v339);
                                                                                                                                                                                                                                                                                        if v340 == 0xFF00 {
                                                                                                                                                                                                                                                                                            let mut v341 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v115.1, &mut v341);
                                                                                                                                                                                                                                                                                            let mut v341 = v341.into_context_iter();
                                                                                                                                                                                                                                                                                            while let Some(v342) = v341.next(ctx) {
                                                                                                                                                                                                                                                                                                if v342.0 == I32 {
                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                        opcode: ref v345,
                                                                                                                                                                                                                                                                                                        imm: v346,
                                                                                                                                                                                                                                                                                                    } = &v342.1 {
                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v345 {
                                                                                                                                                                                                                                                                                                            let v347 = C::u64_from_imm64(ctx, v346);
                                                                                                                                                                                                                                                                                                            if v347 == 0x18 {
                                                                                                                                                                                                                                                                                                                let v348 = constructor_bswap(ctx, v2.0, v133.0);
                                                                                                                                                                                                                                                                                                                // Rule at src\opts\bitops.isle line 148.
                                                                                                                                                                                                                                                                                                                returns.extend(Some(v348));
                                                                                                                                                                                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                                &InstructionData::UnaryImm {
                                                                    opcode: ref v686,
                                                                    imm: v687,
                                                                } => {
                                                                    if let &Opcode::Iconst = v686 {
                                                                        if v2.0 == v11.0 {
                                                                            if v2.0 == v19.0 {
                                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                let mut v199 = v199.into_context_iter();
                                                                                while let Some(v200) = v199.next(ctx) {
                                                                                    if let &InstructionData::UnaryImm {
                                                                                        opcode: ref v226,
                                                                                        imm: v227,
                                                                                    } = &v200.1 {
                                                                                        if let &Opcode::Iconst = v226 {
                                                                                            let v697 = constructor_bor(ctx, v2.0, v124.0, v106.0);
                                                                                            let v698 = constructor_bor(ctx, v2.0, v124.1, v106.1);
                                                                                            let v699 = constructor_bor(ctx, v2.0, v697, v698);
                                                                                            // Rule at src\opts\cprop.isle line 237.
                                                                                            returns.extend(Some(v699));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ishl => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1 {
                                                            if let &Opcode::Ushr = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 = C::unpack_value_array_2(ctx, v105);
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v106.1, &mut v109);
                                                                        let mut v109 = v109.into_context_iter();
                                                                        while let Some(v110) = v109.next(ctx) {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v686,
                                                                                imm: v687,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v686 {
                                                                                    let mut v199 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                    let mut v199 = v199.into_context_iter();
                                                                                    while let Some(v200) = v199.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v226,
                                                                                            imm: v227,
                                                                                        } = &v200.1 {
                                                                                            if let &Opcode::Iconst = v226 {
                                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                                let v1167 = C::lane_type(ctx, v53);
                                                                                                let v1168 = C::ty_bits_u64(ctx, v1167);
                                                                                                let v1166 = C::u64_from_imm64(ctx, v687);
                                                                                                let v1172 = C::u64_sub(ctx, v1168, v1166);
                                                                                                let v1173 = C::u64_eq(ctx, v228, v1172);
                                                                                                if v1173 == true {
                                                                                                    let v1174 = constructor_rotl(ctx, v53, v124.0, v106.1);
                                                                                                    // Rule at src\opts\shifts.isle line 281.
                                                                                                    returns.extend(Some(v1174));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1 {
                                                            if let &Opcode::Ishl = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 = C::unpack_value_array_2(ctx, v105);
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v106.1, &mut v109);
                                                                        let mut v109 = v109.into_context_iter();
                                                                        while let Some(v110) = v109.next(ctx) {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v686,
                                                                                imm: v687,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v686 {
                                                                                    let mut v199 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                    let mut v199 = v199.into_context_iter();
                                                                                    while let Some(v200) = v199.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v226,
                                                                                            imm: v227,
                                                                                        } = &v200.1 {
                                                                                            if let &Opcode::Iconst = v226 {
                                                                                                let v1166 = C::u64_from_imm64(ctx, v687);
                                                                                                let v1167 = C::lane_type(ctx, v53);
                                                                                                let v1168 = C::ty_bits_u64(ctx, v1167);
                                                                                                let v228 = C::u64_from_imm64(ctx, v227);
                                                                                                let v1169 = C::u64_sub(ctx, v1168, v228);
                                                                                                let v1170 = C::u64_eq(ctx, v1166, v1169);
                                                                                                if v1170 == true {
                                                                                                    let v1171 = constructor_rotl(ctx, v53, v124.0, v124.1);
                                                                                                    // Rule at src\opts\shifts.isle line 276.
                                                                                                    returns.extend(Some(v1171));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v1015,
                                    args: ref v1016,
                                    cond: ref v1017,
                                } => {
                                    if let &Opcode::Icmp = v1015 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v985,
                                                        args: ref v986,
                                                        cond: ref v987,
                                                    } = &v19.1 {
                                                        if let &Opcode::Icmp = v985 {
                                                            let v1021 = constructor_intcc_comparable(ctx, v987, v1017);
                                                            if let Some(v1022) = v1021 {
                                                                if v11.0 == v19.0 {
                                                                    let v988 = C::unpack_value_array_2(ctx, v986);
                                                                    let v1018 = C::unpack_value_array_2(ctx, v1016);
                                                                    if v988.0 == v1018.0 {
                                                                        if v988.1 == v1018.1 {
                                                                            let v1023 = constructor_decompose_intcc(ctx, v987);
                                                                            let v1024 = constructor_decompose_intcc(ctx, v1017);
                                                                            let v1027 = C::u64_or(ctx, v1023, v1024);
                                                                            let v1028 = constructor_compose_icmp(ctx, v527, v1027, v1022, v988.0, v988.1);
                                                                            // Rule at src\opts\icmp.isle line 150.
                                                                            returns.extend(Some(v1028));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1279 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1280) = v1279 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1 {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1149 = C::lane_type(ctx, v2.0);
                                                                    let v1283 = constructor_bor(ctx, v1149, v30, v27);
                                                                    let v1284 = constructor_splat(ctx, v2.0, v1283);
                                                                    // Rule at src\opts\vector.isle line 19.
                                                                    returns.extend(Some(v1284));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v218 = constructor_iconst_s(ctx, v53, -0x1);
                                                        let v219 = C::subsume(ctx, v218);
                                                        // Rule at src\opts\bitops.isle line 25.
                                                        returns.extend(Some(v219));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } = &v19.1 {
                                                        if let &Opcode::Band = v122 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                if v27 == v124.1 {
                                                                    let v224 = constructor_bor(ctx, v2.0, v124.0, v7.1);
                                                                    // Rule at src\opts\bitops.isle line 50.
                                                                    returns.extend(Some(v224));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v901 = C::value_type(ctx, v30);
                                                        let v936 = C::value_type(ctx, v27);
                                                        if v901 == v936 {
                                                            let v939 = constructor_bor(ctx, v901, v30, v27);
                                                            let v940 = constructor_uextend(ctx, v2.0, v939);
                                                            // Rule at src\opts\extends.isle line 73.
                                                            returns.extend(Some(v940));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    match v122 {
                                                        &Opcode::Band => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v229 = C::ty_mask(ctx, v2.0);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v230 = C::u64_and(ctx, v229, v16);
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v231 = C::u64_not(ctx, v228);
                                                                            let v232 = C::u64_and(ctx, v229, v231);
                                                                            let v233 = C::u64_eq(ctx, v230, v232);
                                                                            if v233 == true {
                                                                                if v2.0 == v200.0 {
                                                                                    let v224 = constructor_bor(ctx, v2.0, v124.0, v7.1);
                                                                                    // Rule at src\opts\bitops.isle line 70.
                                                                                    returns.extend(Some(v224));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            if v2.0 == v200.0 {
                                                                                let v635 = constructor_bor(ctx, v2.0, v124.1, v7.1);
                                                                                let v636 = constructor_bor(ctx, v2.0, v124.0, v635);
                                                                                // Rule at src\opts\cprop.isle line 160.
                                                                                returns.extend(Some(v636));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\bitops.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v550 = C::u64_or(ctx, v24, v16);
                                                                let v551 = C::imm64_masked(ctx, v527, v550);
                                                                let v552 = constructor_iconst(ctx, v527, v551);
                                                                let v553 = C::subsume(ctx, v552);
                                                                // Rule at src\opts\cprop.isle line 35.
                                                                returns.extend(Some(v553));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 18.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v218 = constructor_iconst_s(ctx, v53, -0x1);
                                                    let v219 = C::subsume(ctx, v218);
                                                    // Rule at src\opts\bitops.isle line 26.
                                                    returns.extend(Some(v219));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v606 = constructor_bor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 107.
                                            returns.extend(Some(v606));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 16.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src\opts\bitops.isle line 8.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Bxor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Bxor = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Bxor = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v156 = constructor_bxor(ctx, v2.0, v7.0, v106.0);
                                                                let v115 = C::unpack_value_array_2(ctx, v114);
                                                                let v157 = constructor_bxor(ctx, v2.0, v115.0, v115.1);
                                                                let v158 = constructor_bxor(ctx, v2.0, v156, v157);
                                                                let v159 = C::subsume(ctx, v158);
                                                                // Rule at src\opts\arithmetic.isle line 150.
                                                                returns.extend(Some(v159));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v686,
                                                        imm: v687,
                                                    } => {
                                                        if let &Opcode::Iconst = v686 {
                                                            let mut v18 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1 {
                                                                    if let &Opcode::Bxor = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v199 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                            let mut v199 = v199.into_context_iter();
                                                                            while let Some(v200) = v199.next(ctx) {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v226,
                                                                                    imm: v227,
                                                                                } = &v200.1 {
                                                                                    if let &Opcode::Iconst = v226 {
                                                                                        let v700 = constructor_bxor(ctx, v2.0, v124.0, v106.0);
                                                                                        let v701 = constructor_bxor(ctx, v2.0, v124.1, v106.1);
                                                                                        let v702 = constructor_bxor(ctx, v2.0, v700, v701);
                                                                                        // Rule at src\opts\cprop.isle line 241.
                                                                                        returns.extend(Some(v702));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1279 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1280) = v1279 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1 {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1149 = C::lane_type(ctx, v2.0);
                                                                    let v1285 = constructor_bxor(ctx, v1149, v30, v27);
                                                                    let v1286 = constructor_splat(ctx, v2.0, v1285);
                                                                    // Rule at src\opts\vector.isle line 23.
                                                                    returns.extend(Some(v1286));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v218 = constructor_iconst_s(ctx, v53, -0x1);
                                                        let v219 = C::subsume(ctx, v218);
                                                        // Rule at src\opts\bitops.isle line 23.
                                                        returns.extend(Some(v219));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v901 = C::value_type(ctx, v30);
                                                        let v936 = C::value_type(ctx, v27);
                                                        if v901 == v936 {
                                                            let v941 = constructor_bxor(ctx, v901, v30, v27);
                                                            let v942 = constructor_uextend(ctx, v2.0, v941);
                                                            // Rule at src\opts\extends.isle line 75.
                                                            returns.extend(Some(v942));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\bitops.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1 {
                                                    if let &Opcode::Bxor = v122 {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let mut v199 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v124.1, &mut v199);
                                                            let mut v199 = v199.into_context_iter();
                                                            while let Some(v200) = v199.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v226,
                                                                    imm: v227,
                                                                } = &v200.1 {
                                                                    if let &Opcode::Iconst = v226 {
                                                                        if v2.0 == v200.0 {
                                                                            let v639 = constructor_bxor(ctx, v2.0, v124.1, v7.1);
                                                                            let v640 = constructor_bxor(ctx, v2.0, v124.0, v639);
                                                                            // Rule at src\opts\cprop.isle line 166.
                                                                            returns.extend(Some(v640));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v11.0 == v527 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1 {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 = C::u64_from_imm64(ctx, v23);
                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                let v558 = C::u64_xor(ctx, v24, v16);
                                                                let v559 = C::imm64_masked(ctx, v527, v558);
                                                                let v560 = constructor_iconst(ctx, v527, v559);
                                                                let v561 = C::subsume(ctx, v560);
                                                                // Rule at src\opts\cprop.isle line 47.
                                                                returns.extend(Some(v561));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 22.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Bxor = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1 {
                                                    if let &Opcode::Bxor = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                            let v160 = constructor_bxor(ctx, v2.0, v133.0, v133.1);
                                                            let v161 = constructor_bxor(ctx, v2.0, v124.1, v7.1);
                                                            let v162 = constructor_bxor(ctx, v2.0, v160, v161);
                                                            let v163 = C::subsume(ctx, v162);
                                                            // Rule at src\opts\arithmetic.isle line 152.
                                                            returns.extend(Some(v163));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v218 = constructor_iconst_s(ctx, v53, -0x1);
                                                    let v219 = C::subsume(ctx, v218);
                                                    // Rule at src\opts\bitops.isle line 24.
                                                    returns.extend(Some(v219));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v608 = constructor_bxor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src\opts\cprop.isle line 113.
                                            returns.extend(Some(v608));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v1037 = C::remat(ctx, arg0);
                                        // Rule at src\opts\remat.isle line 20.
                                        returns.extend(Some(v1037));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src\opts\bitops.isle line 18.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v234 = constructor_bnot(ctx, v2.0, v7.0);
                                        // Rule at src\opts\bitops.isle line 78.
                                        returns.extend(Some(v234));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Rotl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1145 = constructor_rotl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 143.
                                        returns.extend(Some(v1145));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v936 = C::value_type(ctx, v27);
                                            let v1134 = C::fits_in_64(ctx, v936);
                                            if let Some(v1135) = v1134 {
                                                let v1140 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 127.
                                                returns.extend(Some(v1140));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1140 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 128.
                                            returns.extend(Some(v1140));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1140 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 129.
                                            returns.extend(Some(v1140));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1 {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1158 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1159 = constructor_rotl(ctx, v2.0, v124.0, v1158);
                                                            // Rule at src\opts\shifts.isle line 240.
                                                            returns.extend(Some(v1159));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1161 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1163 = constructor_rotr(ctx, v2.0, v124.0, v1161);
                                                            // Rule at src\opts\shifts.isle line 247.
                                                            returns.extend(Some(v1163));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 20.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1147 = C::u64_and(ctx, v16, v235);
                                        let v1175 = C::u64_eq(ctx, v16, v1147);
                                        if v1175 == false {
                                            let v1176 = constructor_iconst_u(ctx, v11.0, v1147);
                                            let v1181 = constructor_rotl(ctx, v2.0, v7.0, v1176);
                                            // Rule at src\opts\shifts.isle line 305.
                                            returns.extend(Some(v1181));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1164 = C::value_type(ctx, v124.1);
                                                let v1165 = C::value_type(ctx, v7.1);
                                                if v1164 == v1165 {
                                                    let v1158 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1159 = constructor_rotl(ctx, v2.0, v124.0, v1158);
                                                    // Rule at src\opts\shifts.isle line 261.
                                                    returns.extend(Some(v1159));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1158 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1159 = constructor_rotl(ctx, v2.0, v124.0, v1158);
                                                            // Rule at src\opts\shifts.isle line 239.
                                                            returns.extend(Some(v1159));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1157 = C::subsume(ctx, v124.0);
                                                    // Rule at src\opts\shifts.isle line 204.
                                                    returns.extend(Some(v1157));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1164 = C::value_type(ctx, v124.1);
                                                let v1165 = C::value_type(ctx, v7.1);
                                                if v1164 == v1165 {
                                                    let v1161 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1163 = constructor_rotr(ctx, v2.0, v124.0, v1161);
                                                    // Rule at src\opts\shifts.isle line 266.
                                                    returns.extend(Some(v1163));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1161 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1163 = constructor_rotr(ctx, v2.0, v124.0, v1161);
                                                            // Rule at src\opts\shifts.isle line 246.
                                                            returns.extend(Some(v1163));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1149 = C::lane_type(ctx, v2.0);
                                            let v1313 = constructor_rotl(ctx, v1149, v30, v7.1);
                                            let v1314 = constructor_splat(ctx, v2.0, v1313);
                                            // Rule at src\opts\vector.isle line 69.
                                            returns.extend(Some(v1314));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1144 = constructor_rotr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 142.
                                        returns.extend(Some(v1144));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v936 = C::value_type(ctx, v27);
                                            let v1134 = C::fits_in_64(ctx, v936);
                                            if let Some(v1135) = v1134 {
                                                let v1139 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 124.
                                                returns.extend(Some(v1139));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1139 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 125.
                                            returns.extend(Some(v1139));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1139 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 126.
                                            returns.extend(Some(v1139));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1 {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1161 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1162 = constructor_rotl(ctx, v2.0, v124.0, v1161);
                                                            // Rule at src\opts\shifts.isle line 245.
                                                            returns.extend(Some(v1162));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let v1158 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1160 = constructor_rotr(ctx, v2.0, v124.0, v1158);
                                                            // Rule at src\opts\shifts.isle line 242.
                                                            returns.extend(Some(v1160));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 16.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1147 = C::u64_and(ctx, v16, v235);
                                        let v1175 = C::u64_eq(ctx, v16, v1147);
                                        if v1175 == false {
                                            let v1176 = constructor_iconst_u(ctx, v11.0, v1147);
                                            let v1180 = constructor_rotr(ctx, v2.0, v7.0, v1176);
                                            // Rule at src\opts\shifts.isle line 302.
                                            returns.extend(Some(v1180));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1157 = C::subsume(ctx, v124.0);
                                                    // Rule at src\opts\shifts.isle line 205.
                                                    returns.extend(Some(v1157));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1164 = C::value_type(ctx, v124.1);
                                                let v1165 = C::value_type(ctx, v7.1);
                                                if v1164 == v1165 {
                                                    let v1161 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1162 = constructor_rotl(ctx, v2.0, v124.0, v1161);
                                                    // Rule at src\opts\shifts.isle line 264.
                                                    returns.extend(Some(v1162));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1161 = constructor_isub_uextend(ctx, v124.1, v7.1);
                                                            let v1162 = constructor_rotl(ctx, v2.0, v124.0, v1161);
                                                            // Rule at src\opts\shifts.isle line 244.
                                                            returns.extend(Some(v1162));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1164 = C::value_type(ctx, v124.1);
                                                let v1165 = C::value_type(ctx, v7.1);
                                                if v1164 == v1165 {
                                                    let v1158 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1160 = constructor_rotr(ctx, v2.0, v124.0, v1158);
                                                    // Rule at src\opts\shifts.isle line 259.
                                                    returns.extend(Some(v1160));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let mut v199 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                let mut v199 = v199.into_context_iter();
                                                while let Some(v200) = v199.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v226,
                                                        imm: v227,
                                                    } = &v200.1 {
                                                        if let &Opcode::Iconst = v226 {
                                                            let v1158 = constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                            let v1160 = constructor_rotr(ctx, v2.0, v124.0, v1158);
                                                            // Rule at src\opts\shifts.isle line 241.
                                                            returns.extend(Some(v1160));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1149 = C::lane_type(ctx, v2.0);
                                            let v1315 = constructor_rotr(ctx, v1149, v30, v7.1);
                                            let v1316 = constructor_splat(ctx, v2.0, v1315);
                                            // Rule at src\opts\vector.isle line 72.
                                            returns.extend(Some(v1316));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1141 = constructor_ishl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 139.
                                        returns.extend(Some(v1141));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v936 = C::value_type(ctx, v27);
                                            let v1134 = C::fits_in_64(ctx, v936);
                                            if let Some(v1135) = v1134 {
                                                let v1136 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 115.
                                                returns.extend(Some(v1136));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1136 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 116.
                                            returns.extend(Some(v1136));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1136 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 117.
                                            returns.extend(Some(v1136));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1146 = C::u64_and(ctx, v228, v235);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1147 = C::u64_and(ctx, v16, v235);
                                                                            let v1148 = C::u64_add(ctx, v1146, v1147);
                                                                            let v1149 = C::lane_type(ctx, v2.0);
                                                                            let v1150 = C::ty_bits_u64(ctx, v1149);
                                                                            let v1151 = C::u64_lt(ctx, v1148, v1150);
                                                                            if v1151 == true {
                                                                                let v1152 = constructor_iconst_u(ctx, v200.0, v1148);
                                                                                let v1153 = constructor_ishl(ctx, v2.0, v124.0, v1152);
                                                                                // Rule at src\opts\shifts.isle line 152.
                                                                                returns.extend(Some(v1153));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v1110 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1156 = C::u64_le(ctx, v1110, v1148);
                                                                            if v1156 == true {
                                                                                let v910 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                                let v911 = C::subsume(ctx, v910);
                                                                                // Rule at src\opts\shifts.isle line 184.
                                                                                returns.extend(Some(v911));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v617,
                                                                        imm: v618,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v617 {
                                                                            let v680 = constructor_ishl(ctx, v2.0, v124.0, v7.1);
                                                                            let v681 = constructor_ishl(ctx, v2.0, v680, v124.1);
                                                                            // Rule at src\opts\cprop.isle line 212.
                                                                            returns.extend(Some(v681));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v526 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v527) = v526 {
                                                                if v19.0 == v527 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v199 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v15 == v227 {
                                                                                    let v1101 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v1102 = C::imm64_shl(ctx, v527, v1101, v227);
                                                                                    let v1103 = constructor_iconst(ctx, v527, v1102);
                                                                                    let v1104 = constructor_band(ctx, v527, v124.0, v1103);
                                                                                    // Rule at src\opts\shifts.isle line 27.
                                                                                    returns.extend(Some(v1104));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            let v526 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v527) = v526 {
                                                                if v19.0 == v527 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v199 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                    let mut v199 = v199.into_context_iter();
                                                                    while let Some(v200) = v199.next(ctx) {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v226,
                                                                            imm: v227,
                                                                        } = &v200.1 {
                                                                            if let &Opcode::Iconst = v226 {
                                                                                if v15 == v227 {
                                                                                    let v1101 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v1102 = C::imm64_shl(ctx, v527, v1101, v227);
                                                                                    let v1103 = constructor_iconst(ctx, v527, v1102);
                                                                                    let v1104 = constructor_band(ctx, v527, v124.0, v1103);
                                                                                    // Rule at src\opts\shifts.isle line 32.
                                                                                    returns.extend(Some(v1104));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v19.0 == v527 {
                                                                let v569 = C::imm64_shl(ctx, v527, v23, v15);
                                                                let v570 = constructor_iconst(ctx, v527, v569);
                                                                let v571 = C::subsume(ctx, v570);
                                                                // Rule at src\opts\cprop.isle line 58.
                                                                returns.extend(Some(v571));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1147 = C::u64_and(ctx, v16, v235);
                                        let v1175 = C::u64_eq(ctx, v16, v1147);
                                        if v1175 == false {
                                            let v1176 = constructor_iconst_u(ctx, v11.0, v1147);
                                            let v1177 = constructor_ishl(ctx, v2.0, v7.0, v1176);
                                            // Rule at src\opts\shifts.isle line 293.
                                            returns.extend(Some(v1177));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1 {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1149 = C::lane_type(ctx, v2.0);
                                        let v1317 = constructor_ishl(ctx, v1149, v30, v7.1);
                                        let v1318 = constructor_splat(ctx, v2.0, v1317);
                                        // Rule at src\opts\vector.isle line 75.
                                        returns.extend(Some(v1318));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1142 = constructor_ushr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 140.
                                        returns.extend(Some(v1142));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v936 = C::value_type(ctx, v27);
                                            let v1134 = C::fits_in_64(ctx, v936);
                                            if let Some(v1135) = v1134 {
                                                let v1137 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 118.
                                                returns.extend(Some(v1137));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1137 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 119.
                                            returns.extend(Some(v1137));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1137 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 120.
                                            returns.extend(Some(v1137));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v206 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v207) = v206 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                    let mut v127 = v127.into_context_iter();
                                                                    while let Some(v128) = v127.next(ctx) {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v196,
                                                                            arg: v197,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Uextend = v196 {
                                                                                let v198 = C::value_type(ctx, v197);
                                                                                let v208 = C::ty_equal(ctx, v198, v207);
                                                                                if v208 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v209 = C::ty_bits_u64(ctx, v198);
                                                                                    let v210 = C::u64_eq(ctx, v16, v209);
                                                                                    if v210 == true {
                                                                                        let mut v199 = C::inst_data_etor_returns::default();
                                                                                        C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                        let mut v199 = v199.into_context_iter();
                                                                                        while let Some(v200) = v199.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v203,
                                                                                                arg: v204,
                                                                                            } = &v200.1 {
                                                                                                if let &Opcode::Uextend = v203 {
                                                                                                    let v205 = C::value_type(ctx, v204);
                                                                                                    if v198 == v205 {
                                                                                                        let v213 = constructor_umulhi(ctx, v198, v197, v204);
                                                                                                        let v214 = constructor_uextend(ctx, v2.0, v213);
                                                                                                        // Rule at src\opts\arithmetic.isle line 225.
                                                                                                        returns.extend(Some(v214));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                            let mut v199 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v124.1, &mut v199);
                                                            let mut v199 = v199.into_context_iter();
                                                            while let Some(v200) = v199.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v226,
                                                                    imm: v227,
                                                                } = &v200.1 {
                                                                    if let &Opcode::Iconst = v226 {
                                                                        if v15 == v227 {
                                                                            let v526 = C::fits_in_64(ctx, v2.0);
                                                                            if let Some(v527) = v526 {
                                                                                let v1001 = C::ty_int(ctx, v527);
                                                                                if let Some(v1002) = v1001 {
                                                                                    if v19.0 == v1002 {
                                                                                        let v1105 = C::ty_mask(ctx, v1002);
                                                                                        let v1106 = C::imm64(ctx, v1105);
                                                                                        let v1107 = C::imm64_ushr(ctx, v1002, v1106, v227);
                                                                                        let v1108 = constructor_iconst(ctx, v1002, v1107);
                                                                                        let v1109 = constructor_band(ctx, v1002, v124.0, v1108);
                                                                                        // Rule at src\opts\shifts.isle line 41.
                                                                                        returns.extend(Some(v1109));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v1116 = C::u64_is_zero(ctx, v228);
                                                                            if v1116 == false {
                                                                                let v1117 = C::ty_bits(ctx, v2.0);
                                                                                let v1118 = C::u8_as_u64(ctx, v1117);
                                                                                let v1119 = C::u64_sub(ctx, v1118, v228);
                                                                                let v1120 = constructor_shift_amt_to_type(ctx, v1119);
                                                                                if let Some(v1121) = v1120 {
                                                                                    if v2.0 == v19.0 {
                                                                                        let v1122 = constructor_ireduce(ctx, v1121, v124.0);
                                                                                        let v1124 = constructor_uextend(ctx, v2.0, v1122);
                                                                                        // Rule at src\opts\shifts.isle line 88.
                                                                                        returns.extend(Some(v1124));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1146 = C::u64_and(ctx, v228, v235);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1147 = C::u64_and(ctx, v16, v235);
                                                                            let v1148 = C::u64_add(ctx, v1146, v1147);
                                                                            let v1149 = C::lane_type(ctx, v2.0);
                                                                            let v1150 = C::ty_bits_u64(ctx, v1149);
                                                                            let v1151 = C::u64_lt(ctx, v1148, v1150);
                                                                            if v1151 == true {
                                                                                let v1152 = constructor_iconst_u(ctx, v200.0, v1148);
                                                                                let v1154 = constructor_ushr(ctx, v2.0, v124.0, v1152);
                                                                                // Rule at src\opts\shifts.isle line 161.
                                                                                returns.extend(Some(v1154));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v1110 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1156 = C::u64_le(ctx, v1110, v1148);
                                                                            if v1156 == true {
                                                                                let v910 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                                let v911 = C::subsume(ctx, v910);
                                                                                // Rule at src\opts\shifts.isle line 193.
                                                                                returns.extend(Some(v911));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v617,
                                                                        imm: v618,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v617 {
                                                                            let v682 = constructor_ushr(ctx, v2.0, v124.0, v7.1);
                                                                            let v683 = constructor_ushr(ctx, v2.0, v682, v124.1);
                                                                            // Rule at src\opts\cprop.isle line 214.
                                                                            returns.extend(Some(v683));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v19.0 == v527 {
                                                                let v572 = C::imm64_ushr(ctx, v527, v23, v15);
                                                                let v573 = constructor_iconst(ctx, v527, v572);
                                                                let v574 = C::subsume(ctx, v573);
                                                                // Rule at src\opts\cprop.isle line 63.
                                                                returns.extend(Some(v574));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1147 = C::u64_and(ctx, v16, v235);
                                        let v1175 = C::u64_eq(ctx, v16, v1147);
                                        if v1175 == false {
                                            let v1176 = constructor_iconst_u(ctx, v11.0, v1147);
                                            let v1178 = constructor_ushr(ctx, v2.0, v7.0, v1176);
                                            // Rule at src\opts\shifts.isle line 296.
                                            returns.extend(Some(v1178));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1 {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1149 = C::lane_type(ctx, v2.0);
                                        let v1319 = constructor_ushr(ctx, v1149, v30, v7.1);
                                        let v1320 = constructor_splat(ctx, v2.0, v1319);
                                        // Rule at src\opts\vector.isle line 78.
                                        returns.extend(Some(v1320));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1143 = constructor_sshr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src\opts\shifts.isle line 141.
                                        returns.extend(Some(v1143));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v936 = C::value_type(ctx, v27);
                                            let v1134 = C::fits_in_64(ctx, v936);
                                            if let Some(v1135) = v1134 {
                                                let v1138 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                                // Rule at src\opts\shifts.isle line 121.
                                                returns.extend(Some(v1138));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1138 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 122.
                                            returns.extend(Some(v1138));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v1138 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src\opts\shifts.isle line 123.
                                            returns.extend(Some(v1138));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v206 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v207) = v206 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 = C::unpack_value_array_2(ctx, v123);
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                    let mut v127 = v127.into_context_iter();
                                                                    while let Some(v128) = v127.next(ctx) {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v196,
                                                                            arg: v197,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Sextend = v196 {
                                                                                let v198 = C::value_type(ctx, v197);
                                                                                let v208 = C::ty_equal(ctx, v198, v207);
                                                                                if v208 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v209 = C::ty_bits_u64(ctx, v198);
                                                                                    let v210 = C::u64_eq(ctx, v16, v209);
                                                                                    if v210 == true {
                                                                                        let mut v199 = C::inst_data_etor_returns::default();
                                                                                        C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                                        let mut v199 = v199.into_context_iter();
                                                                                        while let Some(v200) = v199.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v203,
                                                                                                arg: v204,
                                                                                            } = &v200.1 {
                                                                                                if let &Opcode::Sextend = v203 {
                                                                                                    let v205 = C::value_type(ctx, v204);
                                                                                                    if v198 == v205 {
                                                                                                        let v211 = constructor_smulhi(ctx, v198, v197, v204);
                                                                                                        let v212 = constructor_sextend(ctx, v2.0, v211);
                                                                                                        // Rule at src\opts\arithmetic.isle line 219.
                                                                                                        returns.extend(Some(v212));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                            let v236 = C::u64_eq(ctx, v16, v235);
                                                            if v236 == true {
                                                                if v2.0 == v11.0 {
                                                                    if v2.0 == v19.0 {
                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                        let mut v127 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                        let mut v127 = v127.into_context_iter();
                                                                        while let Some(v128) = v127.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v196,
                                                                                arg: v197,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Ineg = v196 {
                                                                                    if v2.0 == v128.0 {
                                                                                        if v124.1 == v197 {
                                                                                            let v238 = constructor_bmask(ctx, v2.0, v197);
                                                                                            // Rule at src\opts\bitops.isle line 89.
                                                                                            returns.extend(Some(v238));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v199 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                        let mut v199 = v199.into_context_iter();
                                                                        while let Some(v200) = v199.next(ctx) {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v203,
                                                                                arg: v204,
                                                                            } = &v200.1 {
                                                                                if let &Opcode::Ineg = v203 {
                                                                                    if v124.0 == v204 {
                                                                                        if v2.0 == v200.0 {
                                                                                            let v237 = constructor_bmask(ctx, v2.0, v124.0);
                                                                                            // Rule at src\opts\bitops.isle line 85.
                                                                                            returns.extend(Some(v237));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            if v16 == v228 {
                                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                let mut v127 = v127.into_context_iter();
                                                                                while let Some(v128) = v127.next(ctx) {
                                                                                    if let &InstructionData::Unary {
                                                                                        opcode: ref v196,
                                                                                        arg: v197,
                                                                                    } = &v128.1 {
                                                                                        match v196 {
                                                                                            &Opcode::Uextend => {
                                                                                                if v2.0 == v128.0 {
                                                                                                    let v1110 = C::ty_bits_u64(ctx, v2.0);
                                                                                                    let v198 = C::value_type(ctx, v197);
                                                                                                    let v209 = C::ty_bits_u64(ctx, v198);
                                                                                                    let v1111 = C::u64_sub(ctx, v1110, v209);
                                                                                                    let v1112 = C::u64_eq(ctx, v228, v1111);
                                                                                                    if v1112 == true {
                                                                                                        let v1113 = constructor_sextend(ctx, v2.0, v197);
                                                                                                        // Rule at src\opts\shifts.isle line 50.
                                                                                                        returns.extend(Some(v1113));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                    let v1114 = C::u64_lt(ctx, v228, v1111);
                                                                                                    if v1114 == true {
                                                                                                        // Rule at src\opts\shifts.isle line 61.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            &Opcode::Sextend => {
                                                                                                let v1110 = C::ty_bits_u64(ctx, v2.0);
                                                                                                let v198 = C::value_type(ctx, v197);
                                                                                                let v209 = C::ty_bits_u64(ctx, v198);
                                                                                                let v1111 = C::u64_sub(ctx, v1110, v209);
                                                                                                let v1115 = C::u64_le(ctx, v228, v1111);
                                                                                                if v1115 == true {
                                                                                                    if v2.0 == v128.0 {
                                                                                                        // Rule at src\opts\shifts.isle line 71.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if v15 == v227 {
                                                                                let v1116 = C::u64_is_zero(ctx, v228);
                                                                                if v1116 == false {
                                                                                    let v1117 = C::ty_bits(ctx, v2.0);
                                                                                    let v1118 = C::u8_as_u64(ctx, v1117);
                                                                                    let v1119 = C::u64_sub(ctx, v1118, v228);
                                                                                    let v1120 = constructor_shift_amt_to_type(ctx, v1119);
                                                                                    if let Some(v1121) = v1120 {
                                                                                        let v1122 = constructor_ireduce(ctx, v1121, v124.0);
                                                                                        let v1123 = constructor_sextend(ctx, v2.0, v1122);
                                                                                        // Rule at src\opts\shifts.isle line 84.
                                                                                        returns.extend(Some(v1123));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                let mut v127 = v127.into_context_iter();
                                                                while let Some(v128) = v127.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v617,
                                                                        imm: v618,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v617 {
                                                                            let v684 = constructor_sshr(ctx, v2.0, v124.0, v7.1);
                                                                            let v685 = constructor_sshr(ctx, v2.0, v684, v124.1);
                                                                            // Rule at src\opts\cprop.isle line 216.
                                                                            returns.extend(Some(v685));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v199 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v124.1, &mut v199);
                                                                let mut v199 = v199.into_context_iter();
                                                                while let Some(v200) = v199.next(ctx) {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v226,
                                                                        imm: v227,
                                                                    } = &v200.1 {
                                                                        if let &Opcode::Iconst = v226 {
                                                                            let v228 = C::u64_from_imm64(ctx, v227);
                                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1146 = C::u64_and(ctx, v228, v235);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1147 = C::u64_and(ctx, v16, v235);
                                                                            let v1148 = C::u64_add(ctx, v1146, v1147);
                                                                            let v1149 = C::lane_type(ctx, v2.0);
                                                                            let v1150 = C::ty_bits_u64(ctx, v1149);
                                                                            let v1151 = C::u64_lt(ctx, v1148, v1150);
                                                                            if v1151 == true {
                                                                                let v1152 = constructor_iconst_u(ctx, v200.0, v1148);
                                                                                let v1155 = constructor_sshr(ctx, v2.0, v124.0, v1152);
                                                                                // Rule at src\opts\shifts.isle line 170.
                                                                                returns.extend(Some(v1155));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v526 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v527) = v526 {
                                                            if v19.0 == v527 {
                                                                let v575 = C::imm64_sshr(ctx, v527, v23, v15);
                                                                let v576 = constructor_iconst(ctx, v527, v575);
                                                                let v577 = C::subsume(ctx, v576);
                                                                // Rule at src\opts\cprop.isle line 68.
                                                                returns.extend(Some(v577));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src\opts\shifts.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1147 = C::u64_and(ctx, v16, v235);
                                        let v1175 = C::u64_eq(ctx, v16, v1147);
                                        if v1175 == false {
                                            let v1176 = constructor_iconst_u(ctx, v11.0, v1147);
                                            let v1179 = constructor_sshr(ctx, v2.0, v7.0, v1176);
                                            // Rule at src\opts\shifts.isle line 299.
                                            returns.extend(Some(v1179));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1 {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1149 = C::lane_type(ctx, v2.0);
                                        let v1321 = constructor_sshr(ctx, v1149, v30, v7.1);
                                        let v1322 = constructor_splat(ctx, v2.0, v1321);
                                        // Rule at src\opts\vector.isle line 81.
                                        returns.extend(Some(v1322));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fadd => {
                        match v2.0 {
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v727,
                                            imm: v728,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v727 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v729 = C::f32_add(ctx, v726, v728);
                                                                if let Some(v730) = v729 {
                                                                    let v731 = constructor_f32const(ctx, F32, v730);
                                                                    let v732 = C::subsume(ctx, v731);
                                                                    // Rule at src\opts\cprop.isle line 290.
                                                                    returns.extend(Some(v732));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v735,
                                            imm: v736,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v735 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v737 = C::f64_add(ctx, v734, v736);
                                                                if let Some(v738) = v737 {
                                                                    let v739 = constructor_f64const(ctx, F64, v738);
                                                                    let v740 = C::subsume(ctx, v739);
                                                                    // Rule at src\opts\cprop.isle line 293.
                                                                    returns.extend(Some(v740));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fsub => {
                        match v2.0 {
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v727,
                                            imm: v728,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v727 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v741 = C::f32_sub(ctx, v726, v728);
                                                                if let Some(v742) = v741 {
                                                                    let v743 = constructor_f32const(ctx, F32, v742);
                                                                    let v744 = C::subsume(ctx, v743);
                                                                    // Rule at src\opts\cprop.isle line 297.
                                                                    returns.extend(Some(v744));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v735,
                                            imm: v736,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v735 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v745 = C::f64_sub(ctx, v734, v736);
                                                                if let Some(v746) = v745 {
                                                                    let v747 = constructor_f64const(ctx, F64, v746);
                                                                    let v748 = C::subsume(ctx, v747);
                                                                    // Rule at src\opts\cprop.isle line 300.
                                                                    returns.extend(Some(v748));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fmul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    if let &Opcode::Fneg = v26 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1 {
                                                    if let &Opcode::Fneg = v29 {
                                                        if v2.0 == v19.0 {
                                                            let v103 = constructor_fmul(ctx, v2.0, v30, v27);
                                                            // Rule at src\opts\arithmetic.isle line 114.
                                                            returns.extend(Some(v103));
                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v727,
                                    imm: v728,
                                } => {
                                    if let &Opcode::F32const = v727 {
                                        if v2.0 == F32 {
                                            if v11.0 == F32 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v749 = C::f32_mul(ctx, v726, v728);
                                                                if let Some(v750) = v749 {
                                                                    let v751 = constructor_f32const(ctx, F32, v750);
                                                                    let v752 = C::subsume(ctx, v751);
                                                                    // Rule at src\opts\cprop.isle line 304.
                                                                    returns.extend(Some(v752));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v735,
                                    imm: v736,
                                } => {
                                    if let &Opcode::F64const = v735 {
                                        if v2.0 == F64 {
                                            if v11.0 == F64 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v753 = C::f64_mul(ctx, v734, v736);
                                                                if let Some(v754) = v753 {
                                                                    let v755 = constructor_f64const(ctx, F64, v754);
                                                                    let v756 = C::subsume(ctx, v755);
                                                                    // Rule at src\opts\cprop.isle line 307.
                                                                    returns.extend(Some(v756));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Fdiv => {
                        match v2.0 {
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v727,
                                            imm: v728,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v727 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v757 = C::f32_div(ctx, v726, v728);
                                                                if let Some(v758) = v757 {
                                                                    let v759 = constructor_f32const(ctx, F32, v758);
                                                                    let v760 = C::subsume(ctx, v759);
                                                                    // Rule at src\opts\cprop.isle line 311.
                                                                    returns.extend(Some(v760));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v735,
                                            imm: v736,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v735 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v761 = C::f64_div(ctx, v734, v736);
                                                                if let Some(v762) = v761 {
                                                                    let v763 = constructor_f64const(ctx, F64, v762);
                                                                    let v764 = C::subsume(ctx, v763);
                                                                    // Rule at src\opts\cprop.isle line 314.
                                                                    returns.extend(Some(v764));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fcopysign => {
                        match v2.0 {
                            F16 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v807,
                                            imm: v808,
                                        } = &v11.1 {
                                            if let &Opcode::F16const = v807 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F16 {
                                                        if let &InstructionData::UnaryIeee16 {
                                                            opcode: ref v805,
                                                            imm: v806,
                                                        } = &v19.1 {
                                                            if let &Opcode::F16const = v805 {
                                                                let v885 = C::f16_copysign(ctx, v806, v808);
                                                                let v886 = constructor_f16const(ctx, F16, v885);
                                                                let v887 = C::subsume(ctx, v886);
                                                                // Rule at src\opts\cprop.isle line 397.
                                                                returns.extend(Some(v887));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v727,
                                            imm: v728,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v727 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v888 = C::f32_copysign(ctx, v726, v728);
                                                                let v889 = constructor_f32const(ctx, F32, v888);
                                                                let v890 = C::subsume(ctx, v889);
                                                                // Rule at src\opts\cprop.isle line 399.
                                                                returns.extend(Some(v890));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v735,
                                            imm: v736,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v735 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v891 = C::f64_copysign(ctx, v734, v736);
                                                                let v892 = constructor_f64const(ctx, F64, v891);
                                                                let v893 = C::subsume(ctx, v892);
                                                                // Rule at src\opts\cprop.isle line 401.
                                                                returns.extend(Some(v893));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v825,
                                            constant_handle: v826,
                                        } = &v11.1 {
                                            if let &Opcode::F128const = v825 {
                                                let v827 = C::ieee128_constant_extractor(ctx, v826);
                                                if let Some(v828) = v827 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if v19.0 == F128 {
                                                            if let &InstructionData::UnaryConst {
                                                                opcode: ref v821,
                                                                constant_handle: v822,
                                                            } = &v19.1 {
                                                                if let &Opcode::F128const = v821 {
                                                                    let v823 = C::ieee128_constant_extractor(ctx, v822);
                                                                    if let Some(v824) = v823 {
                                                                        let v894 = C::f128_copysign(ctx, v824, v828);
                                                                        let v895 = C::ieee128_constant(ctx, v894);
                                                                        let v896 = constructor_f128const(ctx, F128, v895);
                                                                        let v897 = C::subsume(ctx, v896);
                                                                        // Rule at src\opts\cprop.isle line 403.
                                                                        returns.extend(Some(v897));
                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fmin => {
                        match v2.0 {
                            F16 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v807,
                                            imm: v808,
                                        } = &v11.1 {
                                            if let &Opcode::F16const = v807 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F16 {
                                                        if let &InstructionData::UnaryIeee16 {
                                                            opcode: ref v805,
                                                            imm: v806,
                                                        } = &v19.1 {
                                                            if let &Opcode::F16const = v805 {
                                                                let v809 = C::f16_min(ctx, v806, v808);
                                                                if let Some(v810) = v809 {
                                                                    let v811 = constructor_f16const(ctx, F32, v810);
                                                                    let v812 = C::subsume(ctx, v811);
                                                                    // Rule at src\opts\cprop.isle line 353.
                                                                    returns.extend(Some(v812));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v727,
                                            imm: v728,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v727 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v813 = C::f32_min(ctx, v726, v728);
                                                                if let Some(v814) = v813 {
                                                                    let v815 = constructor_f32const(ctx, F32, v814);
                                                                    let v816 = C::subsume(ctx, v815);
                                                                    // Rule at src\opts\cprop.isle line 356.
                                                                    returns.extend(Some(v816));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v735,
                                            imm: v736,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v735 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v817 = C::f64_min(ctx, v734, v736);
                                                                if let Some(v818) = v817 {
                                                                    let v819 = constructor_f64const(ctx, F64, v818);
                                                                    let v820 = C::subsume(ctx, v819);
                                                                    // Rule at src\opts\cprop.isle line 359.
                                                                    returns.extend(Some(v820));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v825,
                                            constant_handle: v826,
                                        } = &v11.1 {
                                            if let &Opcode::F128const = v825 {
                                                let v827 = C::ieee128_constant_extractor(ctx, v826);
                                                if let Some(v828) = v827 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if v19.0 == F128 {
                                                            if let &InstructionData::UnaryConst {
                                                                opcode: ref v821,
                                                                constant_handle: v822,
                                                            } = &v19.1 {
                                                                if let &Opcode::F128const = v821 {
                                                                    let v823 = C::ieee128_constant_extractor(ctx, v822);
                                                                    if let Some(v824) = v823 {
                                                                        let v829 = C::f128_min(ctx, v824, v828);
                                                                        if let Some(v830) = v829 {
                                                                            let v832 = C::ieee128_constant(ctx, v830);
                                                                            let v833 = constructor_f128const(ctx, F128, v832);
                                                                            let v834 = C::subsume(ctx, v833);
                                                                            // Rule at src\opts\cprop.isle line 362.
                                                                            returns.extend(Some(v834));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fmax => {
                        match v2.0 {
                            F16 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v807,
                                            imm: v808,
                                        } = &v11.1 {
                                            if let &Opcode::F16const = v807 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F16 {
                                                        if let &InstructionData::UnaryIeee16 {
                                                            opcode: ref v805,
                                                            imm: v806,
                                                        } = &v19.1 {
                                                            if let &Opcode::F16const = v805 {
                                                                let v835 = C::f16_max(ctx, v806, v808);
                                                                if let Some(v836) = v835 {
                                                                    let v838 = constructor_f16const(ctx, F16, v836);
                                                                    let v839 = C::subsume(ctx, v838);
                                                                    // Rule at src\opts\cprop.isle line 366.
                                                                    returns.extend(Some(v839));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v727,
                                            imm: v728,
                                        } = &v11.1 {
                                            if let &Opcode::F32const = v727 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F32 {
                                                        if let &InstructionData::UnaryIeee32 {
                                                            opcode: ref v725,
                                                            imm: v726,
                                                        } = &v19.1 {
                                                            if let &Opcode::F32const = v725 {
                                                                let v840 = C::f32_max(ctx, v726, v728);
                                                                if let Some(v841) = v840 {
                                                                    let v842 = constructor_f32const(ctx, F32, v841);
                                                                    let v843 = C::subsume(ctx, v842);
                                                                    // Rule at src\opts\cprop.isle line 369.
                                                                    returns.extend(Some(v843));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v735,
                                            imm: v736,
                                        } = &v11.1 {
                                            if let &Opcode::F64const = v735 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if v19.0 == F64 {
                                                        if let &InstructionData::UnaryIeee64 {
                                                            opcode: ref v733,
                                                            imm: v734,
                                                        } = &v19.1 {
                                                            if let &Opcode::F64const = v733 {
                                                                let v844 = C::f64_max(ctx, v734, v736);
                                                                if let Some(v845) = v844 {
                                                                    let v846 = constructor_f64const(ctx, F64, v845);
                                                                    let v847 = C::subsume(ctx, v846);
                                                                    // Rule at src\opts\cprop.isle line 372.
                                                                    returns.extend(Some(v847));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let v7 = C::unpack_value_array_2(ctx, v6);
                                let mut v10 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v7.1, &mut v10);
                                let mut v10 = v10.into_context_iter();
                                while let Some(v11) = v10.next(ctx) {
                                    if v11.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v825,
                                            constant_handle: v826,
                                        } = &v11.1 {
                                            if let &Opcode::F128const = v825 {
                                                let v827 = C::ieee128_constant_extractor(ctx, v826);
                                                if let Some(v828) = v827 {
                                                    let mut v18 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if v19.0 == F128 {
                                                            if let &InstructionData::UnaryConst {
                                                                opcode: ref v821,
                                                                constant_handle: v822,
                                                            } = &v19.1 {
                                                                if let &Opcode::F128const = v821 {
                                                                    let v823 = C::ieee128_constant_extractor(ctx, v822);
                                                                    if let Some(v824) = v823 {
                                                                        let v848 = C::f128_max(ctx, v824, v828);
                                                                        if let Some(v849) = v848 {
                                                                            let v850 = C::ieee128_constant(ctx, v849);
                                                                            let v851 = constructor_f128const(ctx, F128, v850);
                                                                            let v852 = C::subsume(ctx, v851);
                                                                            // Rule at src\opts\cprop.isle line 375.
                                                                            returns.extend(Some(v852));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v253,
                args: ref v254,
                cond: ref v255,
            } => {
                if let &Opcode::Icmp = v253 {
                    match v255 {
                        &IntCC::Equal => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v593 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.0, &mut v593);
                            let mut v593 = v593.into_context_iter();
                            while let Some(v594) = v593.next(ctx) {
                                match &v594.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v1240,
                                        args: ref v1241,
                                    } => {
                                        if let &Opcode::Isub = v1240 {
                                            if v594.0 == I8 {
                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                                                let mut v915 = v915.into_context_iter();
                                                while let Some(v916) = v915.next(ctx) {
                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                    if let Some(v918) = v917 {
                                                        match v918.1 {
                                                            -0x1 => {
                                                                let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                                let mut v1245 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                                let mut v1245 = v1245.into_context_iter();
                                                                while let Some(v1246) = v1245.next(ctx) {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v1249,
                                                                        args: ref v1250,
                                                                        cond: ref v1251,
                                                                    } = &v1246.1 {
                                                                        if let &Opcode::Icmp = v1249 {
                                                                            match v1251 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::SignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1267 = constructor_slt(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 179.
                                                                                                                returns.extend(Some(v1267));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1268 = constructor_ult(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 181.
                                                                                                                returns.extend(Some(v1268));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x0 => {
                                                                let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                                let mut v1245 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                                let mut v1245 = v1245.into_context_iter();
                                                                while let Some(v1246) = v1245.next(ctx) {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v1249,
                                                                        args: ref v1250,
                                                                        cond: ref v1251,
                                                                    } = &v1246.1 {
                                                                        if let &Opcode::Icmp = v1249 {
                                                                            match v1251 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::SignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1265 = constructor_eq(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 146.
                                                                                                                returns.extend(Some(v1265));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1265 = constructor_eq(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 148.
                                                                                                                returns.extend(Some(v1265));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1 => {
                                                                let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                                let mut v1245 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                                let mut v1245 = v1245.into_context_iter();
                                                                while let Some(v1246) = v1245.next(ctx) {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v1249,
                                                                        args: ref v1250,
                                                                        cond: ref v1251,
                                                                    } = &v1246.1 {
                                                                        if let &Opcode::Icmp = v1249 {
                                                                            match v1251 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::SignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1271 = constructor_sgt(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 187.
                                                                                                                returns.extend(Some(v1271));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1272 = constructor_ugt(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 189.
                                                                                                                returns.extend(Some(v1272));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v907,
                                        arg: v908,
                                    } => {
                                        if let &Opcode::Sextend = v907 {
                                            let mut v915 = C::inst_data_tupled_etor_returns::default();
                                            C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                                            let mut v915 = v915.into_context_iter();
                                            while let Some(v916) = v915.next(ctx) {
                                                let v917 = C::iconst_sextend_etor(ctx, v916);
                                                if let Some(v918) = v917 {
                                                    if v918.1 == 0x0 {
                                                        let v909 = C::value_type(ctx, v908);
                                                        let v922 = constructor_iconst_s(ctx, v909, 0x0);
                                                        let v923 = constructor_eq(ctx, v909, v908, v922);
                                                        // Rule at src\opts\extends.isle line 40.
                                                        returns.extend(Some(v923));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let mut v259 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0 => {
                                                let mut v956 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v956);
                                                let mut v956 = v956.into_context_iter();
                                                while let Some(v957) = v956.next(ctx) {
                                                    let mut v960 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v957.1, &mut v960);
                                                    let mut v960 = v960.into_context_iter();
                                                    while let Some(v961) = v960.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v964,
                                                            args: ref v965,
                                                            cond: ref v966,
                                                        } = &v961.1 {
                                                            if let &Opcode::Icmp = v964 {
                                                                if v2.0 == v961.0 {
                                                                    let v971 = &C::intcc_complement(ctx, v966);
                                                                    let v967 = C::unpack_value_array_2(ctx, v965);
                                                                    let v972 = constructor_icmp(ctx, v2.0, v971, v967.0, v967.1);
                                                                    let v973 = C::subsume(ctx, v972);
                                                                    // Rule at src\opts\icmp.isle line 26.
                                                                    returns.extend(Some(v973));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let mut v956 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v956);
                                                let mut v956 = v956.into_context_iter();
                                                while let Some(v957) = v956.next(ctx) {
                                                    let mut v960 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v957.1, &mut v960);
                                                    let mut v960 = v960.into_context_iter();
                                                    while let Some(v961) = v960.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v964,
                                                            args: ref v965,
                                                            cond: ref v966,
                                                        } = &v961.1 {
                                                            if let &Opcode::Icmp = v964 {
                                                                let v970 = C::subsume(ctx, v957.1);
                                                                // Rule at src\opts\icmp.isle line 40.
                                                                returns.extend(Some(v970));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            if v256.0 == v256.1 {
                                let v52 = C::ty_int(ctx, v2.0);
                                if let Some(v53) = v52 {
                                    let v954 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v955 = C::subsume(ctx, v954);
                                    // Rule at src\opts\icmp.isle line 5.
                                    returns.extend(Some(v955));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::NotEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v593 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.0, &mut v593);
                            let mut v593 = v593.into_context_iter();
                            while let Some(v594) = v593.next(ctx) {
                                match &v594.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v1240,
                                        args: ref v1241,
                                    } => {
                                        if let &Opcode::Isub = v1240 {
                                            if v594.0 == I8 {
                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                                                let mut v915 = v915.into_context_iter();
                                                while let Some(v916) = v915.next(ctx) {
                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                    if let Some(v918) = v917 {
                                                        match v918.1 {
                                                            -0x1 => {
                                                                let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                                let mut v1245 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                                let mut v1245 = v1245.into_context_iter();
                                                                while let Some(v1246) = v1245.next(ctx) {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v1249,
                                                                        args: ref v1250,
                                                                        cond: ref v1251,
                                                                    } = &v1246.1 {
                                                                        if let &Opcode::Icmp = v1249 {
                                                                            match v1251 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::SignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1273 = constructor_sge(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 183.
                                                                                                                returns.extend(Some(v1273));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1274 = constructor_uge(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 185.
                                                                                                                returns.extend(Some(v1274));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x0 => {
                                                                let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                                let mut v1245 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                                let mut v1245 = v1245.into_context_iter();
                                                                while let Some(v1246) = v1245.next(ctx) {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v1249,
                                                                        args: ref v1250,
                                                                        cond: ref v1251,
                                                                    } = &v1246.1 {
                                                                        if let &Opcode::Icmp = v1249 {
                                                                            match v1251 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::SignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1266 = constructor_ne(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 151.
                                                                                                                returns.extend(Some(v1266));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1266 = constructor_ne(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 153.
                                                                                                                returns.extend(Some(v1266));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1 => {
                                                                let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                                let mut v1245 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                                let mut v1245 = v1245.into_context_iter();
                                                                while let Some(v1246) = v1245.next(ctx) {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v1249,
                                                                        args: ref v1250,
                                                                        cond: ref v1251,
                                                                    } = &v1246.1 {
                                                                        if let &Opcode::Icmp = v1249 {
                                                                            match v1251 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::SignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1269 = constructor_sle(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 191.
                                                                                                                returns.extend(Some(v1269));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v1255 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                    let mut v1255 = v1255.into_context_iter();
                                                                                    while let Some(v1256) = v1255.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1259,
                                                                                            args: ref v1260,
                                                                                            cond: ref v1261,
                                                                                        } = &v1256.1 {
                                                                                            if let &Opcode::Icmp = v1259 {
                                                                                                if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                    if v1246.0 == v1256.0 {
                                                                                                        let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                        let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                        if v1252.0 == v1262.0 {
                                                                                                            if v1252.1 == v1262.1 {
                                                                                                                let v1270 = constructor_ule(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                                // Rule at src\opts\spaceship.isle line 193.
                                                                                                                returns.extend(Some(v1270));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v907,
                                        arg: v908,
                                    } => {
                                        if let &Opcode::Sextend = v907 {
                                            let mut v915 = C::inst_data_tupled_etor_returns::default();
                                            C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                                            let mut v915 = v915.into_context_iter();
                                            while let Some(v916) = v915.next(ctx) {
                                                let v917 = C::iconst_sextend_etor(ctx, v916);
                                                if let Some(v918) = v917 {
                                                    if v918.1 == 0x0 {
                                                        let v909 = C::value_type(ctx, v908);
                                                        let v922 = constructor_iconst_s(ctx, v909, 0x0);
                                                        let v924 = constructor_ne(ctx, v909, v908, v922);
                                                        // Rule at src\opts\extends.isle line 42.
                                                        returns.extend(Some(v924));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let mut v259 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0 => {
                                                let mut v266 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                                                constructor_truthy(ctx, v256.0, &mut v266);
                                                let mut v266 = v266.into_context_iter();
                                                while let Some(v267) = v266.next(ctx) {
                                                    let v268 = C::value_type(ctx, v267);
                                                    let v269 = C::ty_int_ref_scalar_64_extract(ctx, v268);
                                                    if let Some(v270) = v269 {
                                                        let v271 = constructor_iconst_u(ctx, v270, 0x0);
                                                        let v272 = constructor_ne(ctx, v2.0, v267, v271);
                                                        // Rule at src\opts\bitops.isle line 120.
                                                        returns.extend(Some(v272));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                let mut v956 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v956);
                                                let mut v956 = v956.into_context_iter();
                                                while let Some(v957) = v956.next(ctx) {
                                                    let mut v960 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v957.1, &mut v960);
                                                    let mut v960 = v960.into_context_iter();
                                                    while let Some(v961) = v960.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v964,
                                                            args: ref v965,
                                                            cond: ref v966,
                                                        } = &v961.1 {
                                                            if let &Opcode::Icmp = v964 {
                                                                if v2.0 == v961.0 {
                                                                    let v970 = C::subsume(ctx, v957.1);
                                                                    // Rule at src\opts\icmp.isle line 19.
                                                                    returns.extend(Some(v970));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let mut v956 = C::uextend_maybe_etor_returns::default();
                                                C::uextend_maybe_etor(ctx, v256.0, &mut v956);
                                                let mut v956 = v956.into_context_iter();
                                                while let Some(v957) = v956.next(ctx) {
                                                    let mut v960 = C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v957.1, &mut v960);
                                                    let mut v960 = v960.into_context_iter();
                                                    while let Some(v961) = v960.next(ctx) {
                                                        if let &InstructionData::IntCompare {
                                                            opcode: ref v964,
                                                            args: ref v965,
                                                            cond: ref v966,
                                                        } = &v961.1 {
                                                            if let &Opcode::Icmp = v964 {
                                                                if v2.0 == v961.0 {
                                                                    let v971 = &C::intcc_complement(ctx, v966);
                                                                    let v967 = C::unpack_value_array_2(ctx, v965);
                                                                    let v972 = constructor_icmp(ctx, v2.0, v971, v967.0, v967.1);
                                                                    let v973 = C::subsume(ctx, v972);
                                                                    // Rule at src\opts\icmp.isle line 33.
                                                                    returns.extend(Some(v973));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            if v256.0 == v256.1 {
                                let v52 = C::ty_int(ctx, v2.0);
                                if let Some(v53) = v52 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 6.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v915 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                            let mut v915 = v915.into_context_iter();
                            while let Some(v916) = v915.next(ctx) {
                                let v917 = C::iconst_sextend_etor(ctx, v916);
                                if let Some(v918) = v917 {
                                    match v918.1 {
                                        -0x1 => {
                                            let v1032 = constructor_iconst_s(ctx, v918.0, 0x0);
                                            let v1035 = constructor_sge(ctx, v2.0, v256.0, v1032);
                                            // Rule at src\opts\icmp.isle line 168.
                                            returns.extend(Some(v1035));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        0x0 => {
                                            let mut v593 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v256.0, &mut v593);
                                            let mut v593 = v593.into_context_iter();
                                            while let Some(v594) = v593.next(ctx) {
                                                if v594.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v1240,
                                                        args: ref v1241,
                                                    } = &v594.1 {
                                                        if let &Opcode::Isub = v1240 {
                                                            let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                            let mut v1245 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                            let mut v1245 = v1245.into_context_iter();
                                                            while let Some(v1246) = v1245.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1249,
                                                                    args: ref v1250,
                                                                    cond: ref v1251,
                                                                } = &v1246.1 {
                                                                    if let &Opcode::Icmp = v1249 {
                                                                        match v1251 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::SignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1271 = constructor_sgt(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 167.
                                                                                                            returns.extend(Some(v1271));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1272 = constructor_ugt(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 169.
                                                                                                            returns.extend(Some(v1272));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1001 = C::ty_int(ctx, v527);
                                if let Some(v1002) = v1001 {
                                    let mut v259 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1011 = C::ty_smin(ctx, v260.0);
                                                let v1012 = C::u64_eq(ctx, v265, v1011);
                                                if v1012 == true {
                                                    let v1006 = constructor_ne(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 116.
                                                    returns.extend(Some(v1006));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1013 = C::ty_smax(ctx, v260.0);
                                                let v1014 = C::u64_eq(ctx, v265, v1013);
                                                if v1014 == true {
                                                    let v1003 = constructor_iconst_u(ctx, v1002, 0x0);
                                                    let v1004 = C::subsume(ctx, v1003);
                                                    // Rule at src\opts\icmp.isle line 136.
                                                    returns.extend(Some(v1004));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 9.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1001 = C::ty_int(ctx, v527);
                                            if let Some(v1002) = v1001 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1011 = C::ty_smin(ctx, v260.0);
                                                let v1012 = C::u64_eq(ctx, v265, v1011);
                                                if v1012 == true {
                                                    let v1007 = constructor_iconst_u(ctx, v1002, 0x1);
                                                    let v1008 = C::subsume(ctx, v1007);
                                                    // Rule at src\opts\icmp.isle line 121.
                                                    returns.extend(Some(v1008));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1013 = C::ty_smax(ctx, v260.0);
                                                let v1014 = C::u64_eq(ctx, v265, v1013);
                                                if v1014 == true {
                                                    let v1005 = constructor_eq(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 141.
                                                    returns.extend(Some(v1005));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        if v265 == 0x0 {
                                            let mut v593 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v256.0, &mut v593);
                                            let mut v593 = v593.into_context_iter();
                                            while let Some(v594) = v593.next(ctx) {
                                                if v594.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v907,
                                                        arg: v908,
                                                    } = &v594.1 {
                                                        if let &Opcode::Uextend = v907 {
                                                            let v909 = C::value_type(ctx, v908);
                                                            if v909 == I32 {
                                                                let v913 = constructor_iconst_u(ctx, v2.0, 0x1);
                                                                let v914 = C::subsume(ctx, v913);
                                                                // Rule at src\opts\extends.isle line 33.
                                                                returns.extend(Some(v914));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v915 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                            let mut v915 = v915.into_context_iter();
                            while let Some(v916) = v915.next(ctx) {
                                let v917 = C::iconst_sextend_etor(ctx, v916);
                                if let Some(v918) = v917 {
                                    match v918.1 {
                                        0x0 => {
                                            let mut v593 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v256.0, &mut v593);
                                            let mut v593 = v593.into_context_iter();
                                            while let Some(v594) = v593.next(ctx) {
                                                if v594.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v1240,
                                                        args: ref v1241,
                                                    } = &v594.1 {
                                                        if let &Opcode::Isub = v1240 {
                                                            let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                            let mut v1245 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                            let mut v1245 = v1245.into_context_iter();
                                                            while let Some(v1246) = v1245.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1249,
                                                                    args: ref v1250,
                                                                    cond: ref v1251,
                                                                } = &v1246.1 {
                                                                    if let &Opcode::Icmp = v1249 {
                                                                        match v1251 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::SignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1273 = constructor_sge(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 172.
                                                                                                            returns.extend(Some(v1273));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1274 = constructor_uge(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 174.
                                                                                                            returns.extend(Some(v1274));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1032 = constructor_iconst_s(ctx, v918.0, 0x0);
                                            let v1033 = constructor_sgt(ctx, v2.0, v256.0, v1032);
                                            // Rule at src\opts\icmp.isle line 162.
                                            returns.extend(Some(v1033));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v954 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v955 = C::subsume(ctx, v954);
                                    // Rule at src\opts\icmp.isle line 10.
                                    returns.extend(Some(v955));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1001 = C::ty_int(ctx, v527);
                                            if let Some(v1002) = v1001 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1011 = C::ty_smin(ctx, v260.0);
                                                let v1012 = C::u64_eq(ctx, v265, v1011);
                                                if v1012 == true {
                                                    let v1003 = constructor_iconst_u(ctx, v1002, 0x0);
                                                    let v1004 = C::subsume(ctx, v1003);
                                                    // Rule at src\opts\icmp.isle line 106.
                                                    returns.extend(Some(v1004));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1013 = C::ty_smax(ctx, v260.0);
                                                let v1014 = C::u64_eq(ctx, v265, v1013);
                                                if v1014 == true {
                                                    let v1006 = constructor_ne(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 126.
                                                    returns.extend(Some(v1006));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        if v265 == 0x0 {
                                            let mut v593 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v256.0, &mut v593);
                                            let mut v593 = v593.into_context_iter();
                                            while let Some(v594) = v593.next(ctx) {
                                                if v594.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v907,
                                                        arg: v908,
                                                    } = &v594.1 {
                                                        if let &Opcode::Uextend = v907 {
                                                            let v909 = C::value_type(ctx, v908);
                                                            if v909 == I32 {
                                                                let v910 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                let v911 = C::subsume(ctx, v910);
                                                                // Rule at src\opts\extends.isle line 28.
                                                                returns.extend(Some(v911));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v915 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                            let mut v915 = v915.into_context_iter();
                            while let Some(v916) = v915.next(ctx) {
                                let v917 = C::iconst_sextend_etor(ctx, v916);
                                if let Some(v918) = v917 {
                                    match v918.1 {
                                        0x0 => {
                                            let mut v593 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v256.0, &mut v593);
                                            let mut v593 = v593.into_context_iter();
                                            while let Some(v594) = v593.next(ctx) {
                                                if v594.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v1240,
                                                        args: ref v1241,
                                                    } = &v594.1 {
                                                        if let &Opcode::Isub = v1240 {
                                                            let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                            let mut v1245 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                            let mut v1245 = v1245.into_context_iter();
                                                            while let Some(v1246) = v1245.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1249,
                                                                    args: ref v1250,
                                                                    cond: ref v1251,
                                                                } = &v1246.1 {
                                                                    if let &Opcode::Icmp = v1249 {
                                                                        match v1251 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::SignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1267 = constructor_slt(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 157.
                                                                                                            returns.extend(Some(v1267));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1268 = constructor_ult(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 159.
                                                                                                            returns.extend(Some(v1268));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1032 = constructor_iconst_s(ctx, v918.0, 0x0);
                                            let v1034 = constructor_sle(ctx, v2.0, v256.0, v1032);
                                            // Rule at src\opts\icmp.isle line 165.
                                            returns.extend(Some(v1034));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 13.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v915 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                            let mut v915 = v915.into_context_iter();
                            while let Some(v916) = v915.next(ctx) {
                                let v917 = C::iconst_sextend_etor(ctx, v916);
                                if let Some(v918) = v917 {
                                    match v918.1 {
                                        -0x1 => {
                                            let v1032 = constructor_iconst_s(ctx, v918.0, 0x0);
                                            let v1036 = constructor_slt(ctx, v2.0, v256.0, v1032);
                                            // Rule at src\opts\icmp.isle line 171.
                                            returns.extend(Some(v1036));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        0x0 => {
                                            let mut v593 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v256.0, &mut v593);
                                            let mut v593 = v593.into_context_iter();
                                            while let Some(v594) = v593.next(ctx) {
                                                if v594.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v1240,
                                                        args: ref v1241,
                                                    } = &v594.1 {
                                                        if let &Opcode::Isub = v1240 {
                                                            let v1242 = C::unpack_value_array_2(ctx, v1241);
                                                            let mut v1245 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v1242.0, &mut v1245);
                                                            let mut v1245 = v1245.into_context_iter();
                                                            while let Some(v1246) = v1245.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v1249,
                                                                    args: ref v1250,
                                                                    cond: ref v1251,
                                                                } = &v1246.1 {
                                                                    if let &Opcode::Icmp = v1249 {
                                                                        match v1251 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::SignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1269 = constructor_sle(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 162.
                                                                                                            returns.extend(Some(v1269));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v1255 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1242.1, &mut v1255);
                                                                                let mut v1255 = v1255.into_context_iter();
                                                                                while let Some(v1256) = v1255.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1259,
                                                                                        args: ref v1260,
                                                                                        cond: ref v1261,
                                                                                    } = &v1256.1 {
                                                                                        if let &Opcode::Icmp = v1259 {
                                                                                            if let &IntCC::UnsignedLessThan = v1261 {
                                                                                                if v1246.0 == v1256.0 {
                                                                                                    let v1252 = C::unpack_value_array_2(ctx, v1250);
                                                                                                    let v1262 = C::unpack_value_array_2(ctx, v1260);
                                                                                                    if v1252.0 == v1262.0 {
                                                                                                        if v1252.1 == v1262.1 {
                                                                                                            let v1270 = constructor_ule(ctx, v1246.0, v1252.0, v1252.1);
                                                                                                            // Rule at src\opts\spaceship.isle line 164.
                                                                                                            returns.extend(Some(v1270));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1001 = C::ty_int(ctx, v527);
                                if let Some(v1002) = v1001 {
                                    let mut v259 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                let v1011 = C::ty_smin(ctx, v260.0);
                                                let v1012 = C::u64_eq(ctx, v265, v1011);
                                                if v1012 == true {
                                                    let v1005 = constructor_eq(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 111.
                                                    returns.extend(Some(v1005));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1013 = C::ty_smax(ctx, v260.0);
                                                let v1014 = C::u64_eq(ctx, v265, v1013);
                                                if v1014 == true {
                                                    let v1007 = constructor_iconst_u(ctx, v1002, 0x1);
                                                    let v1008 = C::subsume(ctx, v1007);
                                                    // Rule at src\opts\icmp.isle line 131.
                                                    returns.extend(Some(v1008));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v954 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v955 = C::subsume(ctx, v954);
                                    // Rule at src\opts\icmp.isle line 14.
                                    returns.extend(Some(v955));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1001 = C::ty_int(ctx, v527);
                                if let Some(v1002) = v1001 {
                                    let v256 = C::unpack_value_array_2(ctx, v254);
                                    let mut v259 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                if v265 == 0x0 {
                                                    let v1006 = constructor_ne(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 78.
                                                    returns.extend(Some(v1006));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1009 = C::ty_umax(ctx, v260.0);
                                                let v1010 = C::u64_eq(ctx, v265, v1009);
                                                if v1010 == true {
                                                    let v1003 = constructor_iconst_u(ctx, v1002, 0x0);
                                                    let v1004 = C::subsume(ctx, v1003);
                                                    // Rule at src\opts\icmp.isle line 96.
                                                    returns.extend(Some(v1004));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v256 = C::unpack_value_array_2(ctx, v254);
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 7.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0 => {
                                                let v526 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v527) = v526 {
                                                    let v1001 = C::ty_int(ctx, v527);
                                                    if let Some(v1002) = v1001 {
                                                        let v1007 = constructor_iconst_u(ctx, v1002, 0x1);
                                                        let v1008 = C::subsume(ctx, v1007);
                                                        // Rule at src\opts\icmp.isle line 82.
                                                        returns.extend(Some(v1008));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v1029 = constructor_iconst_u(ctx, v260.0, 0x0);
                                                let v1030 = constructor_ne(ctx, v2.0, v256.0, v1029);
                                                // Rule at src\opts\icmp.isle line 156.
                                                returns.extend(Some(v1030));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1001 = C::ty_int(ctx, v527);
                                            if let Some(v1002) = v1001 {
                                                let v1009 = C::ty_umax(ctx, v260.0);
                                                let v1010 = C::u64_eq(ctx, v265, v1009);
                                                if v1010 == true {
                                                    let v1005 = constructor_eq(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 101.
                                                    returns.extend(Some(v1005));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v954 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v955 = C::subsume(ctx, v954);
                                    // Rule at src\opts\icmp.isle line 8.
                                    returns.extend(Some(v955));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v256 = C::unpack_value_array_2(ctx, v254);
                            let mut v259 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v256.1, &mut v259);
                            let mut v259 = v259.into_context_iter();
                            while let Some(v260) = v259.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v263,
                                    imm: v264,
                                } = &v260.1 {
                                    if let &Opcode::Iconst = v263 {
                                        let v265 = C::u64_from_imm64(ctx, v264);
                                        match v265 {
                                            0x0 => {
                                                let v526 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v527) = v526 {
                                                    let v1001 = C::ty_int(ctx, v527);
                                                    if let Some(v1002) = v1001 {
                                                        let v1003 = constructor_iconst_u(ctx, v1002, 0x0);
                                                        let v1004 = C::subsume(ctx, v1003);
                                                        // Rule at src\opts\icmp.isle line 70.
                                                        returns.extend(Some(v1004));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v1029 = constructor_iconst_u(ctx, v260.0, 0x0);
                                                let v1031 = constructor_eq(ctx, v2.0, v256.0, v1029);
                                                // Rule at src\opts\icmp.isle line 159.
                                                returns.extend(Some(v1031));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v1001 = C::ty_int(ctx, v527);
                                            if let Some(v1002) = v1001 {
                                                let v1009 = C::ty_umax(ctx, v260.0);
                                                let v1010 = C::u64_eq(ctx, v265, v1009);
                                                if v1010 == true {
                                                    let v1006 = constructor_ne(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 86.
                                                    returns.extend(Some(v1006));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v256.0 == v256.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src\opts\icmp.isle line 11.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v526 = C::fits_in_64(ctx, v2.0);
                            if let Some(v527) = v526 {
                                let v1001 = C::ty_int(ctx, v527);
                                if let Some(v1002) = v1001 {
                                    let v256 = C::unpack_value_array_2(ctx, v254);
                                    let mut v259 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                let v265 = C::u64_from_imm64(ctx, v264);
                                                if v265 == 0x0 {
                                                    let v1005 = constructor_eq(ctx, v1002, v256.0, v256.1);
                                                    // Rule at src\opts\icmp.isle line 74.
                                                    returns.extend(Some(v1005));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v1009 = C::ty_umax(ctx, v260.0);
                                                let v1010 = C::u64_eq(ctx, v265, v1009);
                                                if v1010 == true {
                                                    let v1007 = constructor_iconst_u(ctx, v1002, 0x1);
                                                    let v1008 = C::subsume(ctx, v1007);
                                                    // Rule at src\opts\icmp.isle line 91.
                                                    returns.extend(Some(v1008));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v256 = C::unpack_value_array_2(ctx, v254);
                                if v256.0 == v256.1 {
                                    let v954 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v955 = C::subsume(ctx, v954);
                                    // Rule at src\opts\icmp.isle line 12.
                                    returns.extend(Some(v955));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                        _ => {}
                    }
                    let v256 = C::unpack_value_array_2(ctx, v254);
                    let mut v593 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v256.0, &mut v593);
                    let mut v593 = v593.into_context_iter();
                    while let Some(v594) = v593.next(ctx) {
                        match &v594.1 {
                            &InstructionData::Unary {
                                opcode: ref v907,
                                arg: v908,
                            } => {
                                if let &Opcode::Sextend = v907 {
                                    let v925 = &C::signed_cond_code(ctx, v255);
                                    if let Some(v926) = v925 {
                                        let mut v915 = C::inst_data_tupled_etor_returns::default();
                                        C::inst_data_tupled_etor(ctx, v256.1, &mut v915);
                                        let mut v915 = v915.into_context_iter();
                                        while let Some(v916) = v915.next(ctx) {
                                            let v917 = C::iconst_sextend_etor(ctx, v916);
                                            if let Some(v918) = v917 {
                                                if v918.1 == 0x0 {
                                                    let v909 = C::value_type(ctx, v908);
                                                    let v922 = constructor_iconst_s(ctx, v909, 0x0);
                                                    let v927 = constructor_icmp(ctx, v909, v255, v908, v922);
                                                    // Rule at src\opts\extends.isle line 44.
                                                    returns.extend(Some(v927));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::UnaryImm {
                                opcode: ref v597,
                                imm: v598,
                            } => {
                                if let &Opcode::Iconst = v597 {
                                    let mut v259 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v256.1, &mut v259);
                                    let mut v259 = v259.into_context_iter();
                                    while let Some(v260) = v259.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v263,
                                            imm: v264,
                                        } = &v260.1 {
                                            if let &Opcode::Iconst = v263 {
                                                if v260.0 == v594.0 {
                                                    let v599 = C::imm64_icmp(ctx, v594.0, v255, v598, v264);
                                                    let v600 = constructor_iconst(ctx, v2.0, v599);
                                                    let v601 = C::subsume(ctx, v600);
                                                    // Rule at src\opts\cprop.isle line 83.
                                                    returns.extend(Some(v601));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                    let v609 = &C::intcc_swap_args(ctx, v255);
                                    let v610 = constructor_icmp(ctx, v2.0, v609, v256.1, v256.0);
                                    // Rule at src\opts\cprop.isle line 117.
                                    returns.extend(Some(v610));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                            _ => {}
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v84,
                args: ref v85,
            } => {
                match v84 {
                    &Opcode::Select => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            match &v91.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v1044,
                                    args: ref v1045,
                                    cond: ref v1046,
                                } => {
                                    if let &Opcode::Icmp = v1044 {
                                        match v1046 {
                                            &IntCC::Equal => {
                                                let mut v1053 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v1053);
                                                let mut v1053 = v1053.into_context_iter();
                                                while let Some(v1054) = v1053.next(ctx) {
                                                    if let &InstructionData::Ternary {
                                                        opcode: ref v1198,
                                                        args: ref v1199,
                                                    } = &v1054.1 {
                                                        if let &Opcode::Select = v1198 {
                                                            if v2.0 == v1054.0 {
                                                                let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                                let mut v1065 = v1065.into_context_iter();
                                                                while let Some(v1066) = v1065.next(ctx) {
                                                                    let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                                    if let Some(v1068) = v1067 {
                                                                        if v1068.1 == 0x0 {
                                                                            if v2.0 == v1068.0 {
                                                                                let v1200 = C::unpack_value_array_3(ctx, v1199);
                                                                                let mut v1204 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v1200.0, &mut v1204);
                                                                                let mut v1204 = v1204.into_context_iter();
                                                                                while let Some(v1205) = v1204.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v1208,
                                                                                        args: ref v1209,
                                                                                        cond: ref v1210,
                                                                                    } = &v1205.1 {
                                                                                        if let &Opcode::Icmp = v1208 {
                                                                                            match v1210 {
                                                                                                &IntCC::SignedGreaterThan => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == 0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == -0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 104.
                                                                                                                                                returns.extend(Some(v1239));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedGreaterThanOrEqual => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == 0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == -0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 111.
                                                                                                                                                returns.extend(Some(v1239));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedLessThan => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == -0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == 0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 90.
                                                                                                                                                returns.extend(Some(v1239));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedLessThanOrEqual => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == -0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == 0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 97.
                                                                                                                                                returns.extend(Some(v1239));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == 0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == -0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 39.
                                                                                                                                                returns.extend(Some(v1197));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedGreaterThanOrEqual => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == 0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == -0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 46.
                                                                                                                                                returns.extend(Some(v1197));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedLessThan => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == -0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == 0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 25.
                                                                                                                                                returns.extend(Some(v1197));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedLessThanOrEqual => {
                                                                                                    if v91.0 == v1205.0 {
                                                                                                        let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                        let v1211 = C::unpack_value_array_2(ctx, v1209);
                                                                                                        if v1047.0 == v1211.0 {
                                                                                                            if v1047.1 == v1211.1 {
                                                                                                                let mut v1214 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v1200.1, &mut v1214);
                                                                                                                let mut v1214 = v1214.into_context_iter();
                                                                                                                while let Some(v1215) = v1214.next(ctx) {
                                                                                                                    let v1216 = C::iconst_sextend_etor(ctx, v1215);
                                                                                                                    if let Some(v1217) = v1216 {
                                                                                                                        if v1217.1 == -0x1 {
                                                                                                                            if v2.0 == v1217.0 {
                                                                                                                                let mut v1220 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v1200.2, &mut v1220);
                                                                                                                                let mut v1220 = v1220.into_context_iter();
                                                                                                                                while let Some(v1221) = v1220.next(ctx) {
                                                                                                                                    let v1222 = C::iconst_sextend_etor(ctx, v1221);
                                                                                                                                    if let Some(v1223) = v1222 {
                                                                                                                                        if v1223.1 == 0x1 {
                                                                                                                                            if v2.0 == v1223.0 {
                                                                                                                                                let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                                                let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                                                // Rule at src\opts\spaceship.isle line 32.
                                                                                                                                                returns.extend(Some(v1197));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                _ => {}
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThan => {
                                                let mut v1053 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v1053);
                                                let mut v1053 = v1053.into_context_iter();
                                                while let Some(v1054) = v1053.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v1226,
                                                        arg: v1227,
                                                    } = &v1054.1 {
                                                        match v1226 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v1054.0 {
                                                                    let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                                    let mut v1065 = v1065.into_context_iter();
                                                                    while let Some(v1066) = v1065.next(ctx) {
                                                                        let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                                        if let Some(v1068) = v1067 {
                                                                            if v1068.1 == 0x1 {
                                                                                if v2.0 == v1068.0 {
                                                                                    let mut v1228 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1227, &mut v1228);
                                                                                    let mut v1228 = v1228.into_context_iter();
                                                                                    while let Some(v1229) = v1228.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1232,
                                                                                            args: ref v1233,
                                                                                            cond: ref v1234,
                                                                                        } = &v1229.1 {
                                                                                            if let &Opcode::Icmp = v1232 {
                                                                                                match v1234 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                    // Rule at src\opts\spaceship.isle line 130.
                                                                                                                    returns.extend(Some(v1239));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                    // Rule at src\opts\spaceship.isle line 120.
                                                                                                                    returns.extend(Some(v1239));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v1054.0 {
                                                                    let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                                    let mut v1065 = v1065.into_context_iter();
                                                                    while let Some(v1066) = v1065.next(ctx) {
                                                                        let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                                        if let Some(v1068) = v1067 {
                                                                            if v1068.1 == 0x1 {
                                                                                if v2.0 == v1068.0 {
                                                                                    let mut v1228 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1227, &mut v1228);
                                                                                    let mut v1228 = v1228.into_context_iter();
                                                                                    while let Some(v1229) = v1228.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1232,
                                                                                            args: ref v1233,
                                                                                            cond: ref v1234,
                                                                                        } = &v1229.1 {
                                                                                            if let &Opcode::Icmp = v1232 {
                                                                                                match v1234 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                    // Rule at src\opts\spaceship.isle line 134.
                                                                                                                    returns.extend(Some(v1239));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                                    // Rule at src\opts\spaceship.isle line 124.
                                                                                                                    returns.extend(Some(v1239));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 26.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.2 == v1047.0 {
                                                    if v86.1 == v1047.1 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 40.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 27.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 41.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                let mut v1065 = v1065.into_context_iter();
                                                while let Some(v1066) = v1065.next(ctx) {
                                                    let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                    if let Some(v1068) = v1067 {
                                                        if v1068.1 == -0x1 {
                                                            if v2.0 == v1068.0 {
                                                                let mut v1182 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(ctx, v86.2, &mut v1182);
                                                                let mut v1182 = v1182.into_context_iter();
                                                                while let Some(v1183) = v1182.next(ctx) {
                                                                    if v2.0 == v1183.0 {
                                                                        let mut v1186 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v1183.1, &mut v1186);
                                                                        let mut v1186 = v1186.into_context_iter();
                                                                        while let Some(v1187) = v1186.next(ctx) {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v1190,
                                                                                args: ref v1191,
                                                                                cond: ref v1192,
                                                                            } = &v1187.1 {
                                                                                if let &Opcode::Icmp = v1190 {
                                                                                    match v1192 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v1187.0 {
                                                                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                let v1193 = C::unpack_value_array_2(ctx, v1191);
                                                                                                if v1047.0 == v1193.0 {
                                                                                                    if v1047.1 == v1193.1 {
                                                                                                        let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                        let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                        // Rule at src\opts\spaceship.isle line 78.
                                                                                                        returns.extend(Some(v1239));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::SignedGreaterThan => {
                                                                                            if v91.0 == v1187.0 {
                                                                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                let v1193 = C::unpack_value_array_2(ctx, v1191);
                                                                                                if v1047.0 == v1193.0 {
                                                                                                    if v1047.1 == v1193.1 {
                                                                                                        let v1238 = constructor_spaceship_s(ctx, v91.0, v1047.0, v1047.1);
                                                                                                        let v1239 = constructor_sextend_maybe(ctx, v2.0, v1238);
                                                                                                        // Rule at src\opts\spaceship.isle line 84.
                                                                                                        returns.extend(Some(v1239));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 30.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 36.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 31.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 37.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let mut v1053 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v1053);
                                                let mut v1053 = v1053.into_context_iter();
                                                while let Some(v1054) = v1053.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v1226,
                                                        arg: v1227,
                                                    } = &v1054.1 {
                                                        match v1226 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v1054.0 {
                                                                    let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                                    let mut v1065 = v1065.into_context_iter();
                                                                    while let Some(v1066) = v1065.next(ctx) {
                                                                        let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                                        if let Some(v1068) = v1067 {
                                                                            if v1068.1 == 0x1 {
                                                                                if v2.0 == v1068.0 {
                                                                                    let mut v1228 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1227, &mut v1228);
                                                                                    let mut v1228 = v1228.into_context_iter();
                                                                                    while let Some(v1229) = v1228.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1232,
                                                                                            args: ref v1233,
                                                                                            cond: ref v1234,
                                                                                        } = &v1229.1 {
                                                                                            if let &Opcode::Icmp = v1232 {
                                                                                                match v1234 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                    // Rule at src\opts\spaceship.isle line 65.
                                                                                                                    returns.extend(Some(v1197));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                    // Rule at src\opts\spaceship.isle line 55.
                                                                                                                    returns.extend(Some(v1197));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v1054.0 {
                                                                    let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                                    let mut v1065 = v1065.into_context_iter();
                                                                    while let Some(v1066) = v1065.next(ctx) {
                                                                        let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                                        if let Some(v1068) = v1067 {
                                                                            if v1068.1 == 0x1 {
                                                                                if v2.0 == v1068.0 {
                                                                                    let mut v1228 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v1227, &mut v1228);
                                                                                    let mut v1228 = v1228.into_context_iter();
                                                                                    while let Some(v1229) = v1228.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v1232,
                                                                                            args: ref v1233,
                                                                                            cond: ref v1234,
                                                                                        } = &v1229.1 {
                                                                                            if let &Opcode::Icmp = v1232 {
                                                                                                match v1234 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                    // Rule at src\opts\spaceship.isle line 69.
                                                                                                                    returns.extend(Some(v1197));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v1229.0 {
                                                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                            let v1235 = C::unpack_value_array_2(ctx, v1233);
                                                                                                            if v1047.0 == v1235.0 {
                                                                                                                if v1047.1 == v1235.1 {
                                                                                                                    let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                                    let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                                    // Rule at src\opts\spaceship.isle line 59.
                                                                                                                    returns.extend(Some(v1197));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 28.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.2 == v1047.0 {
                                                    if v86.1 == v1047.1 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 42.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 29.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 43.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                                let mut v1065 = v1065.into_context_iter();
                                                while let Some(v1066) = v1065.next(ctx) {
                                                    let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                                    if let Some(v1068) = v1067 {
                                                        if v1068.1 == -0x1 {
                                                            if v2.0 == v1068.0 {
                                                                let mut v1182 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(ctx, v86.2, &mut v1182);
                                                                let mut v1182 = v1182.into_context_iter();
                                                                while let Some(v1183) = v1182.next(ctx) {
                                                                    if v2.0 == v1183.0 {
                                                                        let mut v1186 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(ctx, v1183.1, &mut v1186);
                                                                        let mut v1186 = v1186.into_context_iter();
                                                                        while let Some(v1187) = v1186.next(ctx) {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v1190,
                                                                                args: ref v1191,
                                                                                cond: ref v1192,
                                                                            } = &v1187.1 {
                                                                                if let &Opcode::Icmp = v1190 {
                                                                                    match v1192 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v1187.0 {
                                                                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                let v1193 = C::unpack_value_array_2(ctx, v1191);
                                                                                                if v1047.0 == v1193.0 {
                                                                                                    if v1047.1 == v1193.1 {
                                                                                                        let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                        let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                        // Rule at src\opts\spaceship.isle line 13.
                                                                                                        returns.extend(Some(v1197));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::UnsignedGreaterThan => {
                                                                                            if v91.0 == v1187.0 {
                                                                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                                                let v1193 = C::unpack_value_array_2(ctx, v1191);
                                                                                                if v1047.0 == v1193.0 {
                                                                                                    if v1047.1 == v1193.1 {
                                                                                                        let v1196 = constructor_spaceship_u(ctx, v91.0, v1047.0, v1047.1);
                                                                                                        let v1197 = constructor_sextend_maybe(ctx, v2.0, v1196);
                                                                                                        // Rule at src\opts\spaceship.isle line 19.
                                                                                                        returns.extend(Some(v1197));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 32.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 38.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 33.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 39.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v96 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1050,
                                                imm: v1051,
                                            } = &v97.1 {
                                                if let &Opcode::Iconst = v1050 {
                                                    let v1052 = C::u64_from_imm64(ctx, v1051);
                                                    match v1052 {
                                                        0x0 => {
                                                            let mut v1053 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v86.2, &mut v1053);
                                                            let mut v1053 = v1053.into_context_iter();
                                                            while let Some(v1054) = v1053.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v1057,
                                                                    imm: v1058,
                                                                } = &v1054.1 {
                                                                    if let &Opcode::Iconst = v1057 {
                                                                        let v1059 = C::u64_from_imm64(ctx, v1058);
                                                                        let v1060 = C::u64_is_zero(ctx, v1059);
                                                                        if v1060 == false {
                                                                            let v1061 = &C::intcc_complement(ctx, v1046);
                                                                            let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                                            let v1062 = constructor_icmp(ctx, v91.0, v1061, v1047.0, v1047.1);
                                                                            let v1063 = constructor_select(ctx, v2.0, v1062, v86.2, v86.1);
                                                                            // Rule at src\opts\selects.isle line 9.
                                                                            returns.extend(Some(v1063));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        0x1 => {
                                                            let mut v1053 = C::inst_data_etor_returns::default();
                                                            C::inst_data_etor(ctx, v86.2, &mut v1053);
                                                            let mut v1053 = v1053.into_context_iter();
                                                            while let Some(v1054) = v1053.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v1057,
                                                                    imm: v1058,
                                                                } = &v1054.1 {
                                                                    if let &Opcode::Iconst = v1057 {
                                                                        let v1059 = C::u64_from_imm64(ctx, v1058);
                                                                        if v1059 == 0x0 {
                                                                            let v1064 = constructor_uextend_maybe(ctx, v2.0, v86.0);
                                                                            // Rule at src\opts\selects.isle line 15.
                                                                            returns.extend(Some(v1064));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        let mut v1065 = C::inst_data_tupled_etor_returns::default();
                                        C::inst_data_tupled_etor(ctx, v86.1, &mut v1065);
                                        let mut v1065 = v1065.into_context_iter();
                                        while let Some(v1066) = v1065.next(ctx) {
                                            let v1067 = C::iconst_sextend_etor(ctx, v1066);
                                            if let Some(v1068) = v1067 {
                                                if v1068.1 == -0x1 {
                                                    let mut v1071 = C::inst_data_tupled_etor_returns::default();
                                                    C::inst_data_tupled_etor(ctx, v86.2, &mut v1071);
                                                    let mut v1071 = v1071.into_context_iter();
                                                    while let Some(v1072) = v1071.next(ctx) {
                                                        let v1073 = C::iconst_sextend_etor(ctx, v1072);
                                                        if let Some(v1074) = v1073 {
                                                            if v1074.1 == 0x0 {
                                                                let v1077 = constructor_bmask(ctx, v2.0, v86.0);
                                                                // Rule at src\opts\selects.isle line 20.
                                                                returns.extend(Some(v1077));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v94,
                                    arg: v95,
                                } => {
                                    if let &Opcode::Uextend = v94 {
                                        let mut v974 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v95, &mut v974);
                                        let mut v974 = v974.into_context_iter();
                                        while let Some(v975) = v974.next(ctx) {
                                            if let &InstructionData::IntCompare {
                                                opcode: ref v978,
                                                args: ref v979,
                                                cond: ref v980,
                                            } = &v975.1 {
                                                if let &Opcode::Icmp = v978 {
                                                    let v984 = constructor_select(ctx, v2.0, v95, v86.1, v86.2);
                                                    // Rule at src\opts\icmp.isle line 47.
                                                    returns.extend(Some(v984));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    // Rule at src\opts\icmp.isle line 50.
                                                    returns.extend(Some(v984));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v641,
                                    imm: v642,
                                } => {
                                    if let &Opcode::Iconst = v641 {
                                        let v643 = C::u64_from_imm64(ctx, v642);
                                        if v643 == 0x0 {
                                            let v646 = C::subsume(ctx, v86.2);
                                            // Rule at src\opts\cprop.isle line 172.
                                            returns.extend(Some(v646));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        let v644 = C::u64_is_zero(ctx, v643);
                                        if v644 == false {
                                            let v645 = C::subsume(ctx, v86.1);
                                            // Rule at src\opts\cprop.isle line 170.
                                            returns.extend(Some(v645));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v86.1 == v86.2 {
                            // Rule at src\opts\selects.isle line 4.
                            returns.extend(Some(v86.1));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                        let mut v250 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v86.0, &mut v250);
                        let mut v250 = v250.into_context_iter();
                        while let Some(v251) = v250.next(ctx) {
                            let v252 = constructor_select(ctx, v2.0, v251, v86.1, v86.2);
                            // Rule at src\opts\bitops.isle line 118.
                            returns.extend(Some(v252));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::SelectSpectreGuard => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v641,
                                imm: v642,
                            } = &v91.1 {
                                if let &Opcode::Iconst = v641 {
                                    let v643 = C::u64_from_imm64(ctx, v642);
                                    if v643 == 0x0 {
                                        let v646 = C::subsume(ctx, v86.2);
                                        // Rule at src\opts\spectre.isle line 13.
                                        returns.extend(Some(v646));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    let v644 = C::u64_is_zero(ctx, v643);
                                    if v644 == false {
                                        let v645 = C::subsume(ctx, v86.1);
                                        // Rule at src\opts\spectre.isle line 11.
                                        returns.extend(Some(v645));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                        if v86.1 == v86.2 {
                            let v645 = C::subsume(ctx, v86.1);
                            // Rule at src\opts\spectre.isle line 9.
                            returns.extend(Some(v645));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Bitselect => {
                        let v1082 = C::multi_lane(ctx, v2.0);
                        if let Some(v1083) = v1082 {
                            let v86 = C::unpack_value_array_3(ctx, v85);
                            let mut v90 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v86.0, &mut v90);
                            let mut v90 = v90.into_context_iter();
                            while let Some(v91) = v90.next(ctx) {
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1044,
                                    args: ref v1045,
                                    cond: ref v1046,
                                } = &v91.1 {
                                    if let &Opcode::Icmp = v1044 {
                                        match v1046 {
                                            &IntCC::SignedGreaterThan => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 46.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 60.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 47.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 61.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 50.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 56.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1080 = constructor_smin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 51.
                                                        returns.extend(Some(v1080));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1078 = constructor_smax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 57.
                                                        returns.extend(Some(v1078));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 48.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 62.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 49.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 63.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 52.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 58.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v1047 = C::unpack_value_array_2(ctx, v1045);
                                                if v86.1 == v1047.0 {
                                                    if v86.2 == v1047.1 {
                                                        let v1081 = constructor_umin(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 53.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                                if v86.1 == v1047.1 {
                                                    if v86.2 == v1047.0 {
                                                        let v1079 = constructor_umax(ctx, v2.0, v1047.0, v1047.1);
                                                        // Rule at src\opts\selects.isle line 59.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                        }
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        if v86.1 == v86.2 {
                            // Rule at src\opts\selects.isle line 5.
                            returns.extend(Some(v86.1));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Fma => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v94,
                                arg: v95,
                            } = &v91.1 {
                                if let &Opcode::Fneg = v94 {
                                    if v2.0 == v91.0 {
                                        let mut v96 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v100,
                                                arg: v101,
                                            } = &v97.1 {
                                                if let &Opcode::Fneg = v100 {
                                                    if v2.0 == v97.0 {
                                                        let v102 = constructor_fma(ctx, v2.0, v95, v101, v86.2);
                                                        // Rule at src\opts\arithmetic.isle line 109.
                                                        returns.extend(Some(v102));
                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v32,
                arg: v33,
            } => {
                match v32 {
                    &Opcode::Splat => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v669,
                                    imm: v670,
                                } => {
                                    if let &Opcode::F32const = v669 {
                                        let v671 = C::u32_from_ieee32(ctx, v670);
                                        let v672 = C::u32_as_u64(ctx, v671);
                                        let v673 = constructor_splat32(ctx, v672);
                                        let v674 = constructor_vconst(ctx, v2.0, v673);
                                        // Rule at src\opts\cprop.isle line 195.
                                        returns.extend(Some(v674));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v675,
                                    imm: v676,
                                } => {
                                    if let &Opcode::F64const = v675 {
                                        let v677 = C::u64_from_ieee64(ctx, v676);
                                        let v678 = C::splat64(ctx, v677);
                                        let v679 = constructor_vconst(ctx, v2.0, v678);
                                        // Rule at src\opts\cprop.isle line 197.
                                        returns.extend(Some(v679));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v562,
                                    imm: v563,
                                } => {
                                    if let &Opcode::Iconst = v562 {
                                        match v35.0 {
                                            I8 => {
                                                let v654 = C::u64_uextend_imm64(ctx, I8, v563);
                                                let v655 = constructor_splat8(ctx, v654);
                                                let v656 = constructor_vconst(ctx, v2.0, v655);
                                                // Rule at src\opts\cprop.isle line 187.
                                                returns.extend(Some(v656));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I16 => {
                                                let v658 = C::u64_uextend_imm64(ctx, I16, v563);
                                                let v659 = constructor_splat16(ctx, v658);
                                                let v660 = constructor_vconst(ctx, v2.0, v659);
                                                // Rule at src\opts\cprop.isle line 189.
                                                returns.extend(Some(v660));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I32 => {
                                                let v662 = C::u64_uextend_imm64(ctx, I32, v563);
                                                let v663 = constructor_splat32(ctx, v662);
                                                let v664 = constructor_vconst(ctx, v2.0, v663);
                                                // Rule at src\opts\cprop.isle line 191.
                                                returns.extend(Some(v664));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I64 => {
                                                let v666 = C::u64_uextend_imm64(ctx, I64, v563);
                                                let v667 = C::splat64(ctx, v666);
                                                let v668 = constructor_vconst(ctx, v2.0, v667);
                                                // Rule at src\opts\cprop.isle line 193.
                                                returns.extend(Some(v668));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ineg => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v43 = constructor_isub(ctx, v2.0, v40.1, v40.0);
                                                // Rule at src\opts\arithmetic.isle line 28.
                                                returns.extend(Some(v43));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v1125 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v40.1, &mut v1125);
                                                let mut v1125 = v1125.into_context_iter();
                                                while let Some(v1126) = v1125.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v1129,
                                                        imm: v1130,
                                                    } = &v1126.1 {
                                                        if let &Opcode::Iconst = v1129 {
                                                            let v1131 = C::u64_from_imm64(ctx, v1130);
                                                            let v235 = constructor_ty_shift_mask(ctx, v2.0);
                                                            let v1132 = C::u64_eq(ctx, v1131, v235);
                                                            if v1132 == true {
                                                                if v2.0 == v1126.0 {
                                                                    let v1133 = constructor_sshr(ctx, v2.0, v40.0, v40.1);
                                                                    // Rule at src\opts\shifts.isle line 99.
                                                                    returns.extend(Some(v1133));
                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            if v2.0 == v35.0 {
                                                let v1149 = C::lane_type(ctx, v2.0);
                                                let v1299 = constructor_ineg(ctx, v1149, v46);
                                                let v1300 = constructor_splat(ctx, v2.0, v1299);
                                                // Rule at src\opts\vector.isle line 46.
                                                returns.extend(Some(v1300));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\arithmetic.isle line 35.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Iabs => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                match v45 {
                                    &Opcode::Splat => {
                                        if v2.0 == v35.0 {
                                            let v1149 = C::lane_type(ctx, v2.0);
                                            let v1301 = constructor_iabs(ctx, v1149, v46);
                                            let v1302 = constructor_splat(ctx, v2.0, v1301);
                                            // Rule at src\opts\vector.isle line 49.
                                            returns.extend(Some(v1302));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    &Opcode::Ineg => {
                                        if v2.0 == v35.0 {
                                            let v50 = constructor_iabs(ctx, v2.0, v46);
                                            // Rule at src\opts\arithmetic.isle line 42.
                                            returns.extend(Some(v50));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    &Opcode::Iabs => {
                                        if v2.0 == v35.0 {
                                            let v51 = C::subsume(ctx, v33);
                                            // Rule at src\opts\arithmetic.isle line 46.
                                            returns.extend(Some(v51));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::Bnot => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 = C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == -0x1 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(ctx, v2.0, v40.0);
                                                                // Rule at src\opts\arithmetic.isle line 75.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 = C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == 0x1 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(ctx, v2.0, v40.0);
                                                                // Rule at src\opts\arithmetic.isle line 73.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v220 = constructor_bnot(ctx, v2.0, v40.0);
                                            let v221 = constructor_bnot(ctx, v2.0, v40.1);
                                            let v223 = constructor_bor(ctx, v2.0, v220, v221);
                                            // Rule at src\opts\bitops.isle line 46.
                                            returns.extend(Some(v223));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bor => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v220 = constructor_bnot(ctx, v2.0, v40.0);
                                                let v221 = constructor_bnot(ctx, v2.0, v40.1);
                                                let v222 = constructor_band(ctx, v2.0, v220, v221);
                                                // Rule at src\opts\bitops.isle line 43.
                                                returns.extend(Some(v222));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1279 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1280) = v1279 {
                                                if v2.0 == v35.0 {
                                                    let v1149 = C::lane_type(ctx, v2.0);
                                                    let v1287 = constructor_bnot(ctx, v1149, v46);
                                                    let v1288 = constructor_splat(ctx, v2.0, v1287);
                                                    // Rule at src\opts\vector.isle line 27.
                                                    returns.extend(Some(v1288));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\bitops.isle line 39.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v562,
                                    imm: v563,
                                } => {
                                    if let &Opcode::Iconst = v562 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            if v35.0 == v527 {
                                                let v564 = C::u64_from_imm64(ctx, v563);
                                                let v565 = C::u64_not(ctx, v564);
                                                let v566 = C::imm64_masked(ctx, v527, v565);
                                                let v567 = constructor_iconst(ctx, v527, v566);
                                                let v568 = C::subsume(ctx, v567);
                                                // Rule at src\opts\cprop.isle line 53.
                                                returns.extend(Some(v568));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v1037 = C::remat(ctx, arg0);
                        // Rule at src\opts\remat.isle line 24.
                        returns.extend(Some(v1037));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bitrev => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Bitrev = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src\opts\bitops.isle line 137.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bswap => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Bswap = v45 {
                                        if v2.0 == v35.0 {
                                            let v47 = C::subsume(ctx, v46);
                                            // Rule at src\opts\bitops.isle line 134.
                                            returns.extend(Some(v47));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v562,
                                    imm: v563,
                                } => {
                                    if let &Opcode::Iconst = v562 {
                                        match v2.0 {
                                            I16 => {
                                                let v564 = C::u64_from_imm64(ctx, v563);
                                                let v713 = C::u64_bswap16(ctx, v564);
                                                let v714 = C::imm64(ctx, v713);
                                                let v715 = constructor_iconst(ctx, I16, v714);
                                                let v716 = C::subsume(ctx, v715);
                                                // Rule at src\opts\cprop.isle line 267.
                                                returns.extend(Some(v716));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I32 => {
                                                let v564 = C::u64_from_imm64(ctx, v563);
                                                let v717 = C::u64_bswap32(ctx, v564);
                                                let v718 = C::imm64(ctx, v717);
                                                let v719 = constructor_iconst(ctx, I32, v718);
                                                let v720 = C::subsume(ctx, v719);
                                                // Rule at src\opts\cprop.isle line 269.
                                                returns.extend(Some(v720));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            I64 => {
                                                let v564 = C::u64_from_imm64(ctx, v563);
                                                let v721 = C::u64_bswap64(ctx, v564);
                                                let v722 = C::imm64(ctx, v721);
                                                let v723 = constructor_iconst(ctx, I64, v722);
                                                let v724 = C::subsume(ctx, v723);
                                                // Rule at src\opts\cprop.isle line 271.
                                                returns.extend(Some(v724));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Popcnt => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    if v2.0 == v35.0 {
                                        let v1149 = C::lane_type(ctx, v2.0);
                                        let v1303 = constructor_popcnt(ctx, v1149, v46);
                                        let v1304 = constructor_splat(ctx, v2.0, v1303);
                                        // Rule at src\opts\vector.isle line 52.
                                        returns.extend(Some(v1304));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sqrt => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v669,
                                            imm: v670,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v669 {
                                                let v765 = C::f32_sqrt(ctx, v670);
                                                if let Some(v766) = v765 {
                                                    let v767 = constructor_f32const(ctx, F32, v766);
                                                    let v768 = C::subsume(ctx, v767);
                                                    // Rule at src\opts\cprop.isle line 318.
                                                    returns.extend(Some(v768));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v675,
                                            imm: v676,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v675 {
                                                let v769 = C::f64_sqrt(ctx, v676);
                                                if let Some(v770) = v769 {
                                                    let v771 = constructor_f64const(ctx, F64, v770);
                                                    let v772 = C::subsume(ctx, v771);
                                                    // Rule at src\opts\cprop.isle line 321.
                                                    returns.extend(Some(v772));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Fneg => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Fneg = v45 {
                                        if v2.0 == v35.0 {
                                            let v47 = C::subsume(ctx, v46);
                                            // Rule at src\opts\arithmetic.isle line 105.
                                            returns.extend(Some(v47));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                &InstructionData::UnaryConst {
                                    opcode: ref v864,
                                    constant_handle: v865,
                                } => {
                                    if let &Opcode::F128const = v864 {
                                        if v2.0 == F128 {
                                            if v35.0 == F128 {
                                                let v866 = C::ieee128_constant_extractor(ctx, v865);
                                                if let Some(v867) = v866 {
                                                    let v868 = C::f128_neg(ctx, v867);
                                                    let v869 = C::ieee128_constant(ctx, v868);
                                                    let v870 = constructor_f128const(ctx, F128, v869);
                                                    let v871 = C::subsume(ctx, v870);
                                                    // Rule at src\opts\cprop.isle line 385.
                                                    returns.extend(Some(v871));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee16 {
                                    opcode: ref v853,
                                    imm: v854,
                                } => {
                                    if let &Opcode::F16const = v853 {
                                        if v2.0 == F16 {
                                            if v35.0 == F16 {
                                                let v855 = C::f16_neg(ctx, v854);
                                                let v856 = constructor_f16const(ctx, F16, v855);
                                                let v857 = C::subsume(ctx, v856);
                                                // Rule at src\opts\cprop.isle line 379.
                                                returns.extend(Some(v857));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v669,
                                    imm: v670,
                                } => {
                                    if let &Opcode::F32const = v669 {
                                        if v2.0 == F32 {
                                            if v35.0 == F32 {
                                                let v858 = C::f32_neg(ctx, v670);
                                                let v859 = constructor_f32const(ctx, F32, v858);
                                                let v860 = C::subsume(ctx, v859);
                                                // Rule at src\opts\cprop.isle line 381.
                                                returns.extend(Some(v860));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v675,
                                    imm: v676,
                                } => {
                                    if let &Opcode::F64const = v675 {
                                        if v2.0 == F64 {
                                            if v35.0 == F64 {
                                                let v861 = C::f64_neg(ctx, v676);
                                                let v862 = constructor_f64const(ctx, F64, v861);
                                                let v863 = C::subsume(ctx, v862);
                                                // Rule at src\opts\cprop.isle line 383.
                                                returns.extend(Some(v863));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Fabs => {
                        match v2.0 {
                            F16 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F16 {
                                        if let &InstructionData::UnaryIeee16 {
                                            opcode: ref v853,
                                            imm: v854,
                                        } = &v35.1 {
                                            if let &Opcode::F16const = v853 {
                                                let v872 = C::f16_abs(ctx, v854);
                                                let v873 = constructor_f16const(ctx, F16, v872);
                                                let v874 = C::subsume(ctx, v873);
                                                // Rule at src\opts\cprop.isle line 388.
                                                returns.extend(Some(v874));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                            }
                            F32 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v669,
                                            imm: v670,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v669 {
                                                let v875 = C::f32_abs(ctx, v670);
                                                let v876 = constructor_f32const(ctx, F32, v875);
                                                let v877 = C::subsume(ctx, v876);
                                                // Rule at src\opts\cprop.isle line 390.
                                                returns.extend(Some(v877));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v675,
                                            imm: v676,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v675 {
                                                let v878 = C::f64_abs(ctx, v676);
                                                let v879 = constructor_f64const(ctx, F64, v878);
                                                let v880 = C::subsume(ctx, v879);
                                                // Rule at src\opts\cprop.isle line 392.
                                                returns.extend(Some(v880));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                    }
                                }
                            }
                            F128 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F128 {
                                        if let &InstructionData::UnaryConst {
                                            opcode: ref v864,
                                            constant_handle: v865,
                                        } = &v35.1 {
                                            if let &Opcode::F128const = v864 {
                                                let v866 = C::ieee128_constant_extractor(ctx, v865);
                                                if let Some(v867) = v866 {
                                                    let v881 = C::f128_abs(ctx, v867);
                                                    let v882 = C::ieee128_constant(ctx, v881);
                                                    let v883 = constructor_f128const(ctx, F128, v882);
                                                    let v884 = C::subsume(ctx, v883);
                                                    // Rule at src\opts\cprop.isle line 394.
                                                    returns.extend(Some(v884));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Ceil => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v669,
                                            imm: v670,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v669 {
                                                let v773 = C::f32_ceil(ctx, v670);
                                                if let Some(v774) = v773 {
                                                    let v775 = constructor_f32const(ctx, F32, v774);
                                                    let v776 = C::subsume(ctx, v775);
                                                    // Rule at src\opts\cprop.isle line 325.
                                                    returns.extend(Some(v776));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v675,
                                            imm: v676,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v675 {
                                                let v777 = C::f64_ceil(ctx, v676);
                                                if let Some(v778) = v777 {
                                                    let v779 = constructor_f64const(ctx, F64, v778);
                                                    let v780 = C::subsume(ctx, v779);
                                                    // Rule at src\opts\cprop.isle line 328.
                                                    returns.extend(Some(v780));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Floor => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v669,
                                            imm: v670,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v669 {
                                                let v781 = C::f32_floor(ctx, v670);
                                                if let Some(v782) = v781 {
                                                    let v783 = constructor_f32const(ctx, F32, v782);
                                                    let v784 = C::subsume(ctx, v783);
                                                    // Rule at src\opts\cprop.isle line 332.
                                                    returns.extend(Some(v784));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v675,
                                            imm: v676,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v675 {
                                                let v785 = C::f64_floor(ctx, v676);
                                                if let Some(v786) = v785 {
                                                    let v787 = constructor_f64const(ctx, F64, v786);
                                                    let v788 = C::subsume(ctx, v787);
                                                    // Rule at src\opts\cprop.isle line 335.
                                                    returns.extend(Some(v788));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Trunc => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v669,
                                            imm: v670,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v669 {
                                                let v789 = C::f32_trunc(ctx, v670);
                                                if let Some(v790) = v789 {
                                                    let v791 = constructor_f32const(ctx, F32, v790);
                                                    let v792 = C::subsume(ctx, v791);
                                                    // Rule at src\opts\cprop.isle line 339.
                                                    returns.extend(Some(v792));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v675,
                                            imm: v676,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v675 {
                                                let v793 = C::f64_trunc(ctx, v676);
                                                if let Some(v794) = v793 {
                                                    let v795 = constructor_f64const(ctx, F64, v794);
                                                    let v796 = C::subsume(ctx, v795);
                                                    // Rule at src\opts\cprop.isle line 342.
                                                    returns.extend(Some(v796));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Nearest => {
                        match v2.0 {
                            F32 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F32 {
                                        if let &InstructionData::UnaryIeee32 {
                                            opcode: ref v669,
                                            imm: v670,
                                        } = &v35.1 {
                                            if let &Opcode::F32const = v669 {
                                                let v797 = C::f32_nearest(ctx, v670);
                                                if let Some(v798) = v797 {
                                                    let v799 = constructor_f32const(ctx, F32, v798);
                                                    let v800 = C::subsume(ctx, v799);
                                                    // Rule at src\opts\cprop.isle line 346.
                                                    returns.extend(Some(v800));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v34 = C::inst_data_etor_returns::default();
                                C::inst_data_etor(ctx, v33, &mut v34);
                                let mut v34 = v34.into_context_iter();
                                while let Some(v35) = v34.next(ctx) {
                                    if v35.0 == F64 {
                                        if let &InstructionData::UnaryIeee64 {
                                            opcode: ref v675,
                                            imm: v676,
                                        } = &v35.1 {
                                            if let &Opcode::F64const = v675 {
                                                let v801 = C::f64_nearest(ctx, v676);
                                                if let Some(v802) = v801 {
                                                    let v803 = constructor_f64const(ctx, F64, v802);
                                                    let v804 = C::subsume(ctx, v803);
                                                    // Rule at src\opts\cprop.isle line 349.
                                                    returns.extend(Some(v804));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    &Opcode::Bmask => {
                        if v2.0 == I8 {
                            let mut v34 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v33, &mut v34);
                            let mut v34 = v34.into_context_iter();
                            while let Some(v35) = v34.next(ctx) {
                                if v35.0 == I8 {
                                    if let &InstructionData::IntCompare {
                                        opcode: ref v239,
                                        args: ref v240,
                                        cond: ref v241,
                                    } = &v35.1 {
                                        if let &Opcode::Icmp = v239 {
                                            let v246 = constructor_ineg(ctx, I8, v33);
                                            // Rule at src\opts\bitops.isle line 95.
                                            returns.extend(Some(v246));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                            }
                        }
                        let mut v247 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v33, &mut v247);
                        let mut v247 = v247.into_context_iter();
                        while let Some(v248) = v247.next(ctx) {
                            let v249 = constructor_bmask(ctx, v2.0, v248);
                            // Rule at src\opts\bitops.isle line 117.
                            returns.extend(Some(v249));
                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                        }
                    }
                    &Opcode::Ireduce => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v946 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v947 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v948 = constructor_iadd(ctx, v2.0, v946, v947);
                                            // Rule at src\opts\extends.isle line 86.
                                            returns.extend(Some(v948));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Isub => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v946 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v947 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v949 = constructor_isub(ctx, v2.0, v946, v947);
                                            // Rule at src\opts\extends.isle line 87.
                                            returns.extend(Some(v949));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Imul => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v946 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v947 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v950 = constructor_imul(ctx, v2.0, v946, v947);
                                            // Rule at src\opts\extends.isle line 88.
                                            returns.extend(Some(v950));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v946 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v947 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v953 = constructor_band(ctx, v2.0, v946, v947);
                                            // Rule at src\opts\extends.isle line 91.
                                            returns.extend(Some(v953));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v946 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v947 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v951 = constructor_bor(ctx, v2.0, v946, v947);
                                            // Rule at src\opts\extends.isle line 89.
                                            returns.extend(Some(v951));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bxor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v946 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v947 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v952 = constructor_bxor(ctx, v2.0, v946, v947);
                                            // Rule at src\opts\extends.isle line 90.
                                            returns.extend(Some(v952));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Ineg => {
                                            let v943 = constructor_ireduce(ctx, v2.0, v46);
                                            let v944 = constructor_ineg(ctx, v2.0, v943);
                                            // Rule at src\opts\extends.isle line 83.
                                            returns.extend(Some(v944));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bnot => {
                                            let v943 = constructor_ireduce(ctx, v2.0, v46);
                                            let v945 = constructor_bnot(ctx, v2.0, v943);
                                            // Rule at src\opts\extends.isle line 84.
                                            returns.extend(Some(v945));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Bmask => {
                                            let v273 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src\opts\bitops.isle line 131.
                                            returns.extend(Some(v273));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Uextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v929 = C::ty_bits_u64(ctx, v53);
                                                let v928 = C::value_type(ctx, v46);
                                                let v930 = C::ty_bits_u64(ctx, v928);
                                                let v931 = C::u64_lt(ctx, v929, v930);
                                                if v931 == true {
                                                    let v932 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 58.
                                                    returns.extend(Some(v932));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v933 = C::u64_lt(ctx, v930, v929);
                                                if v933 == true {
                                                    let v935 = constructor_uextend(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 65.
                                                    returns.extend(Some(v935));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            let v928 = C::value_type(ctx, v46);
                                            if v2.0 == v928 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\extends.isle line 51.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v929 = C::ty_bits_u64(ctx, v53);
                                                let v928 = C::value_type(ctx, v46);
                                                let v930 = C::ty_bits_u64(ctx, v928);
                                                let v931 = C::u64_lt(ctx, v929, v930);
                                                if v931 == true {
                                                    let v932 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 55.
                                                    returns.extend(Some(v932));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                                let v933 = C::u64_lt(ctx, v930, v929);
                                                if v933 == true {
                                                    let v934 = constructor_sextend(ctx, v53, v46);
                                                    // Rule at src\opts\extends.isle line 62.
                                                    returns.extend(Some(v934));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                            let v928 = C::value_type(ctx, v46);
                                            if v2.0 == v928 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src\opts\extends.isle line 50.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v562,
                                    imm: v563,
                                } => {
                                    if let &Opcode::Iconst = v562 {
                                        let v578 = C::fits_in_64(ctx, v35.0);
                                        if let Some(v579) = v578 {
                                            let v564 = C::u64_from_imm64(ctx, v563);
                                            let v580 = C::imm64_masked(ctx, v2.0, v564);
                                            let v581 = constructor_iconst(ctx, v2.0, v580);
                                            let v582 = C::subsume(ctx, v581);
                                            // Rule at src\opts\cprop.isle line 73.
                                            returns.extend(Some(v582));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::SwidenLow => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1149 = C::lane_type(ctx, v2.0);
                                    let v1323 = constructor_sextend(ctx, v1149, v46);
                                    let v1324 = constructor_splat(ctx, v2.0, v1323);
                                    // Rule at src\opts\vector.isle line 86.
                                    returns.extend(Some(v1324));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::SwidenHigh => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1149 = C::lane_type(ctx, v2.0);
                                    let v1323 = constructor_sextend(ctx, v1149, v46);
                                    let v1324 = constructor_splat(ctx, v2.0, v1323);
                                    // Rule at src\opts\vector.isle line 85.
                                    returns.extend(Some(v1324));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenLow => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1149 = C::lane_type(ctx, v2.0);
                                    let v1325 = constructor_uextend(ctx, v1149, v46);
                                    let v1326 = constructor_splat(ctx, v2.0, v1325);
                                    // Rule at src\opts\vector.isle line 89.
                                    returns.extend(Some(v1326));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenHigh => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                if let &Opcode::Splat = v45 {
                                    let v1149 = C::lane_type(ctx, v2.0);
                                    let v1325 = constructor_uextend(ctx, v1149, v46);
                                    let v1326 = constructor_splat(ctx, v2.0, v1325);
                                    // Rule at src\opts\vector.isle line 88.
                                    returns.extend(Some(v1326));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::Uextend => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Uextend = v45 {
                                        let v898 = constructor_uextend(ctx, v2.0, v46);
                                        // Rule at src\opts\extends.isle line 2.
                                        returns.extend(Some(v898));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v562,
                                    imm: v563,
                                } => {
                                    if let &Opcode::Iconst = v562 {
                                        let v526 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v527) = v526 {
                                            let v564 = C::u64_from_imm64(ctx, v563);
                                            let v583 = constructor_iconst_u(ctx, v527, v564);
                                            let v584 = C::subsume(ctx, v583);
                                            // Rule at src\opts\cprop.isle line 78.
                                            returns.extend(Some(v584));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Sextend => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v239,
                                    args: ref v240,
                                    cond: ref v241,
                                } => {
                                    if let &Opcode::Icmp = v239 {
                                        let v900 = constructor_uextend(ctx, v2.0, v33);
                                        // Rule at src\opts\extends.isle line 12.
                                        returns.extend(Some(v900));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Bmask => {
                                            let v273 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src\opts\bitops.isle line 130.
                                            returns.extend(Some(v273));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Uextend => {
                                            let v898 = constructor_uextend(ctx, v2.0, v46);
                                            // Rule at src\opts\extends.isle line 8.
                                            returns.extend(Some(v898));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Sextend => {
                                            let v899 = constructor_sextend(ctx, v2.0, v46);
                                            // Rule at src\opts\extends.isle line 4.
                                            returns.extend(Some(v899));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v526 = C::fits_in_64(ctx, v2.0);
                        if let Some(v527) = v526 {
                            let mut v585 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v33, &mut v585);
                            let mut v585 = v585.into_context_iter();
                            while let Some(v586) = v585.next(ctx) {
                                let v587 = C::iconst_sextend_etor(ctx, v586);
                                if let Some(v588) = v587 {
                                    let v591 = constructor_iconst_s(ctx, v527, v588.1);
                                    let v592 = C::subsume(ctx, v591);
                                    // Rule at src\opts\cprop.isle line 80.
                                    returns.extend(Some(v592));
                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromUint => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1149 = C::lane_type(ctx, v2.0);
                                            let v1275 = constructor_fcvt_from_uint(ctx, v1149, v46);
                                            let v1276 = constructor_splat(ctx, v2.0, v1275);
                                            // Rule at src\opts\vector.isle line 7.
                                            returns.extend(Some(v1276));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        &Opcode::Uextend => {
                                            let v215 = constructor_fcvt_from_uint(ctx, v2.0, v46);
                                            // Rule at src\opts\arithmetic.isle line 237.
                                            returns.extend(Some(v215));
                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v562,
                                    imm: v563,
                                } => {
                                    if let &Opcode::Iconst = v562 {
                                        match v2.0 {
                                            F32 => {
                                                let v564 = C::u64_from_imm64(ctx, v563);
                                                let v704 = C::f32_from_uint(ctx, v564);
                                                let v705 = constructor_f32const(ctx, F32, v704);
                                                // Rule at src\opts\cprop.isle line 248.
                                                returns.extend(Some(v705));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            F64 => {
                                                let v564 = C::u64_from_imm64(ctx, v563);
                                                let v707 = C::f64_from_uint(ctx, v564);
                                                let v708 = constructor_f64const(ctx, F64, v707);
                                                // Rule at src\opts\cprop.isle line 250.
                                                returns.extend(Some(v708));
                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        match v2.0 {
                            F32 => {
                                let mut v585 = C::inst_data_tupled_etor_returns::default();
                                C::inst_data_tupled_etor(ctx, v33, &mut v585);
                                let mut v585 = v585.into_context_iter();
                                while let Some(v586) = v585.next(ctx) {
                                    let v587 = C::iconst_sextend_etor(ctx, v586);
                                    if let Some(v588) = v587 {
                                        let v709 = C::f32_from_sint(ctx, v588.1);
                                        let v710 = constructor_f32const(ctx, F32, v709);
                                        // Rule at src\opts\cprop.isle line 252.
                                        returns.extend(Some(v710));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                            F64 => {
                                let mut v585 = C::inst_data_tupled_etor_returns::default();
                                C::inst_data_tupled_etor(ctx, v33, &mut v585);
                                let mut v585 = v585.into_context_iter();
                                while let Some(v586) = v585.next(ctx) {
                                    let v587 = C::iconst_sextend_etor(ctx, v586);
                                    if let Some(v588) = v587 {
                                        let v711 = C::f64_from_sint(ctx, v588.1);
                                        let v712 = constructor_f64const(ctx, F64, v711);
                                        // Rule at src\opts\cprop.isle line 254.
                                        returns.extend(Some(v712));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1 {
                                match v45 {
                                    &Opcode::Splat => {
                                        let v1149 = C::lane_type(ctx, v2.0);
                                        let v1277 = constructor_fcvt_from_sint(ctx, v1149, v46);
                                        let v1278 = constructor_splat(ctx, v2.0, v1277);
                                        // Rule at src\opts\vector.isle line 9.
                                        returns.extend(Some(v1278));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    &Opcode::Sextend => {
                                        let v216 = constructor_fcvt_from_sint(ctx, v2.0, v46);
                                        // Rule at src\opts\arithmetic.isle line 239.
                                        returns.extend(Some(v216));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryIeee32 {
                opcode: ref v1040,
                imm: v1041,
            } => {
                if let &Opcode::F32const = v1040 {
                    let v1037 = C::remat(ctx, arg0);
                    // Rule at src\opts\remat.isle line 28.
                    returns.extend(Some(v1037));
                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                }
            }
            &InstructionData::UnaryIeee64 {
                opcode: ref v1042,
                imm: v1043,
            } => {
                if let &Opcode::F64const = v1042 {
                    let v1037 = C::remat(ctx, arg0);
                    // Rule at src\opts\remat.isle line 30.
                    returns.extend(Some(v1037));
                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v1038,
                imm: v1039,
            } => {
                if let &Opcode::Iconst = v1038 {
                    let v1037 = C::remat(ctx, arg0);
                    // Rule at src\opts\remat.isle line 26.
                    returns.extend(Some(v1037));
                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                }
            }
            _ => {}
        }
    }
}

// Generated as internal constructor for term iconst_s.
pub fn constructor_iconst_s<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i64,
) -> Value {
    if arg0 == I128 {
        let v12 = constructor_iconst_s(ctx, I64, arg1);
        let v13 = constructor_sextend(ctx, I128, v12);
        // Rule at src\prelude_opt.isle line 83.
        return v13;
    }
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = C::ty_umax(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::i64_sextend_u64(ctx, arg0, v4);
    let v6 = C::i64_as_u64(ctx, v5);
    let v7 = C::u64_eq(ctx, v2, v6);
    if v7 == true {
        let v8 = C::imm64(ctx, v4);
        let v9 = constructor_iconst(ctx, arg0, v8);
        // Rule at src\prelude_opt.isle line 78.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "iconst_s", "src\\prelude_opt.isle line 76")
}

// Generated as internal constructor for term iconst_u.
pub fn constructor_iconst_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Value {
    if arg0 == I128 {
        let v8 = constructor_iconst_u(ctx, I64, arg1);
        let v9 = constructor_uextend(ctx, I128, v8);
        // Rule at src\prelude_opt.isle line 96.
        return v9;
    }
    let v2 = C::ty_umax(ctx, arg0);
    let v3 = C::u64_le(ctx, arg1, v2);
    if v3 == true {
        let v4 = C::imm64(ctx, arg1);
        let v5 = constructor_iconst(ctx, arg0, v4);
        // Rule at src\prelude_opt.isle line 93.
        return v5;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "iconst_u", "src\\prelude_opt.isle line 91")
}

// Generated as internal constructor for term uextend_maybe.
pub fn constructor_uextend_maybe<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src\prelude_opt.isle line 116.
        return arg1;
    }
    let v2 = constructor_uextend(ctx, arg0, arg1);
    // Rule at src\prelude_opt.isle line 115.
    return v2;
}

// Generated as internal constructor for term sextend_maybe.
pub fn constructor_sextend_maybe<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src\prelude_opt.isle line 122.
        return arg1;
    }
    let v2 = constructor_sextend(ctx, arg0, arg1);
    // Rule at src\prelude_opt.isle line 121.
    return v2;
}

// Generated as internal constructor for term truthy.
pub fn constructor_truthy<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v7,
                args: ref v8,
            } => {
                match v7 {
                    &Opcode::Rotl => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src\opts\bitops.isle line 109.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Rotr => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src\opts\bitops.isle line 110.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v33,
                args: ref v34,
                cond: ref v35,
            } => {
                if let &Opcode::Icmp = v33 {
                    if let &IntCC::NotEqual = v35 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let mut v39 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v36.1, &mut v39);
                        let mut v39 = v39.into_context_iter();
                        while let Some(v40) = v39.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v43,
                                imm: v44,
                            } = &v40.1 {
                                if let &Opcode::Iconst = v43 {
                                    let v45 = C::u64_from_imm64(ctx, v44);
                                    if v45 == 0x0 {
                                        // Rule at src\opts\bitops.isle line 113.
                                        returns.extend(Some(v36.0));
                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v12,
                args: ref v13,
            } => {
                if let &Opcode::Select = v12 {
                    let v14 = C::unpack_value_array_3(ctx, v13);
                    let mut v18 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v14.1, &mut v18);
                    let mut v18 = v18.into_context_iter();
                    while let Some(v19) = v18.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v22,
                            imm: v23,
                        } = &v19.1 {
                            if let &Opcode::Iconst = v22 {
                                let v24 = C::u64_from_imm64(ctx, v23);
                                let v25 = C::u64_is_zero(ctx, v24);
                                if v25 == false {
                                    let mut v26 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v14.2, &mut v26);
                                    let mut v26 = v26.into_context_iter();
                                    while let Some(v27) = v26.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v30,
                                            imm: v31,
                                        } = &v27.1 {
                                            if let &Opcode::Iconst = v30 {
                                                let v32 = C::u64_from_imm64(ctx, v31);
                                                if v32 == 0x0 {
                                                    // Rule at src\opts\bitops.isle line 111.
                                                    returns.extend(Some(v14.0));
                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Unary {
                opcode: ref v5,
                arg: v6,
            } => {
                match v5 {
                    &Opcode::Ineg => {
                        // Rule at src\opts\bitops.isle line 105.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src\opts\bitops.isle line 107.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bswap => {
                        // Rule at src\opts\bitops.isle line 106.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Popcnt => {
                        // Rule at src\opts\bitops.isle line 108.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Bmask => {
                        // Rule at src\opts\bitops.isle line 104.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Uextend => {
                        // Rule at src\opts\bitops.isle line 103.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    &Opcode::Sextend => {
                        // Rule at src\opts\bitops.isle line 102.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
}

// Generated as internal constructor for term splat8.
pub fn constructor_splat8<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x8);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat16(ctx, v3);
    // Rule at src\opts\cprop.isle line 201.
    return v4;
}

// Generated as internal constructor for term splat16.
pub fn constructor_splat16<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x10);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat32(ctx, v3);
    // Rule at src\opts\cprop.isle line 203.
    return v4;
}

// Generated as internal constructor for term splat32.
pub fn constructor_splat32<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x20);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = C::splat64(ctx, v3);
    // Rule at src\opts\cprop.isle line 205.
    return v4;
}

// Generated as internal constructor for term intcc_comparable.
pub fn constructor_intcc_comparable<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: &IntCC,
) -> Option<bool> {
    let v2 = constructor_intcc_class(ctx, arg0);
    let v3 = constructor_intcc_class(ctx, arg1);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::u64_is_zero(ctx, v4);
    if v5 == false {
        let v7 = C::u64_eq(ctx, 0x2, v4);
        let v8 = Some(v7);
        // Rule at src\opts\icmp.isle line 175.
        return v8;
    }
    None
}

// Generated as internal constructor for term decompose_intcc.
pub fn constructor_decompose_intcc<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src\opts\icmp.isle line 180.
            return 0x1;
        }
        &IntCC::NotEqual => {
            // Rule at src\opts\icmp.isle line 189.
            return 0x6;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 186.
            return 0x4;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 188.
            return 0x5;
        }
        &IntCC::SignedLessThan => {
            // Rule at src\opts\icmp.isle line 182.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 184.
            return 0x3;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 185.
            return 0x4;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 187.
            return 0x5;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src\opts\icmp.isle line 181.
            return 0x2;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 183.
            return 0x3;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "decompose_intcc", "src\\opts\\icmp.isle line 179")
}

// Generated as internal constructor for term compose_icmp.
pub fn constructor_compose_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> Value {
    match arg1 {
        0x0 => {
            let v6 = constructor_iconst_u(ctx, arg0, 0x0);
            let v7 = C::subsume(ctx, v6);
            // Rule at src\opts\icmp.isle line 192.
            return v7;
        }
        0x1 => {
            let v9 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg3, arg4);
            // Rule at src\opts\icmp.isle line 193.
            return v9;
        }
        0x2 => {
            match arg2 {
                true => {
                    let v13 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 195.
                    return v13;
                }
                false => {
                    let v11 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 194.
                    return v11;
                }
                _ => {}
            }
        }
        0x3 => {
            match arg2 {
                true => {
                    let v17 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 197.
                    return v17;
                }
                false => {
                    let v15 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 196.
                    return v15;
                }
                _ => {}
            }
        }
        0x4 => {
            match arg2 {
                true => {
                    let v21 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 199.
                    return v21;
                }
                false => {
                    let v19 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 198.
                    return v19;
                }
                _ => {}
            }
        }
        0x5 => {
            match arg2 {
                true => {
                    let v25 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 201.
                    return v25;
                }
                false => {
                    let v23 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src\opts\icmp.isle line 200.
                    return v23;
                }
                _ => {}
            }
        }
        0x6 => {
            let v27 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg3, arg4);
            // Rule at src\opts\icmp.isle line 202.
            return v27;
        }
        0x7 => {
            let v29 = constructor_iconst_u(ctx, arg0, 0x1);
            let v30 = C::subsume(ctx, v29);
            // Rule at src\opts\icmp.isle line 203.
            return v30;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "compose_icmp", "src\\opts\\icmp.isle line 191")
}

// Generated as internal constructor for term intcc_class.
pub fn constructor_intcc_class<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src\opts\icmp.isle line 214.
            return 0x3;
        }
        &IntCC::NotEqual => {
            // Rule at src\opts\icmp.isle line 215.
            return 0x3;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 212.
            return 0x2;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 213.
            return 0x2;
        }
        &IntCC::SignedLessThan => {
            // Rule at src\opts\icmp.isle line 210.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 211.
            return 0x2;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src\opts\icmp.isle line 208.
            return 0x1;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src\opts\icmp.isle line 209.
            return 0x1;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src\opts\icmp.isle line 206.
            return 0x1;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src\opts\icmp.isle line 207.
            return 0x1;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "intcc_class", "src\\opts\\icmp.isle line 205")
}

// Generated as internal constructor for term shift_amt_to_type.
pub fn constructor_shift_amt_to_type<C: Context>(
    ctx: &mut C,
    arg0: u64,
) -> Option<Type> {
    match arg0 {
        0x8 => {
            let v2 = Some(I8);
            // Rule at src\opts\shifts.isle line 94.
            return v2;
        }
        0x10 => {
            let v4 = Some(I16);
            // Rule at src\opts\shifts.isle line 95.
            return v4;
        }
        0x20 => {
            let v6 = Some(I32);
            // Rule at src\opts\shifts.isle line 96.
            return v6;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd_uextend.
pub fn constructor_iadd_uextend<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_iadd(ctx, v1, arg0, v11);
        // Rule at src\opts\shifts.isle line 215.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_iadd(ctx, v3, v8, arg1);
        // Rule at src\opts\shifts.isle line 212.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_iadd(ctx, v1, arg0, arg1);
        // Rule at src\opts\shifts.isle line 210.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "iadd_uextend", "src\\opts\\shifts.isle line 209")
}

// Generated as internal constructor for term isub_uextend.
pub fn constructor_isub_uextend<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_isub(ctx, v1, arg0, v11);
        // Rule at src\opts\shifts.isle line 227.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_isub(ctx, v3, v8, arg1);
        // Rule at src\opts\shifts.isle line 224.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_isub(ctx, v1, arg0, arg1);
        // Rule at src\opts\shifts.isle line 222.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "isub_uextend", "src\\opts\\shifts.isle line 221")
}

// Generated as internal constructor for term func_addr.
pub fn constructor_func_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FuncRef,
) -> Value {
    let v3 = InstructionData::FuncAddr {
        opcode: Opcode::FuncAddr,
        func_ref: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 361.
    return v4;
}

// Generated as internal constructor for term splat.
pub fn constructor_splat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Splat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 370.
    return v4;
}

// Generated as internal constructor for term swizzle.
pub fn constructor_swizzle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Swizzle,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 379.
    return v6;
}

// Generated as internal constructor for term x86_pshufb.
pub fn constructor_x86_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pshufb,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 388.
    return v6;
}

// Generated as internal constructor for term insertlane.
pub fn constructor_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Uimm8,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::TernaryImm8 {
        opcode: Opcode::Insertlane,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 397.
    return v7;
}

// Generated as internal constructor for term extractlane.
pub fn constructor_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::Extractlane,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 406.
    return v5;
}

// Generated as internal constructor for term smin.
pub fn constructor_smin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 415.
    return v6;
}

// Generated as internal constructor for term umin.
pub fn constructor_umin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 424.
    return v6;
}

// Generated as internal constructor for term smax.
pub fn constructor_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 433.
    return v6;
}

// Generated as internal constructor for term umax.
pub fn constructor_umax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 442.
    return v6;
}

// Generated as internal constructor for term avg_round.
pub fn constructor_avg_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::AvgRound,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 451.
    return v6;
}

// Generated as internal constructor for term uadd_sat.
pub fn constructor_uadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 460.
    return v6;
}

// Generated as internal constructor for term sadd_sat.
pub fn constructor_sadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 469.
    return v6;
}

// Generated as internal constructor for term usub_sat.
pub fn constructor_usub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 478.
    return v6;
}

// Generated as internal constructor for term ssub_sat.
pub fn constructor_ssub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 487.
    return v6;
}

// Generated as internal constructor for term load.
pub fn constructor_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Load,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 496.
    return v6;
}

// Generated as internal constructor for term uload8.
pub fn constructor_uload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 505.
    return v6;
}

// Generated as internal constructor for term sload8.
pub fn constructor_sload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 514.
    return v6;
}

// Generated as internal constructor for term uload16.
pub fn constructor_uload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 523.
    return v6;
}

// Generated as internal constructor for term sload16.
pub fn constructor_sload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 532.
    return v6;
}

// Generated as internal constructor for term uload32.
pub fn constructor_uload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 541.
    return v6;
}

// Generated as internal constructor for term sload32.
pub fn constructor_sload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 550.
    return v6;
}

// Generated as internal constructor for term uload8x8.
pub fn constructor_uload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 559.
    return v6;
}

// Generated as internal constructor for term sload8x8.
pub fn constructor_sload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 568.
    return v6;
}

// Generated as internal constructor for term uload16x4.
pub fn constructor_uload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 577.
    return v6;
}

// Generated as internal constructor for term sload16x4.
pub fn constructor_sload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 586.
    return v6;
}

// Generated as internal constructor for term uload32x2.
pub fn constructor_uload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 595.
    return v6;
}

// Generated as internal constructor for term sload32x2.
pub fn constructor_sload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 604.
    return v6;
}

// Generated as internal constructor for term stack_load.
pub fn constructor_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackLoad,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 613.
    return v5;
}

// Generated as internal constructor for term stack_addr.
pub fn constructor_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackAddr,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 622.
    return v5;
}

// Generated as internal constructor for term dynamic_stack_load.
pub fn constructor_dynamic_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackLoad,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 631.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_addr.
pub fn constructor_dynamic_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackAddr,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 640.
    return v4;
}

// Generated as internal constructor for term global_value.
pub fn constructor_global_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: GlobalValue,
) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::GlobalValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 649.
    return v4;
}

// Generated as internal constructor for term symbol_value.
pub fn constructor_symbol_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: GlobalValue,
) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::SymbolValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 658.
    return v4;
}

// Generated as internal constructor for term tls_value.
pub fn constructor_tls_value<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: GlobalValue,
) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::TlsValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 667.
    return v4;
}

// Generated as internal constructor for term get_pinned_reg.
pub fn constructor_get_pinned_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetPinnedReg,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 676.
    return v3;
}

// Generated as internal constructor for term get_frame_pointer.
pub fn constructor_get_frame_pointer<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetFramePointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 685.
    return v3;
}

// Generated as internal constructor for term get_stack_pointer.
pub fn constructor_get_stack_pointer<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetStackPointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 694.
    return v3;
}

// Generated as internal constructor for term get_return_address.
pub fn constructor_get_return_address<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetReturnAddress,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 703.
    return v3;
}

// Generated as internal constructor for term iconst.
pub fn constructor_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Imm64,
) -> Value {
    let v3 = InstructionData::UnaryImm {
        opcode: Opcode::Iconst,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 712.
    return v4;
}

// Generated as internal constructor for term f16const.
pub fn constructor_f16const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Ieee16,
) -> Value {
    let v3 = InstructionData::UnaryIeee16 {
        opcode: Opcode::F16const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 721.
    return v4;
}

// Generated as internal constructor for term f32const.
pub fn constructor_f32const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Ieee32,
) -> Value {
    let v3 = InstructionData::UnaryIeee32 {
        opcode: Opcode::F32const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 730.
    return v4;
}

// Generated as internal constructor for term f64const.
pub fn constructor_f64const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Ieee64,
) -> Value {
    let v3 = InstructionData::UnaryIeee64 {
        opcode: Opcode::F64const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 739.
    return v4;
}

// Generated as internal constructor for term f128const.
pub fn constructor_f128const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Constant,
) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::F128const,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 748.
    return v4;
}

// Generated as internal constructor for term vconst.
pub fn constructor_vconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Constant,
) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::Vconst,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 757.
    return v4;
}

// Generated as internal constructor for term shuffle.
pub fn constructor_shuffle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Immediate,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Shuffle {
        opcode: Opcode::Shuffle,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 766.
    return v7;
}

// Generated as internal constructor for term null.
pub fn constructor_null<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::Null,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 775.
    return v3;
}

// Generated as internal constructor for term select.
pub fn constructor_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Select,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 784.
    return v7;
}

// Generated as internal constructor for term select_spectre_guard.
pub fn constructor_select_spectre_guard<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::SelectSpectreGuard,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 793.
    return v7;
}

// Generated as internal constructor for term bitselect.
pub fn constructor_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Bitselect,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 802.
    return v7;
}

// Generated as internal constructor for term x86_blendv.
pub fn constructor_x86_blendv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::X86Blendv,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 811.
    return v7;
}

// Generated as internal constructor for term vany_true.
pub fn constructor_vany_true<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VanyTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 820.
    return v4;
}

// Generated as internal constructor for term vall_true.
pub fn constructor_vall_true<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VallTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 829.
    return v4;
}

// Generated as internal constructor for term vhigh_bits.
pub fn constructor_vhigh_bits<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VhighBits,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 838.
    return v4;
}

// Generated as internal constructor for term icmp.
pub fn constructor_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::IntCompare {
        opcode: Opcode::Icmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 847.
    return v7;
}

// Generated as internal constructor for term icmp_imm.
pub fn constructor_icmp_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Imm64,
) -> Value {
    let v5 = InstructionData::IntCompareImm {
        opcode: Opcode::IcmpImm,
        arg: arg2,
        cond: arg1.clone(),
        imm: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 856.
    return v6;
}

// Generated as internal constructor for term iadd.
pub fn constructor_iadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 865.
    return v6;
}

// Generated as internal constructor for term isub.
pub fn constructor_isub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Isub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 874.
    return v6;
}

// Generated as internal constructor for term ineg.
pub fn constructor_ineg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ineg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 883.
    return v4;
}

// Generated as internal constructor for term iabs.
pub fn constructor_iabs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Iabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 892.
    return v4;
}

// Generated as internal constructor for term imul.
pub fn constructor_imul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Imul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 901.
    return v6;
}

// Generated as internal constructor for term umulhi.
pub fn constructor_umulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 910.
    return v6;
}

// Generated as internal constructor for term smulhi.
pub fn constructor_smulhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 919.
    return v6;
}

// Generated as internal constructor for term sqmul_round_sat.
pub fn constructor_sqmul_round_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SqmulRoundSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 928.
    return v6;
}

// Generated as internal constructor for term x86_pmulhrsw.
pub fn constructor_x86_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmulhrsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 937.
    return v6;
}

// Generated as internal constructor for term udiv.
pub fn constructor_udiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Udiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 946.
    return v6;
}

// Generated as internal constructor for term sdiv.
pub fn constructor_sdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 955.
    return v6;
}

// Generated as internal constructor for term urem.
pub fn constructor_urem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Urem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 964.
    return v6;
}

// Generated as internal constructor for term srem.
pub fn constructor_srem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Srem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 973.
    return v6;
}

// Generated as internal constructor for term iadd_imm.
pub fn constructor_iadd_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IaddImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 982.
    return v5;
}

// Generated as internal constructor for term imul_imm.
pub fn constructor_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::ImulImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 991.
    return v5;
}

// Generated as internal constructor for term udiv_imm.
pub fn constructor_udiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1000.
    return v5;
}

// Generated as internal constructor for term sdiv_imm.
pub fn constructor_sdiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1009.
    return v5;
}

// Generated as internal constructor for term urem_imm.
pub fn constructor_urem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1018.
    return v5;
}

// Generated as internal constructor for term srem_imm.
pub fn constructor_srem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1027.
    return v5;
}

// Generated as internal constructor for term irsub_imm.
pub fn constructor_irsub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IrsubImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1036.
    return v5;
}

// Generated as internal constructor for term iadd_cin.
pub fn constructor_iadd_cin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IaddCin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1045.
    return v7;
}

// Generated as internal constructor for term uadd_overflow_trap.
pub fn constructor_uadd_overflow_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &TrapCode,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::IntAddTrap {
        opcode: Opcode::UaddOverflowTrap,
        args: v5.clone(),
        code: arg3.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1054.
    return v7;
}

// Generated as internal constructor for term isub_bin.
pub fn constructor_isub_bin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IsubBin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1063.
    return v7;
}

// Generated as internal constructor for term band.
pub fn constructor_band<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Band,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1072.
    return v6;
}

// Generated as internal constructor for term bor.
pub fn constructor_bor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1081.
    return v6;
}

// Generated as internal constructor for term bxor.
pub fn constructor_bxor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bxor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1090.
    return v6;
}

// Generated as internal constructor for term bnot.
pub fn constructor_bnot<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bnot,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1099.
    return v4;
}

// Generated as internal constructor for term band_not.
pub fn constructor_band_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BandNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1108.
    return v6;
}

// Generated as internal constructor for term bor_not.
pub fn constructor_bor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1117.
    return v6;
}

// Generated as internal constructor for term bxor_not.
pub fn constructor_bxor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BxorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1126.
    return v6;
}

// Generated as internal constructor for term band_imm.
pub fn constructor_band_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BandImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1135.
    return v5;
}

// Generated as internal constructor for term bor_imm.
pub fn constructor_bor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1144.
    return v5;
}

// Generated as internal constructor for term bxor_imm.
pub fn constructor_bxor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BxorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1153.
    return v5;
}

// Generated as internal constructor for term rotl.
pub fn constructor_rotl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1162.
    return v6;
}

// Generated as internal constructor for term rotr.
pub fn constructor_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1171.
    return v6;
}

// Generated as internal constructor for term rotl_imm.
pub fn constructor_rotl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1180.
    return v5;
}

// Generated as internal constructor for term rotr_imm.
pub fn constructor_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1189.
    return v5;
}

// Generated as internal constructor for term ishl.
pub fn constructor_ishl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ishl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1198.
    return v6;
}

// Generated as internal constructor for term ushr.
pub fn constructor_ushr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ushr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1207.
    return v6;
}

// Generated as internal constructor for term sshr.
pub fn constructor_sshr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sshr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1216.
    return v6;
}

// Generated as internal constructor for term ishl_imm.
pub fn constructor_ishl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IshlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1225.
    return v5;
}

// Generated as internal constructor for term ushr_imm.
pub fn constructor_ushr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1234.
    return v5;
}

// Generated as internal constructor for term sshr_imm.
pub fn constructor_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1243.
    return v5;
}

// Generated as internal constructor for term bitrev.
pub fn constructor_bitrev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bitrev,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1252.
    return v4;
}

// Generated as internal constructor for term clz.
pub fn constructor_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Clz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1261.
    return v4;
}

// Generated as internal constructor for term cls.
pub fn constructor_cls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Cls,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1270.
    return v4;
}

// Generated as internal constructor for term ctz.
pub fn constructor_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ctz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1279.
    return v4;
}

// Generated as internal constructor for term bswap.
pub fn constructor_bswap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bswap,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1288.
    return v4;
}

// Generated as internal constructor for term popcnt.
pub fn constructor_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Popcnt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1297.
    return v4;
}

// Generated as internal constructor for term fcmp.
pub fn constructor_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::FloatCompare {
        opcode: Opcode::Fcmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1306.
    return v7;
}

// Generated as internal constructor for term fadd.
pub fn constructor_fadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1315.
    return v6;
}

// Generated as internal constructor for term fsub.
pub fn constructor_fsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fsub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1324.
    return v6;
}

// Generated as internal constructor for term fmul.
pub fn constructor_fmul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1333.
    return v6;
}

// Generated as internal constructor for term fdiv.
pub fn constructor_fdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1342.
    return v6;
}

// Generated as internal constructor for term sqrt.
pub fn constructor_sqrt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sqrt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1351.
    return v4;
}

// Generated as internal constructor for term fma.
pub fn constructor_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Fma,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1360.
    return v7;
}

// Generated as internal constructor for term fneg.
pub fn constructor_fneg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fneg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1369.
    return v4;
}

// Generated as internal constructor for term fabs.
pub fn constructor_fabs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1378.
    return v4;
}

// Generated as internal constructor for term fcopysign.
pub fn constructor_fcopysign<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fcopysign,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1387.
    return v6;
}

// Generated as internal constructor for term fmin.
pub fn constructor_fmin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1396.
    return v6;
}

// Generated as internal constructor for term fmax.
pub fn constructor_fmax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1405.
    return v6;
}

// Generated as internal constructor for term ceil.
pub fn constructor_ceil<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ceil,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1414.
    return v4;
}

// Generated as internal constructor for term floor.
pub fn constructor_floor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Floor,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1423.
    return v4;
}

// Generated as internal constructor for term trunc.
pub fn constructor_trunc<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Trunc,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1432.
    return v4;
}

// Generated as internal constructor for term nearest.
pub fn constructor_nearest<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Nearest,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1441.
    return v4;
}

// Generated as internal constructor for term is_null.
pub fn constructor_is_null<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsNull,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1450.
    return v4;
}

// Generated as internal constructor for term is_invalid.
pub fn constructor_is_invalid<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsInvalid,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1459.
    return v4;
}

// Generated as internal constructor for term bitcast.
pub fn constructor_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::Bitcast,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1468.
    return v5;
}

// Generated as internal constructor for term scalar_to_vector.
pub fn constructor_scalar_to_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::ScalarToVector,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1477.
    return v4;
}

// Generated as internal constructor for term bmask.
pub fn constructor_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bmask,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1486.
    return v4;
}

// Generated as internal constructor for term ireduce.
pub fn constructor_ireduce<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ireduce,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1495.
    return v4;
}

// Generated as internal constructor for term snarrow.
pub fn constructor_snarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Snarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1504.
    return v6;
}

// Generated as internal constructor for term unarrow.
pub fn constructor_unarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Unarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1513.
    return v6;
}

// Generated as internal constructor for term uunarrow.
pub fn constructor_uunarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Uunarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1522.
    return v6;
}

// Generated as internal constructor for term swiden_low.
pub fn constructor_swiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1531.
    return v4;
}

// Generated as internal constructor for term swiden_high.
pub fn constructor_swiden_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1540.
    return v4;
}

// Generated as internal constructor for term uwiden_low.
pub fn constructor_uwiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1549.
    return v4;
}

// Generated as internal constructor for term uwiden_high.
pub fn constructor_uwiden_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1558.
    return v4;
}

// Generated as internal constructor for term iadd_pairwise.
pub fn constructor_iadd_pairwise<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::IaddPairwise,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1567.
    return v6;
}

// Generated as internal constructor for term x86_pmaddubsw.
pub fn constructor_x86_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmaddubsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1576.
    return v6;
}

// Generated as internal constructor for term uextend.
pub fn constructor_uextend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Uextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1585.
    return v4;
}

// Generated as internal constructor for term sextend.
pub fn constructor_sextend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1594.
    return v4;
}

// Generated as internal constructor for term fpromote.
pub fn constructor_fpromote<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fpromote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1603.
    return v4;
}

// Generated as internal constructor for term fdemote.
pub fn constructor_fdemote<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1612.
    return v4;
}

// Generated as internal constructor for term fvdemote.
pub fn constructor_fvdemote<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fvdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1621.
    return v4;
}

// Generated as internal constructor for term fvpromote_low.
pub fn constructor_fvpromote_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FvpromoteLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1630.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint.
pub fn constructor_fcvt_to_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1639.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint.
pub fn constructor_fcvt_to_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1648.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint_sat.
pub fn constructor_fcvt_to_uint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1657.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint_sat.
pub fn constructor_fcvt_to_sint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1666.
    return v4;
}

// Generated as internal constructor for term x86_cvtt2dq.
pub fn constructor_x86_cvtt2dq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::X86Cvtt2dq,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1675.
    return v4;
}

// Generated as internal constructor for term fcvt_from_uint.
pub fn constructor_fcvt_from_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1684.
    return v4;
}

// Generated as internal constructor for term fcvt_from_sint.
pub fn constructor_fcvt_from_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1693.
    return v4;
}

// Generated as internal constructor for term iconcat.
pub fn constructor_iconcat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iconcat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1702.
    return v6;
}

// Generated as internal constructor for term atomic_rmw.
pub fn constructor_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: &AtomicRmwOp,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_2_ctor(ctx, arg3, arg4);
    let v7 = InstructionData::AtomicRmw {
        opcode: Opcode::AtomicRmw,
        args: v6.clone(),
        flags: arg1,
        op: arg2.clone(),
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1711.
    return v8;
}

// Generated as internal constructor for term atomic_cas.
pub fn constructor_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_3_ctor(ctx, arg2, arg3, arg4);
    let v7 = InstructionData::AtomicCas {
        opcode: Opcode::AtomicCas,
        args: v6.clone(),
        flags: arg1,
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1720.
    return v8;
}

// Generated as internal constructor for term atomic_load.
pub fn constructor_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::AtomicLoad,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1729.
    return v5;
}

// Generated as internal constructor for term extract_vector.
pub fn constructor_extract_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::ExtractVector,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_opt.isle line 1738.
    return v5;
}
