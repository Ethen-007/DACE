// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\s390x\inst.isle
// - src\isa\s390x\lower.isle
// - D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self) -> LaneOrder;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_truncate_to_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn zero_offset(&mut self) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self) -> MemArg;
    fn memarg_offset(&mut self, arg0: &MemArg, arg1: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_frame_pointer_offset(&mut self) -> MemArg;
    fn memarg_return_address_offset(&mut self) -> MemArg;
    fn memarg_pair_from_memarg(&mut self, arg0: &MemArg) -> Option<MemArgPair>;
    fn memarg_pair_from_reg(&mut self, arg0: Reg, arg1: MemFlags) -> MemArgPair;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self) -> PReg;
    fn preg_gpr_0(&mut self) -> PReg;
    fn args_builder_new(&mut self) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn defs_init(&mut self, arg0: Sig) -> CallRetList;
    fn defs_lookup(&mut self, arg0: &CallRetList, arg1: RealReg) -> Reg;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_first_ret(&mut self, arg0: SigRef, arg1: Sig) -> usize;
    fn abi_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
        arg3: &CallRetList,
    ) -> BoxCallInfo;
    fn abi_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
        arg3: &CallRetList,
    ) -> BoxCallIndInfo;
    fn abi_return_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
    ) -> BoxReturnCallInfo;
    fn abi_return_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
    ) -> BoxReturnCallIndInfo;
    fn abi_call_stack_args(&mut self, arg0: Sig) -> MemArg;
    fn abi_call_stack_rets(&mut self, arg0: Sig) -> MemArg;
    fn abi_return_call_stack_args(&mut self, arg0: Sig) -> MemArg;
    fn abi_lane_order(&mut self, arg0: Sig) -> LaneOrder;
    fn lib_call_info_memcpy(&mut self, arg0: Reg, arg1: Reg, arg2: Reg) -> LibCallInfo;
    fn lib_call_info_tls_get_offset(
        &mut self,
        arg0: WritableReg,
        arg1: Reg,
        arg2: Reg,
        arg3: &SymbolReloc,
    ) -> LibCallInfo;
    fn lib_call_info(&mut self, arg0: &LibCallInfo) -> BoxCallInfo;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src\prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 354.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 396.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 415.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 423.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\s390x\inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    Mvc {
        dst: MemArgPair,
        src: MemArgPair,
        len_minus_one: u8,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    AllocateArgs {
        size: u32,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    CallInd {
        link: WritableReg,
        info: BoxCallIndInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        info: BoxReturnCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        link: Reg,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    OneWayCondBr {
        target: MachLabel,
        cond: Cond,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        targets: BoxVecMachLabel,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
}

/// Internal type SymbolReloc: defined at src\isa\s390x\inst.isle line 1029.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute { name: ExternalName, offset: i64 },
    TlsGd { name: ExternalName },
}

/// Internal type ALUOp: defined at src\isa\s390x\inst.isle line 1046.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src\isa\s390x\inst.isle line 1093.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src\isa\s390x\inst.isle line 1108.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src\isa\s390x\inst.isle line 1121.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src\isa\s390x\inst.isle line 1130.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src\isa\s390x\inst.isle line 1145.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src\isa\s390x\inst.isle line 1247.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src\isa\s390x\inst.isle line 1288.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src\isa\s390x\inst.isle line 1309.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src\isa\s390x\inst.isle line 1326.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src\isa\s390x\inst.isle line 1337.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src\isa\s390x\inst.isle line 1360.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src\isa\s390x\inst.isle line 1397.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src\isa\s390x\inst.isle line 1410.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src\isa\s390x\inst.isle line 1437.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src\isa\s390x\inst.isle line 1478.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src\isa\s390x\inst.isle line 3357.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool { producer: ProducesFlags, cond: Cond },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src\prelude.isle line 408.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        R32 => {
            // Rule at src\prelude.isle line 415.
            return true;
        }
        R64 => {
            // Rule at src\prelude.isle line 416.
            return true;
        }
        _ => {}
    }
    // Rule at src\prelude.isle line 417.
    return false;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src\prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src\prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src\\prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src\\prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 364.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 366.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 369.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src\\prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 377.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 382.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 384.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 386.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src\\prelude_lower.isle line 381"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 411.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src\\prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 441.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 442.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src\\prelude_lower.isle line 440"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src\prelude_lower.isle line 447.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src\prelude_lower.isle line 449.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src\\prelude_lower.isle line 446"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 462.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 456.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src\\prelude_lower.isle line 455"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 493.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 499.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 511.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 527.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 534.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 547.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 487.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 479.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src\\prelude_lower.isle line 477"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src\prelude_lower.isle line 565.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 572.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src\prelude_lower.isle line 583.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 588.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 593.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 598.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 603.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src\\prelude_lower.isle line 581"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 612.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 620.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src\prelude_lower.isle line 629.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src\prelude_lower.isle line 637.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src\prelude_lower.isle line 646.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 706.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 714.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src\prelude_lower.isle line 723.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 731.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 740.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 659.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 667.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src\prelude_lower.isle line 676.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 684.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 693.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 753.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 761.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 770.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 778.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 787.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 799.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 807.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 824.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 816.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 832.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 841.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src\\prelude_lower.isle line 609"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1045.
    return v2;
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> bool {
    match arg0 {
        &LaneOrder::LittleEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src\isa\s390x\inst.isle line 1492.
                    return true;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src\isa\s390x\inst.isle line 1493.
                    return false;
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src\isa\s390x\inst.isle line 1494.
                    return false;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src\isa\s390x\inst.isle line 1495.
                    return true;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_equal", "src\\isa\\s390x\\inst.isle line 1491"
    )
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(ctx: &mut C, arg0: MemFlags) -> LaneOrder {
    let v4 = C::bigendian(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 1500.
        return LaneOrder::BigEndian;
    }
    let v1 = C::littleendian(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 1499.
        return LaneOrder::LittleEndian;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_from_memflags", "src\\isa\\s390x\\inst.isle line 1498"
    )
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, -0x1);
    if let Some(v3) = v2 {
        let v4 = Some(arg0);
        // Rule at src\isa\s390x\inst.isle line 1552.
        return v4;
    }
    None
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> u128 {
    let v16 = C::u8_pair_concat(ctx, arg0, arg1);
    let v17 = C::u8_pair_concat(ctx, arg2, arg3);
    let v18 = C::u16_pair_concat(ctx, v16, v17);
    let v19 = C::u8_pair_concat(ctx, arg4, arg5);
    let v20 = C::u8_pair_concat(ctx, arg6, arg7);
    let v21 = C::u16_pair_concat(ctx, v19, v20);
    let v22 = C::u32_pair_concat(ctx, v18, v21);
    let v23 = C::u8_pair_concat(ctx, arg8, arg9);
    let v24 = C::u8_pair_concat(ctx, arg10, arg11);
    let v25 = C::u16_pair_concat(ctx, v23, v24);
    let v26 = C::u8_pair_concat(ctx, arg12, arg13);
    let v27 = C::u8_pair_concat(ctx, arg14, arg15);
    let v28 = C::u16_pair_concat(ctx, v26, v27);
    let v29 = C::u32_pair_concat(ctx, v25, v28);
    let v30 = C::u64_pair_concat(ctx, v22, v29);
    // Rule at src\isa\s390x\inst.isle line 1591.
    return v30;
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        // Rule at src\isa\s390x\inst.isle line 1703.
        return arg1;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::mask_amt_imm(ctx, v2, -0x1);
        let v6 = C::u8_as_u16(ctx, v5);
        let v8 = C::uimm16shifted(ctx, v6, 0x0);
        let v9 = constructor_and_uimm16shifted(ctx, v2, arg1, v8);
        // Rule at src\isa\s390x\inst.isle line 1700.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mask_amt_reg", "src\\isa\\s390x\\inst.isle line 1699"
    )
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 1707.
        return v4;
    }
    let v5 = C::vr128_ty(ctx, v1);
    if let Some(v6) = v5 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_vec_extract_lane(ctx, I64X2, v4, 0x1, v9);
        // Rule at src\isa\s390x\inst.isle line 1708.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_reg", "src\\isa\\s390x\\inst.isle line 1706"
    )
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v14 = C::u64_from_value(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = constructor_vec_imm_splat(ctx, I8X16, v15);
        // Rule at src\isa\s390x\inst.isle line 1718.
        return v16;
    }
    let v1 = C::value_type(ctx, arg0);
    let v10 = C::vr128_ty(ctx, v1);
    if let Some(v11) = v10 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v13 = constructor_vec_replicate_lane(ctx, I8X16, v5, 0xF);
        // Rule at src\isa\s390x\inst.isle line 1716.
        return v13;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v7 = C::zero_reg(ctx);
        let v8 = constructor_vec_insert_lane_undef(ctx, I8X16, v5, 0x0, v7);
        let v9 = constructor_vec_replicate_lane(ctx, I8X16, v8, 0x0);
        // Rule at src\isa\s390x\inst.isle line 1713.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_vr", "src\\isa\\s390x\\inst.isle line 1712"
    )
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(ctx: &mut C, arg0: i64) -> Option<i32> {
    let v2 = C::memarg_symbol_offset_sum(ctx, arg0, 0x0);
    let v3 = v2?;
    let v4 = Some(v3);
    // Rule at src\isa\s390x\inst.isle line 1796.
    return v4;
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> MemArg {
    let v10 = C::def_inst(ctx, arg1);
    if let Some(v11) = v10 {
        let v17 = &C::inst_data(ctx, v11);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v18,
                args: ref v19,
            } => {
                if let &Opcode::Iadd = v18 {
                    let v6 = C::i64_from_offset(ctx, arg2);
                    if v6 == 0x0 {
                        let v12 = C::first_result(ctx, v11);
                        if let Some(v13) = v12 {
                            let v14 = C::value_type(ctx, v13);
                            let v15 = C::ty_addr64(ctx, v14);
                            if let Some(v16) = v15 {
                                let v20 = C::unpack_value_array_2(ctx, v19);
                                let v23 = C::put_in_reg(ctx, v20.0);
                                let v24 = C::put_in_reg(ctx, v20.1);
                                let v25 = &C::memarg_reg_plus_reg(ctx, v23, v24, 0x0, arg0);
                                // Rule at src\isa\s390x\inst.isle line 1814.
                                return v25.clone();
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryGlobalValue {
                opcode: ref v26,
                global_value: v27,
            } => {
                if let &Opcode::SymbolValue = v26 {
                    let v28 = C::symbol_value_data(ctx, v27);
                    if let Some(v29) = v28 {
                        let v33 = C::reloc_distance_near(ctx, v29.1);
                        if let Some(v34) = v33 {
                            let v6 = C::i64_from_offset(ctx, arg2);
                            let v35 = C::memarg_symbol_offset_sum(ctx, v6, v29.2);
                            if let Some(v36) = v35 {
                                let v37 = &C::memarg_symbol(ctx, v29.0, v36, arg0);
                                // Rule at src\isa\s390x\inst.isle line 1817.
                                return v37.clone();
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::ty_addr64(ctx, v2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg1);
        let v6 = C::i64_from_offset(ctx, arg2);
        let v9 = &C::memarg_reg_plus_off(ctx, v7, v6, 0x0, arg0);
        // Rule at src\isa\s390x\inst.isle line 1811.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_address", "src\\isa\\s390x\\inst.isle line 1809"
    )
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> MemArg {
    let v4 = C::i64_from_offset(ctx, arg2);
    if v4 == 0x0 {
        let v8 = C::def_inst(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::first_result(ctx, v9);
            if let Some(v11) = v10 {
                let v12 = C::value_type(ctx, v11);
                if v12 == I64 {
                    let v13 = &C::inst_data(ctx, v9);
                    if let &InstructionData::Binary {
                        opcode: ref v14,
                        args: ref v15,
                    } = v13
                    {
                        if let &Opcode::Iadd = v14 {
                            let v16 = C::unpack_value_array_2(ctx, v15);
                            let v19 = C::put_in_reg(ctx, v16.0);
                            let v20 = C::put_in_reg(ctx, v16.1);
                            let v21 = &C::memarg_reg_plus_reg(ctx, v19, v20, arg3, arg0);
                            // Rule at src\isa\s390x\inst.isle line 1831.
                            return v21.clone();
                        }
                    }
                }
            }
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &C::memarg_reg_plus_off(ctx, v6, v4, arg3, arg0);
        // Rule at src\isa\s390x\inst.isle line 1828.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_address_bias", "src\\isa\\s390x\\inst.isle line 1826"
    )
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    let v21 = Some(arg0);
                                    // Rule at src\isa\s390x\inst.isle line 1838.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    let v21 = Some(arg0);
                                    // Rule at src\isa\s390x\inst.isle line 1846.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term memarg_pair.
pub fn constructor_memarg_pair<C: Context>(ctx: &mut C, arg0: &MemArg) -> MemArgPair {
    let v1 = &C::memarg_pair_from_memarg(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 1860.
        return v2.clone();
    }
    let v3 = constructor_load_addr(ctx, arg0);
    let v4 = C::memarg_flags(ctx, arg0);
    let v5 = &C::memarg_pair_from_reg(ctx, v3, v4);
    // Rule at src\isa\s390x\inst.isle line 1861.
    return v5.clone();
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg1, arg2);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 1876.
    return v6;
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1942.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load", "src\\isa\\s390x\\inst.isle line 1941"
    )
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1949.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload16", "src\\isa\\s390x\\inst.isle line 1948"
    )
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1956.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload32", "src\\isa\\s390x\\inst.isle line 1955"
    )
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1963.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload16", "src\\isa\\s390x\\inst.isle line 1962"
    )
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src\isa\s390x\inst.isle line 1970.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload32", "src\\isa\\s390x\\inst.isle line 1969"
    )
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(ctx: &mut C) -> WritableRegPair {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::writable_regpair(ctx, v1, v2);
    // Rule at src\isa\s390x\inst.isle line 1986.
    return v3;
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> RegPair {
    let v1 = C::writable_regpair_hi(ctx, arg0);
    let v3 = C::writable_regpair_lo(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    let v4 = C::writable_reg_to_reg(ctx, v3);
    let v5 = C::regpair(ctx, v2, v4);
    // Rule at src\isa\s390x\inst.isle line 2002.
    return v5;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2022.
    return v7;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2029.
    return v7;
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2036.
    return v7;
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2043.
    return v7;
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2050.
    return v7;
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2057.
    return v7;
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2064.
    return v7;
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2071.
    return v7;
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2078.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2085.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\s390x\inst.isle line 2092.
    return v7;
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm16Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2099.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2106.
    return v7;
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SMulWide {
        rd: v2,
        rn: arg0,
        rm: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2113.
    return v5;
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UMulWide {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2120.
    return v5;
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2127.
    return v5;
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2134.
    return v5;
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2141.
    return v5;
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2148.
    return v5;
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::ShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2155.
    return v8;
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> ProducesFlags {
    let v6 = MInst::RxSBGTest {
        op: arg0.clone(),
        rd: arg1,
        rn: arg2,
        start_bit: arg3,
        end_bit: arg4,
        rotate_amt: arg5,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src\isa\s390x\inst.isle line 2162.
    return v7;
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &UnaryOp, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::UnaryRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2168.
    return v6;
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::CmpRR {
        op: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2175.
    return v4;
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = MInst::CmpRX {
        op: arg0.clone(),
        rn: arg1,
        mem: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2180.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm16 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2185.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2190.
    return v4;
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = MInst::CmpRUImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2195.
    return v4;
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AtomicRmw {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2200.
    return v7;
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I32);
    let v5 = MInst::AtomicCas32 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2207.
    return v7;
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AtomicCas64 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2214.
    return v7;
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src\isa\s390x\inst.isle line 2221.
    return v1;
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::Load32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2226.
    return v5;
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::Load64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2233.
    return v5;
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev16 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2240.
    return v5;
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2247.
    return v5;
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadRev64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2254.
    return v5;
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(ctx: &mut C, arg0: Reg, arg1: &MemArg) -> SideEffectNoResult {
    let v2 = MInst::Store8 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2261.
    return v3;
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2266.
    return v3;
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2271.
    return v3;
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2276.
    return v3;
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm8 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2281.
    return v3;
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2286.
    return v3;
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm32SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2291.
    return v3;
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm64SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2296.
    return v3;
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2301.
    return v3;
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2306.
    return v3;
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2311.
    return v3;
}

// Generated as internal constructor for term mvc.
pub fn constructor_mvc<C: Context>(
    ctx: &mut C,
    arg0: &MemArgPair,
    arg1: &MemArgPair,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = MInst::Mvc {
        dst: arg0.clone(),
        src: arg1.clone(),
        len_minus_one: arg2,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2316.
    return v4;
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(ctx: &mut C, arg0: u8) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAR { rd: v2, ar: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2321.
    return v5;
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(ctx: &mut C, arg0: Reg, arg1: u8) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::InsertAR {
        rd: v3,
        ri: arg0,
        ar: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2328.
    return v6;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &FPUOp1, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::FpuRR {
        fpu_op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2335.
    return v6;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRRR {
        fpu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2342.
    return v7;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::FpuRRRR {
        fpu_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2349.
    return v8;
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp32 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2356.
    return v3;
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp64 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2361.
    return v3;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRound {
        op: arg1.clone(),
        mode: arg2.clone(),
        rd: v4,
        rn: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2366.
    return v7;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecRRR {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2373.
    return v7;
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::VecRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2380.
    return v6;
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2387.
    return v8;
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecSelect {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2394.
    return v7;
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecPermute {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2401.
    return v7;
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecPermuteDWImm {
        rd: v5,
        rn: arg1,
        rm: arg3,
        idx1: arg2,
        idx2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\s390x\inst.isle line 2408.
    return v8;
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2415.
    return v7;
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src\isa\s390x\inst.isle line 2422.
    return v6;
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\inst.isle line 2428.
    return v7;
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src\isa\s390x\inst.isle line 2435.
    return v6;
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128SCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src\isa\s390x\inst.isle line 2441.
    return v8.clone();
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128UCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src\isa\s390x\inst.isle line 2448.
    return v8.clone();
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoad {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2455.
    return v5;
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadRev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2462.
    return v5;
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2469.
    return v5;
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2476.
    return v5;
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2483.
    return v5;
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2490.
    return v5;
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2497.
    return v5;
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2504.
    return v5;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStore {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2511.
    return v3;
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreRev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2516.
    return v3;
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2521.
    return v3;
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2526.
    return v3;
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2531.
    return v3;
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2536.
    return v3;
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2541.
    return v3;
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2546.
    return v3;
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicate {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src\isa\s390x\inst.isle line 2551.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate", "src\\isa\\s390x\\inst.isle line 2550"
    )
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicateRev {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src\isa\s390x\inst.isle line 2558.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_rev", "src\\isa\\s390x\\inst.isle line 2557"
    )
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::MovToVec128 {
        rd: v3,
        rn: arg1,
        rm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 2565.
    return v6;
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecLoadConst {
            rd: v4,
            const_data: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2572.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const", "src\\isa\\s390x\\inst.isle line 2571"
    )
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, arg0);
        let v7 = MInst::VecLoadConstReplicate {
            size: v2.0,
            rd: v6,
            const_data: arg1,
        };
        let v8 = C::emit(ctx, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src\isa\s390x\inst.isle line 2579.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const_replicate", "src\\isa\\s390x\\inst.isle line 2578"
    )
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: u16) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecImmByteMask { rd: v4, mask: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2586.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_byte_mask", "src\\isa\\s390x\\inst.isle line 2585"
    )
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v9 = C::temp_writable_reg(ctx, v2);
            let v10 = MInst::VecImmBitMask {
                size: v4.0,
                rd: v9,
                start_bit: arg1,
                end_bit: arg2,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src\isa\s390x\inst.isle line 2593.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_bit_mask", "src\\isa\\s390x\\inst.isle line 2592"
    )
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: i16) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecImmReplicate {
                size: v4.0,
                rd: v8,
                imm: arg1,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src\isa\s390x\inst.isle line 2600.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_replicate", "src\\isa\\s390x\\inst.isle line 2599"
    )
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLane {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2607.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane", "src\\isa\\s390x\\inst.isle line 2606"
    )
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src\isa\s390x\inst.isle line 2614.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_undef", "src\\isa\\s390x\\inst.isle line 2613"
    )
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLaneRev {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2621.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev", "src\\isa\\s390x\\inst.isle line 2620"
    )
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneRevUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src\isa\s390x\inst.isle line 2628.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev_undef", "src\\isa\\s390x\\inst.isle line 2627"
    )
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLane {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src\isa\s390x\inst.isle line 2635.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane", "src\\isa\\s390x\\inst.isle line 2634"
    )
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLaneRev {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src\isa\s390x\inst.isle line 2640.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_rev", "src\\isa\\s390x\\inst.isle line 2639"
    )
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, arg0);
        let v10 = MInst::VecInsertLane {
            size: v2.0,
            rd: v9,
            ri: arg1,
            rn: arg2,
            lane_imm: arg3,
            lane_reg: arg4,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src\isa\s390x\inst.isle line 2645.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src\\isa\\s390x\\inst.isle line 2644"
    )
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneUndef {
            size: v2.0,
            rd: v8,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2652.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_undef", "src\\isa\\s390x\\inst.isle line 2651"
    )
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, I64);
        let v10 = MInst::VecExtractLane {
            size: v2.0,
            rd: v9,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src\isa\s390x\inst.isle line 2659.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_extract_lane", "src\\isa\\s390x\\inst.isle line 2658"
    )
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneImm {
            size: v2.0,
            rd: v8,
            ri: arg1,
            imm: arg2,
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src\isa\s390x\inst.isle line 2666.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_imm", "src\\isa\\s390x\\inst.isle line 2665"
    )
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecReplicateLane {
            size: v2.0,
            rd: v7,
            rn: arg1,
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src\isa\s390x\inst.isle line 2673.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_replicate_lane", "src\\isa\\s390x\\inst.isle line 2672"
    )
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(ctx: &mut C, arg0: &SymbolReloc) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_symbol_reloc(ctx, arg0);
    let v4 = MInst::LoadSymbolReloc {
        rd: v2,
        symbol_reloc: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2680.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAddr {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2687.
    return v5;
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> SideEffectNoResult {
    let v2 = MInst::Call {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2694.
    return v3;
}

// Generated as internal constructor for term call_ind_impl.
pub fn constructor_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallIndInfo,
) -> SideEffectNoResult {
    let v2 = MInst::CallInd {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2699.
    return v3;
}

// Generated as internal constructor for term return_call_impl.
pub fn constructor_return_call_impl<C: Context>(
    ctx: &mut C,
    arg0: BoxReturnCallInfo,
) -> SideEffectNoResult {
    let v1 = MInst::ReturnCall { info: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\s390x\inst.isle line 2704.
    return v2;
}

// Generated as internal constructor for term return_call_ind_impl.
pub fn constructor_return_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: BoxReturnCallIndInfo,
) -> SideEffectNoResult {
    let v1 = MInst::ReturnCallInd { info: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\s390x\inst.isle line 2709.
    return v2;
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\s390x\inst.isle line 2714.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        cond: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\s390x\inst.isle line 2719.
    return v4;
}

// Generated as internal constructor for term oneway_cond_br.
pub fn constructor_oneway_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: &Cond,
) -> ConsumesFlags {
    let v2 = MInst::OneWayCondBr {
        target: arg0,
        cond: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2724.
    return v3;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v2 = MInst::JTSequence {
        ridx: arg0,
        targets: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 2729.
    return v3;
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRRR {
            alu_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            rm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2767.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_reg", "src\\isa\\s390x\\inst.isle line 2766"
    )
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRUImm32Shifted {
            alu_op: arg1.clone(),
            rd: v4,
            ri: arg3,
            imm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2773.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_uimm32shifted", "src\\isa\\s390x\\inst.isle line 2772"
    )
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v8 = MInst::ShiftRR {
            shift_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            shift_imm: arg4,
            shift_reg: arg5,
        };
        let v9 = C::inst_builder_push(ctx, arg0, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2779.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_shift", "src\\isa\\s390x\\inst.isle line 2778"
    )
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v10 = C::same_reg(ctx, v4, arg3);
        if let Some(v11) = v10 {
            let v12 = MInst::RxSBG {
                op: arg1.clone(),
                rd: v4,
                ri: arg3,
                rn: arg4,
                start_bit: arg5,
                end_bit: arg6,
                rotate_amt: arg7,
            };
            let v13 = C::inst_builder_push(ctx, arg0, &v12);
            let v14 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src\isa\s390x\inst.isle line 2786.
            return v14;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_rxsbg", "src\\isa\\s390x\\inst.isle line 2785"
    )
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = MInst::UnaryRR {
            op: arg1.clone(),
            rd: v4,
            rn: arg3,
        };
        let v7 = C::inst_builder_push(ctx, arg0, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2794.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_unary", "src\\isa\\s390x\\inst.isle line 2793"
    )
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas32 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src\isa\s390x\inst.isle line 2800.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas32", "src\\isa\\s390x\\inst.isle line 2799"
    )
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas64 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src\isa\s390x\inst.isle line 2806.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas64", "src\\isa\\s390x\\inst.isle line 2805"
    )
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Reg {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v2 } = arg1 {
        let v4 = C::inst_builder_push(ctx, arg0, v2);
        let v5 = MInst::CondBreak { cond: arg2.clone() };
        let v6 = C::inst_builder_push(ctx, arg0, &v5);
        let v7 = C::invalid_reg(ctx);
        // Rule at src\isa\s390x\inst.isle line 2812.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_break_if", "src\\isa\\s390x\\inst.isle line 2811"
    )
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(ctx: &mut C, arg0: &VecMInstBuilder, arg1: &Cond) -> Unit {
    let v2 = C::inst_builder_finish(ctx, arg0);
    let v3 = MInst::Loop {
        body: v2,
        cond: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src\isa\s390x\inst.isle line 2819.
    return v4;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = C::temp_writable_reg(ctx, v9);
        let v11 = MInst::Mov64 { rd: v10, rm: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src\isa\s390x\inst.isle line 2831.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::Mov32 { rd: v4, rm: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2827.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src\\isa\\s390x\\inst.isle line 2826"
    )
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Unit {
    match arg0 {
        I32 => {
            let v3 = MInst::Load32 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v4 = C::emit(ctx, &v3);
            // Rule at src\isa\s390x\inst.isle line 2838.
            return v4;
        }
        I64 => {
            let v5 = MInst::Load64 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v6 = C::emit(ctx, &v5);
            // Rule at src\isa\s390x\inst.isle line 2840.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_load", "src\\isa\\s390x\\inst.isle line 2837"
    )
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\s390x\inst.isle line 2845.
    return v5;
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_stack(ctx);
    let v1 = constructor_mov_preg(ctx, v0);
    // Rule at src\isa\s390x\inst.isle line 2858.
    return v1;
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_store8(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2864.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_store16(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2865.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_store32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2866.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2867.
            return v6.clone();
        }
        R64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 2868.
            return v6.clone();
        }
        F32 => {
            let v9 = &constructor_vec_store_lane(ctx, F32X4, arg1, arg2, 0x0);
            // Rule at src\isa\s390x\inst.isle line 2869.
            return v9.clone();
        }
        F64 => {
            let v11 = &constructor_vec_store_lane(ctx, F64X2, arg1, arg2, 0x0);
            // Rule at src\isa\s390x\inst.isle line 2870.
            return v11.clone();
        }
        _ => {}
    }
    let v12 = C::vr128_ty(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_vec_store(ctx, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 2871.
        return v14.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_store", "src\\isa\\s390x\\inst.isle line 2863"
    )
}

// Generated as internal constructor for term arg_load.
pub fn constructor_arg_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_zext32_mem(ctx, I8, arg1);
            // Rule at src\isa\s390x\inst.isle line 2874.
            return v3;
        }
        I16 => {
            let v5 = constructor_zext32_mem(ctx, I16, arg1);
            // Rule at src\isa\s390x\inst.isle line 2875.
            return v5;
        }
        I32 => {
            let v6 = constructor_load32(ctx, arg1);
            // Rule at src\isa\s390x\inst.isle line 2876.
            return v6;
        }
        I64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src\isa\s390x\inst.isle line 2877.
            return v7;
        }
        R64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src\isa\s390x\inst.isle line 2878.
            return v7;
        }
        F32 => {
            let v10 = constructor_vec_load_lane_undef(ctx, F32X4, arg1, 0x0);
            // Rule at src\isa\s390x\inst.isle line 2879.
            return v10;
        }
        F64 => {
            let v12 = constructor_vec_load_lane_undef(ctx, F64X2, arg1, 0x0);
            // Rule at src\isa\s390x\inst.isle line 2880.
            return v12;
        }
        _ => {}
    }
    let v13 = C::vr128_ty(ctx, arg0);
    if let Some(v14) = v13 {
        let v15 = constructor_vec_load(ctx, v14, arg1);
        // Rule at src\isa\s390x\inst.isle line 2881.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_load", "src\\isa\\s390x\\inst.isle line 2873"
    )
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    let v17 = constructor_vec_rot_imm(ctx, I16X8, v14, 0x8);
                    // Rule at src\isa\s390x\inst.isle line 2893.
                    return v17;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    // Rule at src\isa\s390x\inst.isle line 2890.
                    return v14;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    // Rule at src\isa\s390x\inst.isle line 2887.
                    return v11;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    // Rule at src\isa\s390x\inst.isle line 2885.
                    return v9;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_elt_rev", "src\\isa\\s390x\\inst.isle line 2884"
    )
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        // Rule at src\isa\s390x\inst.isle line 2901.
        return arg2;
    }
    let v5 = C::gpr64_ty(ctx, arg1);
    if let Some(v6) = v5 {
        // Rule at src\isa\s390x\inst.isle line 2902.
        return arg2;
    }
    let v7 = C::ty_scalar_float(ctx, arg1);
    if let Some(v8) = v7 {
        // Rule at src\isa\s390x\inst.isle line 2903.
        return arg2;
    }
    let v9 = &C::lane_order(ctx);
    let v10 = constructor_lane_order_equal(ctx, arg0, v9);
    match v10 {
        true => {
            // Rule at src\isa\s390x\inst.isle line 2904.
            return arg2;
        }
        false => {
            let v11 = C::vr128_ty(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_vec_elt_rev(ctx, v12, arg2);
                // Rule at src\isa\s390x\inst.isle line 2907.
                return v13;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "abi_vec_elt_rev", "src\\isa\\s390x\\inst.isle line 2900"
    )
}

// Generated as internal constructor for term memcpy.
pub fn constructor_memcpy<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &MemArg,
    arg2: u64,
) -> SideEffectNoResult {
    let v3 = C::len_minus_one(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = &constructor_memarg_pair(ctx, arg0);
        let v6 = &constructor_memarg_pair(ctx, arg1);
        let v7 = &constructor_mvc(ctx, v5, v6, v4);
        // Rule at src\isa\s390x\inst.isle line 2913.
        return v7.clone();
    }
    let v8 = constructor_load_addr(ctx, arg0);
    let v9 = constructor_load_addr(ctx, arg1);
    let v11 = constructor_imm(ctx, I64, arg2);
    let v12 = &C::lib_call_info_memcpy(ctx, v8, v9, v11);
    let v13 = &constructor_lib_call(ctx, v12);
    // Rule at src\isa\s390x\inst.isle line 2915.
    return v13.clone();
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &ABIArg,
    arg2: Value,
) -> InstOutput {
    let v2 = &C::abi_arg_only_slot(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::output_none(ctx);
        // Rule at src\isa\s390x\inst.isle line 2920.
        return v5;
    }
    let v6 = C::abi_arg_struct_pointer(ctx, arg1);
    if let Some(v7) = v6 {
        let v11 = &C::memarg_offset(ctx, arg0, v7.1);
        let v12 = C::put_in_reg(ctx, arg2);
        let v15 = C::memflags_trusted(ctx);
        let v16 = &C::memarg_reg_plus_off(ctx, v12, 0x0, 0x0, v15);
        let v17 = &constructor_memcpy(ctx, v11, v16, v7.2);
        let v18 = constructor_side_effect(ctx, v17);
        // Rule at src\isa\s390x\inst.isle line 2921.
        return v18;
    }
    let v19 = C::abi_arg_implicit_pointer(ctx, arg1);
    if let Some(v20) = v19 {
        let v24 = C::value_type(ctx, arg2);
        if v20.2 == v24 {
            let v25 = C::put_in_reg(ctx, arg2);
            let v26 = &C::memarg_offset(ctx, arg0, v20.1);
            let v27 = &constructor_arg_store(ctx, v20.2, v25, v26);
            let v28 = constructor_side_effect(ctx, v27);
            // Rule at src\isa\s390x\inst.isle line 2925.
            return v28;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_buffer", "src\\isa\\s390x\\inst.isle line 2919"
    )
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArg,
    arg4: Value,
) -> InstOutput {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v7 = constructor_prepare_arg_val(ctx, v5, arg4);
        let v8 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, v5, v7);
        // Rule at src\isa\s390x\inst.isle line 2932.
        return v8;
    }
    let v9 = C::abi_arg_struct_pointer(ctx, arg3);
    if let Some(v10) = v9 {
        let v14 = &C::memarg_offset(ctx, arg2, v10.1);
        let v15 = constructor_load_addr(ctx, v14);
        let v16 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v10.0, v15);
        // Rule at src\isa\s390x\inst.isle line 2934.
        return v16;
    }
    let v17 = C::abi_arg_implicit_pointer(ctx, arg3);
    if let Some(v18) = v17 {
        let v22 = &C::memarg_offset(ctx, arg2, v18.1);
        let v23 = constructor_load_addr(ctx, v22);
        let v24 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v18.0, v23);
        // Rule at src\isa\s390x\inst.isle line 2937.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_arg", "src\\isa\\s390x\\inst.isle line 2931"
    )
}

// Generated as internal constructor for term copy_from_arg.
pub fn constructor_copy_from_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArg,
) -> ValueRegs {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = constructor_copy_reg_from_arg_slot(ctx, arg0, arg1, arg2, v5);
        let v7 = C::value_reg(ctx, v6);
        // Rule at src\isa\s390x\inst.isle line 2943.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_from_arg", "src\\isa\\s390x\\inst.isle line 2942"
    )
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(ctx: &mut C, arg0: &ABIArgSlot, arg1: Value) -> Reg {
    match arg0 {
        &ABIArgSlot::Reg {
            reg: v1,
            ty: v2,
            extension: ref v3,
        } => {
            match v3 {
                &ArgumentExtension::None => {
                    if v2 == R64 {
                        let v6 = C::put_in_reg(ctx, arg1);
                        let v7 = constructor_copy_reg(ctx, I64, v6);
                        // Rule at src\isa\s390x\inst.isle line 2950.
                        return v7;
                    }
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2952.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2954.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2956.
                    return v9;
                }
                _ => {}
            }
        }
        &ABIArgSlot::Stack {
            offset: v10,
            ty: v11,
            extension: ref v12,
        } => {
            match v12 {
                &ArgumentExtension::None => {
                    let v6 = C::put_in_reg(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2958.
                    return v6;
                }
                &ArgumentExtension::Uext => {
                    let v8 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2960.
                    return v8;
                }
                &ArgumentExtension::Sext => {
                    let v9 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src\isa\s390x\inst.isle line 2962.
                    return v9;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "prepare_arg_val", "src\\isa\\s390x\\inst.isle line 2949"
    )
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> InstOutput {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, arg4);
            let v9 = C::args_builder_push(ctx, arg0, v8, v4);
            let v10 = C::output_none(ctx);
            // Rule at src\isa\s390x\inst.isle line 2968.
            return v10;
        }
        &ABIArgSlot::Stack {
            offset: v11,
            ty: v12,
            extension: ref v13,
        } => {
            let v14 = constructor_abi_ext_ty(ctx, v13, v12);
            let v15 = constructor_abi_vec_elt_rev(ctx, arg1, v12, arg4);
            let v16 = &C::memarg_offset(ctx, arg2, v11);
            let v17 = &constructor_arg_store(ctx, v14, v15, v16);
            let v18 = constructor_side_effect(ctx, v17);
            // Rule at src\isa\s390x\inst.isle line 2971.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_to_arg_slot", "src\\isa\\s390x\\inst.isle line 2967"
    )
}

// Generated as internal constructor for term copy_reg_from_arg_slot.
pub fn constructor_copy_reg_from_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArgSlot,
) -> Reg {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v7 = C::defs_lookup(ctx, arg0, v4);
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, v7);
            // Rule at src\isa\s390x\inst.isle line 2977.
            return v8;
        }
        &ABIArgSlot::Stack {
            offset: v9,
            ty: v10,
            extension: ref v11,
        } => {
            let v12 = constructor_abi_ext_ty(ctx, v11, v10);
            let v13 = &C::memarg_offset(ctx, arg2, v9);
            let v14 = constructor_arg_load(ctx, v12, v13);
            let v15 = constructor_abi_vec_elt_rev(ctx, arg1, v10, v14);
            // Rule at src\isa\s390x\inst.isle line 2979.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_from_arg_slot", "src\\isa\\s390x\\inst.isle line 2976"
    )
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Type {
    match arg0 {
        &ArgumentExtension::Uext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src\isa\s390x\inst.isle line 2986.
                return I64;
            }
        }
        &ArgumentExtension::Sext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src\isa\s390x\inst.isle line 2987.
                return I64;
            }
        }
        _ => {}
    }
    // Rule at src\isa\s390x\inst.isle line 2985.
    return arg1;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        F32 => {
            let v50 = C::temp_writable_reg(ctx, F32);
            let v20 = C::u64_truncate_to_u32(ctx, arg1);
            let v51 = MInst::LoadFpuConst32 {
                rd: v50,
                const_data: v20,
            };
            let v52 = C::emit(ctx, &v51);
            let v53 = C::writable_reg_to_reg(ctx, v50);
            // Rule at src\isa\s390x\inst.isle line 3059.
            return v53;
        }
        F64 => {
            let v55 = C::temp_writable_reg(ctx, F64);
            let v56 = MInst::LoadFpuConst64 {
                rd: v55,
                const_data: arg1,
            };
            let v57 = C::emit(ctx, &v56);
            let v58 = C::writable_reg_to_reg(ctx, v55);
            // Rule at src\isa\s390x\inst.isle line 3066.
            return v58;
        }
        _ => {}
    }
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = C::u64_as_i16(ctx, arg1);
        let v6 = MInst::Mov32SImm16 { rd: v4, imm: v5 };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src\isa\s390x\inst.isle line 2996.
        return v8;
    }
    let v9 = C::gpr32_ty(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::u32_pair_split(ctx, arg1);
        let v14 = C::i16_from_u32(ctx, v11.1);
        if let Some(v15) = v14 {
            let v16 = C::temp_writable_reg(ctx, v10);
            let v17 = MInst::Mov32SImm16 { rd: v16, imm: v15 };
            let v18 = C::emit(ctx, &v17);
            let v19 = C::writable_reg_to_reg(ctx, v16);
            // Rule at src\isa\s390x\inst.isle line 3002.
            return v19;
        }
        let v16 = C::temp_writable_reg(ctx, v10);
        let v20 = C::u64_truncate_to_u32(ctx, arg1);
        let v21 = MInst::Mov32Imm { rd: v16, imm: v20 };
        let v22 = C::emit(ctx, &v21);
        let v19 = C::writable_reg_to_reg(ctx, v16);
        // Rule at src\isa\s390x\inst.isle line 3008.
        return v19;
    }
    let v23 = C::gpr64_ty(ctx, arg0);
    if let Some(v24) = v23 {
        let v25 = C::i16_from_u64(ctx, arg1);
        if let Some(v26) = v25 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v28 = MInst::Mov64SImm16 { rd: v27, imm: v26 };
            let v29 = C::emit(ctx, &v28);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src\isa\s390x\inst.isle line 3014.
            return v30;
        }
        let v31 = C::i32_from_u64(ctx, arg1);
        if let Some(v32) = v31 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v33 = MInst::Mov64SImm32 { rd: v27, imm: v32 };
            let v34 = C::emit(ctx, &v33);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src\isa\s390x\inst.isle line 3020.
            return v30;
        }
        let v35 = C::uimm16shifted_from_u64(ctx, arg1);
        if let Some(v36) = v35 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v37 = MInst::Mov64UImm16Shifted { rd: v27, imm: v36 };
            let v38 = C::emit(ctx, &v37);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src\isa\s390x\inst.isle line 3026.
            return v30;
        }
        let v39 = C::uimm32shifted_from_u64(ctx, arg1);
        if let Some(v40) = v39 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v41 = MInst::Mov64UImm32Shifted { rd: v27, imm: v40 };
            let v42 = C::emit(ctx, &v41);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src\isa\s390x\inst.isle line 3032.
            return v30;
        }
        let v43 = C::u64_nonzero_hipart(ctx, arg1);
        if let Some(v44) = v43 {
            let v45 = C::u64_nonzero_lopart(ctx, arg1);
            if let Some(v46) = v45 {
                let v47 = constructor_imm(ctx, v24, v44);
                let v48 = constructor_insert_imm(ctx, v24, v47, v46);
                // Rule at src\isa\s390x\inst.isle line 3038.
                return v48;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src\\isa\\s390x\\inst.isle line 2993"
    )
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u64) -> Reg {
    let v3 = C::uimm16shifted_from_u64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v6 = MInst::Insert64UImm16Shifted {
            rd: v5,
            ri: arg1,
            imm: v4,
        };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src\isa\s390x\inst.isle line 3046.
        return v8;
    }
    let v9 = C::uimm32shifted_from_u64(ctx, arg2);
    if let Some(v10) = v9 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v11 = MInst::Insert64UImm32Shifted {
            rd: v5,
            ri: arg1,
            imm: v10,
        };
        let v12 = C::emit(ctx, &v11);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src\isa\s390x\inst.isle line 3052.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_imm", "src\\isa\\s390x\\inst.isle line 3043"
    )
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(ctx: &mut C, arg0: Type, arg1: i32) -> Reg {
    if arg0 == I64 {
        let v3 = C::temp_writable_reg(ctx, I64);
        let v4 = MInst::Mov64SImm32 { rd: v3, imm: arg1 };
        let v5 = C::emit(ctx, &v4);
        let v6 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src\isa\s390x\inst.isle line 3073.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm32", "src\\isa\\s390x\\inst.isle line 3072"
    )
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src\isa\s390x\inst.isle line 3080.
            return v5;
        }
        let v6 = C::u64_pair_split(ctx, arg1);
        if v6.0 == v6.1 {
            let v10 = constructor_vec_imm_splat(ctx, I64X2, v6.0);
            // Rule at src\isa\s390x\inst.isle line 3082.
            return v10;
        }
        let v11 = constructor_vec_load_const(ctx, v2, arg1);
        // Rule at src\isa\s390x\inst.isle line 3084.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm", "src\\isa\\s390x\\inst.isle line 3079"
    )
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src\isa\s390x\inst.isle line 3091.
                return v11;
            }
            0x10 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                let v24 = C::u8_pair_split(ctx, v21.1);
                if v24.0 == v24.1 {
                    let v28 = C::u8_as_u64(ctx, v24.0);
                    let v29 = constructor_vec_imm_splat(ctx, I8X16, v28);
                    // Rule at src\isa\s390x\inst.isle line 3099.
                    return v29;
                }
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src\isa\s390x\inst.isle line 3093.
                return v11;
            }
            0x20 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                if v21.0 == v21.1 {
                    let v31 = C::u16_as_u64(ctx, v21.0);
                    let v32 = constructor_vec_imm_splat(ctx, I16X8, v31);
                    // Rule at src\isa\s390x\inst.isle line 3101.
                    return v32;
                }
                let v15 = C::i16_from_u32(ctx, v12.1);
                if let Some(v16) = v15 {
                    let v17 = constructor_vec_imm_replicate(ctx, arg0, v16);
                    // Rule at src\isa\s390x\inst.isle line 3095.
                    return v17;
                }
            }
            0x40 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                if v12.0 == v12.1 {
                    let v34 = C::u32_as_u64(ctx, v12.0);
                    let v35 = constructor_vec_imm_splat(ctx, I32X4, v34);
                    // Rule at src\isa\s390x\inst.isle line 3103.
                    return v35;
                }
                let v18 = C::i16_from_u64(ctx, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_vec_imm_replicate(ctx, arg0, v19);
                    // Rule at src\isa\s390x\inst.isle line 3097.
                    return v20;
                }
            }
            _ => {}
        }
    }
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src\isa\s390x\inst.isle line 3089.
            return v5;
        }
        let v36 = constructor_vec_load_const_replicate(ctx, v2, arg1);
        // Rule at src\isa\s390x\inst.isle line 3105.
        return v36;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_splat", "src\\isa\\s390x\\inst.isle line 3088"
    )
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3113.
            return I32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3114.
            return I32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3115.
            return I32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3116.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext32", "src\\isa\\s390x\\inst.isle line 3112"
    )
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3120.
            return I64;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3121.
            return I64;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3122.
            return I64;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3123.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext64", "src\\isa\\s390x\\inst.isle line 3119"
    )
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3128.
    return v9;
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3135.
    return v9;
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3142.
    return v9;
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3149.
    return v9;
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3157.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3161.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext32_mem", "src\\isa\\s390x\\inst.isle line 3156"
    )
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3168.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3172.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext32_mem", "src\\isa\\s390x\\inst.isle line 3167"
    )
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3179.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3183.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64ZExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3187.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext64_mem", "src\\isa\\s390x\\inst.isle line 3178"
    )
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3194.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3198.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64SExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\s390x\inst.isle line 3202.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext64_mem", "src\\isa\\s390x\\inst.isle line 3193"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3210.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3216.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext32_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3212.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext32_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3214.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src\\isa\\s390x\\inst.isle line 3209"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3221.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3227.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext32_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3223.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext32_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3225.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src\\isa\\s390x\\inst.isle line 3220"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3232.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3238.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext64_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3234.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext64_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3236.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src\\isa\\s390x\\inst.isle line 3231"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src\isa\s390x\inst.isle line 3243.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\s390x\inst.isle line 3249.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext64_mem(ctx, v7, v17);
                        // Rule at src\isa\s390x\inst.isle line 3245.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext64_reg(ctx, v7, v19);
        // Rule at src\isa\s390x\inst.isle line 3247.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src\\isa\\s390x\\inst.isle line 3242"
    )
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> ConsumesFlags {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64SImm16 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src\isa\s390x\inst.isle line 3261.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32SImm16 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src\isa\s390x\inst.isle line 3257.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm", "src\\isa\\s390x\\inst.isle line 3256"
    )
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> ConsumesFlags {
    let v14 = C::gpr64_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = C::temp_writable_reg(ctx, v15);
        let v17 = C::temp_writable_reg(ctx, v15);
        let v21 = C::writable_reg_to_reg(ctx, v17);
        let v22 = C::value_reg(ctx, v21);
        let v18 = MInst::Mov64SImm16 { rd: v16, imm: arg3 };
        let v19 = C::writable_reg_to_reg(ctx, v16);
        let v20 = MInst::CMov64SImm16 {
            rd: v17,
            cond: arg1.clone(),
            ri: v19,
            imm: arg2,
        };
        let v23 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v18,
            inst2: v20,
            result: v22,
        };
        // Rule at src\isa\s390x\inst.isle line 3275.
        return v23;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = C::temp_writable_reg(ctx, v2);
        let v11 = C::writable_reg_to_reg(ctx, v7);
        let v12 = C::value_reg(ctx, v11);
        let v8 = MInst::Mov32SImm16 { rd: v6, imm: arg3 };
        let v9 = C::writable_reg_to_reg(ctx, v6);
        let v10 = MInst::CMov32SImm16 {
            rd: v7,
            cond: arg1.clone(),
            ri: v9,
            imm: arg2,
        };
        let v13 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v8,
            inst2: v10,
            result: v12,
        };
        // Rule at src\isa\s390x\inst.isle line 3268.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm_imm", "src\\isa\\s390x\\inst.isle line 3267"
    )
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v17 = C::temp_writable_reg(ctx, F32);
            let v18 = MInst::FpuCMov32 {
                rd: v17,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src\isa\s390x\inst.isle line 3293.
            return v20;
        }
        F64 => {
            let v22 = C::temp_writable_reg(ctx, F64);
            let v23 = MInst::FpuCMov64 {
                rd: v22,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v24 = C::writable_reg_to_reg(ctx, v22);
            let v25 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v23,
                result: v24,
            };
            // Rule at src\isa\s390x\inst.isle line 3297.
            return v25;
        }
        _ => {}
    }
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src\isa\s390x\inst.isle line 3289.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src\isa\s390x\inst.isle line 3285.
        return v9;
    }
    let v26 = C::vr128_ty(ctx, arg0);
    if let Some(v27) = v26 {
        let v22 = C::temp_writable_reg(ctx, F64);
        let v28 = MInst::VecCMov {
            rd: v22,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v24 = C::writable_reg_to_reg(ctx, v22);
        let v29 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v28,
            result: v24,
        };
        // Rule at src\isa\s390x\inst.isle line 3301.
        return v29;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_reg_reg", "src\\isa\\s390x\\inst.isle line 3284"
    )
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Reg {
    let v3 = &constructor_trap_if_impl(ctx, arg1, arg2);
    let v4 = &constructor_with_flags_side_effect(ctx, arg0, v3);
    let v5 = constructor_side_effect(ctx, v4);
    let v6 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3310.
    return v6;
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3316.
    return v8;
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRSImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3322.
    return v8;
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3328.
    return v8;
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRUImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src\isa\s390x\inst.isle line 3334.
    return v8;
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Trap {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\s390x\inst.isle line 3340.
    return v2;
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cond: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src\isa\s390x\inst.isle line 3344.
    return v3;
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Debugtrap,
    };
    // Rule at src\isa\s390x\inst.isle line 3348.
    return v1;
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> ProducesBool {
    let v2 = ProducesBool::ProducesBool {
        producer: arg0.clone(),
        cond: arg1.clone(),
    };
    // Rule at src\isa\s390x\inst.isle line 3359.
    return v2;
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(ctx: &mut C, arg0: &ProducesBool) -> ProducesBool {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v3 = &C::invert_cond(ctx, v2);
        let v4 = &constructor_bool(ctx, v1, v3);
        // Rule at src\isa\s390x\inst.isle line 3363.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_bool", "src\\isa\\s390x\\inst.isle line 3362"
    )
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_reg_reg(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src\isa\s390x\inst.isle line 3368.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_reg", "src\\isa\\s390x\\inst.isle line 3367"
    )
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_imm_imm(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src\isa\s390x\inst.isle line 3373.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_imm", "src\\isa\\s390x\\inst.isle line 3372"
    )
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(ctx: &mut C, arg0: Type, arg1: &ProducesBool) -> Reg {
    if arg0 == I8 {
        let v5 = constructor_select_bool_imm(ctx, I8, arg1, 0x1, 0x0);
        // Rule at src\isa\s390x\inst.isle line 3379.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool", "src\\isa\\s390x\\inst.isle line 3378"
    )
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I128 {
        let v8 = constructor_lower_bool_to_mask(ctx, I64, arg1);
        let v10 = constructor_mov_to_vec128(ctx, I128, v8, v8);
        // Rule at src\isa\s390x\inst.isle line 3386.
        return v10;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_select_bool_imm(ctx, v2, arg1, -0x1, 0x0);
        // Rule at src\isa\s390x\inst.isle line 3383.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool_to_mask", "src\\isa\\s390x\\inst.isle line 3382"
    )
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v5 = &constructor_cond_br(ctx, arg1, arg2, v2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src\isa\s390x\inst.isle line 3392.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cond_br_bool", "src\\isa\\s390x\\inst.isle line 3391"
    )
}

// Generated as internal constructor for term oneway_cond_br_bool.
pub fn constructor_oneway_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_oneway_cond_br(ctx, arg1, v2);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src\isa\s390x\inst.isle line 3397.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "oneway_cond_br_bool", "src\\isa\\s390x\\inst.isle line 3396"
    )
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if_impl(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src\isa\s390x\inst.isle line 3402.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_bool", "src\\isa\\s390x\\inst.isle line 3401"
    )
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x0);
    // Rule at src\isa\s390x\inst.isle line 3415.
    return v1;
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x1);
    // Rule at src\isa\s390x\inst.isle line 3419.
    return v1;
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> PReg {
    let v7 = &C::memarg_reg_plus_off(ctx, arg3, 0x0, 0x0, arg2);
    let v8 = constructor_ty_ext32(ctx, arg1);
    let v9 = constructor_casloop_val_reg(ctx);
    let v10 = constructor_push_atomic_cas(ctx, arg0, v8, v9, arg4, v7);
    let v11 = constructor_ty_ext32(ctx, arg1);
    let v12 = constructor_casloop_val_reg(ctx);
    let v13 = constructor_emit_load(ctx, v11, v12, v7);
    let v15 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
    let v16 = constructor_emit_loop(ctx, arg0, v15);
    let v17 = C::preg_gpr_0(ctx);
    // Rule at src\isa\s390x\inst.isle line 3428.
    return v17;
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Reg {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::bigendian(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_mov_preg(ctx, arg2);
            // Rule at src\isa\s390x\inst.isle line 3450.
            return v7;
        }
        let v8 = C::littleendian(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::preg_to_reg(ctx, arg2);
            let v11 = constructor_bswap_reg(ctx, v2, v10);
            // Rule at src\isa\s390x\inst.isle line 3452.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_result", "src\\isa\\s390x\\inst.isle line 3449"
    )
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg4);
    let v6 = constructor_casloop_result(ctx, arg1, arg2, v5);
    // Rule at src\isa\s390x\inst.isle line 3457.
    return v6;
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_lshl_imm(ctx, I32, arg0, 0x3);
    // Rule at src\isa\s390x\inst.isle line 3472.
    return v3;
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v4 = C::uimm16shifted(ctx, 0xFFFC, 0x0);
    let v5 = constructor_and_uimm16shifted(ctx, I64, arg0, v4);
    // Rule at src\isa\s390x\inst.isle line 3477.
    return v5;
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
            // Rule at src\isa\s390x\inst.isle line 3487.
            return v8;
        }
        I16 => {
            let v9 = C::bigendian(ctx, arg2);
            if let Some(v10) = v9 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src\isa\s390x\inst.isle line 3489.
                return v8;
            }
            let v11 = C::littleendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v14 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src\isa\s390x\inst.isle line 3491.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_in", "src\\isa\\s390x\\inst.isle line 3486"
    )
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_neg_reg(ctx, I32, arg3);
            let v9 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, v8);
            // Rule at src\isa\s390x\inst.isle line 3500.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v12 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src\isa\s390x\inst.isle line 3502.
                return v12;
            }
            let v13 = C::littleendian(ctx, arg2);
            if let Some(v14) = v13 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v16 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src\isa\s390x\inst.isle line 3504.
                return v16;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_out", "src\\isa\\s390x\\inst.isle line 3499"
    )
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v6 = constructor_rot_imm_reg(ctx, I32, arg3, 0x8, arg2);
            // Rule at src\isa\s390x\inst.isle line 3515.
            return v6;
        }
        I16 => {
            let v7 = C::bigendian(ctx, arg1);
            if let Some(v8) = v7 {
                let v10 = constructor_rot_imm_reg(ctx, I32, arg3, 0x10, arg2);
                // Rule at src\isa\s390x\inst.isle line 3517.
                return v10;
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rot_reg(ctx, I32, arg3, arg2);
                let v14 = constructor_bswap_reg(ctx, I32, v13);
                // Rule at src\isa\s390x\inst.isle line 3519.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_result", "src\\isa\\s390x\\inst.isle line 3514"
    )
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg5);
    let v7 = C::preg_to_reg(ctx, v6);
    let v8 = constructor_casloop_rotate_result(ctx, arg1, arg2, arg4, v7);
    // Rule at src\isa\s390x\inst.isle line 3524.
    return v8;
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0xE);
    // Rule at src\isa\s390x\inst.isle line 3585.
    return v1;
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
    arg3: &CallRetList,
) -> SideEffectNoResult {
    let v4 = constructor_writable_link_reg(ctx);
    let v5 = C::abi_call_info(ctx, arg0, arg1, arg2, arg3);
    let v6 = &constructor_call_impl(ctx, v4, v5);
    // Rule at src\isa\s390x\inst.isle line 3588.
    return v6.clone();
}

// Generated as internal constructor for term abi_call_ind.
pub fn constructor_abi_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
    arg3: &CallRetList,
) -> SideEffectNoResult {
    let v4 = constructor_writable_link_reg(ctx);
    let v5 = C::abi_call_ind_info(ctx, arg0, arg1, arg2, arg3);
    let v6 = &constructor_call_ind_impl(ctx, v4, v5);
    // Rule at src\isa\s390x\inst.isle line 3592.
    return v6.clone();
}

// Generated as internal constructor for term abi_return_call.
pub fn constructor_abi_return_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
) -> SideEffectNoResult {
    let v3 = C::abi_return_call_info(ctx, arg0, arg1, arg2);
    let v4 = &constructor_return_call_impl(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3596.
    return v4.clone();
}

// Generated as internal constructor for term abi_return_call_ind.
pub fn constructor_abi_return_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
) -> SideEffectNoResult {
    let v3 = C::abi_return_call_ind_info(ctx, arg0, arg1, arg2);
    let v4 = &constructor_return_call_ind_impl(ctx, v3);
    // Rule at src\isa\s390x\inst.isle line 3600.
    return v4.clone();
}

// Generated as internal constructor for term lib_call.
pub fn constructor_lib_call<C: Context>(ctx: &mut C, arg0: &LibCallInfo) -> SideEffectNoResult {
    let v1 = constructor_writable_link_reg(ctx);
    let v2 = C::lib_call_info(ctx, arg0);
    let v3 = &constructor_call_impl(ctx, v1, v2);
    // Rule at src\isa\s390x\inst.isle line 3621.
    return v3.clone();
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3628.
            return I16X8;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3629.
            return I32X4;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3630.
            return I64X2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_widen_type", "src\\isa\\s390x\\inst.isle line 3627"
    )
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3633.
            return VecBinaryOp::Pack16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3634.
            return VecBinaryOp::Pack32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3635.
            return VecBinaryOp::Pack64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack", "src\\isa\\s390x\\inst.isle line 3632"
    )
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3638.
    return v4;
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3641.
            return VecBinaryOp::PackSSat16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3642.
            return VecBinaryOp::PackSSat32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3643.
            return VecBinaryOp::PackSSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_ssat", "src\\isa\\s390x\\inst.isle line 3640"
    )
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_ssat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3646.
    return v4;
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3649.
            return VecBinaryOp::PackUSat16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3650.
            return VecBinaryOp::PackUSat32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3651.
            return VecBinaryOp::PackUSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_usat", "src\\isa\\s390x\\inst.isle line 3648"
    )
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_usat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3654.
    return v4;
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3657.
            return VecUnaryOp::UnpackSLow8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3658.
            return VecUnaryOp::UnpackSLow16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3659.
            return VecUnaryOp::UnpackSLow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_low", "src\\isa\\s390x\\inst.isle line 3656"
    )
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3662.
    return v3;
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3665.
            return VecUnaryOp::UnpackSHigh8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3666.
            return VecUnaryOp::UnpackSHigh16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3667.
            return VecUnaryOp::UnpackSHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_high", "src\\isa\\s390x\\inst.isle line 3664"
    )
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3670.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3673.
            return VecUnaryOp::UnpackULow8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3674.
            return VecUnaryOp::UnpackULow16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3675.
            return VecUnaryOp::UnpackULow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_low", "src\\isa\\s390x\\inst.isle line 3672"
    )
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3678.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3681.
            return VecUnaryOp::UnpackUHigh8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3682.
            return VecUnaryOp::UnpackUHigh16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3683.
            return VecUnaryOp::UnpackUHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_high", "src\\isa\\s390x\\inst.isle line 3680"
    )
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3686.
    return v3;
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3697.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3694.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_lane_order", "src\\isa\\s390x\\inst.isle line 3693"
    )
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_ssat(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3705.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_ssat(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3702.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_ssat_lane_order", "src\\isa\\s390x\\inst.isle line 3701"
    )
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_usat(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3713.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_usat(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3710.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_usat_lane_order", "src\\isa\\s390x\\inst.isle line 3709"
    )
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3726.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3723.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_low_lane_order", "src\\isa\\s390x\\inst.isle line 3722"
    )
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3734.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3731.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_high_lane_order", "src\\isa\\s390x\\inst.isle line 3730"
    )
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3742.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3739.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_low_lane_order", "src\\isa\\s390x\\inst.isle line 3738"
    )
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3750.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src\isa\s390x\inst.isle line 3747.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_high_lane_order", "src\\isa\\s390x\\inst.isle line 3746"
    )
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3758.
            return VecBinaryOp::MergeLow8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3759.
            return VecBinaryOp::MergeLow16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3760.
            return VecBinaryOp::MergeLow32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3761.
            return VecBinaryOp::MergeLow64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_low", "src\\isa\\s390x\\inst.isle line 3757"
    )
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_merge_low(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3764.
    return v4;
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3767.
            return VecBinaryOp::MergeHigh8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3768.
            return VecBinaryOp::MergeHigh16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3769.
            return VecBinaryOp::MergeHigh32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3770.
            return VecBinaryOp::MergeHigh64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_high", "src\\isa\\s390x\\inst.isle line 3766"
    )
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_high(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3773.
    return v4;
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_low(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3787.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_high(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3784.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_low_lane_order", "src\\isa\\s390x\\inst.isle line 3783"
    )
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_high(ctx, arg0, arg2, arg1);
            // Rule at src\isa\s390x\inst.isle line 3795.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_low(ctx, arg0, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 3792.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_high_lane_order", "src\\isa\\s390x\\inst.isle line 3791"
    )
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(ctx: &mut C, arg0: i16, arg1: Reg) -> Reg {
    if arg0 == 0x40 {
        let v2 = constructor_temp_writable_regpair(ctx);
        let v3 = MInst::Flogr { rd: v2, rn: arg1 };
        let v4 = C::emit(ctx, &v3);
        let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
        let v6 = C::regpair_hi(ctx, v5);
        // Rule at src\isa\s390x\inst.isle line 3806.
        return v6;
    }
    let v2 = constructor_temp_writable_regpair(ctx);
    let v10 = &C::intcc_as_cond(ctx, &IntCC::Equal);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    let v6 = C::regpair_hi(ctx, v5);
    let v11 = &constructor_cmov_imm(ctx, I64, v10, arg0, v6);
    let v3 = MInst::Flogr { rd: v2, rn: arg1 };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    let v12 = constructor_with_flags_reg(ctx, &v7, v11);
    // Rule at src\isa\s390x\inst.isle line 3812.
    return v12;
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3820.
            return VecUnaryOp::Clz8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3821.
            return VecUnaryOp::Clz16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3822.
            return VecUnaryOp::Clz32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3823.
            return VecUnaryOp::Clz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_clz", "src\\isa\\s390x\\inst.isle line 3819"
    )
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_clz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3826.
    return v3;
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3830.
            return VecUnaryOp::Ctz8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3831.
            return VecUnaryOp::Ctz16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3832.
            return VecUnaryOp::Ctz32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3833.
            return VecUnaryOp::Ctz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_ctz", "src\\isa\\s390x\\inst.isle line 3829"
    )
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_ctz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 3836.
    return v3;
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 3842.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0x100);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v10 = &constructor_cmov_imm(ctx, v4, v8, 0xFF, arg2);
                let v11 = constructor_with_flags_reg(ctx, v6, v10);
                // Rule at src\isa\s390x\inst.isle line 3843.
                return v11;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v13 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0xFFFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v8, -0x1, arg2);
                let v16 = constructor_with_flags_reg(ctx, v13, v15);
                // Rule at src\isa\s390x\inst.isle line 3846.
                return v16;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v19 = constructor_imm(ctx, I64, 0xFFFFFFFF);
                let v20 = &constructor_icmpu_reg(ctx, I64, arg2, v19);
                let v21 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v22 = &constructor_bool(ctx, v20, v21);
                let v23 = constructor_select_bool_reg(ctx, I64, v22, v19, arg2);
                // Rule at src\isa\s390x\inst.isle line 3849.
                return v23;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uint_sat_reg", "src\\isa\\s390x\\inst.isle line 3841"
    )
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 3857.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7F);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v9 = &constructor_cmov_imm(ctx, v4, v8, 0x7F, arg2);
                let v10 = constructor_with_flags_reg(ctx, v6, v9);
                let v12 = &constructor_icmps_simm16(ctx, v4, v10, -0x80);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v14, -0x80, v10);
                let v16 = constructor_with_flags_reg(ctx, v12, v15);
                // Rule at src\isa\s390x\inst.isle line 3858.
                return v16;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v18 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7FFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v19 = &constructor_cmov_imm(ctx, v4, v8, 0x7FFF, arg2);
                let v20 = constructor_with_flags_reg(ctx, v18, v19);
                let v22 = &constructor_icmps_simm16(ctx, v4, v20, -0x8000);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v23 = &constructor_cmov_imm(ctx, v4, v14, -0x8000, v20);
                let v24 = constructor_with_flags_reg(ctx, v22, v23);
                // Rule at src\isa\s390x\inst.isle line 3864.
                return v24;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v27 = constructor_imm32(ctx, I64, 0x7FFFFFFF);
                let v28 = &constructor_icmps_reg(ctx, I64, arg2, v27);
                let v29 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v30 = &constructor_bool(ctx, v28, v29);
                let v31 = constructor_select_bool_reg(ctx, I64, v30, v27, arg2);
                let v33 = constructor_imm32(ctx, I64, -0x80000000);
                let v34 = &constructor_icmps_reg(ctx, I64, v31, v33);
                let v35 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v36 = &constructor_bool(ctx, v34, v35);
                let v37 = constructor_select_bool_reg(ctx, I64, v36, v33, v31);
                // Rule at src\isa\s390x\inst.isle line 3870.
                return v37;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sint_sat_reg", "src\\isa\\s390x\\inst.isle line 3856"
    )
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3886.
            return ALUOp::Add32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3887.
            return ALUOp::Add32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3888.
            return ALUOp::Add32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3889.
            return ALUOp::Add64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add", "src\\isa\\s390x\\inst.isle line 3885"
    )
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3892.
            return ALUOp::Add32Ext16;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3893.
            return ALUOp::Add32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3894.
            return ALUOp::Add64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext16", "src\\isa\\s390x\\inst.isle line 3891"
    )
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3897.
        return ALUOp::Add64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext32", "src\\isa\\s390x\\inst.isle line 3896"
    )
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3900.
    return v4;
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3903.
    return v4;
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3906.
    return v4;
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3909.
    return v4;
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3912.
    return v4;
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3915.
    return v4;
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3918.
    return v4;
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src\isa\s390x\inst.isle line 3925.
            return VecBinaryOp::Add128;
        }
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 3921.
            return VecBinaryOp::Add8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 3922.
            return VecBinaryOp::Add16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 3923.
            return VecBinaryOp::Add32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 3924.
            return VecBinaryOp::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_add", "src\\isa\\s390x\\inst.isle line 3920"
    )
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_add(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3928.
    return v4;
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3934.
            return ALUOp::AddLogical32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3935.
            return ALUOp::AddLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical", "src\\isa\\s390x\\inst.isle line 3933"
    )
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3938.
        return ALUOp::AddLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical_zext32", "src\\isa\\s390x\\inst.isle line 3937"
    )
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3941.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3944.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3948.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3951.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3955.
    return v4;
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_ruimm32_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3958.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3962.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3965.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3969.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3972.
    return v4.clone();
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 3979.
            return ALUOp::Sub32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3980.
            return ALUOp::Sub32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3981.
            return ALUOp::Sub32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3982.
            return ALUOp::Sub64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub", "src\\isa\\s390x\\inst.isle line 3978"
    )
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 3985.
            return ALUOp::Sub32Ext16;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 3986.
            return ALUOp::Sub32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 3987.
            return ALUOp::Sub64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext16", "src\\isa\\s390x\\inst.isle line 3984"
    )
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 3990.
        return ALUOp::Sub64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext32", "src\\isa\\s390x\\inst.isle line 3989"
    )
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3993.
    return v4;
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3996.
    return v4;
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 3999.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4002.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4005.
    return v4;
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src\isa\s390x\inst.isle line 4012.
            return VecBinaryOp::Sub128;
        }
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4008.
            return VecBinaryOp::Sub8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4009.
            return VecBinaryOp::Sub16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4010.
            return VecBinaryOp::Sub32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4011.
            return VecBinaryOp::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_sub", "src\\isa\\s390x\\inst.isle line 4007"
    )
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_sub(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4015.
    return v4;
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4021.
            return ALUOp::SubLogical32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4022.
            return ALUOp::SubLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical", "src\\isa\\s390x\\inst.isle line 4020"
    )
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4025.
        return ALUOp::SubLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical_zext32", "src\\isa\\s390x\\inst.isle line 4024"
    )
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4028.
    return v4;
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4031.
    return v4;
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4034.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4037.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4040.
    return v4;
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 4046.
            return ALUOp::Mul32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 4047.
            return ALUOp::Mul32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4048.
            return ALUOp::Mul32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4049.
            return ALUOp::Mul64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul", "src\\isa\\s390x\\inst.isle line 4045"
    )
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 4052.
            return ALUOp::Mul32Ext16;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4053.
            return ALUOp::Mul32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4054.
            return ALUOp::Mul64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext16", "src\\isa\\s390x\\inst.isle line 4051"
    )
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4057.
        return ALUOp::Mul64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext32", "src\\isa\\s390x\\inst.isle line 4056"
    )
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4060.
    return v4;
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4063.
    return v4;
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4066.
    return v4;
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4069.
    return v4;
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4072.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4075.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4078.
    return v4;
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4081.
            return VecBinaryOp::Mul8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4082.
            return VecBinaryOp::Mul16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4083.
            return VecBinaryOp::Mul32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_mul", "src\\isa\\s390x\\inst.isle line 4080"
    )
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_mul(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4087.
    return v4;
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4090.
            return VecBinaryOp::UMulHi8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4091.
            return VecBinaryOp::UMulHi16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4092.
            return VecBinaryOp::UMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umulhi", "src\\isa\\s390x\\inst.isle line 4089"
    )
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4096.
    return v4;
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4099.
            return VecBinaryOp::SMulHi8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4100.
            return VecBinaryOp::SMulHi16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4101.
            return VecBinaryOp::SMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smulhi", "src\\isa\\s390x\\inst.isle line 4098"
    )
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4105.
    return v4;
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4108.
            return VecBinaryOp::UMulEven8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4109.
            return VecBinaryOp::UMulEven16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4110.
            return VecBinaryOp::UMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_even", "src\\isa\\s390x\\inst.isle line 4107"
    )
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4114.
    return v4;
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4117.
            return VecBinaryOp::SMulEven8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4118.
            return VecBinaryOp::SMulEven16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4119.
            return VecBinaryOp::SMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_even", "src\\isa\\s390x\\inst.isle line 4116"
    )
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4123.
    return v4;
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4126.
            return VecBinaryOp::UMulOdd8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4127.
            return VecBinaryOp::UMulOdd16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4128.
            return VecBinaryOp::UMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_odd", "src\\isa\\s390x\\inst.isle line 4125"
    )
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4132.
    return v4;
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4135.
            return VecBinaryOp::SMulOdd8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4136.
            return VecBinaryOp::SMulOdd16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4137.
            return VecBinaryOp::SMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_odd", "src\\isa\\s390x\\inst.isle line 4134"
    )
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4141.
    return v4;
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_udivmod32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4147.
            return v3;
        }
        I64 => {
            let v4 = constructor_udivmod64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4148.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "udivmod", "src\\isa\\s390x\\inst.isle line 4146"
    )
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_sdivmod32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4154.
            return v3;
        }
        I64 => {
            let v4 = constructor_sdivmod64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4155.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sdivmod", "src\\isa\\s390x\\inst.isle line 4153"
    )
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4161.
            return VecBinaryOp::UMax8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4162.
            return VecBinaryOp::UMax16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4163.
            return VecBinaryOp::UMax32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4164.
            return VecBinaryOp::UMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umax", "src\\isa\\s390x\\inst.isle line 4160"
    )
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4167.
    return v4;
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4173.
            return VecBinaryOp::SMax8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4174.
            return VecBinaryOp::SMax16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4175.
            return VecBinaryOp::SMax32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4176.
            return VecBinaryOp::SMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smax", "src\\isa\\s390x\\inst.isle line 4172"
    )
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4179.
    return v4;
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4185.
            return VecBinaryOp::UMin8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4186.
            return VecBinaryOp::UMin16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4187.
            return VecBinaryOp::UMin32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4188.
            return VecBinaryOp::UMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umin", "src\\isa\\s390x\\inst.isle line 4184"
    )
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4191.
    return v4;
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4197.
            return VecBinaryOp::SMin8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4198.
            return VecBinaryOp::SMin16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4199.
            return VecBinaryOp::SMin32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4200.
            return VecBinaryOp::SMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smin", "src\\isa\\s390x\\inst.isle line 4196"
    )
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4203.
    return v4;
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4209.
            return VecBinaryOp::UAvg8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4210.
            return VecBinaryOp::UAvg16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4211.
            return VecBinaryOp::UAvg32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4212.
            return VecBinaryOp::UAvg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_uavg", "src\\isa\\s390x\\inst.isle line 4208"
    )
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_uavg(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4215.
    return v4;
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4222.
        return ALUOp::And64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4221.
        return ALUOp::And32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and", "src\\isa\\s390x\\inst.isle line 4220"
    )
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4225.
    return v4;
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4228.
    return v4;
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4231.
    return v4;
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4234.
    return v4;
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::And128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4237.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and", "src\\isa\\s390x\\inst.isle line 4236"
    )
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4244.
        return ALUOp::Orr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4243.
        return ALUOp::Orr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or", "src\\isa\\s390x\\inst.isle line 4242"
    )
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4247.
    return v4;
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4250.
    return v4;
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4253.
    return v4;
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4256.
    return v4;
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Orr128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4259.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or", "src\\isa\\s390x\\inst.isle line 4258"
    )
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4266.
        return ALUOp::Xor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4265.
        return ALUOp::Xor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_xor", "src\\isa\\s390x\\inst.isle line 4264"
    )
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4269.
    return v4;
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4272.
    return v4;
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4275.
    return v4;
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v5 = &constructor_aluop_xor(ctx, arg1);
    let v6 = constructor_push_alu_uimm32shifted(ctx, arg0, v5, arg2, arg3, arg4);
    // Rule at src\isa\s390x\inst.isle line 4278.
    return v6;
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Xor128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4282.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_xor", "src\\isa\\s390x\\inst.isle line 4281"
    )
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v10 = constructor_xor_uimm32shifted(ctx, v9, arg1, v6);
        let v12 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v13 = constructor_xor_uimm32shifted(ctx, v9, v10, v12);
        // Rule at src\isa\s390x\inst.isle line 4290.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v7 = constructor_xor_uimm32shifted(ctx, v2, arg1, v6);
        // Rule at src\isa\s390x\inst.isle line 4288.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "not_reg", "src\\isa\\s390x\\inst.isle line 4287"
    )
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg1);
    if let Some(v11) = v10 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v12 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, arg3, v8);
        let v14 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v15 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, v12, v14);
        // Rule at src\isa\s390x\inst.isle line 4298.
        return v15;
    }
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, v3, arg2, arg3, v8);
        // Rule at src\isa\s390x\inst.isle line 4296.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_not_reg", "src\\isa\\s390x\\inst.isle line 4295"
    )
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_vec_not_or(ctx, arg0, arg1, arg1);
    // Rule at src\isa\s390x\inst.isle line 4303.
    return v2;
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4310.
        return ALUOp::NotAnd64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4309.
        return ALUOp::NotAnd32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_and", "src\\isa\\s390x\\inst.isle line 4308"
    )
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4313.
    return v4;
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotAnd128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4316.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_and", "src\\isa\\s390x\\inst.isle line 4315"
    )
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4323.
        return ALUOp::NotOrr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4322.
        return ALUOp::NotOrr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_or", "src\\isa\\s390x\\inst.isle line 4321"
    )
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4326.
    return v4;
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotOrr128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4329.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_or", "src\\isa\\s390x\\inst.isle line 4328"
    )
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4336.
        return ALUOp::NotXor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4335.
        return ALUOp::NotXor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_xor", "src\\isa\\s390x\\inst.isle line 4334"
    )
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4339.
    return v4;
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotXor128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4342.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_xor", "src\\isa\\s390x\\inst.isle line 4341"
    )
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4349.
        return ALUOp::AndNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4348.
        return ALUOp::AndNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and_not", "src\\isa\\s390x\\inst.isle line 4347"
    )
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4352.
    return v4;
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::AndNot128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4355.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and_not", "src\\isa\\s390x\\inst.isle line 4354"
    )
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\s390x\inst.isle line 4362.
        return ALUOp::OrrNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\s390x\inst.isle line 4361.
        return ALUOp::OrrNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or_not", "src\\isa\\s390x\\inst.isle line 4360"
    )
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4365.
    return v4;
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::OrrNot128, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 4368.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or_not", "src\\isa\\s390x\\inst.isle line 4367"
    )
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I64X2, &VecBinaryOp::BitPermute128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4374.
    return v4;
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4380.
            return UnaryOp::Abs32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4381.
            return UnaryOp::Abs64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs", "src\\isa\\s390x\\inst.isle line 4379"
    )
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4384.
        return UnaryOp::Abs64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs_sext32", "src\\isa\\s390x\\inst.isle line 4383"
    )
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4387.
    return v3;
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4390.
    return v3;
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4393.
            return VecUnaryOp::Abs8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4394.
            return VecUnaryOp::Abs16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4395.
            return VecUnaryOp::Abs32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4396.
            return VecUnaryOp::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_abs", "src\\isa\\s390x\\inst.isle line 4392"
    )
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_abs(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4399.
    return v3;
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 4405.
            return UnaryOp::Neg32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 4406.
            return UnaryOp::Neg32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4407.
            return UnaryOp::Neg32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4408.
            return UnaryOp::Neg64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg", "src\\isa\\s390x\\inst.isle line 4404"
    )
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4411.
        return UnaryOp::Neg64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg_sext32", "src\\isa\\s390x\\inst.isle line 4410"
    )
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4414.
    return v3;
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4417.
    return v3;
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4420.
            return VecUnaryOp::Neg8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4421.
            return VecUnaryOp::Neg16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4422.
            return VecUnaryOp::Neg32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4423.
            return VecUnaryOp::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_neg", "src\\isa\\s390x\\inst.isle line 4419"
    )
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_neg(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4426.
    return v3;
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4432.
            return UnaryOp::BSwap32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4433.
            return UnaryOp::BSwap64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_bswap", "src\\isa\\s390x\\inst.isle line 4431"
    )
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_bswap(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4436.
    return v3;
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_unaryop_bswap(ctx, arg1);
    let v5 = constructor_push_unary(ctx, arg0, v4, arg2, arg3);
    // Rule at src\isa\s390x\inst.isle line 4439.
    return v5;
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4445.
            return ShiftOp::RotL32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4446.
            return ShiftOp::RotL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_rot", "src\\isa\\s390x\\inst.isle line 4444"
    )
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4449.
    return v5;
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4453.
    return v5;
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src\isa\s390x\inst.isle line 4457.
    return v5;
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v6 = &constructor_shiftop_rot(ctx, arg1);
    let v7 = constructor_push_shift(ctx, arg0, v6, arg2, arg3, arg4, arg5);
    // Rule at src\isa\s390x\inst.isle line 4461.
    return v7;
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4465.
            return VecShiftOp::RotL8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4466.
            return VecShiftOp::RotL16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4467.
            return VecShiftOp::RotL32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4468.
            return VecShiftOp::RotL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_rot", "src\\isa\\s390x\\inst.isle line 4464"
    )
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4471.
    return v5;
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4475.
    return v5;
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\inst.isle line 4482.
            return ShiftOp::LShL32;
        }
        I16 => {
            // Rule at src\isa\s390x\inst.isle line 4483.
            return ShiftOp::LShL32;
        }
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4484.
            return ShiftOp::LShL32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4485.
            return ShiftOp::LShL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshl", "src\\isa\\s390x\\inst.isle line 4481"
    )
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4488.
    return v5;
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4492.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4496.
            return VecShiftOp::LShL8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4497.
            return VecShiftOp::LShL16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4498.
            return VecShiftOp::LShL32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4499.
            return VecShiftOp::LShL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshl", "src\\isa\\s390x\\inst.isle line 4495"
    )
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4502.
    return v5;
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4506.
    return v5;
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByByte128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4510.
    return v4;
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByBit128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4513.
    return v4;
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4519.
            return ShiftOp::LShR32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4520.
            return ShiftOp::LShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshr", "src\\isa\\s390x\\inst.isle line 4518"
    )
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4523.
    return v5;
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4527.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4531.
            return VecShiftOp::LShR8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4532.
            return VecShiftOp::LShR16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4533.
            return VecShiftOp::LShR32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4534.
            return VecShiftOp::LShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshr", "src\\isa\\s390x\\inst.isle line 4530"
    )
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4537.
    return v5;
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4541.
    return v5;
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByByte128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4545.
    return v4;
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByBit128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4548.
    return v4;
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4554.
            return ShiftOp::AShR32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4555.
            return ShiftOp::AShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_ashr", "src\\isa\\s390x\\inst.isle line 4553"
    )
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4558.
    return v5;
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4562.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4566.
            return VecShiftOp::AShR8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4567.
            return VecShiftOp::AShR16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4568.
            return VecShiftOp::AShR32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4569.
            return VecShiftOp::AShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_ashr", "src\\isa\\s390x\\inst.isle line 4565"
    )
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src\isa\s390x\inst.isle line 4572.
    return v5;
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src\isa\s390x\inst.isle line 4576.
    return v5;
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByByte128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4580.
    return v4;
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByBit128, arg0, arg1);
    // Rule at src\isa\s390x\inst.isle line 4583.
    return v4;
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntByte, arg0);
    // Rule at src\isa\s390x\inst.isle line 4589.
    return v3;
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntReg, arg0);
    // Rule at src\isa\s390x\inst.isle line 4592.
    return v3;
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\s390x\inst.isle line 4595.
            return VecUnaryOp::Popcnt8x16;
        }
        I16X8 => {
            // Rule at src\isa\s390x\inst.isle line 4596.
            return VecUnaryOp::Popcnt16x8;
        }
        I32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4597.
            return VecUnaryOp::Popcnt32x4;
        }
        I64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4598.
            return VecUnaryOp::Popcnt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_popcnt", "src\\isa\\s390x\\inst.isle line 4594"
    )
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_popcnt(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4601.
    return v3;
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::And32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4607.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::And64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4608.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_and", "src\\isa\\s390x\\inst.isle line 4606"
    )
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Orr32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4611.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Orr64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4612.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_or", "src\\isa\\s390x\\inst.isle line 4610"
    )
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Xor32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4615.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Xor64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4616.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_xor", "src\\isa\\s390x\\inst.isle line 4614"
    )
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Add32, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4619.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Add64, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4620.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_add", "src\\isa\\s390x\\inst.isle line 4618"
    )
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v4 = constructor_atomic_cas32(ctx, arg1, arg2, arg3);
            // Rule at src\isa\s390x\inst.isle line 4626.
            return v4;
        }
        I64 => {
            let v5 = constructor_atomic_cas64(ctx, arg1, arg2, arg3);
            // Rule at src\isa\s390x\inst.isle line 4627.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_impl", "src\\isa\\s390x\\inst.isle line 4625"
    )
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Reg {
    match arg1 {
        I32 => {
            let v5 = constructor_push_atomic_cas32(ctx, arg0, arg2, arg3, arg4);
            // Rule at src\isa\s390x\inst.isle line 4630.
            return v5;
        }
        I64 => {
            let v6 = constructor_push_atomic_cas64(ctx, arg0, arg2, arg3, arg4);
            // Rule at src\isa\s390x\inst.isle line 4631.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas", "src\\isa\\s390x\\inst.isle line 4629"
    )
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4637.
            return FPUOp2::Add32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4638.
            return FPUOp2::Add64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4639.
            return FPUOp2::Add32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4640.
            return FPUOp2::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_add", "src\\isa\\s390x\\inst.isle line 4636"
    )
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_add(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4643.
    return v4;
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4649.
            return FPUOp2::Sub32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4650.
            return FPUOp2::Sub64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4651.
            return FPUOp2::Sub32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4652.
            return FPUOp2::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_sub", "src\\isa\\s390x\\inst.isle line 4648"
    )
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_sub(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4655.
    return v4;
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4661.
            return FPUOp2::Mul32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4662.
            return FPUOp2::Mul64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4663.
            return FPUOp2::Mul32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4664.
            return FPUOp2::Mul64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_mul", "src\\isa\\s390x\\inst.isle line 4660"
    )
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_mul(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4667.
    return v4;
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4673.
            return FPUOp2::Div32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4674.
            return FPUOp2::Div64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4675.
            return FPUOp2::Div32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4676.
            return FPUOp2::Div64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_div", "src\\isa\\s390x\\inst.isle line 4672"
    )
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_div(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4679.
    return v4;
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4685.
            return FPUOp2::Min32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4686.
            return FPUOp2::Min64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4687.
            return FPUOp2::Min32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4688.
            return FPUOp2::Min64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min", "src\\isa\\s390x\\inst.isle line 4684"
    )
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_min(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4691.
    return v4;
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4697.
            return FPUOp2::Max32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4698.
            return FPUOp2::Max64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4699.
            return FPUOp2::Max32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4700.
            return FPUOp2::Max64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max", "src\\isa\\s390x\\inst.isle line 4696"
    )
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_max(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4703.
    return v4;
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4709.
            return FPUOp2::MinPseudo32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4710.
            return FPUOp2::MinPseudo64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4711.
            return FPUOp2::MinPseudo32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4712.
            return FPUOp2::MinPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min_pseudo", "src\\isa\\s390x\\inst.isle line 4708"
    )
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4715.
    return v4;
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4721.
            return FPUOp2::MaxPseudo32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4722.
            return FPUOp2::MaxPseudo64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4723.
            return FPUOp2::MaxPseudo32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4724.
            return FPUOp2::MaxPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max_pseudo", "src\\isa\\s390x\\inst.isle line 4720"
    )
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4727.
    return v4;
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp3 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4733.
            return FPUOp3::MAdd32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4734.
            return FPUOp3::MAdd64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4735.
            return FPUOp3::MAdd32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4736.
            return FPUOp3::MAdd64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop3_fma", "src\\isa\\s390x\\inst.isle line 4732"
    )
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_fpuop3_fma(ctx, arg0);
    let v5 = constructor_fpu_rrrr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src\isa\s390x\inst.isle line 4739.
    return v5;
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4745.
            return FPUOp1::Sqrt32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4746.
            return FPUOp1::Sqrt64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4747.
            return FPUOp1::Sqrt32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4748.
            return FPUOp1::Sqrt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_sqrt", "src\\isa\\s390x\\inst.isle line 4744"
    )
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_sqrt(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4751.
    return v3;
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4757.
            return FPUOp1::Neg32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4758.
            return FPUOp1::Neg64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4759.
            return FPUOp1::Neg32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4760.
            return FPUOp1::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_neg", "src\\isa\\s390x\\inst.isle line 4756"
    )
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_neg(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4763.
    return v3;
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4769.
            return FPUOp1::Abs32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4770.
            return FPUOp1::Abs64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4771.
            return FPUOp1::Abs32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4772.
            return FPUOp1::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_abs", "src\\isa\\s390x\\inst.isle line 4768"
    )
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_abs(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src\isa\s390x\inst.isle line 4775.
    return v3;
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(ctx: &mut C, arg0: Type) -> FpuRoundOp {
    match arg0 {
        F32 => {
            // Rule at src\isa\s390x\inst.isle line 4781.
            return FpuRoundOp::Round32;
        }
        F64 => {
            // Rule at src\isa\s390x\inst.isle line 4782.
            return FpuRoundOp::Round64;
        }
        F32X4 => {
            // Rule at src\isa\s390x\inst.isle line 4783.
            return FpuRoundOp::Round32x4;
        }
        F64X2 => {
            // Rule at src\isa\s390x\inst.isle line 4784.
            return FpuRoundOp::Round64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuroundop_round", "src\\isa\\s390x\\inst.isle line 4780"
    )
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToPosInfinity, arg1);
    // Rule at src\isa\s390x\inst.isle line 4787.
    return v4;
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNegInfinity, arg1);
    // Rule at src\isa\s390x\inst.isle line 4791.
    return v4;
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToZero, arg1);
    // Rule at src\isa\s390x\inst.isle line 4795.
    return v4;
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNearestTiesToEven, arg1);
    // Rule at src\isa\s390x\inst.isle line 4799.
    return v4;
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 4806.
        return arg2;
    }
    match arg0 {
        F64 => {
            if arg1 == F32 {
                let v5 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32To64, arg2);
                // Rule at src\isa\s390x\inst.isle line 4807.
                return v5;
            }
        }
        F64X2 => {
            if arg1 == F32X4 {
                let v7 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32x4To64x2, arg2);
                // Rule at src\isa\s390x\inst.isle line 4809.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpromote_reg", "src\\isa\\s390x\\inst.isle line 4805"
    )
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src\isa\s390x\inst.isle line 4816.
        return arg3;
    }
    match arg0 {
        F32 => {
            if arg1 == F64 {
                let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::Cvt64To32, arg2, arg3);
                // Rule at src\isa\s390x\inst.isle line 4817.
                return v6;
            }
        }
        F32X4 => {
            if arg1 == F64X2 {
                let v9 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::Cvt64x2To32x4, arg2, arg3);
                // Rule at src\isa\s390x\inst.isle line 4819.
                return v9;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fdemote_reg", "src\\isa\\s390x\\inst.isle line 4815"
    )
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromUInt32, arg1, v8);
            // Rule at src\isa\s390x\inst.isle line 4826.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromUInt64, arg1, v13);
            // Rule at src\isa\s390x\inst.isle line 4828.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromUInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4830.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromUInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4832.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_uint_reg", "src\\isa\\s390x\\inst.isle line 4825"
    )
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromSInt32, arg1, v8);
            // Rule at src\isa\s390x\inst.isle line 4839.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromSInt64, arg1, v13);
            // Rule at src\isa\s390x\inst.isle line 4841.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromSInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4843.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromSInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4845.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_sint_reg", "src\\isa\\s390x\\inst.isle line 4838"
    )
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src\isa\s390x\inst.isle line 4852.
                    return F32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4853.
                return F64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4854.
                return F64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_flt_ty", "src\\isa\\s390x\\inst.isle line 4851"
    )
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src\isa\s390x\inst.isle line 4857.
                    return I32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4858.
                return I64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src\isa\s390x\inst.isle line 4859.
                return I64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_int_ty", "src\\isa\\s390x\\inst.isle line 4856"
    )
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToUInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, I32X4, v6, 0x0, v8);
            // Rule at src\isa\s390x\inst.isle line 4865.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToUInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, I64X2, v13, 0x0, v8);
            // Rule at src\isa\s390x\inst.isle line 4867.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToUInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4869.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToUInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4871.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_reg", "src\\isa\\s390x\\inst.isle line 4864"
    )
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_uint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src\isa\s390x\inst.isle line 4875.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_uint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src\isa\s390x\inst.isle line 4877.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_ub", "src\\isa\\s390x\\inst.isle line 4874"
    )
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        F32 => {
            let v2 = C::fcvt_to_uint_lb32(ctx);
            let v3 = constructor_imm(ctx, F32, v2);
            // Rule at src\isa\s390x\inst.isle line 4881.
            return v3;
        }
        F64 => {
            let v5 = C::fcvt_to_uint_lb64(ctx);
            let v6 = constructor_imm(ctx, F64, v5);
            // Rule at src\isa\s390x\inst.isle line 4882.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_lb", "src\\isa\\s390x\\inst.isle line 4880"
    )
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToSInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, F32X4, v6, 0x0, v8);
            // Rule at src\isa\s390x\inst.isle line 4897.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToSInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, F64X2, v13, 0x0, v8);
            // Rule at src\isa\s390x\inst.isle line 4899.
            return v14;
        }
        F32X4 => {
            let v16 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToSInt32x4, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4901.
            return v16;
        }
        F64X2 => {
            let v18 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToSInt64x2, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 4903.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_reg", "src\\isa\\s390x\\inst.isle line 4896"
    )
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src\isa\s390x\inst.isle line 4907.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src\isa\s390x\inst.isle line 4909.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_ub", "src\\isa\\s390x\\inst.isle line 4906"
    )
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_lb32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src\isa\s390x\inst.isle line 4913.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_lb64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src\isa\s390x\inst.isle line 4915.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_lb", "src\\isa\\s390x\\inst.isle line 4912"
    )
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4931.
            return CmpOp::CmpS32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4932.
            return CmpOp::CmpS64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps", "src\\isa\\s390x\\inst.isle line 4930"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4935.
            return CmpOp::CmpS32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4936.
            return CmpOp::CmpS64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext16", "src\\isa\\s390x\\inst.isle line 4934"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4939.
        return CmpOp::CmpS64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext32", "src\\isa\\s390x\\inst.isle line 4938"
    )
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4942.
    return v4.clone();
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4945.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm16(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4948.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm32(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4951.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4954.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4957.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4960.
    return v4.clone();
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4966.
            return CmpOp::CmpL32;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4967.
            return CmpOp::CmpL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu", "src\\isa\\s390x\\inst.isle line 4965"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src\isa\s390x\inst.isle line 4970.
            return CmpOp::CmpL32Ext16;
        }
        I64 => {
            // Rule at src\isa\s390x\inst.isle line 4971.
            return CmpOp::CmpL64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext16", "src\\isa\\s390x\\inst.isle line 4969"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src\isa\s390x\inst.isle line 4974.
        return CmpOp::CmpL64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext32", "src\\isa\\s390x\\inst.isle line 4973"
    )
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4977.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4980.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_ruimm32(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4983.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4986.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4989.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src\isa\s390x\inst.isle line 4992.
    return v4.clone();
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src\isa\s390x\inst.isle line 4998.
                    return VecIntCmpOp::CmpEq8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src\isa\s390x\inst.isle line 4999.
                    return VecIntCmpOp::CmpEq16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\s390x\inst.isle line 5000.
                    return VecIntCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\s390x\inst.isle line 5001.
                    return VecIntCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmpeq", "src\\isa\\s390x\\inst.isle line 4997"
    )
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5004.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeq", "src\\isa\\s390x\\inst.isle line 5003"
    )
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5006.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeqs", "src\\isa\\s390x\\inst.isle line 5005"
    )
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src\isa\s390x\inst.isle line 5009.
                    return VecIntCmpOp::SCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src\isa\s390x\inst.isle line 5010.
                    return VecIntCmpOp::SCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\s390x\inst.isle line 5011.
                    return VecIntCmpOp::SCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\s390x\inst.isle line 5012.
                    return VecIntCmpOp::SCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmph", "src\\isa\\s390x\\inst.isle line 5008"
    )
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5015.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmph", "src\\isa\\s390x\\inst.isle line 5014"
    )
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5017.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphs", "src\\isa\\s390x\\inst.isle line 5016"
    )
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src\isa\s390x\inst.isle line 5020.
                    return VecIntCmpOp::UCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src\isa\s390x\inst.isle line 5021.
                    return VecIntCmpOp::UCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\s390x\inst.isle line 5022.
                    return VecIntCmpOp::UCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\s390x\inst.isle line 5023.
                    return VecIntCmpOp::UCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmphl", "src\\isa\\s390x\\inst.isle line 5019"
    )
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5026.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphl", "src\\isa\\s390x\\inst.isle line 5025"
    )
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5028.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphls", "src\\isa\\s390x\\inst.isle line 5027"
    )
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v3 = &constructor_fpu_cmp32(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 5034.
            return v3.clone();
        }
        F64 => {
            let v4 = &constructor_fpu_cmp64(ctx, arg1, arg2);
            // Rule at src\isa\s390x\inst.isle line 5035.
            return v4.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_reg", "src\\isa\\s390x\\inst.isle line 5033"
    )
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\s390x\inst.isle line 5041.
                    return VecFloatCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\s390x\inst.isle line 5042.
                    return VecFloatCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmpeq", "src\\isa\\s390x\\inst.isle line 5040"
    )
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5045.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeq", "src\\isa\\s390x\\inst.isle line 5044"
    )
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5047.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeqs", "src\\isa\\s390x\\inst.isle line 5046"
    )
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\s390x\inst.isle line 5050.
                    return VecFloatCmpOp::CmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\s390x\inst.isle line 5051.
                    return VecFloatCmpOp::CmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmph", "src\\isa\\s390x\\inst.isle line 5049"
    )
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5054.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmph", "src\\isa\\s390x\\inst.isle line 5053"
    )
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5056.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphs", "src\\isa\\s390x\\inst.isle line 5055"
    )
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\s390x\inst.isle line 5059.
                    return VecFloatCmpOp::CmpHiEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\s390x\inst.isle line 5060.
                    return VecFloatCmpOp::CmpHiEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmphe", "src\\isa\\s390x\\inst.isle line 5058"
    )
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5063.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphe", "src\\isa\\s390x\\inst.isle line 5062"
    )
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src\isa\s390x\inst.isle line 5065.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphes", "src\\isa\\s390x\\inst.isle line 5064"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v2095,
            args: ref v2096,
            flags: v2097,
        } => {
            if let &Opcode::AtomicCas = v2095 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v617 = C::ty_32_or_64(ctx, v3);
                    if let Some(v618) = v617 {
                        let v2102 = C::bigendian(ctx, v2097);
                        if let Some(v2103) = v2102 {
                            let v2098 = C::unpack_value_array_3(ctx, v2096);
                            let v2104 = C::put_in_reg(ctx, v2098.1);
                            let v2105 = C::put_in_reg(ctx, v2098.2);
                            let v2047 = C::zero_offset(ctx);
                            let v2106 = &constructor_lower_address(ctx, v2097, v2098.0, v2047);
                            let v2107 = constructor_atomic_cas_impl(ctx, v618, v2104, v2105, v2106);
                            let v2108 = constructor_output_reg(ctx, v2107);
                            let v2109 = Some(v2108);
                            // Rule at src\isa\s390x\lower.isle line 3139.
                            return v2109;
                        }
                        let v2110 = C::littleendian(ctx, v2097);
                        if let Some(v2111) = v2110 {
                            let v2098 = C::unpack_value_array_3(ctx, v2096);
                            let v2104 = C::put_in_reg(ctx, v2098.1);
                            let v2112 = constructor_bswap_reg(ctx, v618, v2104);
                            let v2113 = C::put_in_reg(ctx, v2098.2);
                            let v2114 = constructor_bswap_reg(ctx, v618, v2113);
                            let v2115 = C::zero_offset(ctx);
                            let v2116 = &constructor_lower_address(ctx, v2097, v2098.0, v2115);
                            let v2117 = constructor_atomic_cas_impl(ctx, v618, v2112, v2114, v2116);
                            let v2118 = constructor_bswap_reg(ctx, v618, v2117);
                            let v2119 = constructor_output_reg(ctx, v2118);
                            let v2120 = Some(v2119);
                            // Rule at src\isa\s390x\lower.isle line 3146.
                            return v2120;
                        }
                    }
                    let v444 = C::ty_8_or_16(ctx, v3);
                    if let Some(v445) = v444 {
                        let v2098 = C::unpack_value_array_3(ctx, v2096);
                        let v2104 = C::put_in_reg(ctx, v2098.1);
                        let v2105 = C::put_in_reg(ctx, v2098.2);
                        let v2121 = C::put_in_reg(ctx, v2098.0);
                        let v2122 = constructor_casloop_bitshift(ctx, v2121);
                        let v2123 = constructor_casloop_aligned_addr(ctx, v2121);
                        let v2124 = &C::inst_builder_new(ctx);
                        let v2125 = constructor_casloop_val_reg(ctx);
                        let v2126 = C::writable_reg_to_reg(ctx, v2125);
                        let v2127 =
                            constructor_casloop_rotate_in(ctx, v2124, v445, v2097, v2122, v2126);
                        let v2128 = constructor_casloop_tmp_reg(ctx);
                        let v2129 = constructor_atomic_cas_body(
                            ctx, v2124, v445, v2097, v2128, v2127, v2104, v2105,
                        );
                        let v2130 =
                            constructor_casloop_rotate_out(ctx, v2124, v445, v2097, v2122, v2129);
                        let v2131 = constructor_casloop_subword(
                            ctx, v2124, v445, v2097, v2123, v2122, v2130,
                        );
                        let v2132 = constructor_output_reg(ctx, v2131);
                        let v2133 = Some(v2132);
                        // Rule at src\isa\s390x\lower.isle line 3153.
                        return v2133;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v2029,
            args: ref v2030,
            flags: v2031,
            op: ref v2032,
        } => {
            if let &Opcode::AtomicRmw = v2029 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v617 = C::ty_32_or_64(ctx, v3);
                    if let Some(v618) = v617 {
                        match v2032 {
                            &AtomicRmwOp::Add => {
                                let v2036 = C::bigendian(ctx, v2031);
                                if let Some(v2037) = v2036 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2039 = C::zero_offset(ctx);
                                    let v2040 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2039);
                                    let v2067 = constructor_atomic_rmw_add(ctx, v618, v2038, v2040);
                                    let v2068 = constructor_output_reg(ctx, v2067);
                                    let v2069 = Some(v2068);
                                    // Rule at src\isa\s390x\lower.isle line 2919.
                                    return v2069;
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v2036 = C::bigendian(ctx, v2031);
                                if let Some(v2037) = v2036 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2039 = C::zero_offset(ctx);
                                    let v2040 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2039);
                                    let v2041 = constructor_atomic_rmw_and(ctx, v618, v2038, v2040);
                                    let v2042 = constructor_output_reg(ctx, v2041);
                                    let v2043 = Some(v2042);
                                    // Rule at src\isa\s390x\lower.isle line 2883.
                                    return v2043;
                                }
                                let v2044 = C::littleendian(ctx, v2031);
                                if let Some(v2045) = v2044 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2046 = constructor_bswap_reg(ctx, v618, v2038);
                                    let v2047 = C::zero_offset(ctx);
                                    let v2048 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2047);
                                    let v2049 = constructor_atomic_rmw_and(ctx, v618, v2046, v2048);
                                    let v2050 = constructor_bswap_reg(ctx, v618, v2049);
                                    let v2051 = constructor_output_reg(ctx, v2050);
                                    let v2052 = Some(v2051);
                                    // Rule at src\isa\s390x\lower.isle line 2889.
                                    return v2052;
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v2036 = C::bigendian(ctx, v2031);
                                if let Some(v2037) = v2036 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2039 = C::zero_offset(ctx);
                                    let v2040 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2039);
                                    let v2053 = constructor_atomic_rmw_or(ctx, v618, v2038, v2040);
                                    let v2054 = constructor_output_reg(ctx, v2053);
                                    let v2055 = Some(v2054);
                                    // Rule at src\isa\s390x\lower.isle line 2895.
                                    return v2055;
                                }
                                let v2044 = C::littleendian(ctx, v2031);
                                if let Some(v2045) = v2044 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2046 = constructor_bswap_reg(ctx, v618, v2038);
                                    let v2047 = C::zero_offset(ctx);
                                    let v2048 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2047);
                                    let v2056 = constructor_atomic_rmw_or(ctx, v618, v2046, v2048);
                                    let v2057 = constructor_bswap_reg(ctx, v618, v2056);
                                    let v2058 = constructor_output_reg(ctx, v2057);
                                    let v2059 = Some(v2058);
                                    // Rule at src\isa\s390x\lower.isle line 2901.
                                    return v2059;
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v2036 = C::bigendian(ctx, v2031);
                                if let Some(v2037) = v2036 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2070 = constructor_neg_reg(ctx, v618, v2038);
                                    let v2047 = C::zero_offset(ctx);
                                    let v2048 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2047);
                                    let v2071 = constructor_atomic_rmw_add(ctx, v618, v2070, v2048);
                                    let v2072 = constructor_output_reg(ctx, v2071);
                                    let v2073 = Some(v2072);
                                    // Rule at src\isa\s390x\lower.isle line 2925.
                                    return v2073;
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v2036 = C::bigendian(ctx, v2031);
                                if let Some(v2037) = v2036 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2039 = C::zero_offset(ctx);
                                    let v2040 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2039);
                                    let v2060 = constructor_atomic_rmw_xor(ctx, v618, v2038, v2040);
                                    let v2061 = constructor_output_reg(ctx, v2060);
                                    let v2062 = Some(v2061);
                                    // Rule at src\isa\s390x\lower.isle line 2907.
                                    return v2062;
                                }
                                let v2044 = C::littleendian(ctx, v2031);
                                if let Some(v2045) = v2044 {
                                    let v2033 = C::unpack_value_array_2(ctx, v2030);
                                    let v2038 = C::put_in_reg(ctx, v2033.1);
                                    let v2046 = constructor_bswap_reg(ctx, v618, v2038);
                                    let v2047 = C::zero_offset(ctx);
                                    let v2048 =
                                        &constructor_lower_address(ctx, v2031, v2033.0, v2047);
                                    let v2063 = constructor_atomic_rmw_xor(ctx, v618, v2046, v2048);
                                    let v2064 = constructor_bswap_reg(ctx, v618, v2063);
                                    let v2065 = constructor_output_reg(ctx, v2064);
                                    let v2066 = Some(v2065);
                                    // Rule at src\isa\s390x\lower.isle line 2913.
                                    return v2066;
                                }
                            }
                            _ => {}
                        }
                        let v2033 = C::unpack_value_array_2(ctx, v2030);
                        let v2038 = C::put_in_reg(ctx, v2033.1);
                        let v2074 = C::put_in_reg(ctx, v2033.0);
                        let v2075 = &C::inst_builder_new(ctx);
                        let v2076 = constructor_casloop_val_reg(ctx);
                        let v2078 = constructor_casloop_tmp_reg(ctx);
                        let v2077 = C::writable_reg_to_reg(ctx, v2076);
                        let v2079 = constructor_atomic_rmw_body(
                            ctx, v2075, v618, v2031, v2032, v2078, v2077, v2038,
                        );
                        let v2080 = constructor_casloop(ctx, v2075, v618, v2031, v2074, v2079);
                        let v2081 = constructor_output_reg(ctx, v2080);
                        let v2082 = Some(v2081);
                        // Rule at src\isa\s390x\lower.isle line 2934.
                        return v2082;
                    }
                    let v444 = C::ty_8_or_16(ctx, v3);
                    if let Some(v445) = v444 {
                        let v2033 = C::unpack_value_array_2(ctx, v2030);
                        let v2038 = C::put_in_reg(ctx, v2033.1);
                        let v2074 = C::put_in_reg(ctx, v2033.0);
                        let v2083 = constructor_casloop_bitshift(ctx, v2074);
                        let v2084 = constructor_casloop_aligned_addr(ctx, v2074);
                        let v2085 = &C::inst_builder_new(ctx);
                        let v2086 = constructor_casloop_val_reg(ctx);
                        let v2087 = C::writable_reg_to_reg(ctx, v2086);
                        let v2088 =
                            constructor_casloop_rotate_in(ctx, v2085, v445, v2031, v2083, v2087);
                        let v2089 = constructor_casloop_tmp_reg(ctx);
                        let v2090 = constructor_atomic_rmw_body(
                            ctx, v2085, v445, v2031, v2032, v2089, v2088, v2038,
                        );
                        let v2091 =
                            constructor_casloop_rotate_out(ctx, v2085, v445, v2031, v2083, v2090);
                        let v2092 = constructor_casloop_subword(
                            ctx, v2085, v445, v2031, v2084, v2083, v2091,
                        );
                        let v2093 = constructor_output_reg(ctx, v2092);
                        let v2094 = Some(v2093);
                        // Rule at src\isa\s390x\lower.isle line 2946.
                        return v2094;
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v44,
            args: ref v45,
        } => {
            match v44 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v1799 = &C::lane_order(ctx);
                            match v1799 {
                                &LaneOrder::LittleEndian => {
                                    let v1807 = constructor_vec_imm(ctx, v174, 0x0);
                                    let v46 = C::unpack_value_array_2(ctx, v45);
                                    let v50 = C::put_in_reg(ctx, v46.0);
                                    let v1809 = constructor_vec_imm_splat(ctx, I8X16, 0xEF);
                                    let v476 = C::put_in_reg(ctx, v46.1);
                                    let v1810 = constructor_vec_not(ctx, I8X16, v476);
                                    let v1811 = constructor_vec_umax(ctx, I8X16, v1809, v1810);
                                    let v1812 =
                                        constructor_vec_permute(ctx, v174, v1807, v50, v1811);
                                    let v1813 = constructor_output_reg(ctx, v1812);
                                    let v1814 = Some(v1813);
                                    // Rule at src\isa\s390x\lower.isle line 2237.
                                    return v1814;
                                }
                                &LaneOrder::BigEndian => {
                                    let v46 = C::unpack_value_array_2(ctx, v45);
                                    let v71 = C::put_in_reg(ctx, v46.0);
                                    let v1800 = constructor_vec_imm(ctx, v174, 0x0);
                                    let v1802 = constructor_vec_imm_splat(ctx, I8X16, 0x10);
                                    let v476 = C::put_in_reg(ctx, v46.1);
                                    let v1803 = constructor_vec_umin(ctx, I8X16, v1802, v476);
                                    let v1804 =
                                        constructor_vec_permute(ctx, v174, v71, v1800, v1803);
                                    let v1805 = constructor_output_reg(ctx, v1804);
                                    let v1806 = Some(v1805);
                                    // Rule at src\isa\s390x\lower.isle line 2218.
                                    return v1806;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v364 = constructor_put_in_reg_sext32(ctx, v46.0);
                            let v365 = constructor_put_in_reg_sext32(ctx, v46.1);
                            let v336 = constructor_ty_ext32(ctx, v70);
                            let v366 = &constructor_icmps_reg(ctx, v336, v364, v365);
                            let v381 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                            let v382 = &constructor_bool(ctx, v366, v381);
                            let v383 = constructor_select_bool_reg(ctx, v70, v382, v365, v364);
                            let v384 = constructor_output_reg(ctx, v383);
                            let v385 = Some(v384);
                            // Rule at src\isa\s390x\lower.isle line 316.
                            return v385;
                        }
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v386 = &constructor_vec_int128_scmphi(ctx, v71, v72);
                            let v387 = constructor_select_bool_reg(ctx, I128, v386, v72, v71);
                            let v388 = constructor_output_reg(ctx, v387);
                            let v389 = Some(v388);
                            // Rule at src\isa\s390x\lower.isle line 324.
                            return v389;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v390 = constructor_vec_smin(ctx, v174, v71, v72);
                            let v391 = constructor_output_reg(ctx, v390);
                            let v392 = Some(v391);
                            // Rule at src\isa\s390x\lower.isle line 331.
                            return v392;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v335 = constructor_put_in_reg_zext32(ctx, v46.1);
                            let v336 = constructor_ty_ext32(ctx, v70);
                            let v337 = &constructor_icmpu_reg(ctx, v336, v334, v335);
                            let v352 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                            let v353 = &constructor_bool(ctx, v337, v352);
                            let v354 = constructor_select_bool_reg(ctx, v70, v353, v335, v334);
                            let v355 = constructor_output_reg(ctx, v354);
                            let v356 = Some(v355);
                            // Rule at src\isa\s390x\lower.isle line 272.
                            return v356;
                        }
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v357 = &constructor_vec_int128_ucmphi(ctx, v71, v72);
                            let v358 = constructor_select_bool_reg(ctx, I128, v357, v72, v71);
                            let v359 = constructor_output_reg(ctx, v358);
                            let v360 = Some(v359);
                            // Rule at src\isa\s390x\lower.isle line 280.
                            return v360;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v361 = constructor_vec_umin(ctx, v174, v71, v72);
                            let v362 = constructor_output_reg(ctx, v361);
                            let v363 = Some(v362);
                            // Rule at src\isa\s390x\lower.isle line 287.
                            return v363;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v364 = constructor_put_in_reg_sext32(ctx, v46.0);
                            let v365 = constructor_put_in_reg_sext32(ctx, v46.1);
                            let v336 = constructor_ty_ext32(ctx, v70);
                            let v366 = &constructor_icmps_reg(ctx, v336, v364, v365);
                            let v368 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                            let v369 = &constructor_bool(ctx, v366, v368);
                            let v370 = constructor_select_bool_reg(ctx, v70, v369, v365, v364);
                            let v371 = constructor_output_reg(ctx, v370);
                            let v372 = Some(v371);
                            // Rule at src\isa\s390x\lower.isle line 294.
                            return v372;
                        }
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v373 = &constructor_vec_int128_scmphi(ctx, v72, v71);
                            let v374 = constructor_select_bool_reg(ctx, I128, v373, v72, v71);
                            let v375 = constructor_output_reg(ctx, v374);
                            let v376 = Some(v375);
                            // Rule at src\isa\s390x\lower.isle line 302.
                            return v376;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v377 = constructor_vec_smax(ctx, v174, v71, v72);
                            let v378 = constructor_output_reg(ctx, v377);
                            let v379 = Some(v378);
                            // Rule at src\isa\s390x\lower.isle line 309.
                            return v379;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v335 = constructor_put_in_reg_zext32(ctx, v46.1);
                            let v336 = constructor_ty_ext32(ctx, v70);
                            let v337 = &constructor_icmpu_reg(ctx, v336, v334, v335);
                            let v339 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
                            let v340 = &constructor_bool(ctx, v337, v339);
                            let v341 = constructor_select_bool_reg(ctx, v70, v340, v335, v334);
                            let v342 = constructor_output_reg(ctx, v341);
                            let v343 = Some(v342);
                            // Rule at src\isa\s390x\lower.isle line 250.
                            return v343;
                        }
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v344 = &constructor_vec_int128_ucmphi(ctx, v72, v71);
                            let v345 = constructor_select_bool_reg(ctx, I128, v344, v72, v71);
                            let v346 = constructor_output_reg(ctx, v345);
                            let v347 = Some(v346);
                            // Rule at src\isa\s390x\lower.isle line 258.
                            return v347;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v348 = constructor_vec_umax(ctx, v174, v71, v72);
                            let v349 = constructor_output_reg(ctx, v348);
                            let v350 = Some(v349);
                            // Rule at src\isa\s390x\lower.isle line 265.
                            return v350;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v393 = constructor_vec_uavg(ctx, v174, v71, v72);
                            let v394 = constructor_output_reg(ctx, v393);
                            let v395 = Some(v394);
                            // Rule at src\isa\s390x\lower.isle line 338.
                            return v395;
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v175 = constructor_vec_add(ctx, v174, v71, v72);
                            let v176 = C::put_in_reg(ctx, v46.0);
                            let v177 = constructor_vec_cmphl(ctx, v174, v176, v175);
                            let v178 = constructor_vec_or(ctx, v174, v175, v177);
                            let v179 = constructor_output_reg(ctx, v178);
                            let v180 = Some(v179);
                            // Rule at src\isa\s390x\lower.isle line 116.
                            return v180;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v181 = constructor_vec_widen_type(ctx, v174);
                            let v182 = constructor_vec_widen_type(ctx, v174);
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v184 = constructor_vec_unpacks_high(ctx, v174, v183);
                            let v185 = C::put_in_reg(ctx, v46.1);
                            let v186 = constructor_vec_unpacks_high(ctx, v174, v185);
                            let v187 = constructor_vec_add(ctx, v182, v184, v186);
                            let v188 = constructor_vec_widen_type(ctx, v174);
                            let v189 = C::put_in_reg(ctx, v46.0);
                            let v190 = constructor_vec_unpacks_low(ctx, v174, v189);
                            let v191 = C::put_in_reg(ctx, v46.1);
                            let v192 = constructor_vec_unpacks_low(ctx, v174, v191);
                            let v193 = constructor_vec_add(ctx, v188, v190, v192);
                            let v194 = constructor_vec_pack_ssat(ctx, v181, v187, v193);
                            let v195 = constructor_output_reg(ctx, v194);
                            let v196 = Some(v195);
                            // Rule at src\isa\s390x\lower.isle line 124.
                            return v196;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v285 = constructor_vec_sub(ctx, v174, v71, v72);
                            let v176 = C::put_in_reg(ctx, v46.0);
                            let v185 = C::put_in_reg(ctx, v46.1);
                            let v286 = constructor_vec_cmphl(ctx, v174, v176, v185);
                            let v287 = constructor_vec_and(ctx, v174, v285, v286);
                            let v288 = constructor_output_reg(ctx, v287);
                            let v289 = Some(v288);
                            // Rule at src\isa\s390x\lower.isle line 188.
                            return v289;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v181 = constructor_vec_widen_type(ctx, v174);
                            let v182 = constructor_vec_widen_type(ctx, v174);
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v184 = constructor_vec_unpacks_high(ctx, v174, v183);
                            let v185 = C::put_in_reg(ctx, v46.1);
                            let v186 = constructor_vec_unpacks_high(ctx, v174, v185);
                            let v290 = constructor_vec_sub(ctx, v182, v184, v186);
                            let v188 = constructor_vec_widen_type(ctx, v174);
                            let v189 = C::put_in_reg(ctx, v46.0);
                            let v190 = constructor_vec_unpacks_low(ctx, v174, v189);
                            let v191 = C::put_in_reg(ctx, v46.1);
                            let v192 = constructor_vec_unpacks_low(ctx, v174, v191);
                            let v291 = constructor_vec_sub(ctx, v188, v190, v192);
                            let v292 = constructor_vec_pack_ssat(ctx, v181, v290, v291);
                            let v293 = constructor_output_reg(ctx, v292);
                            let v294 = Some(v293);
                            // Rule at src\isa\s390x\lower.isle line 195.
                            return v294;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v86 = C::def_inst(ctx, v46.0);
                            if let Some(v87) = v86 {
                                let v88 = &C::inst_data(ctx, v87);
                                if let &InstructionData::Unary {
                                    opcode: ref v89,
                                    arg: v90,
                                } = v88
                                {
                                    if let &Opcode::Sextend = v89 {
                                        let v91 = C::value_type(ctx, v90);
                                        if v91 == I32 {
                                            let v49 = C::put_in_reg(ctx, v46.1);
                                            let v92 = C::put_in_reg(ctx, v90);
                                            let v93 =
                                                constructor_add_reg_sext32(ctx, v70, v49, v92);
                                            let v94 = constructor_output_reg(ctx, v93);
                                            let v95 = Some(v94);
                                            // Rule at src\isa\s390x\lower.isle line 73.
                                            return v95;
                                        }
                                    }
                                }
                            }
                            let v101 = C::i16_from_value(ctx, v46.0);
                            if let Some(v102) = v101 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v103 = constructor_add_simm16(ctx, v70, v49, v102);
                                let v104 = constructor_output_reg(ctx, v103);
                                let v105 = Some(v104);
                                // Rule at src\isa\s390x\lower.isle line 79.
                                return v105;
                            }
                            let v111 = C::i32_from_value(ctx, v46.0);
                            if let Some(v112) = v111 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v113 = constructor_add_simm32(ctx, v70, v49, v112);
                                let v114 = constructor_output_reg(ctx, v113);
                                let v115 = Some(v114);
                                // Rule at src\isa\s390x\lower.isle line 83.
                                return v115;
                            }
                            let v135 = C::sinkable_inst(ctx, v46.0);
                            if let Some(v136) = v135 {
                                let v137 = &C::inst_data(ctx, v136);
                                if let &InstructionData::Load {
                                    opcode: ref v138,
                                    arg: v139,
                                    flags: v140,
                                    offset: v141,
                                } = v137
                                {
                                    match v138 {
                                        &Opcode::Load => {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v132 = C::value_type(ctx, v46.0);
                                                let v133 = C::ty_32_or_64(ctx, v132);
                                                if let Some(v134) = v133 {
                                                    let v49 = C::put_in_reg(ctx, v46.1);
                                                    let v144 = &constructor_sink_load(ctx, v136);
                                                    let v145 =
                                                        constructor_add_mem(ctx, v70, v49, v144);
                                                    let v146 = constructor_output_reg(ctx, v145);
                                                    let v147 = Some(v146);
                                                    // Rule at src\isa\s390x\lower.isle line 89.
                                                    return v147;
                                                }
                                                if v132 == I16 {
                                                    let v49 = C::put_in_reg(ctx, v46.1);
                                                    let v144 = &constructor_sink_load(ctx, v136);
                                                    let v151 = constructor_add_mem_sext16(
                                                        ctx, v70, v49, v144,
                                                    );
                                                    let v152 = constructor_output_reg(ctx, v151);
                                                    let v153 = Some(v152);
                                                    // Rule at src\isa\s390x\lower.isle line 95.
                                                    return v153;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v158 = &constructor_sink_sload16(ctx, v136);
                                                let v159 =
                                                    constructor_add_mem_sext16(ctx, v70, v49, v158);
                                                let v160 = constructor_output_reg(ctx, v159);
                                                let v161 = Some(v160);
                                                // Rule at src\isa\s390x\lower.isle line 101.
                                                return v161;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v166 = &constructor_sink_sload32(ctx, v136);
                                                let v167 =
                                                    constructor_add_mem_sext32(ctx, v70, v49, v166);
                                                let v168 = constructor_output_reg(ctx, v167);
                                                let v169 = Some(v168);
                                                // Rule at src\isa\s390x\lower.isle line 105.
                                                return v169;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v76 = C::def_inst(ctx, v46.1);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Sextend = v79 {
                                        let v81 = C::value_type(ctx, v80);
                                        if v81 == I32 {
                                            let v71 = C::put_in_reg(ctx, v46.0);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v83 =
                                                constructor_add_reg_sext32(ctx, v70, v71, v82);
                                            let v84 = constructor_output_reg(ctx, v83);
                                            let v85 = Some(v84);
                                            // Rule at src\isa\s390x\lower.isle line 71.
                                            return v85;
                                        }
                                    }
                                }
                            }
                            let v96 = C::i16_from_value(ctx, v46.1);
                            if let Some(v97) = v96 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v98 = constructor_add_simm16(ctx, v70, v71, v97);
                                let v99 = constructor_output_reg(ctx, v98);
                                let v100 = Some(v99);
                                // Rule at src\isa\s390x\lower.isle line 77.
                                return v100;
                            }
                            let v106 = C::i32_from_value(ctx, v46.1);
                            if let Some(v107) = v106 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v108 = constructor_add_simm32(ctx, v70, v71, v107);
                                let v109 = constructor_output_reg(ctx, v108);
                                let v110 = Some(v109);
                                // Rule at src\isa\s390x\lower.isle line 81.
                                return v110;
                            }
                            let v119 = C::sinkable_inst(ctx, v46.1);
                            if let Some(v120) = v119 {
                                let v121 = &C::inst_data(ctx, v120);
                                if let &InstructionData::Load {
                                    opcode: ref v122,
                                    arg: v123,
                                    flags: v124,
                                    offset: v125,
                                } = v121
                                {
                                    match v122 {
                                        &Opcode::Load => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v116 = C::value_type(ctx, v46.1);
                                                let v117 = C::ty_32_or_64(ctx, v116);
                                                if let Some(v118) = v117 {
                                                    let v71 = C::put_in_reg(ctx, v46.0);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v129 =
                                                        constructor_add_mem(ctx, v70, v71, v128);
                                                    let v130 = constructor_output_reg(ctx, v129);
                                                    let v131 = Some(v130);
                                                    // Rule at src\isa\s390x\lower.isle line 87.
                                                    return v131;
                                                }
                                                if v116 == I16 {
                                                    let v71 = C::put_in_reg(ctx, v46.0);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v148 = constructor_add_mem_sext16(
                                                        ctx, v70, v71, v128,
                                                    );
                                                    let v149 = constructor_output_reg(ctx, v148);
                                                    let v150 = Some(v149);
                                                    // Rule at src\isa\s390x\lower.isle line 93.
                                                    return v150;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v154 = &constructor_sink_sload16(ctx, v120);
                                                let v155 =
                                                    constructor_add_mem_sext16(ctx, v70, v71, v154);
                                                let v156 = constructor_output_reg(ctx, v155);
                                                let v157 = Some(v156);
                                                // Rule at src\isa\s390x\lower.isle line 99.
                                                return v157;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v162 = &constructor_sink_sload32(ctx, v120);
                                                let v163 =
                                                    constructor_add_mem_sext32(ctx, v70, v71, v162);
                                                let v164 = constructor_output_reg(ctx, v163);
                                                let v165 = Some(v164);
                                                // Rule at src\isa\s390x\lower.isle line 103.
                                                return v165;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v170 = constructor_vec_add(ctx, v43, v71, v72);
                            let v171 = constructor_output_reg(ctx, v170);
                            let v172 = Some(v171);
                            // Rule at src\isa\s390x\lower.isle line 109.
                            return v172;
                        }
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v73 = constructor_add_reg(ctx, v70, v71, v72);
                            let v74 = constructor_output_reg(ctx, v73);
                            let v75 = Some(v74);
                            // Rule at src\isa\s390x\lower.isle line 67.
                            return v75;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v76 = C::def_inst(ctx, v46.1);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Sextend = v79 {
                                        let v81 = C::value_type(ctx, v80);
                                        if v81 == I32 {
                                            let v71 = C::put_in_reg(ctx, v46.0);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v257 =
                                                constructor_sub_reg_sext32(ctx, v70, v71, v82);
                                            let v258 = constructor_output_reg(ctx, v257);
                                            let v259 = Some(v258);
                                            // Rule at src\isa\s390x\lower.isle line 157.
                                            return v259;
                                        }
                                    }
                                }
                            }
                            let v260 = C::i16_from_negated_value(ctx, v46.1);
                            if let Some(v261) = v260 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v262 = constructor_add_simm16(ctx, v70, v71, v261);
                                let v263 = constructor_output_reg(ctx, v262);
                                let v264 = Some(v263);
                                // Rule at src\isa\s390x\lower.isle line 161.
                                return v264;
                            }
                            let v265 = C::i32_from_negated_value(ctx, v46.1);
                            if let Some(v266) = v265 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v267 = constructor_add_simm32(ctx, v70, v71, v266);
                                let v268 = constructor_output_reg(ctx, v267);
                                let v269 = Some(v268);
                                // Rule at src\isa\s390x\lower.isle line 163.
                                return v269;
                            }
                            let v119 = C::sinkable_inst(ctx, v46.1);
                            if let Some(v120) = v119 {
                                let v121 = &C::inst_data(ctx, v120);
                                if let &InstructionData::Load {
                                    opcode: ref v122,
                                    arg: v123,
                                    flags: v124,
                                    offset: v125,
                                } = v121
                                {
                                    match v122 {
                                        &Opcode::Load => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v116 = C::value_type(ctx, v46.1);
                                                let v117 = C::ty_32_or_64(ctx, v116);
                                                if let Some(v118) = v117 {
                                                    let v71 = C::put_in_reg(ctx, v46.0);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v270 =
                                                        constructor_sub_mem(ctx, v70, v71, v128);
                                                    let v271 = constructor_output_reg(ctx, v270);
                                                    let v272 = Some(v271);
                                                    // Rule at src\isa\s390x\lower.isle line 167.
                                                    return v272;
                                                }
                                                if v116 == I16 {
                                                    let v71 = C::put_in_reg(ctx, v46.0);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v273 = constructor_sub_mem_sext16(
                                                        ctx, v70, v71, v128,
                                                    );
                                                    let v274 = constructor_output_reg(ctx, v273);
                                                    let v275 = Some(v274);
                                                    // Rule at src\isa\s390x\lower.isle line 171.
                                                    return v275;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v154 = &constructor_sink_sload16(ctx, v120);
                                                let v276 =
                                                    constructor_sub_mem_sext16(ctx, v70, v71, v154);
                                                let v277 = constructor_output_reg(ctx, v276);
                                                let v278 = Some(v277);
                                                // Rule at src\isa\s390x\lower.isle line 175.
                                                return v278;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v162 = &constructor_sink_sload32(ctx, v120);
                                                let v279 =
                                                    constructor_sub_mem_sext32(ctx, v70, v71, v162);
                                                let v280 = constructor_output_reg(ctx, v279);
                                                let v281 = Some(v280);
                                                // Rule at src\isa\s390x\lower.isle line 177.
                                                return v281;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v282 = constructor_vec_sub(ctx, v43, v71, v72);
                            let v283 = constructor_output_reg(ctx, v282);
                            let v284 = Some(v283);
                            // Rule at src\isa\s390x\lower.isle line 181.
                            return v284;
                        }
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v254 = constructor_sub_reg(ctx, v70, v71, v72);
                            let v255 = constructor_output_reg(ctx, v254);
                            let v256 = Some(v255);
                            // Rule at src\isa\s390x\lower.isle line 153.
                            return v256;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v86 = C::def_inst(ctx, v46.0);
                            if let Some(v87) = v86 {
                                let v88 = &C::inst_data(ctx, v87);
                                if let &InstructionData::Unary {
                                    opcode: ref v89,
                                    arg: v90,
                                } = v88
                                {
                                    if let &Opcode::Sextend = v89 {
                                        let v91 = C::value_type(ctx, v90);
                                        if v91 == I32 {
                                            let v49 = C::put_in_reg(ctx, v46.1);
                                            let v92 = C::put_in_reg(ctx, v90);
                                            let v402 =
                                                constructor_mul_reg_sext32(ctx, v70, v49, v92);
                                            let v403 = constructor_output_reg(ctx, v402);
                                            let v404 = Some(v403);
                                            // Rule at src\isa\s390x\lower.isle line 351.
                                            return v404;
                                        }
                                    }
                                }
                            }
                            let v101 = C::i16_from_value(ctx, v46.0);
                            if let Some(v102) = v101 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v408 = constructor_mul_simm16(ctx, v70, v49, v102);
                                let v409 = constructor_output_reg(ctx, v408);
                                let v410 = Some(v409);
                                // Rule at src\isa\s390x\lower.isle line 357.
                                return v410;
                            }
                            let v111 = C::i32_from_value(ctx, v46.0);
                            if let Some(v112) = v111 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v414 = constructor_mul_simm32(ctx, v70, v49, v112);
                                let v415 = constructor_output_reg(ctx, v414);
                                let v416 = Some(v415);
                                // Rule at src\isa\s390x\lower.isle line 361.
                                return v416;
                            }
                            let v135 = C::sinkable_inst(ctx, v46.0);
                            if let Some(v136) = v135 {
                                let v137 = &C::inst_data(ctx, v136);
                                if let &InstructionData::Load {
                                    opcode: ref v138,
                                    arg: v139,
                                    flags: v140,
                                    offset: v141,
                                } = v137
                                {
                                    match v138 {
                                        &Opcode::Load => {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v132 = C::value_type(ctx, v46.0);
                                                let v133 = C::ty_32_or_64(ctx, v132);
                                                if let Some(v134) = v133 {
                                                    let v49 = C::put_in_reg(ctx, v46.1);
                                                    let v144 = &constructor_sink_load(ctx, v136);
                                                    let v420 =
                                                        constructor_mul_mem(ctx, v70, v49, v144);
                                                    let v421 = constructor_output_reg(ctx, v420);
                                                    let v422 = Some(v421);
                                                    // Rule at src\isa\s390x\lower.isle line 367.
                                                    return v422;
                                                }
                                                if v132 == I16 {
                                                    let v49 = C::put_in_reg(ctx, v46.1);
                                                    let v144 = &constructor_sink_load(ctx, v136);
                                                    let v426 = constructor_mul_mem_sext16(
                                                        ctx, v70, v49, v144,
                                                    );
                                                    let v427 = constructor_output_reg(ctx, v426);
                                                    let v428 = Some(v427);
                                                    // Rule at src\isa\s390x\lower.isle line 373.
                                                    return v428;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v158 = &constructor_sink_sload16(ctx, v136);
                                                let v432 =
                                                    constructor_mul_mem_sext16(ctx, v70, v49, v158);
                                                let v433 = constructor_output_reg(ctx, v432);
                                                let v434 = Some(v433);
                                                // Rule at src\isa\s390x\lower.isle line 379.
                                                return v434;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v166 = &constructor_sink_sload32(ctx, v136);
                                                let v438 =
                                                    constructor_mul_mem_sext32(ctx, v70, v49, v166);
                                                let v439 = constructor_output_reg(ctx, v438);
                                                let v440 = Some(v439);
                                                // Rule at src\isa\s390x\lower.isle line 383.
                                                return v440;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v76 = C::def_inst(ctx, v46.1);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Sextend = v79 {
                                        let v81 = C::value_type(ctx, v80);
                                        if v81 == I32 {
                                            let v71 = C::put_in_reg(ctx, v46.0);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v399 =
                                                constructor_mul_reg_sext32(ctx, v70, v71, v82);
                                            let v400 = constructor_output_reg(ctx, v399);
                                            let v401 = Some(v400);
                                            // Rule at src\isa\s390x\lower.isle line 349.
                                            return v401;
                                        }
                                    }
                                }
                            }
                            let v96 = C::i16_from_value(ctx, v46.1);
                            if let Some(v97) = v96 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v405 = constructor_mul_simm16(ctx, v70, v71, v97);
                                let v406 = constructor_output_reg(ctx, v405);
                                let v407 = Some(v406);
                                // Rule at src\isa\s390x\lower.isle line 355.
                                return v407;
                            }
                            let v106 = C::i32_from_value(ctx, v46.1);
                            if let Some(v107) = v106 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v411 = constructor_mul_simm32(ctx, v70, v71, v107);
                                let v412 = constructor_output_reg(ctx, v411);
                                let v413 = Some(v412);
                                // Rule at src\isa\s390x\lower.isle line 359.
                                return v413;
                            }
                            let v119 = C::sinkable_inst(ctx, v46.1);
                            if let Some(v120) = v119 {
                                let v121 = &C::inst_data(ctx, v120);
                                if let &InstructionData::Load {
                                    opcode: ref v122,
                                    arg: v123,
                                    flags: v124,
                                    offset: v125,
                                } = v121
                                {
                                    match v122 {
                                        &Opcode::Load => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v116 = C::value_type(ctx, v46.1);
                                                let v117 = C::ty_32_or_64(ctx, v116);
                                                if let Some(v118) = v117 {
                                                    let v71 = C::put_in_reg(ctx, v46.0);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v417 =
                                                        constructor_mul_mem(ctx, v70, v71, v128);
                                                    let v418 = constructor_output_reg(ctx, v417);
                                                    let v419 = Some(v418);
                                                    // Rule at src\isa\s390x\lower.isle line 365.
                                                    return v419;
                                                }
                                                if v116 == I16 {
                                                    let v71 = C::put_in_reg(ctx, v46.0);
                                                    let v128 = &constructor_sink_load(ctx, v120);
                                                    let v423 = constructor_mul_mem_sext16(
                                                        ctx, v70, v71, v128,
                                                    );
                                                    let v424 = constructor_output_reg(ctx, v423);
                                                    let v425 = Some(v424);
                                                    // Rule at src\isa\s390x\lower.isle line 371.
                                                    return v425;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v154 = &constructor_sink_sload16(ctx, v120);
                                                let v429 =
                                                    constructor_mul_mem_sext16(ctx, v70, v71, v154);
                                                let v430 = constructor_output_reg(ctx, v429);
                                                let v431 = Some(v430);
                                                // Rule at src\isa\s390x\lower.isle line 377.
                                                return v431;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v162 = &constructor_sink_sload32(ctx, v120);
                                                let v435 =
                                                    constructor_mul_mem_sext32(ctx, v70, v71, v162);
                                                let v436 = constructor_output_reg(ctx, v435);
                                                let v437 = Some(v436);
                                                // Rule at src\isa\s390x\lower.isle line 381.
                                                return v437;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v441 = constructor_vec_mul_impl(ctx, v43, v71, v72);
                            let v442 = constructor_output_reg(ctx, v441);
                            let v443 = Some(v442);
                            // Rule at src\isa\s390x\lower.isle line 388.
                            return v443;
                        }
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v396 = constructor_mul_reg(ctx, v70, v71, v72);
                            let v397 = constructor_output_reg(ctx, v396);
                            let v398 = Some(v397);
                            // Rule at src\isa\s390x\lower.isle line 345.
                            return v398;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v452 = constructor_put_in_reg_zext64(ctx, v46.0);
                                let v453 = constructor_put_in_reg_zext64(ctx, v46.1);
                                let v455 = constructor_mul_reg(ctx, I64, v452, v453);
                                let v457 = constructor_lshr_imm(ctx, I64, v455, 0x20);
                                let v458 = constructor_output_reg(ctx, v457);
                                let v459 = Some(v458);
                                // Rule at src\isa\s390x\lower.isle line 429.
                                return v459;
                            }
                            I64 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v460 = constructor_umul_wide(ctx, v71, v72);
                                let v461 = C::regpair_hi(ctx, v460);
                                let v462 = constructor_output_reg(ctx, v461);
                                let v463 = Some(v462);
                                // Rule at src\isa\s390x\lower.isle line 436.
                                return v463;
                            }
                            I8X16 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v464 = constructor_vec_umulhi(ctx, I8X16, v71, v72);
                                let v465 = constructor_output_reg(ctx, v464);
                                let v466 = Some(v465);
                                // Rule at src\isa\s390x\lower.isle line 441.
                                return v466;
                            }
                            I16X8 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v468 = constructor_vec_umulhi(ctx, I16X8, v71, v72);
                                let v469 = constructor_output_reg(ctx, v468);
                                let v470 = Some(v469);
                                // Rule at src\isa\s390x\lower.isle line 442.
                                return v470;
                            }
                            I32X4 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v472 = constructor_vec_umulhi(ctx, I32X4, v71, v72);
                                let v473 = constructor_output_reg(ctx, v472);
                                let v474 = Some(v473);
                                // Rule at src\isa\s390x\lower.isle line 443.
                                return v474;
                            }
                            I64X2 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v60 = C::zero_reg(ctx);
                                let v475 = constructor_vec_extract_lane(ctx, I64X2, v71, 0x0, v60);
                                let v476 = C::put_in_reg(ctx, v46.1);
                                let v477 = C::zero_reg(ctx);
                                let v478 =
                                    constructor_vec_extract_lane(ctx, I64X2, v476, 0x0, v477);
                                let v479 = constructor_umul_wide(ctx, v475, v478);
                                let v480 = C::regpair_hi(ctx, v479);
                                let v189 = C::put_in_reg(ctx, v46.0);
                                let v481 = C::zero_reg(ctx);
                                let v482 =
                                    constructor_vec_extract_lane(ctx, I64X2, v189, 0x1, v481);
                                let v483 = C::put_in_reg(ctx, v46.1);
                                let v484 = C::zero_reg(ctx);
                                let v485 =
                                    constructor_vec_extract_lane(ctx, I64X2, v483, 0x1, v484);
                                let v486 = constructor_umul_wide(ctx, v482, v485);
                                let v487 = C::regpair_hi(ctx, v486);
                                let v488 = constructor_mov_to_vec128(ctx, I64X2, v480, v487);
                                let v489 = constructor_output_reg(ctx, v488);
                                let v490 = Some(v489);
                                // Rule at src\isa\s390x\lower.isle line 447.
                                return v490;
                            }
                            _ => {}
                        }
                        let v444 = C::ty_8_or_16(ctx, v3);
                        if let Some(v445) = v444 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v335 = constructor_put_in_reg_zext32(ctx, v46.1);
                            let v447 = constructor_mul_reg(ctx, I32, v334, v335);
                            let v448 = C::ty_bits(ctx, v445);
                            let v449 = constructor_lshr_imm(ctx, I32, v447, v448);
                            let v450 = constructor_output_reg(ctx, v449);
                            let v451 = Some(v450);
                            // Rule at src\isa\s390x\lower.isle line 422.
                            return v451;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v495 = constructor_put_in_reg_sext64(ctx, v46.0);
                                let v496 = constructor_put_in_reg_sext64(ctx, v46.1);
                                let v497 = constructor_mul_reg(ctx, I64, v495, v496);
                                let v498 = constructor_ashr_imm(ctx, I64, v497, 0x20);
                                let v499 = constructor_output_reg(ctx, v498);
                                let v500 = Some(v499);
                                // Rule at src\isa\s390x\lower.isle line 467.
                                return v500;
                            }
                            I64 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v501 = constructor_smul_wide(ctx, v71, v72);
                                let v502 = C::regpair_hi(ctx, v501);
                                let v503 = constructor_output_reg(ctx, v502);
                                let v504 = Some(v503);
                                // Rule at src\isa\s390x\lower.isle line 474.
                                return v504;
                            }
                            I8X16 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v505 = constructor_vec_smulhi(ctx, I8X16, v71, v72);
                                let v506 = constructor_output_reg(ctx, v505);
                                let v507 = Some(v506);
                                // Rule at src\isa\s390x\lower.isle line 479.
                                return v507;
                            }
                            I16X8 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v508 = constructor_vec_smulhi(ctx, I16X8, v71, v72);
                                let v509 = constructor_output_reg(ctx, v508);
                                let v510 = Some(v509);
                                // Rule at src\isa\s390x\lower.isle line 480.
                                return v510;
                            }
                            I32X4 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v511 = constructor_vec_smulhi(ctx, I32X4, v71, v72);
                                let v512 = constructor_output_reg(ctx, v511);
                                let v513 = Some(v512);
                                // Rule at src\isa\s390x\lower.isle line 481.
                                return v513;
                            }
                            I64X2 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v60 = C::zero_reg(ctx);
                                let v475 = constructor_vec_extract_lane(ctx, I64X2, v71, 0x0, v60);
                                let v476 = C::put_in_reg(ctx, v46.1);
                                let v477 = C::zero_reg(ctx);
                                let v478 =
                                    constructor_vec_extract_lane(ctx, I64X2, v476, 0x0, v477);
                                let v514 = constructor_smul_wide(ctx, v475, v478);
                                let v515 = C::regpair_hi(ctx, v514);
                                let v516 = constructor_copy_reg(ctx, I64, v515);
                                let v517 = C::put_in_reg(ctx, v46.0);
                                let v518 = C::zero_reg(ctx);
                                let v519 =
                                    constructor_vec_extract_lane(ctx, I64X2, v517, 0x1, v518);
                                let v520 = C::put_in_reg(ctx, v46.1);
                                let v521 = C::zero_reg(ctx);
                                let v522 =
                                    constructor_vec_extract_lane(ctx, I64X2, v520, 0x1, v521);
                                let v523 = constructor_smul_wide(ctx, v519, v522);
                                let v524 = C::regpair_hi(ctx, v523);
                                let v525 = constructor_mov_to_vec128(ctx, I64X2, v516, v524);
                                let v526 = constructor_output_reg(ctx, v525);
                                let v527 = Some(v526);
                                // Rule at src\isa\s390x\lower.isle line 485.
                                return v527;
                            }
                            _ => {}
                        }
                        let v444 = C::ty_8_or_16(ctx, v3);
                        if let Some(v445) = v444 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v364 = constructor_put_in_reg_sext32(ctx, v46.0);
                            let v365 = constructor_put_in_reg_sext32(ctx, v46.1);
                            let v491 = constructor_mul_reg(ctx, I32, v364, v365);
                            let v448 = C::ty_bits(ctx, v445);
                            let v492 = constructor_ashr_imm(ctx, I32, v491, v448);
                            let v493 = constructor_output_reg(ctx, v492);
                            let v494 = Some(v493);
                            // Rule at src\isa\s390x\lower.isle line 460.
                            return v494;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v181 = constructor_vec_widen_type(ctx, v174);
                            let v182 = constructor_vec_widen_type(ctx, v174);
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v184 = constructor_vec_unpacks_high(ctx, v174, v183);
                            let v185 = C::put_in_reg(ctx, v46.1);
                            let v186 = constructor_vec_unpacks_high(ctx, v174, v185);
                            let v528 = constructor_sqmul_impl(ctx, v182, v184, v186);
                            let v188 = constructor_vec_widen_type(ctx, v174);
                            let v189 = C::put_in_reg(ctx, v46.0);
                            let v190 = constructor_vec_unpacks_low(ctx, v174, v189);
                            let v191 = C::put_in_reg(ctx, v46.1);
                            let v192 = constructor_vec_unpacks_low(ctx, v174, v191);
                            let v529 = constructor_sqmul_impl(ctx, v188, v190, v192);
                            let v530 = constructor_vec_pack_ssat(ctx, v181, v528, v529);
                            let v531 = constructor_output_reg(ctx, v530);
                            let v532 = Some(v531);
                            // Rule at src\isa\s390x\lower.isle line 498.
                            return v532;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v295 = constructor_ty_ext32(ctx, v70);
                            let v533 = constructor_imm(ctx, v295, 0x0);
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v534 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v535 = C::regpair(ctx, v533, v534);
                            let v536 = constructor_put_in_reg_zext32(ctx, v46.1);
                            let v537 = constructor_ty_ext32(ctx, v70);
                            let v538 = constructor_udivmod(ctx, v537, v535, v536);
                            let v539 = C::regpair_lo(ctx, v538);
                            let v540 = constructor_output_reg(ctx, v539);
                            let v541 = Some(v540);
                            // Rule at src\isa\s390x\lower.isle line 536.
                            return v541;
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v545 = constructor_div_overflow_check_needed(ctx, v46.1);
                            let v546 = constructor_put_in_reg_sext64(ctx, v46.0);
                            let v547 = constructor_put_in_reg_sext32(ctx, v46.1);
                            let v548 = constructor_ty_ext32(ctx, v70);
                            let v549 = constructor_maybe_trap_if_sdiv_overflow(
                                ctx, v545, v548, v70, v546, v547,
                            );
                            let v550 = constructor_sdivmod(ctx, v548, v546, v547);
                            let v551 = C::regpair_lo(ctx, v550);
                            let v552 = constructor_output_reg(ctx, v551);
                            let v553 = Some(v552);
                            // Rule at src\isa\s390x\lower.isle line 580.
                            return v553;
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v295 = constructor_ty_ext32(ctx, v70);
                            let v533 = constructor_imm(ctx, v295, 0x0);
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v534 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v535 = C::regpair(ctx, v533, v534);
                            let v536 = constructor_put_in_reg_zext32(ctx, v46.1);
                            let v537 = constructor_ty_ext32(ctx, v70);
                            let v538 = constructor_udivmod(ctx, v537, v535, v536);
                            let v542 = C::regpair_hi(ctx, v538);
                            let v543 = constructor_output_reg(ctx, v542);
                            let v544 = Some(v543);
                            // Rule at src\isa\s390x\lower.isle line 554.
                            return v544;
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v545 = constructor_div_overflow_check_needed(ctx, v46.1);
                            let v546 = constructor_put_in_reg_sext64(ctx, v46.0);
                            let v547 = constructor_put_in_reg_sext32(ctx, v46.1);
                            let v548 = constructor_ty_ext32(ctx, v70);
                            let v554 =
                                constructor_maybe_avoid_srem_overflow(ctx, v545, v548, v546, v547);
                            let v555 = constructor_sdivmod(ctx, v548, v554, v547);
                            let v556 = C::regpair_hi(ctx, v555);
                            let v557 = constructor_output_reg(ctx, v556);
                            let v558 = Some(v557);
                            // Rule at src\isa\s390x\lower.isle line 599.
                            return v558;
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v86 = C::def_inst(ctx, v46.0);
                            if let Some(v87) = v86 {
                                let v88 = &C::inst_data(ctx, v87);
                                if let &InstructionData::Unary {
                                    opcode: ref v89,
                                    arg: v90,
                                } = v88
                                {
                                    if let &Opcode::Bnot = v89 {
                                        let v49 = C::put_in_reg(ctx, v46.1);
                                        let v92 = C::put_in_reg(ctx, v90);
                                        let v833 = constructor_vec_and_not(ctx, v43, v49, v92);
                                        let v834 = constructor_output_reg(ctx, v833);
                                        let v835 = Some(v834);
                                        // Rule at src\isa\s390x\lower.isle line 1032.
                                        return v835;
                                    }
                                }
                            }
                            let v76 = C::def_inst(ctx, v46.1);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Bnot = v79 {
                                        let v71 = C::put_in_reg(ctx, v46.0);
                                        let v82 = C::put_in_reg(ctx, v80);
                                        let v830 = constructor_vec_and_not(ctx, v43, v71, v82);
                                        let v831 = constructor_output_reg(ctx, v830);
                                        let v832 = Some(v831);
                                        // Rule at src\isa\s390x\lower.isle line 1030.
                                        return v832;
                                    }
                                }
                            }
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v766 = C::mie2_enabled(ctx, v3);
                            if let Some(v767) = v766 {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v86 = C::def_inst(ctx, v46.0);
                                if let Some(v87) = v86 {
                                    let v88 = &C::inst_data(ctx, v87);
                                    if let &InstructionData::Unary {
                                        opcode: ref v89,
                                        arg: v90,
                                    } = v88
                                    {
                                        if let &Opcode::Bnot = v89 {
                                            let v49 = C::put_in_reg(ctx, v46.1);
                                            let v92 = C::put_in_reg(ctx, v90);
                                            let v827 = constructor_and_not_reg(ctx, v70, v49, v92);
                                            let v828 = constructor_output_reg(ctx, v827);
                                            let v829 = Some(v828);
                                            // Rule at src\isa\s390x\lower.isle line 1026.
                                            return v829;
                                        }
                                    }
                                }
                                let v76 = C::def_inst(ctx, v46.1);
                                if let Some(v77) = v76 {
                                    let v78 = &C::inst_data(ctx, v77);
                                    if let &InstructionData::Unary {
                                        opcode: ref v79,
                                        arg: v80,
                                    } = v78
                                    {
                                        if let &Opcode::Bnot = v79 {
                                            let v71 = C::put_in_reg(ctx, v46.0);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v824 = constructor_and_not_reg(ctx, v70, v71, v82);
                                            let v825 = constructor_output_reg(ctx, v824);
                                            let v826 = Some(v825);
                                            // Rule at src\isa\s390x\lower.isle line 1024.
                                            return v826;
                                        }
                                    }
                                }
                            }
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v800 = C::uimm16shifted_from_inverted_value(ctx, v46.0);
                            if let Some(v801) = v800 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v802 = constructor_and_uimm16shifted(ctx, v70, v49, v801);
                                let v803 = constructor_output_reg(ctx, v802);
                                let v804 = Some(v803);
                                // Rule at src\isa\s390x\lower.isle line 1002.
                                return v804;
                            }
                            let v795 = C::uimm16shifted_from_inverted_value(ctx, v46.1);
                            if let Some(v796) = v795 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v797 = constructor_and_uimm16shifted(ctx, v70, v71, v796);
                                let v798 = constructor_output_reg(ctx, v797);
                                let v799 = Some(v798);
                                // Rule at src\isa\s390x\lower.isle line 1000.
                                return v799;
                            }
                            let v810 = C::uimm32shifted_from_inverted_value(ctx, v46.0);
                            if let Some(v811) = v810 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v812 = constructor_and_uimm32shifted(ctx, v70, v49, v811);
                                let v813 = constructor_output_reg(ctx, v812);
                                let v814 = Some(v813);
                                // Rule at src\isa\s390x\lower.isle line 1006.
                                return v814;
                            }
                            let v805 = C::uimm32shifted_from_inverted_value(ctx, v46.1);
                            if let Some(v806) = v805 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v807 = constructor_and_uimm32shifted(ctx, v70, v71, v806);
                                let v808 = constructor_output_reg(ctx, v807);
                                let v809 = Some(v808);
                                // Rule at src\isa\s390x\lower.isle line 1004.
                                return v809;
                            }
                            let v132 = C::value_type(ctx, v46.0);
                            let v133 = C::ty_32_or_64(ctx, v132);
                            if let Some(v134) = v133 {
                                let v135 = C::sinkable_inst(ctx, v46.0);
                                if let Some(v136) = v135 {
                                    let v137 = &C::inst_data(ctx, v136);
                                    if let &InstructionData::Load {
                                        opcode: ref v138,
                                        arg: v139,
                                        flags: v140,
                                        offset: v141,
                                    } = v137
                                    {
                                        if let &Opcode::Load = v138 {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v144 = &constructor_sink_load(ctx, v136);
                                                let v818 = constructor_and_mem(ctx, v70, v49, v144);
                                                let v819 = constructor_output_reg(ctx, v818);
                                                let v820 = Some(v819);
                                                // Rule at src\isa\s390x\lower.isle line 1012.
                                                return v820;
                                            }
                                        }
                                    }
                                }
                            }
                            let v116 = C::value_type(ctx, v46.1);
                            let v117 = C::ty_32_or_64(ctx, v116);
                            if let Some(v118) = v117 {
                                let v119 = C::sinkable_inst(ctx, v46.1);
                                if let Some(v120) = v119 {
                                    let v121 = &C::inst_data(ctx, v120);
                                    if let &InstructionData::Load {
                                        opcode: ref v122,
                                        arg: v123,
                                        flags: v124,
                                        offset: v125,
                                    } = v121
                                    {
                                        if let &Opcode::Load = v122 {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v128 = &constructor_sink_load(ctx, v120);
                                                let v815 = constructor_and_mem(ctx, v70, v71, v128);
                                                let v816 = constructor_output_reg(ctx, v815);
                                                let v817 = Some(v816);
                                                // Rule at src\isa\s390x\lower.isle line 1010.
                                                return v817;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v821 = constructor_vec_and(ctx, v43, v71, v72);
                            let v822 = constructor_output_reg(ctx, v821);
                            let v823 = Some(v822);
                            // Rule at src\isa\s390x\lower.isle line 1016.
                            return v823;
                        }
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v792 = constructor_and_reg(ctx, v70, v71, v72);
                            let v793 = constructor_output_reg(ctx, v792);
                            let v794 = Some(v793);
                            // Rule at src\isa\s390x\lower.isle line 996.
                            return v794;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v86 = C::def_inst(ctx, v46.0);
                            if let Some(v87) = v86 {
                                let v88 = &C::inst_data(ctx, v87);
                                if let &InstructionData::Unary {
                                    opcode: ref v89,
                                    arg: v90,
                                } = v88
                                {
                                    if let &Opcode::Bnot = v89 {
                                        let v49 = C::put_in_reg(ctx, v46.1);
                                        let v92 = C::put_in_reg(ctx, v90);
                                        let v877 = constructor_vec_or_not(ctx, v43, v49, v92);
                                        let v878 = constructor_output_reg(ctx, v877);
                                        let v879 = Some(v878);
                                        // Rule at src\isa\s390x\lower.isle line 1074.
                                        return v879;
                                    }
                                }
                            }
                            let v76 = C::def_inst(ctx, v46.1);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Bnot = v79 {
                                        let v71 = C::put_in_reg(ctx, v46.0);
                                        let v82 = C::put_in_reg(ctx, v80);
                                        let v874 = constructor_vec_or_not(ctx, v43, v71, v82);
                                        let v875 = constructor_output_reg(ctx, v874);
                                        let v876 = Some(v875);
                                        // Rule at src\isa\s390x\lower.isle line 1072.
                                        return v876;
                                    }
                                }
                            }
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v766 = C::mie2_enabled(ctx, v3);
                            if let Some(v767) = v766 {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v86 = C::def_inst(ctx, v46.0);
                                if let Some(v87) = v86 {
                                    let v88 = &C::inst_data(ctx, v87);
                                    if let &InstructionData::Unary {
                                        opcode: ref v89,
                                        arg: v90,
                                    } = v88
                                    {
                                        if let &Opcode::Bnot = v89 {
                                            let v49 = C::put_in_reg(ctx, v46.1);
                                            let v92 = C::put_in_reg(ctx, v90);
                                            let v871 = constructor_or_not_reg(ctx, v70, v49, v92);
                                            let v872 = constructor_output_reg(ctx, v871);
                                            let v873 = Some(v872);
                                            // Rule at src\isa\s390x\lower.isle line 1068.
                                            return v873;
                                        }
                                    }
                                }
                                let v76 = C::def_inst(ctx, v46.1);
                                if let Some(v77) = v76 {
                                    let v78 = &C::inst_data(ctx, v77);
                                    if let &InstructionData::Unary {
                                        opcode: ref v79,
                                        arg: v80,
                                    } = v78
                                    {
                                        if let &Opcode::Bnot = v79 {
                                            let v71 = C::put_in_reg(ctx, v46.0);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v868 = constructor_or_not_reg(ctx, v70, v71, v82);
                                            let v869 = constructor_output_reg(ctx, v868);
                                            let v870 = Some(v869);
                                            // Rule at src\isa\s390x\lower.isle line 1066.
                                            return v870;
                                        }
                                    }
                                }
                            }
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v844 = C::uimm16shifted_from_value(ctx, v46.0);
                            if let Some(v845) = v844 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v846 = constructor_or_uimm16shifted(ctx, v70, v49, v845);
                                let v847 = constructor_output_reg(ctx, v846);
                                let v848 = Some(v847);
                                // Rule at src\isa\s390x\lower.isle line 1044.
                                return v848;
                            }
                            let v839 = C::uimm16shifted_from_value(ctx, v46.1);
                            if let Some(v840) = v839 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v841 = constructor_or_uimm16shifted(ctx, v70, v71, v840);
                                let v842 = constructor_output_reg(ctx, v841);
                                let v843 = Some(v842);
                                // Rule at src\isa\s390x\lower.isle line 1042.
                                return v843;
                            }
                            let v854 = C::uimm32shifted_from_value(ctx, v46.0);
                            if let Some(v855) = v854 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v856 = constructor_or_uimm32shifted(ctx, v70, v49, v855);
                                let v857 = constructor_output_reg(ctx, v856);
                                let v858 = Some(v857);
                                // Rule at src\isa\s390x\lower.isle line 1048.
                                return v858;
                            }
                            let v849 = C::uimm32shifted_from_value(ctx, v46.1);
                            if let Some(v850) = v849 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v851 = constructor_or_uimm32shifted(ctx, v70, v71, v850);
                                let v852 = constructor_output_reg(ctx, v851);
                                let v853 = Some(v852);
                                // Rule at src\isa\s390x\lower.isle line 1046.
                                return v853;
                            }
                            let v132 = C::value_type(ctx, v46.0);
                            let v133 = C::ty_32_or_64(ctx, v132);
                            if let Some(v134) = v133 {
                                let v135 = C::sinkable_inst(ctx, v46.0);
                                if let Some(v136) = v135 {
                                    let v137 = &C::inst_data(ctx, v136);
                                    if let &InstructionData::Load {
                                        opcode: ref v138,
                                        arg: v139,
                                        flags: v140,
                                        offset: v141,
                                    } = v137
                                    {
                                        if let &Opcode::Load = v138 {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v144 = &constructor_sink_load(ctx, v136);
                                                let v862 = constructor_or_mem(ctx, v70, v49, v144);
                                                let v863 = constructor_output_reg(ctx, v862);
                                                let v864 = Some(v863);
                                                // Rule at src\isa\s390x\lower.isle line 1054.
                                                return v864;
                                            }
                                        }
                                    }
                                }
                            }
                            let v116 = C::value_type(ctx, v46.1);
                            let v117 = C::ty_32_or_64(ctx, v116);
                            if let Some(v118) = v117 {
                                let v119 = C::sinkable_inst(ctx, v46.1);
                                if let Some(v120) = v119 {
                                    let v121 = &C::inst_data(ctx, v120);
                                    if let &InstructionData::Load {
                                        opcode: ref v122,
                                        arg: v123,
                                        flags: v124,
                                        offset: v125,
                                    } = v121
                                    {
                                        if let &Opcode::Load = v122 {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v128 = &constructor_sink_load(ctx, v120);
                                                let v859 = constructor_or_mem(ctx, v70, v71, v128);
                                                let v860 = constructor_output_reg(ctx, v859);
                                                let v861 = Some(v860);
                                                // Rule at src\isa\s390x\lower.isle line 1052.
                                                return v861;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v865 = constructor_vec_or(ctx, v43, v71, v72);
                            let v866 = constructor_output_reg(ctx, v865);
                            let v867 = Some(v866);
                            // Rule at src\isa\s390x\lower.isle line 1058.
                            return v867;
                        }
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v836 = constructor_or_reg(ctx, v70, v71, v72);
                            let v837 = constructor_output_reg(ctx, v836);
                            let v838 = Some(v837);
                            // Rule at src\isa\s390x\lower.isle line 1038.
                            return v838;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v86 = C::def_inst(ctx, v46.0);
                            if let Some(v87) = v86 {
                                let v88 = &C::inst_data(ctx, v87);
                                if let &InstructionData::Unary {
                                    opcode: ref v89,
                                    arg: v90,
                                } = v88
                                {
                                    if let &Opcode::Bnot = v89 {
                                        let v49 = C::put_in_reg(ctx, v46.1);
                                        let v92 = C::put_in_reg(ctx, v90);
                                        let v907 = constructor_vec_not_xor(ctx, v43, v49, v92);
                                        let v908 = constructor_output_reg(ctx, v907);
                                        let v909 = Some(v908);
                                        // Rule at src\isa\s390x\lower.isle line 1113.
                                        return v909;
                                    }
                                }
                            }
                            let v76 = C::def_inst(ctx, v46.1);
                            if let Some(v77) = v76 {
                                let v78 = &C::inst_data(ctx, v77);
                                if let &InstructionData::Unary {
                                    opcode: ref v79,
                                    arg: v80,
                                } = v78
                                {
                                    if let &Opcode::Bnot = v79 {
                                        let v71 = C::put_in_reg(ctx, v46.0);
                                        let v82 = C::put_in_reg(ctx, v80);
                                        let v904 = constructor_vec_not_xor(ctx, v43, v71, v82);
                                        let v905 = constructor_output_reg(ctx, v904);
                                        let v906 = Some(v905);
                                        // Rule at src\isa\s390x\lower.isle line 1111.
                                        return v906;
                                    }
                                }
                            }
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v766 = C::mie2_enabled(ctx, v3);
                            if let Some(v767) = v766 {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v86 = C::def_inst(ctx, v46.0);
                                if let Some(v87) = v86 {
                                    let v88 = &C::inst_data(ctx, v87);
                                    if let &InstructionData::Unary {
                                        opcode: ref v89,
                                        arg: v90,
                                    } = v88
                                    {
                                        if let &Opcode::Bnot = v89 {
                                            let v49 = C::put_in_reg(ctx, v46.1);
                                            let v92 = C::put_in_reg(ctx, v90);
                                            let v901 = constructor_not_xor_reg(ctx, v70, v49, v92);
                                            let v902 = constructor_output_reg(ctx, v901);
                                            let v903 = Some(v902);
                                            // Rule at src\isa\s390x\lower.isle line 1107.
                                            return v903;
                                        }
                                    }
                                }
                                let v76 = C::def_inst(ctx, v46.1);
                                if let Some(v77) = v76 {
                                    let v78 = &C::inst_data(ctx, v77);
                                    if let &InstructionData::Unary {
                                        opcode: ref v79,
                                        arg: v80,
                                    } = v78
                                    {
                                        if let &Opcode::Bnot = v79 {
                                            let v71 = C::put_in_reg(ctx, v46.0);
                                            let v82 = C::put_in_reg(ctx, v80);
                                            let v898 = constructor_not_xor_reg(ctx, v70, v71, v82);
                                            let v899 = constructor_output_reg(ctx, v898);
                                            let v900 = Some(v899);
                                            // Rule at src\isa\s390x\lower.isle line 1105.
                                            return v900;
                                        }
                                    }
                                }
                            }
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v854 = C::uimm32shifted_from_value(ctx, v46.0);
                            if let Some(v855) = v854 {
                                let v49 = C::put_in_reg(ctx, v46.1);
                                let v886 = constructor_xor_uimm32shifted(ctx, v70, v49, v855);
                                let v887 = constructor_output_reg(ctx, v886);
                                let v888 = Some(v887);
                                // Rule at src\isa\s390x\lower.isle line 1087.
                                return v888;
                            }
                            let v849 = C::uimm32shifted_from_value(ctx, v46.1);
                            if let Some(v850) = v849 {
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v883 = constructor_xor_uimm32shifted(ctx, v70, v71, v850);
                                let v884 = constructor_output_reg(ctx, v883);
                                let v885 = Some(v884);
                                // Rule at src\isa\s390x\lower.isle line 1085.
                                return v885;
                            }
                            let v132 = C::value_type(ctx, v46.0);
                            let v133 = C::ty_32_or_64(ctx, v132);
                            if let Some(v134) = v133 {
                                let v135 = C::sinkable_inst(ctx, v46.0);
                                if let Some(v136) = v135 {
                                    let v137 = &C::inst_data(ctx, v136);
                                    if let &InstructionData::Load {
                                        opcode: ref v138,
                                        arg: v139,
                                        flags: v140,
                                        offset: v141,
                                    } = v137
                                    {
                                        if let &Opcode::Load = v138 {
                                            let v142 = C::bigendian(ctx, v140);
                                            if let Some(v143) = v142 {
                                                let v49 = C::put_in_reg(ctx, v46.1);
                                                let v144 = &constructor_sink_load(ctx, v136);
                                                let v892 = constructor_xor_mem(ctx, v70, v49, v144);
                                                let v893 = constructor_output_reg(ctx, v892);
                                                let v894 = Some(v893);
                                                // Rule at src\isa\s390x\lower.isle line 1093.
                                                return v894;
                                            }
                                        }
                                    }
                                }
                            }
                            let v116 = C::value_type(ctx, v46.1);
                            let v117 = C::ty_32_or_64(ctx, v116);
                            if let Some(v118) = v117 {
                                let v119 = C::sinkable_inst(ctx, v46.1);
                                if let Some(v120) = v119 {
                                    let v121 = &C::inst_data(ctx, v120);
                                    if let &InstructionData::Load {
                                        opcode: ref v122,
                                        arg: v123,
                                        flags: v124,
                                        offset: v125,
                                    } = v121
                                    {
                                        if let &Opcode::Load = v122 {
                                            let v126 = C::bigendian(ctx, v124);
                                            if let Some(v127) = v126 {
                                                let v71 = C::put_in_reg(ctx, v46.0);
                                                let v128 = &constructor_sink_load(ctx, v120);
                                                let v889 = constructor_xor_mem(ctx, v70, v71, v128);
                                                let v890 = constructor_output_reg(ctx, v889);
                                                let v891 = Some(v890);
                                                // Rule at src\isa\s390x\lower.isle line 1091.
                                                return v891;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v895 = constructor_vec_xor(ctx, v43, v71, v72);
                            let v896 = constructor_output_reg(ctx, v895);
                            let v897 = Some(v896);
                            // Rule at src\isa\s390x\lower.isle line 1097.
                            return v897;
                        }
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v72 = C::put_in_reg(ctx, v46.1);
                            let v880 = constructor_xor_reg(ctx, v70, v71, v72);
                            let v881 = constructor_output_reg(ctx, v880);
                            let v882 = Some(v881);
                            // Rule at src\isa\s390x\lower.isle line 1081.
                            return v882;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v651 = constructor_amt_vr(ctx, v46.1);
                            let v652 = constructor_vec_neg(ctx, I8X16, v651);
                            let v653 = constructor_vec_lshl_by_byte(ctx, v71, v651);
                            let v654 = constructor_vec_lshl_by_bit(ctx, v653, v651);
                            let v655 = constructor_vec_lshr_by_byte(ctx, v71, v652);
                            let v656 = constructor_vec_lshr_by_bit(ctx, v655, v652);
                            let v657 = constructor_vec_or(ctx, I128, v654, v656);
                            let v658 = constructor_output_reg(ctx, v657);
                            let v659 = Some(v658);
                            // Rule at src\isa\s390x\lower.isle line 808.
                            return v659;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v574 = C::mask_amt_imm(ctx, v174, v565);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v648 = constructor_vec_rot_imm(ctx, v174, v50, v574);
                                let v649 = constructor_output_reg(ctx, v648);
                                let v650 = Some(v649);
                                // Rule at src\isa\s390x\lower.isle line 802.
                                return v650;
                            }
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v645 = constructor_vec_rot_reg(ctx, v174, v71, v570);
                            let v646 = constructor_output_reg(ctx, v645);
                            let v647 = Some(v646);
                            // Rule at src\isa\s390x\lower.isle line 798.
                            return v647;
                        }
                        let v444 = C::ty_8_or_16(ctx, v3);
                        if let Some(v445) = v444 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v636 = C::i64_from_negated_value(ctx, v46.1);
                                if let Some(v637) = v636 {
                                    let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                                    let v626 = constructor_ty_ext32(ctx, v445);
                                    let v638 = C::mask_amt_imm(ctx, v445, v565);
                                    let v639 = C::mask_amt_imm(ctx, v445, v637);
                                    let v640 = constructor_lshl_imm(ctx, v626, v334, v638);
                                    let v641 = constructor_lshr_imm(ctx, v626, v334, v639);
                                    let v642 = constructor_or_reg(ctx, v445, v640, v641);
                                    let v643 = constructor_output_reg(ctx, v642);
                                    let v644 = Some(v643);
                                    // Rule at src\isa\s390x\lower.isle line 788.
                                    return v644;
                                }
                            }
                            let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v626 = constructor_ty_ext32(ctx, v445);
                            let v627 = constructor_amt_reg(ctx, v46.1);
                            let v628 = constructor_neg_reg(ctx, I32, v627);
                            let v629 = constructor_mask_amt_reg(ctx, v445, v627);
                            let v630 = constructor_mask_amt_reg(ctx, v445, v628);
                            let v631 = constructor_lshl_reg(ctx, v626, v334, v629);
                            let v632 = constructor_lshr_reg(ctx, v626, v334, v630);
                            let v633 = constructor_or_reg(ctx, v445, v631, v632);
                            let v634 = constructor_output_reg(ctx, v633);
                            let v635 = Some(v634);
                            // Rule at src\isa\s390x\lower.isle line 776.
                            return v635;
                        }
                        let v617 = C::ty_32_or_64(ctx, v3);
                        if let Some(v618) = v617 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v622 = C::mask_amt_imm(ctx, v618, v565);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v623 = constructor_rot_imm(ctx, v618, v50, v622);
                                let v624 = constructor_output_reg(ctx, v623);
                                let v625 = Some(v624);
                                // Rule at src\isa\s390x\lower.isle line 770.
                                return v625;
                            }
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v619 = constructor_rot_reg(ctx, v618, v71, v570);
                            let v620 = constructor_output_reg(ctx, v619);
                            let v621 = Some(v620);
                            // Rule at src\isa\s390x\lower.isle line 766.
                            return v621;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v651 = constructor_amt_vr(ctx, v46.1);
                            let v652 = constructor_vec_neg(ctx, I8X16, v651);
                            let v685 = constructor_vec_lshl_by_byte(ctx, v71, v652);
                            let v686 = constructor_vec_lshl_by_bit(ctx, v685, v652);
                            let v687 = constructor_vec_lshr_by_byte(ctx, v71, v651);
                            let v688 = constructor_vec_lshr_by_bit(ctx, v687, v651);
                            let v689 = constructor_vec_or(ctx, I128, v686, v688);
                            let v690 = constructor_output_reg(ctx, v689);
                            let v691 = Some(v690);
                            // Rule at src\isa\s390x\lower.isle line 868.
                            return v691;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v636 = C::i64_from_negated_value(ctx, v46.1);
                            if let Some(v637) = v636 {
                                let v681 = C::mask_amt_imm(ctx, v174, v637);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v682 = constructor_vec_rot_imm(ctx, v174, v50, v681);
                                let v683 = constructor_output_reg(ctx, v682);
                                let v684 = Some(v683);
                                // Rule at src\isa\s390x\lower.isle line 862.
                                return v684;
                            }
                            let v559 = constructor_amt_reg(ctx, v46.1);
                            let v660 = constructor_neg_reg(ctx, I32, v559);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v678 = constructor_vec_rot_reg(ctx, v174, v183, v660);
                            let v679 = constructor_output_reg(ctx, v678);
                            let v680 = Some(v679);
                            // Rule at src\isa\s390x\lower.isle line 856.
                            return v680;
                        }
                        let v444 = C::ty_8_or_16(ctx, v3);
                        if let Some(v445) = v444 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v636 = C::i64_from_negated_value(ctx, v46.1);
                                if let Some(v637) = v636 {
                                    let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                                    let v626 = constructor_ty_ext32(ctx, v445);
                                    let v638 = C::mask_amt_imm(ctx, v445, v565);
                                    let v639 = C::mask_amt_imm(ctx, v445, v637);
                                    let v673 = constructor_lshl_imm(ctx, v626, v334, v639);
                                    let v674 = constructor_lshr_imm(ctx, v626, v334, v638);
                                    let v675 = constructor_or_reg(ctx, v445, v673, v674);
                                    let v676 = constructor_output_reg(ctx, v675);
                                    let v677 = Some(v676);
                                    // Rule at src\isa\s390x\lower.isle line 845.
                                    return v677;
                                }
                            }
                            let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v626 = constructor_ty_ext32(ctx, v445);
                            let v627 = constructor_amt_reg(ctx, v46.1);
                            let v628 = constructor_neg_reg(ctx, I32, v627);
                            let v629 = constructor_mask_amt_reg(ctx, v445, v627);
                            let v630 = constructor_mask_amt_reg(ctx, v445, v628);
                            let v668 = constructor_lshl_reg(ctx, v626, v334, v630);
                            let v669 = constructor_lshr_reg(ctx, v626, v334, v629);
                            let v670 = constructor_or_reg(ctx, v445, v668, v669);
                            let v671 = constructor_output_reg(ctx, v670);
                            let v672 = Some(v671);
                            // Rule at src\isa\s390x\lower.isle line 833.
                            return v672;
                        }
                        let v617 = C::ty_32_or_64(ctx, v3);
                        if let Some(v618) = v617 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v636 = C::i64_from_negated_value(ctx, v46.1);
                            if let Some(v637) = v636 {
                                let v664 = C::mask_amt_imm(ctx, v618, v637);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v665 = constructor_rot_imm(ctx, v618, v50, v664);
                                let v666 = constructor_output_reg(ctx, v665);
                                let v667 = Some(v666);
                                // Rule at src\isa\s390x\lower.isle line 827.
                                return v667;
                            }
                            let v559 = constructor_amt_reg(ctx, v46.1);
                            let v660 = constructor_neg_reg(ctx, I32, v559);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v661 = constructor_rot_reg(ctx, v618, v183, v660);
                            let v662 = constructor_output_reg(ctx, v661);
                            let v663 = Some(v662);
                            // Rule at src\isa\s390x\lower.isle line 821.
                            return v663;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v578 = constructor_amt_vr(ctx, v46.1);
                            let v50 = C::put_in_reg(ctx, v46.0);
                            let v579 = constructor_vec_lshl_by_byte(ctx, v50, v578);
                            let v580 = constructor_vec_lshl_by_bit(ctx, v579, v578);
                            let v581 = constructor_output_reg(ctx, v580);
                            let v582 = Some(v581);
                            // Rule at src\isa\s390x\lower.isle line 696.
                            return v582;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v574 = C::mask_amt_imm(ctx, v174, v565);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v575 = constructor_vec_lshl_imm(ctx, v174, v50, v574);
                                let v576 = constructor_output_reg(ctx, v575);
                                let v577 = Some(v576);
                                // Rule at src\isa\s390x\lower.isle line 691.
                                return v577;
                            }
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v571 = constructor_vec_lshl_reg(ctx, v174, v71, v570);
                            let v572 = constructor_output_reg(ctx, v571);
                            let v573 = Some(v572);
                            // Rule at src\isa\s390x\lower.isle line 687.
                            return v573;
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v566 = C::mask_amt_imm(ctx, v70, v565);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v567 = constructor_lshl_imm(ctx, v70, v50, v566);
                                let v568 = constructor_output_reg(ctx, v567);
                                let v569 = Some(v568);
                                // Rule at src\isa\s390x\lower.isle line 682.
                                return v569;
                            }
                            let v559 = constructor_amt_reg(ctx, v46.1);
                            let v560 = constructor_mask_amt_reg(ctx, v70, v559);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v561 = constructor_lshl_reg(ctx, v70, v183, v560);
                            let v562 = constructor_output_reg(ctx, v561);
                            let v563 = Some(v562);
                            // Rule at src\isa\s390x\lower.isle line 677.
                            return v563;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v578 = constructor_amt_vr(ctx, v46.1);
                            let v50 = C::put_in_reg(ctx, v46.0);
                            let v597 = constructor_vec_lshr_by_byte(ctx, v50, v578);
                            let v598 = constructor_vec_lshr_by_bit(ctx, v597, v578);
                            let v599 = constructor_output_reg(ctx, v598);
                            let v600 = Some(v599);
                            // Rule at src\isa\s390x\lower.isle line 727.
                            return v600;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v574 = C::mask_amt_imm(ctx, v174, v565);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v594 = constructor_vec_lshr_imm(ctx, v174, v50, v574);
                                let v595 = constructor_output_reg(ctx, v594);
                                let v596 = Some(v595);
                                // Rule at src\isa\s390x\lower.isle line 722.
                                return v596;
                            }
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v591 = constructor_vec_lshr_reg(ctx, v174, v71, v570);
                            let v592 = constructor_output_reg(ctx, v591);
                            let v593 = Some(v592);
                            // Rule at src\isa\s390x\lower.isle line 718.
                            return v593;
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                                let v587 = C::mask_amt_imm(ctx, v70, v565);
                                let v336 = constructor_ty_ext32(ctx, v70);
                                let v588 = constructor_lshr_imm(ctx, v336, v334, v587);
                                let v589 = constructor_output_reg(ctx, v588);
                                let v590 = Some(v589);
                                // Rule at src\isa\s390x\lower.isle line 712.
                                return v590;
                            }
                            let v334 = constructor_put_in_reg_zext32(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v583 = constructor_mask_amt_reg(ctx, v70, v570);
                            let v548 = constructor_ty_ext32(ctx, v70);
                            let v584 = constructor_lshr_reg(ctx, v548, v334, v583);
                            let v585 = constructor_output_reg(ctx, v584);
                            let v586 = Some(v585);
                            // Rule at src\isa\s390x\lower.isle line 705.
                            return v586;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v578 = constructor_amt_vr(ctx, v46.1);
                            let v50 = C::put_in_reg(ctx, v46.0);
                            let v613 = constructor_vec_ashr_by_byte(ctx, v50, v578);
                            let v614 = constructor_vec_ashr_by_bit(ctx, v613, v578);
                            let v615 = constructor_output_reg(ctx, v614);
                            let v616 = Some(v615);
                            // Rule at src\isa\s390x\lower.isle line 758.
                            return v616;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v574 = C::mask_amt_imm(ctx, v174, v565);
                                let v50 = C::put_in_reg(ctx, v46.0);
                                let v610 = constructor_vec_ashr_imm(ctx, v174, v50, v574);
                                let v611 = constructor_output_reg(ctx, v610);
                                let v612 = Some(v611);
                                // Rule at src\isa\s390x\lower.isle line 753.
                                return v612;
                            }
                            let v71 = C::put_in_reg(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v607 = constructor_vec_ashr_reg(ctx, v174, v71, v570);
                            let v608 = constructor_output_reg(ctx, v607);
                            let v609 = Some(v608);
                            // Rule at src\isa\s390x\lower.isle line 749.
                            return v609;
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v564 = C::i64_from_value(ctx, v46.1);
                            if let Some(v565) = v564 {
                                let v364 = constructor_put_in_reg_sext32(ctx, v46.0);
                                let v587 = C::mask_amt_imm(ctx, v70, v565);
                                let v336 = constructor_ty_ext32(ctx, v70);
                                let v604 = constructor_ashr_imm(ctx, v336, v364, v587);
                                let v605 = constructor_output_reg(ctx, v604);
                                let v606 = Some(v605);
                                // Rule at src\isa\s390x\lower.isle line 743.
                                return v606;
                            }
                            let v364 = constructor_put_in_reg_sext32(ctx, v46.0);
                            let v570 = constructor_amt_reg(ctx, v46.1);
                            let v583 = constructor_mask_amt_reg(ctx, v70, v570);
                            let v548 = constructor_ty_ext32(ctx, v70);
                            let v601 = constructor_ashr_reg(ctx, v548, v364, v583);
                            let v602 = constructor_output_reg(ctx, v601);
                            let v603 = Some(v602);
                            // Rule at src\isa\s390x\lower.isle line 736.
                            return v603;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1083 = constructor_fadd_reg(ctx, v3, v71, v72);
                        let v1084 = constructor_output_reg(ctx, v1083);
                        let v1085 = Some(v1084);
                        // Rule at src\isa\s390x\lower.isle line 1360.
                        return v1085;
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1086 = constructor_fsub_reg(ctx, v3, v71, v72);
                        let v1087 = constructor_output_reg(ctx, v1086);
                        let v1088 = Some(v1087);
                        // Rule at src\isa\s390x\lower.isle line 1367.
                        return v1088;
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1089 = constructor_fmul_reg(ctx, v3, v71, v72);
                        let v1090 = constructor_output_reg(ctx, v1089);
                        let v1091 = Some(v1090);
                        // Rule at src\isa\s390x\lower.isle line 1374.
                        return v1091;
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1092 = constructor_fdiv_reg(ctx, v3, v71, v72);
                        let v1093 = constructor_output_reg(ctx, v1092);
                        let v1094 = Some(v1093);
                        // Rule at src\isa\s390x\lower.isle line 1381.
                        return v1094;
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v1102 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v1103 = constructor_vec_select(ctx, F32, v71, v72, v1102);
                                let v1104 = constructor_output_reg(ctx, v1103);
                                let v1105 = Some(v1104);
                                // Rule at src\isa\s390x\lower.isle line 1402.
                                return v1105;
                            }
                            F64 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v1107 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v1108 = constructor_vec_select(ctx, F64, v71, v72, v1107);
                                let v1109 = constructor_output_reg(ctx, v1108);
                                let v1110 = Some(v1109);
                                // Rule at src\isa\s390x\lower.isle line 1404.
                                return v1110;
                            }
                            F32X4 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v1113 = constructor_vec_imm_bit_mask(ctx, F32X4, 0x1, 0x1F);
                                let v1114 = constructor_vec_select(ctx, F32X4, v71, v72, v1113);
                                let v1115 = constructor_output_reg(ctx, v1114);
                                let v1116 = Some(v1115);
                                // Rule at src\isa\s390x\lower.isle line 1406.
                                return v1116;
                            }
                            F64X2 => {
                                let v46 = C::unpack_value_array_2(ctx, v45);
                                let v71 = C::put_in_reg(ctx, v46.0);
                                let v72 = C::put_in_reg(ctx, v46.1);
                                let v1118 = constructor_vec_imm_bit_mask(ctx, F64X2, 0x1, 0x3F);
                                let v1119 = constructor_vec_select(ctx, F64X2, v71, v72, v1118);
                                let v1120 = constructor_output_reg(ctx, v1119);
                                let v1121 = Some(v1120);
                                // Rule at src\isa\s390x\lower.isle line 1408.
                                return v1121;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1095 = constructor_fmin_reg(ctx, v3, v71, v72);
                        let v1096 = constructor_output_reg(ctx, v1095);
                        let v1097 = Some(v1096);
                        // Rule at src\isa\s390x\lower.isle line 1388.
                        return v1097;
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1098 = constructor_fmax_reg(ctx, v3, v71, v72);
                        let v1099 = constructor_output_reg(ctx, v1098);
                        let v1100 = Some(v1099);
                        // Rule at src\isa\s390x\lower.isle line 1395.
                        return v1100;
                    }
                }
                &Opcode::Snarrow => {
                    let v46 = C::unpack_value_array_2(ctx, v45);
                    let v132 = C::value_type(ctx, v46.0);
                    let v738 = C::ty_vec128(ctx, v132);
                    if let Some(v739) = v738 {
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v740 = constructor_vec_pack_ssat_lane_order(ctx, v739, v71, v72);
                        let v741 = constructor_output_reg(ctx, v740);
                        let v742 = Some(v741);
                        // Rule at src\isa\s390x\lower.isle line 927.
                        return v742;
                    }
                }
                &Opcode::Unarrow => {
                    let v46 = C::unpack_value_array_2(ctx, v45);
                    let v132 = C::value_type(ctx, v46.0);
                    let v738 = C::ty_vec128(ctx, v132);
                    if let Some(v739) = v738 {
                        let v746 = constructor_vec_imm(ctx, v739, 0x0);
                        let v50 = C::put_in_reg(ctx, v46.0);
                        let v747 = constructor_vec_smax(ctx, v739, v50, v746);
                        let v476 = C::put_in_reg(ctx, v46.1);
                        let v748 = constructor_vec_smax(ctx, v739, v476, v746);
                        let v749 = constructor_vec_pack_usat_lane_order(ctx, v739, v747, v748);
                        let v750 = constructor_output_reg(ctx, v749);
                        let v751 = Some(v750);
                        // Rule at src\isa\s390x\lower.isle line 939.
                        return v751;
                    }
                }
                &Opcode::Uunarrow => {
                    let v46 = C::unpack_value_array_2(ctx, v45);
                    let v132 = C::value_type(ctx, v46.0);
                    let v738 = C::ty_vec128(ctx, v132);
                    if let Some(v739) = v738 {
                        let v71 = C::put_in_reg(ctx, v46.0);
                        let v72 = C::put_in_reg(ctx, v46.1);
                        let v743 = constructor_vec_pack_usat_lane_order(ctx, v739, v71, v72);
                        let v744 = constructor_output_reg(ctx, v743);
                        let v745 = Some(v744);
                        // Rule at src\isa\s390x\lower.isle line 933.
                        return v745;
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v46 = C::unpack_value_array_2(ctx, v45);
                        let v76 = C::def_inst(ctx, v46.1);
                        if let Some(v77) = v76 {
                            let v78 = &C::inst_data(ctx, v77);
                            if let &InstructionData::Binary {
                                opcode: ref v230,
                                args: ref v231,
                            } = v78
                            {
                                if let &Opcode::Imul = v230 {
                                    let v86 = C::def_inst(ctx, v46.0);
                                    if let Some(v87) = v86 {
                                        let v88 = &C::inst_data(ctx, v87);
                                        if let &InstructionData::Binary {
                                            opcode: ref v214,
                                            args: ref v215,
                                        } = v88
                                        {
                                            if let &Opcode::Imul = v214 {
                                                let v216 = C::unpack_value_array_2(ctx, v215);
                                                let v219 = C::def_inst(ctx, v216.0);
                                                if let Some(v220) = v219 {
                                                    let v221 = &C::inst_data(ctx, v220);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v222,
                                                        arg: v223,
                                                    } = v221
                                                    {
                                                        if let &Opcode::SwidenLow = v222 {
                                                            let v225 = C::def_inst(ctx, v216.1);
                                                            if let Some(v226) = v225 {
                                                                let v227 = &C::inst_data(ctx, v226);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v228,
                                                                    arg: v229,
                                                                } = v227
                                                                {
                                                                    if let &Opcode::SwidenLow = v228
                                                                    {
                                                                        let v232 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v231,
                                                                            );
                                                                        let v235 = C::def_inst(
                                                                            ctx, v232.0,
                                                                        );
                                                                        if let Some(v236) = v235 {
                                                                            let v237 =
                                                                                &C::inst_data(
                                                                                    ctx, v236,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v238,
                                                                                arg: v239,
                                                                            } = v237 {
                                                                                if let &Opcode::SwidenHigh = v238 {
                                                                                    if v223 == v239 {
                                                                                        let v240 = C::def_inst(ctx, v232.1);
                                                                                        if let Some(v241) = v240 {
                                                                                            let v242 = &C::inst_data(ctx, v241);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v243,
                                                                                                arg: v244,
                                                                                            } = v242 {
                                                                                                if let &Opcode::SwidenHigh = v243 {
                                                                                                    if v229 == v244 {
                                                                                                        let v245 = C::put_in_reg(ctx, v223);
                                                                                                        let v246 = C::put_in_reg(ctx, v229);
                                                                                                        let v224 = C::value_type(ctx, v223);
                                                                                                        let v247 = constructor_vec_smul_even(ctx, v224, v245, v246);
                                                                                                        let v248 = C::put_in_reg(ctx, v223);
                                                                                                        let v249 = C::put_in_reg(ctx, v229);
                                                                                                        let v250 = constructor_vec_smul_odd(ctx, v224, v248, v249);
                                                                                                        let v3 = C::value_type(ctx, v2);
                                                                                                        let v251 = constructor_vec_add(ctx, v3, v247, v250);
                                                                                                        let v252 = constructor_output_reg(ctx, v251);
                                                                                                        let v253 = Some(v252);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 142.
                                                                                                        return v253;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v197 = C::multi_lane(ctx, v3);
                        if let Some(v198) = v197 {
                            let v202 = C::u32_as_u64(ctx, v198.0);
                            let v203 = constructor_vec_imm_splat(ctx, I8X16, v202);
                            let v204 = constructor_vec_widen_type(ctx, v3);
                            let v183 = C::put_in_reg(ctx, v46.0);
                            let v176 = C::put_in_reg(ctx, v46.0);
                            let v205 = constructor_vec_lshr_by_byte(ctx, v176, v203);
                            let v206 = constructor_vec_add(ctx, v3, v183, v205);
                            let v207 = C::put_in_reg(ctx, v46.1);
                            let v208 = C::put_in_reg(ctx, v46.1);
                            let v209 = constructor_vec_lshr_by_byte(ctx, v208, v203);
                            let v210 = constructor_vec_add(ctx, v3, v207, v209);
                            let v211 = constructor_vec_pack_lane_order(ctx, v204, v206, v210);
                            let v212 = constructor_output_reg(ctx, v211);
                            let v213 = Some(v212);
                            // Rule at src\isa\s390x\lower.isle line 135.
                            return v213;
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v46 = C::unpack_value_array_2(ctx, v45);
                            let v49 = C::put_in_reg(ctx, v46.1);
                            let v50 = C::put_in_reg(ctx, v46.0);
                            let v51 = constructor_mov_to_vec128(ctx, v43, v49, v50);
                            let v52 = constructor_output_reg(ctx, v51);
                            let v53 = Some(v52);
                            // Rule at src\isa\s390x\lower.isle line 51.
                            return v53;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1425,
            arg: v1426,
            imm: v1427,
        } => {
            if let &Opcode::Extractlane = v1425 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1430 = C::ty_int_ref_scalar_64(ctx, v3);
                    if let Some(v1431) = v1430 {
                        let v1432 = C::put_in_reg(ctx, v1426);
                        let v1428 = C::value_type(ctx, v1426);
                        let v1429 = C::u8_from_uimm8(ctx, v1427);
                        let v1433 = C::be_lane_idx(ctx, v1428, v1429);
                        let v712 = C::zero_reg(ctx);
                        let v1434 = constructor_vec_extract_lane(ctx, v1428, v1432, v1433, v712);
                        let v1435 = constructor_output_reg(ctx, v1434);
                        let v1436 = Some(v1435);
                        // Rule at src\isa\s390x\lower.isle line 1892.
                        return v1436;
                    }
                    let v1351 = C::ty_scalar_float(ctx, v3);
                    if let Some(v1352) = v1351 {
                        let v1432 = C::put_in_reg(ctx, v1426);
                        let v1428 = C::value_type(ctx, v1426);
                        let v1429 = C::u8_from_uimm8(ctx, v1427);
                        let v1433 = C::be_lane_idx(ctx, v1428, v1429);
                        let v1437 = constructor_vec_replicate_lane(ctx, v1428, v1432, v1433);
                        let v1438 = constructor_output_reg(ctx, v1437);
                        let v1439 = Some(v1438);
                        // Rule at src\isa\s390x\lower.isle line 1898.
                        return v1439;
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2516,
            args: v2517,
            func_ref: v2518,
        } => {
            match v2516 {
                &Opcode::Call => {
                    let v2520 = C::func_ref_data(ctx, v2518);
                    let v2524 = C::reloc_distance_near(ctx, v2520.2);
                    if let Some(v2525) = v2524 {
                        let v2526 = C::abi_sig(ctx, v2520.0);
                        let v2528 = C::abi_num_args(ctx, v2526);
                        let v2529 = C::range(ctx, 0x0, v2528);
                        let v2519 = C::value_list_slice(ctx, v2517);
                        let v2530 = &constructor_lower_call_args(ctx, v2526, v2529, v2519);
                        let v2531 = &C::defs_init(ctx, v2526);
                        let v2532 = &constructor_abi_call(ctx, v2526, v2520.1, v2530, v2531);
                        let v2533 = constructor_side_effect(ctx, v2532);
                        let v2534 = C::abi_first_ret(ctx, v2520.0, v2526);
                        let v2535 = C::abi_num_rets(ctx, v2526);
                        let v2537 = &C::output_builder_new(ctx);
                        let v2536 = C::range(ctx, v2534, v2535);
                        let v2538 = constructor_lower_call_rets(ctx, v2526, v2531, v2536, v2537);
                        let v2539 = Some(v2538);
                        // Rule at src\isa\s390x\lower.isle line 3897.
                        return v2539;
                    }
                    let v2526 = C::abi_sig(ctx, v2520.0);
                    let v2528 = C::abi_num_args(ctx, v2526);
                    let v2529 = C::range(ctx, 0x0, v2528);
                    let v2519 = C::value_list_slice(ctx, v2517);
                    let v2530 = &constructor_lower_call_args(ctx, v2526, v2529, v2519);
                    let v2531 = &C::defs_init(ctx, v2526);
                    let v2540 = SymbolReloc::Absolute {
                        name: v2520.1,
                        offset: 0x0,
                    };
                    let v2541 = constructor_load_symbol_reloc(ctx, &v2540);
                    let v2542 = &constructor_abi_call_ind(ctx, v2526, v2541, v2530, v2531);
                    let v2543 = constructor_side_effect(ctx, v2542);
                    let v2544 = C::abi_first_ret(ctx, v2520.0, v2526);
                    let v2545 = C::abi_num_rets(ctx, v2526);
                    let v2547 = &C::output_builder_new(ctx);
                    let v2546 = C::range(ctx, v2544, v2545);
                    let v2548 = constructor_lower_call_rets(ctx, v2526, v2531, v2546, v2547);
                    let v2549 = Some(v2548);
                    // Rule at src\isa\s390x\lower.isle line 3906.
                    return v2549;
                }
                &Opcode::ReturnCall => {
                    let v2520 = C::func_ref_data(ctx, v2518);
                    let v2524 = C::reloc_distance_near(ctx, v2520.2);
                    if let Some(v2525) = v2524 {
                        let v2526 = C::abi_sig(ctx, v2520.0);
                        let v2528 = C::abi_num_args(ctx, v2526);
                        let v2529 = C::range(ctx, 0x0, v2528);
                        let v2519 = C::value_list_slice(ctx, v2517);
                        let v2571 = &constructor_lower_return_call_args(ctx, v2526, v2529, v2519);
                        let v2572 = &constructor_abi_return_call(ctx, v2526, v2520.1, v2571);
                        let v2573 = constructor_side_effect(ctx, v2572);
                        let v2574 = Some(v2573);
                        // Rule at src\isa\s390x\lower.isle line 3949.
                        return v2574;
                    }
                    let v2526 = C::abi_sig(ctx, v2520.0);
                    let v2528 = C::abi_num_args(ctx, v2526);
                    let v2529 = C::range(ctx, 0x0, v2528);
                    let v2519 = C::value_list_slice(ctx, v2517);
                    let v2571 = &constructor_lower_return_call_args(ctx, v2526, v2529, v2519);
                    let v2540 = SymbolReloc::Absolute {
                        name: v2520.1,
                        offset: 0x0,
                    };
                    let v2575 = constructor_load_symbol_reloc(ctx, &v2540);
                    let v2576 = &constructor_abi_return_call_ind(ctx, v2526, v2575, v2571);
                    let v2577 = constructor_side_effect(ctx, v2576);
                    let v2578 = Some(v2577);
                    // Rule at src\isa\s390x\lower.isle line 3955.
                    return v2578;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2550,
            args: v2551,
            sig_ref: v2552,
        } => {
            match v2550 {
                &Opcode::CallIndirect => {
                    let v2553 = C::value_list_slice(ctx, v2551);
                    let v2554 = C::value_slice_unwrap(ctx, v2553);
                    if let Some(v2555) = v2554 {
                        let v2558 = C::abi_sig(ctx, v2552);
                        let v2559 = C::put_in_reg(ctx, v2555.0);
                        let v2560 = C::abi_num_args(ctx, v2558);
                        let v2561 = C::range(ctx, 0x0, v2560);
                        let v2562 = &constructor_lower_call_args(ctx, v2558, v2561, v2555.1);
                        let v2563 = &C::defs_init(ctx, v2558);
                        let v2564 = &constructor_abi_call_ind(ctx, v2558, v2559, v2562, v2563);
                        let v2565 = constructor_side_effect(ctx, v2564);
                        let v2566 = C::abi_first_ret(ctx, v2552, v2558);
                        let v2567 = C::abi_num_rets(ctx, v2558);
                        let v2547 = &C::output_builder_new(ctx);
                        let v2568 = C::range(ctx, v2566, v2567);
                        let v2569 = constructor_lower_call_rets(ctx, v2558, v2563, v2568, v2547);
                        let v2570 = Some(v2569);
                        // Rule at src\isa\s390x\lower.isle line 3916.
                        return v2570;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2553 = C::value_list_slice(ctx, v2551);
                    let v2554 = C::value_slice_unwrap(ctx, v2553);
                    if let Some(v2555) = v2554 {
                        let v2558 = C::abi_sig(ctx, v2552);
                        let v2559 = C::put_in_reg(ctx, v2555.0);
                        let v2560 = C::abi_num_args(ctx, v2558);
                        let v2561 = C::range(ctx, 0x0, v2560);
                        let v2579 = &constructor_lower_return_call_args(ctx, v2558, v2561, v2555.1);
                        let v2580 = &constructor_abi_return_call_ind(ctx, v2558, v2559, v2579);
                        let v2581 = constructor_side_effect(ctx, v2580);
                        let v2582 = Some(v2581);
                        // Rule at src\isa\s390x\lower.isle line 3962.
                        return v2582;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v2402,
            arg: v2403,
            code: ref v2404,
        } => {
            match v2402 {
                &Opcode::Trapz => {
                    let v2405 = &constructor_value_nonzero(ctx, v2403);
                    let v2406 = &constructor_invert_bool(ctx, v2405);
                    let v2407 = &constructor_trap_if_bool(ctx, v2406, v2404);
                    let v2408 = constructor_side_effect(ctx, v2407);
                    let v2409 = Some(v2408);
                    // Rule at src\isa\s390x\lower.isle line 3804.
                    return v2409;
                }
                &Opcode::Trapnz => {
                    let v2405 = &constructor_value_nonzero(ctx, v2403);
                    let v2410 = &constructor_trap_if_bool(ctx, v2405, v2404);
                    let v2411 = constructor_side_effect(ctx, v2410);
                    let v2412 = Some(v2411);
                    // Rule at src\isa\s390x\lower.isle line 3810.
                    return v2412;
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v2228,
            args: ref v2229,
            cond: ref v2230,
        } => {
            if let &Opcode::Fcmp = v2228 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v2230 {
                        &FloatCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2240 = constructor_vec_fcmpeq(ctx, v174, v2238, v2239);
                                let v2241 = constructor_output_reg(ctx, v2240);
                                let v2242 = Some(v2241);
                                // Rule at src\isa\s390x\lower.isle line 3459.
                                return v2242;
                            }
                        }
                        &FloatCC::GreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2246 = constructor_vec_fcmph(ctx, v174, v2238, v2239);
                                let v2247 = constructor_output_reg(ctx, v2246);
                                let v2248 = Some(v2247);
                                // Rule at src\isa\s390x\lower.isle line 3463.
                                return v2248;
                            }
                        }
                        &FloatCC::GreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2252 = constructor_vec_fcmphe(ctx, v174, v2238, v2239);
                                let v2253 = constructor_output_reg(ctx, v2252);
                                let v2254 = Some(v2253);
                                // Rule at src\isa\s390x\lower.isle line 3467.
                                return v2254;
                            }
                        }
                        &FloatCC::LessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2258 = C::put_in_reg(ctx, v2231.1);
                                let v2259 = C::put_in_reg(ctx, v2231.0);
                                let v2260 = constructor_vec_fcmph(ctx, v174, v2258, v2259);
                                let v2261 = constructor_output_reg(ctx, v2260);
                                let v2262 = Some(v2261);
                                // Rule at src\isa\s390x\lower.isle line 3471.
                                return v2262;
                            }
                        }
                        &FloatCC::LessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2258 = C::put_in_reg(ctx, v2231.1);
                                let v2259 = C::put_in_reg(ctx, v2231.0);
                                let v2266 = constructor_vec_fcmphe(ctx, v174, v2258, v2259);
                                let v2267 = constructor_output_reg(ctx, v2266);
                                let v2268 = Some(v2267);
                                // Rule at src\isa\s390x\lower.isle line 3475.
                                return v2268;
                            }
                        }
                        &FloatCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2240 = constructor_vec_fcmpeq(ctx, v174, v2238, v2239);
                                let v2243 = constructor_vec_not(ctx, v174, v2240);
                                let v2244 = constructor_output_reg(ctx, v2243);
                                let v2245 = Some(v2244);
                                // Rule at src\isa\s390x\lower.isle line 3461.
                                return v2245;
                            }
                        }
                        &FloatCC::Ordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2252 = constructor_vec_fcmphe(ctx, v174, v2238, v2239);
                                let v2272 = C::put_in_reg(ctx, v2231.1);
                                let v2273 = C::put_in_reg(ctx, v2231.0);
                                let v2274 = constructor_vec_fcmphe(ctx, v174, v2272, v2273);
                                let v2275 = constructor_vec_or(ctx, v174, v2252, v2274);
                                let v2276 = constructor_output_reg(ctx, v2275);
                                let v2277 = Some(v2276);
                                // Rule at src\isa\s390x\lower.isle line 3479.
                                return v2277;
                            }
                        }
                        &FloatCC::OrderedNotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2246 = constructor_vec_fcmph(ctx, v174, v2238, v2239);
                                let v2272 = C::put_in_reg(ctx, v2231.1);
                                let v2273 = C::put_in_reg(ctx, v2231.0);
                                let v2281 = constructor_vec_fcmph(ctx, v174, v2272, v2273);
                                let v2282 = constructor_vec_or(ctx, v174, v2246, v2281);
                                let v2283 = constructor_output_reg(ctx, v2282);
                                let v2284 = Some(v2283);
                                // Rule at src\isa\s390x\lower.isle line 3483.
                                return v2284;
                            }
                        }
                        &FloatCC::Unordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2252 = constructor_vec_fcmphe(ctx, v174, v2238, v2239);
                                let v2272 = C::put_in_reg(ctx, v2231.1);
                                let v2273 = C::put_in_reg(ctx, v2231.0);
                                let v2274 = constructor_vec_fcmphe(ctx, v174, v2272, v2273);
                                let v2278 = constructor_vec_not_or(ctx, v174, v2252, v2274);
                                let v2279 = constructor_output_reg(ctx, v2278);
                                let v2280 = Some(v2279);
                                // Rule at src\isa\s390x\lower.isle line 3481.
                                return v2280;
                            }
                        }
                        &FloatCC::UnorderedOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2246 = constructor_vec_fcmph(ctx, v174, v2238, v2239);
                                let v2272 = C::put_in_reg(ctx, v2231.1);
                                let v2273 = C::put_in_reg(ctx, v2231.0);
                                let v2281 = constructor_vec_fcmph(ctx, v174, v2272, v2273);
                                let v2285 = constructor_vec_not_or(ctx, v174, v2246, v2281);
                                let v2286 = constructor_output_reg(ctx, v2285);
                                let v2287 = Some(v2286);
                                // Rule at src\isa\s390x\lower.isle line 3485.
                                return v2287;
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2258 = C::put_in_reg(ctx, v2231.1);
                                let v2259 = C::put_in_reg(ctx, v2231.0);
                                let v2266 = constructor_vec_fcmphe(ctx, v174, v2258, v2259);
                                let v2269 = constructor_vec_not(ctx, v174, v2266);
                                let v2270 = constructor_output_reg(ctx, v2269);
                                let v2271 = Some(v2270);
                                // Rule at src\isa\s390x\lower.isle line 3477.
                                return v2271;
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2258 = C::put_in_reg(ctx, v2231.1);
                                let v2259 = C::put_in_reg(ctx, v2231.0);
                                let v2260 = constructor_vec_fcmph(ctx, v174, v2258, v2259);
                                let v2263 = constructor_vec_not(ctx, v174, v2260);
                                let v2264 = constructor_output_reg(ctx, v2263);
                                let v2265 = Some(v2264);
                                // Rule at src\isa\s390x\lower.isle line 3473.
                                return v2265;
                            }
                        }
                        &FloatCC::UnorderedOrLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2252 = constructor_vec_fcmphe(ctx, v174, v2238, v2239);
                                let v2255 = constructor_vec_not(ctx, v174, v2252);
                                let v2256 = constructor_output_reg(ctx, v2255);
                                let v2257 = Some(v2256);
                                // Rule at src\isa\s390x\lower.isle line 3469.
                                return v2257;
                            }
                        }
                        &FloatCC::UnorderedOrLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2231 = C::unpack_value_array_2(ctx, v2229);
                                let v2238 = C::put_in_reg(ctx, v2231.0);
                                let v2239 = C::put_in_reg(ctx, v2231.1);
                                let v2246 = constructor_vec_fcmph(ctx, v174, v2238, v2239);
                                let v2249 = constructor_vec_not(ctx, v174, v2246);
                                let v2250 = constructor_output_reg(ctx, v2249);
                                let v2251 = Some(v2250);
                                // Rule at src\isa\s390x\lower.isle line 3465.
                                return v2251;
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v69 = C::fits_in_64(ctx, v3);
                    if let Some(v70) = v69 {
                        let v2231 = C::unpack_value_array_2(ctx, v2229);
                        let v2234 = &constructor_fcmp_val(ctx, v2230, v2231.0, v2231.1);
                        let v2235 = constructor_lower_bool(ctx, v70, v2234);
                        let v2236 = constructor_output_reg(ctx, v2235);
                        let v2237 = Some(v2236);
                        // Rule at src\isa\s390x\lower.isle line 3447.
                        return v2237;
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1821,
            func_ref: v1822,
        } => {
            if let &Opcode::FuncAddr = v1821 {
                let v1823 = C::func_ref_data(ctx, v1822);
                let v1827 = C::reloc_distance_near(ctx, v1823.2);
                if let Some(v1828) = v1827 {
                    let v1830 = C::memflags_trusted(ctx);
                    let v1831 = &C::memarg_symbol(ctx, v1823.1, 0x0, v1830);
                    let v1832 = constructor_load_addr(ctx, v1831);
                    let v1833 = constructor_output_reg(ctx, v1832);
                    let v1834 = Some(v1833);
                    // Rule at src\isa\s390x\lower.isle line 2254.
                    return v1834;
                }
                let v1836 = SymbolReloc::Absolute {
                    name: v1823.1,
                    offset: 0x0,
                };
                let v1837 = constructor_load_symbol_reloc(ctx, &v1836);
                let v1838 = constructor_output_reg(ctx, v1837);
                let v1839 = Some(v1838);
                // Rule at src\isa\s390x\lower.isle line 2258.
                return v1839;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v2416,
            args: ref v2417,
            code: ref v2418,
        } => {
            if let &Opcode::UaddOverflowTrap = v2416 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v69 = C::fits_in_64(ctx, v3);
                    if let Some(v70) = v69 {
                        let v2419 = C::unpack_value_array_2(ctx, v2417);
                        let v2441 = C::def_inst(ctx, v2419.0);
                        if let Some(v2442) = v2441 {
                            let v2443 = &C::inst_data(ctx, v2442);
                            if let &InstructionData::Unary {
                                opcode: ref v2444,
                                arg: v2445,
                            } = v2443
                            {
                                if let &Opcode::Uextend = v2444 {
                                    let v2446 = C::value_type(ctx, v2445);
                                    if v2446 == I32 {
                                        let v2447 = C::put_in_reg(ctx, v2419.1);
                                        let v2448 = C::put_in_reg(ctx, v2445);
                                        let v2449 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v70, v2447, v2448,
                                            );
                                        let v2425 = &C::mask_as_cond(ctx, 0x3);
                                        let v2426 = &constructor_trap_if_impl(ctx, v2425, v2418);
                                        let v2450 = constructor_with_flags(ctx, v2449, v2426);
                                        let v2451 = C::output(ctx, v2450);
                                        let v2452 = Some(v2451);
                                        // Rule at src\isa\s390x\lower.isle line 3846.
                                        return v2452;
                                    }
                                }
                            }
                        }
                        let v2461 = C::u32_from_value(ctx, v2419.0);
                        if let Some(v2462) = v2461 {
                            let v2447 = C::put_in_reg(ctx, v2419.1);
                            let v2463 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v70, v2447, v2462,
                            );
                            let v2456 = &C::mask_as_cond(ctx, 0x3);
                            let v2457 = &constructor_trap_if_impl(ctx, v2456, v2418);
                            let v2464 = constructor_with_flags(ctx, v2463, v2457);
                            let v2465 = C::output(ctx, v2464);
                            let v2466 = Some(v2465);
                            // Rule at src\isa\s390x\lower.isle line 3858.
                            return v2466;
                        }
                        let v2487 = C::sinkable_inst(ctx, v2419.0);
                        if let Some(v2488) = v2487 {
                            let v2489 = &C::inst_data(ctx, v2488);
                            if let &InstructionData::Load {
                                opcode: ref v2490,
                                arg: v2491,
                                flags: v2492,
                                offset: v2493,
                            } = v2489
                            {
                                match v2490 {
                                    &Opcode::Load => {
                                        let v2484 = C::value_type(ctx, v2419.0);
                                        let v2485 = C::ty_32_or_64(ctx, v2484);
                                        if let Some(v2486) = v2485 {
                                            let v2494 = C::bigendian(ctx, v2492);
                                            if let Some(v2495) = v2494 {
                                                let v2447 = C::put_in_reg(ctx, v2419.1);
                                                let v2496 = &constructor_sink_load(ctx, v2488);
                                                let v2497 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v70, v2447, v2496,
                                                    );
                                                let v2425 = &C::mask_as_cond(ctx, 0x3);
                                                let v2426 =
                                                    &constructor_trap_if_impl(ctx, v2425, v2418);
                                                let v2498 =
                                                    constructor_with_flags(ctx, v2497, v2426);
                                                let v2499 = C::output(ctx, v2498);
                                                let v2500 = Some(v2499);
                                                // Rule at src\isa\s390x\lower.isle line 3870.
                                                return v2500;
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v2494 = C::bigendian(ctx, v2492);
                                        if let Some(v2495) = v2494 {
                                            let v2447 = C::put_in_reg(ctx, v2419.1);
                                            let v2506 = &constructor_sink_uload32(ctx, v2488);
                                            let v2507 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v70, v2447, v2506);
                                            let v2425 = &C::mask_as_cond(ctx, 0x3);
                                            let v2426 =
                                                &constructor_trap_if_impl(ctx, v2425, v2418);
                                            let v2508 = constructor_with_flags(ctx, v2507, v2426);
                                            let v2509 = C::output(ctx, v2508);
                                            let v2510 = Some(v2509);
                                            // Rule at src\isa\s390x\lower.isle line 3882.
                                            return v2510;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v2430 = C::def_inst(ctx, v2419.1);
                        if let Some(v2431) = v2430 {
                            let v2432 = &C::inst_data(ctx, v2431);
                            if let &InstructionData::Unary {
                                opcode: ref v2433,
                                arg: v2434,
                            } = v2432
                            {
                                if let &Opcode::Uextend = v2433 {
                                    let v2435 = C::value_type(ctx, v2434);
                                    if v2435 == I32 {
                                        let v2422 = C::put_in_reg(ctx, v2419.0);
                                        let v2436 = C::put_in_reg(ctx, v2434);
                                        let v2437 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v70, v2422, v2436,
                                            );
                                        let v2425 = &C::mask_as_cond(ctx, 0x3);
                                        let v2426 = &constructor_trap_if_impl(ctx, v2425, v2418);
                                        let v2438 = constructor_with_flags(ctx, v2437, v2426);
                                        let v2439 = C::output(ctx, v2438);
                                        let v2440 = Some(v2439);
                                        // Rule at src\isa\s390x\lower.isle line 3841.
                                        return v2440;
                                    }
                                }
                            }
                        }
                        let v2453 = C::u32_from_value(ctx, v2419.1);
                        if let Some(v2454) = v2453 {
                            let v2422 = C::put_in_reg(ctx, v2419.0);
                            let v2455 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v70, v2422, v2454,
                            );
                            let v2456 = &C::mask_as_cond(ctx, 0x3);
                            let v2457 = &constructor_trap_if_impl(ctx, v2456, v2418);
                            let v2458 = constructor_with_flags(ctx, v2455, v2457);
                            let v2459 = C::output(ctx, v2458);
                            let v2460 = Some(v2459);
                            // Rule at src\isa\s390x\lower.isle line 3853.
                            return v2460;
                        }
                        let v2470 = C::sinkable_inst(ctx, v2419.1);
                        if let Some(v2471) = v2470 {
                            let v2472 = &C::inst_data(ctx, v2471);
                            if let &InstructionData::Load {
                                opcode: ref v2473,
                                arg: v2474,
                                flags: v2475,
                                offset: v2476,
                            } = v2472
                            {
                                match v2473 {
                                    &Opcode::Load => {
                                        let v2467 = C::value_type(ctx, v2419.1);
                                        let v2468 = C::ty_32_or_64(ctx, v2467);
                                        if let Some(v2469) = v2468 {
                                            let v2477 = C::bigendian(ctx, v2475);
                                            if let Some(v2478) = v2477 {
                                                let v2422 = C::put_in_reg(ctx, v2419.0);
                                                let v2479 = &constructor_sink_load(ctx, v2471);
                                                let v2480 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v70, v2422, v2479,
                                                    );
                                                let v2425 = &C::mask_as_cond(ctx, 0x3);
                                                let v2426 =
                                                    &constructor_trap_if_impl(ctx, v2425, v2418);
                                                let v2481 =
                                                    constructor_with_flags(ctx, v2480, v2426);
                                                let v2482 = C::output(ctx, v2481);
                                                let v2483 = Some(v2482);
                                                // Rule at src\isa\s390x\lower.isle line 3865.
                                                return v2483;
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v2477 = C::bigendian(ctx, v2475);
                                        if let Some(v2478) = v2477 {
                                            let v2422 = C::put_in_reg(ctx, v2419.0);
                                            let v2501 = &constructor_sink_uload32(ctx, v2471);
                                            let v2502 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v70, v2422, v2501);
                                            let v2425 = &C::mask_as_cond(ctx, 0x3);
                                            let v2426 =
                                                &constructor_trap_if_impl(ctx, v2425, v2418);
                                            let v2503 = constructor_with_flags(ctx, v2502, v2426);
                                            let v2504 = C::output(ctx, v2503);
                                            let v2505 = Some(v2504);
                                            // Rule at src\isa\s390x\lower.isle line 3877.
                                            return v2505;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v2422 = C::put_in_reg(ctx, v2419.0);
                        let v2423 = C::put_in_reg(ctx, v2419.1);
                        let v2424 =
                            &constructor_add_logical_reg_with_flags_paired(ctx, v70, v2422, v2423);
                        let v2425 = &C::mask_as_cond(ctx, 0x3);
                        let v2426 = &constructor_trap_if_impl(ctx, v2425, v2418);
                        let v2427 = constructor_with_flags(ctx, v2424, v2426);
                        let v2428 = C::output(ctx, v2427);
                        let v2429 = Some(v2428);
                        // Rule at src\isa\s390x\lower.isle line 3835.
                        return v2429;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v2183,
            args: ref v2184,
            cond: ref v2185,
        } => {
            if let &Opcode::Icmp = v2183 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v2185 {
                        &IntCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2194 = C::put_in_reg(ctx, v2186.0);
                                let v2195 = C::put_in_reg(ctx, v2186.1);
                                let v2196 = constructor_vec_cmpeq(ctx, v174, v2194, v2195);
                                let v2197 = constructor_output_reg(ctx, v2196);
                                let v2198 = Some(v2197);
                                // Rule at src\isa\s390x\lower.isle line 3421.
                                return v2198;
                            }
                        }
                        &IntCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2194 = C::put_in_reg(ctx, v2186.0);
                                let v2195 = C::put_in_reg(ctx, v2186.1);
                                let v2196 = constructor_vec_cmpeq(ctx, v174, v2194, v2195);
                                let v2199 = constructor_vec_not(ctx, v174, v2196);
                                let v2200 = constructor_output_reg(ctx, v2199);
                                let v2201 = Some(v2200);
                                // Rule at src\isa\s390x\lower.isle line 3423.
                                return v2201;
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2194 = C::put_in_reg(ctx, v2186.0);
                                let v2195 = C::put_in_reg(ctx, v2186.1);
                                let v2202 = constructor_vec_cmph(ctx, v174, v2194, v2195);
                                let v2203 = constructor_output_reg(ctx, v2202);
                                let v2204 = Some(v2203);
                                // Rule at src\isa\s390x\lower.isle line 3425.
                                return v2204;
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2208 = C::put_in_reg(ctx, v2186.1);
                                let v2209 = C::put_in_reg(ctx, v2186.0);
                                let v2210 = constructor_vec_cmph(ctx, v174, v2208, v2209);
                                let v2213 = constructor_vec_not(ctx, v174, v2210);
                                let v2214 = constructor_output_reg(ctx, v2213);
                                let v2215 = Some(v2214);
                                // Rule at src\isa\s390x\lower.isle line 3431.
                                return v2215;
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2208 = C::put_in_reg(ctx, v2186.1);
                                let v2209 = C::put_in_reg(ctx, v2186.0);
                                let v2210 = constructor_vec_cmph(ctx, v174, v2208, v2209);
                                let v2211 = constructor_output_reg(ctx, v2210);
                                let v2212 = Some(v2211);
                                // Rule at src\isa\s390x\lower.isle line 3429.
                                return v2212;
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2194 = C::put_in_reg(ctx, v2186.0);
                                let v2195 = C::put_in_reg(ctx, v2186.1);
                                let v2202 = constructor_vec_cmph(ctx, v174, v2194, v2195);
                                let v2205 = constructor_vec_not(ctx, v174, v2202);
                                let v2206 = constructor_output_reg(ctx, v2205);
                                let v2207 = Some(v2206);
                                // Rule at src\isa\s390x\lower.isle line 3427.
                                return v2207;
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2194 = C::put_in_reg(ctx, v2186.0);
                                let v2195 = C::put_in_reg(ctx, v2186.1);
                                let v2216 = constructor_vec_cmphl(ctx, v174, v2194, v2195);
                                let v2217 = constructor_output_reg(ctx, v2216);
                                let v2218 = Some(v2217);
                                // Rule at src\isa\s390x\lower.isle line 3433.
                                return v2218;
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2208 = C::put_in_reg(ctx, v2186.1);
                                let v2209 = C::put_in_reg(ctx, v2186.0);
                                let v2222 = constructor_vec_cmphl(ctx, v174, v2208, v2209);
                                let v2225 = constructor_vec_not(ctx, v174, v2222);
                                let v2226 = constructor_output_reg(ctx, v2225);
                                let v2227 = Some(v2226);
                                // Rule at src\isa\s390x\lower.isle line 3439.
                                return v2227;
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2208 = C::put_in_reg(ctx, v2186.1);
                                let v2209 = C::put_in_reg(ctx, v2186.0);
                                let v2222 = constructor_vec_cmphl(ctx, v174, v2208, v2209);
                                let v2223 = constructor_output_reg(ctx, v2222);
                                let v2224 = Some(v2223);
                                // Rule at src\isa\s390x\lower.isle line 3437.
                                return v2224;
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v173 = C::ty_vec128(ctx, v3);
                            if let Some(v174) = v173 {
                                let v2186 = C::unpack_value_array_2(ctx, v2184);
                                let v2194 = C::put_in_reg(ctx, v2186.0);
                                let v2195 = C::put_in_reg(ctx, v2186.1);
                                let v2216 = constructor_vec_cmphl(ctx, v174, v2194, v2195);
                                let v2219 = constructor_vec_not(ctx, v174, v2216);
                                let v2220 = constructor_output_reg(ctx, v2219);
                                let v2221 = Some(v2220);
                                // Rule at src\isa\s390x\lower.isle line 3435.
                                return v2221;
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v69 = C::fits_in_64(ctx, v3);
                    if let Some(v70) = v69 {
                        let v2186 = C::unpack_value_array_2(ctx, v2184);
                        let v2190 = &constructor_icmp_val(ctx, true, v2185, v2186.0, v2186.1);
                        let v2191 = constructor_lower_bool(ctx, v70, v2190);
                        let v2192 = constructor_output_reg(ctx, v2191);
                        let v2193 = Some(v2192);
                        // Rule at src\isa\s390x\lower.isle line 3299.
                        return v2193;
                    }
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1870,
            arg: v1871,
            flags: v1872,
            offset: v1873,
        } => {
            match v1870 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v1799 = &C::lane_order(ctx);
                            match v1799 {
                                &LaneOrder::LittleEndian => {
                                    let v1879 = C::bigendian(ctx, v1872);
                                    if let Some(v1880) = v1879 {
                                        let v1920 = constructor_vec_load_elt_rev(
                                            ctx, v43, v1872, v1871, v1873,
                                        );
                                        let v1921 = constructor_output_reg(ctx, v1920);
                                        let v1922 = Some(v1921);
                                        // Rule at src\isa\s390x\lower.isle line 2365.
                                        return v1922;
                                    }
                                    let v1885 = C::littleendian(ctx, v1872);
                                    if let Some(v1886) = v1885 {
                                        let v1923 = constructor_vec_load_full_rev(
                                            ctx, v43, v1872, v1871, v1873,
                                        );
                                        let v1924 = constructor_output_reg(ctx, v1923);
                                        let v1925 = Some(v1924);
                                        // Rule at src\isa\s390x\lower.isle line 2370.
                                        return v1925;
                                    }
                                }
                                &LaneOrder::BigEndian => {
                                    let v1879 = C::bigendian(ctx, v1872);
                                    if let Some(v1880) = v1879 {
                                        let v1875 =
                                            &constructor_lower_address(ctx, v1872, v1871, v1873);
                                        let v1914 = constructor_vec_load(ctx, v43, v1875);
                                        let v1915 = constructor_output_reg(ctx, v1914);
                                        let v1916 = Some(v1915);
                                        // Rule at src\isa\s390x\lower.isle line 2355.
                                        return v1916;
                                    }
                                    let v1885 = C::littleendian(ctx, v1872);
                                    if let Some(v1886) = v1885 {
                                        let v1917 = constructor_vec_load_byte_rev(
                                            ctx, v43, v1872, v1871, v1873,
                                        );
                                        let v1918 = constructor_output_reg(ctx, v1917);
                                        let v1919 = Some(v1918);
                                        // Rule at src\isa\s390x\lower.isle line 2360.
                                        return v1919;
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8 => {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1876 = constructor_zext32_mem(ctx, I8, v1875);
                                let v1877 = constructor_output_reg(ctx, v1876);
                                let v1878 = Some(v1877);
                                // Rule at src\isa\s390x\lower.isle line 2303.
                                return v1878;
                            }
                            I16 => {
                                let v1879 = C::bigendian(ctx, v1872);
                                if let Some(v1880) = v1879 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1882 = constructor_zext32_mem(ctx, I16, v1875);
                                    let v1883 = constructor_output_reg(ctx, v1882);
                                    let v1884 = Some(v1883);
                                    // Rule at src\isa\s390x\lower.isle line 2307.
                                    return v1884;
                                }
                                let v1885 = C::littleendian(ctx, v1872);
                                if let Some(v1886) = v1885 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1887 = constructor_loadrev16(ctx, v1875);
                                    let v1888 = constructor_output_reg(ctx, v1887);
                                    let v1889 = Some(v1888);
                                    // Rule at src\isa\s390x\lower.isle line 2311.
                                    return v1889;
                                }
                            }
                            I32 => {
                                let v1879 = C::bigendian(ctx, v1872);
                                if let Some(v1880) = v1879 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1890 = constructor_load32(ctx, v1875);
                                    let v1891 = constructor_output_reg(ctx, v1890);
                                    let v1892 = Some(v1891);
                                    // Rule at src\isa\s390x\lower.isle line 2315.
                                    return v1892;
                                }
                                let v1885 = C::littleendian(ctx, v1872);
                                if let Some(v1886) = v1885 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1893 = constructor_loadrev32(ctx, v1875);
                                    let v1894 = constructor_output_reg(ctx, v1893);
                                    let v1895 = Some(v1894);
                                    // Rule at src\isa\s390x\lower.isle line 2319.
                                    return v1895;
                                }
                            }
                            I64 => {
                                let v1879 = C::bigendian(ctx, v1872);
                                if let Some(v1880) = v1879 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1896 = constructor_load64(ctx, v1875);
                                    let v1897 = constructor_output_reg(ctx, v1896);
                                    let v1898 = Some(v1897);
                                    // Rule at src\isa\s390x\lower.isle line 2323.
                                    return v1898;
                                }
                                let v1885 = C::littleendian(ctx, v1872);
                                if let Some(v1886) = v1885 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1899 = constructor_loadrev64(ctx, v1875);
                                    let v1900 = constructor_output_reg(ctx, v1899);
                                    let v1901 = Some(v1900);
                                    // Rule at src\isa\s390x\lower.isle line 2327.
                                    return v1901;
                                }
                            }
                            R64 => {
                                let v1879 = C::bigendian(ctx, v1872);
                                if let Some(v1880) = v1879 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1896 = constructor_load64(ctx, v1875);
                                    let v1897 = constructor_output_reg(ctx, v1896);
                                    let v1898 = Some(v1897);
                                    // Rule at src\isa\s390x\lower.isle line 2331.
                                    return v1898;
                                }
                                let v1885 = C::littleendian(ctx, v1872);
                                if let Some(v1886) = v1885 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1899 = constructor_loadrev64(ctx, v1875);
                                    let v1900 = constructor_output_reg(ctx, v1899);
                                    let v1901 = Some(v1900);
                                    // Rule at src\isa\s390x\lower.isle line 2335.
                                    return v1901;
                                }
                            }
                            F32 => {
                                let v1879 = C::bigendian(ctx, v1872);
                                if let Some(v1880) = v1879 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1902 =
                                        constructor_vec_load_lane_undef(ctx, F32X4, v1875, 0x0);
                                    let v1903 = constructor_output_reg(ctx, v1902);
                                    let v1904 = Some(v1903);
                                    // Rule at src\isa\s390x\lower.isle line 2339.
                                    return v1904;
                                }
                                let v1885 = C::littleendian(ctx, v1872);
                                if let Some(v1886) = v1885 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1905 = constructor_vec_load_lane_little_undef(
                                        ctx, F32X4, v1875, 0x0,
                                    );
                                    let v1906 = constructor_output_reg(ctx, v1905);
                                    let v1907 = Some(v1906);
                                    // Rule at src\isa\s390x\lower.isle line 2343.
                                    return v1907;
                                }
                            }
                            F64 => {
                                let v1879 = C::bigendian(ctx, v1872);
                                if let Some(v1880) = v1879 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1908 =
                                        constructor_vec_load_lane_undef(ctx, F64X2, v1875, 0x0);
                                    let v1909 = constructor_output_reg(ctx, v1908);
                                    let v1910 = Some(v1909);
                                    // Rule at src\isa\s390x\lower.isle line 2347.
                                    return v1910;
                                }
                                let v1885 = C::littleendian(ctx, v1872);
                                if let Some(v1886) = v1885 {
                                    let v1875 =
                                        &constructor_lower_address(ctx, v1872, v1871, v1873);
                                    let v1911 = constructor_vec_load_lane_little_undef(
                                        ctx, F64X2, v1875, 0x0,
                                    );
                                    let v1912 = constructor_output_reg(ctx, v1911);
                                    let v1913 = Some(v1912);
                                    // Rule at src\isa\s390x\lower.isle line 2351.
                                    return v1913;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                            let v1926 = constructor_zext64_mem(ctx, I8, v1875);
                            let v1927 = constructor_output_reg(ctx, v1926);
                            let v1928 = Some(v1927);
                            // Rule at src\isa\s390x\lower.isle line 2467.
                            return v1928;
                        }
                        let v701 = C::gpr32_ty(ctx, v3);
                        if let Some(v702) = v701 {
                            let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                            let v1876 = constructor_zext32_mem(ctx, I8, v1875);
                            let v1877 = constructor_output_reg(ctx, v1876);
                            let v1878 = Some(v1877);
                            // Rule at src\isa\s390x\lower.isle line 2463.
                            return v1878;
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                            let v1932 = constructor_sext64_mem(ctx, I8, v1875);
                            let v1933 = constructor_output_reg(ctx, v1932);
                            let v1934 = Some(v1933);
                            // Rule at src\isa\s390x\lower.isle line 2478.
                            return v1934;
                        }
                        let v701 = C::gpr32_ty(ctx, v3);
                        if let Some(v702) = v701 {
                            let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                            let v1929 = constructor_sext32_mem(ctx, I8, v1875);
                            let v1930 = constructor_output_reg(ctx, v1929);
                            let v1931 = Some(v1930);
                            // Rule at src\isa\s390x\lower.isle line 2474.
                            return v1931;
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1879 = C::bigendian(ctx, v1872);
                        if let Some(v1880) = v1879 {
                            let v3 = C::value_type(ctx, v2);
                            let v706 = C::gpr64_ty(ctx, v3);
                            if let Some(v707) = v706 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1938 = constructor_zext64_mem(ctx, I16, v1875);
                                let v1939 = constructor_output_reg(ctx, v1938);
                                let v1940 = Some(v1939);
                                // Rule at src\isa\s390x\lower.isle line 2496.
                                return v1940;
                            }
                            let v701 = C::gpr32_ty(ctx, v3);
                            if let Some(v702) = v701 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1882 = constructor_zext32_mem(ctx, I16, v1875);
                                let v1883 = constructor_output_reg(ctx, v1882);
                                let v1884 = Some(v1883);
                                // Rule at src\isa\s390x\lower.isle line 2485.
                                return v1884;
                            }
                        }
                        let v1885 = C::littleendian(ctx, v1872);
                        if let Some(v1886) = v1885 {
                            let v3 = C::value_type(ctx, v2);
                            let v706 = C::gpr64_ty(ctx, v3);
                            if let Some(v707) = v706 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1887 = constructor_loadrev16(ctx, v1875);
                                let v1941 = constructor_zext64_reg(ctx, I16, v1887);
                                let v1942 = constructor_output_reg(ctx, v1941);
                                let v1943 = Some(v1942);
                                // Rule at src\isa\s390x\lower.isle line 2501.
                                return v1943;
                            }
                            let v701 = C::gpr32_ty(ctx, v3);
                            if let Some(v702) = v701 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1887 = constructor_loadrev16(ctx, v1875);
                                let v1935 = constructor_zext32_reg(ctx, I16, v1887);
                                let v1936 = constructor_output_reg(ctx, v1935);
                                let v1937 = Some(v1936);
                                // Rule at src\isa\s390x\lower.isle line 2490.
                                return v1937;
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1879 = C::bigendian(ctx, v1872);
                        if let Some(v1880) = v1879 {
                            let v3 = C::value_type(ctx, v2);
                            let v706 = C::gpr64_ty(ctx, v3);
                            if let Some(v707) = v706 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1950 = constructor_sext64_mem(ctx, I16, v1875);
                                let v1951 = constructor_output_reg(ctx, v1950);
                                let v1952 = Some(v1951);
                                // Rule at src\isa\s390x\lower.isle line 2521.
                                return v1952;
                            }
                            let v701 = C::gpr32_ty(ctx, v3);
                            if let Some(v702) = v701 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1944 = constructor_sext32_mem(ctx, I16, v1875);
                                let v1945 = constructor_output_reg(ctx, v1944);
                                let v1946 = Some(v1945);
                                // Rule at src\isa\s390x\lower.isle line 2510.
                                return v1946;
                            }
                        }
                        let v1885 = C::littleendian(ctx, v1872);
                        if let Some(v1886) = v1885 {
                            let v3 = C::value_type(ctx, v2);
                            let v706 = C::gpr64_ty(ctx, v3);
                            if let Some(v707) = v706 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1887 = constructor_loadrev16(ctx, v1875);
                                let v1953 = constructor_sext64_reg(ctx, I16, v1887);
                                let v1954 = constructor_output_reg(ctx, v1953);
                                let v1955 = Some(v1954);
                                // Rule at src\isa\s390x\lower.isle line 2526.
                                return v1955;
                            }
                            let v701 = C::gpr32_ty(ctx, v3);
                            if let Some(v702) = v701 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1887 = constructor_loadrev16(ctx, v1875);
                                let v1947 = constructor_sext32_reg(ctx, I16, v1887);
                                let v1948 = constructor_output_reg(ctx, v1947);
                                let v1949 = Some(v1948);
                                // Rule at src\isa\s390x\lower.isle line 2515.
                                return v1949;
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v1879 = C::bigendian(ctx, v1872);
                            if let Some(v1880) = v1879 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1956 = constructor_zext64_mem(ctx, I32, v1875);
                                let v1957 = constructor_output_reg(ctx, v1956);
                                let v1958 = Some(v1957);
                                // Rule at src\isa\s390x\lower.isle line 2535.
                                return v1958;
                            }
                            let v1885 = C::littleendian(ctx, v1872);
                            if let Some(v1886) = v1885 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1893 = constructor_loadrev32(ctx, v1875);
                                let v1959 = constructor_zext64_reg(ctx, I32, v1893);
                                let v1960 = constructor_output_reg(ctx, v1959);
                                let v1961 = Some(v1960);
                                // Rule at src\isa\s390x\lower.isle line 2540.
                                return v1961;
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v1879 = C::bigendian(ctx, v1872);
                            if let Some(v1880) = v1879 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1962 = constructor_sext64_mem(ctx, I32, v1875);
                                let v1963 = constructor_output_reg(ctx, v1962);
                                let v1964 = Some(v1963);
                                // Rule at src\isa\s390x\lower.isle line 2549.
                                return v1964;
                            }
                            let v1885 = C::littleendian(ctx, v1872);
                            if let Some(v1886) = v1885 {
                                let v1875 = &constructor_lower_address(ctx, v1872, v1871, v1873);
                                let v1893 = constructor_loadrev32(ctx, v1875);
                                let v1965 = constructor_sext64_reg(ctx, I32, v1893);
                                let v1966 = constructor_output_reg(ctx, v1965);
                                let v1967 = Some(v1966);
                                // Rule at src\isa\s390x\lower.isle line 2554.
                                return v1967;
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1968 = constructor_load_v64(ctx, I8X16, v1872, v1871, v1873);
                            let v1969 = constructor_vec_unpacku_high(ctx, I8X16, v1968);
                            let v1970 = constructor_output_reg(ctx, v1969);
                            let v1971 = Some(v1970);
                            // Rule at src\isa\s390x\lower.isle line 2563.
                            return v1971;
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1968 = constructor_load_v64(ctx, I8X16, v1872, v1871, v1873);
                            let v1972 = constructor_vec_unpacks_high(ctx, I8X16, v1968);
                            let v1973 = constructor_output_reg(ctx, v1972);
                            let v1974 = Some(v1973);
                            // Rule at src\isa\s390x\lower.isle line 2567.
                            return v1974;
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1975 = constructor_load_v64(ctx, I16X8, v1872, v1871, v1873);
                            let v1976 = constructor_vec_unpacku_high(ctx, I16X8, v1975);
                            let v1977 = constructor_output_reg(ctx, v1976);
                            let v1978 = Some(v1977);
                            // Rule at src\isa\s390x\lower.isle line 2571.
                            return v1978;
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1975 = constructor_load_v64(ctx, I16X8, v1872, v1871, v1873);
                            let v1979 = constructor_vec_unpacks_high(ctx, I16X8, v1975);
                            let v1980 = constructor_output_reg(ctx, v1979);
                            let v1981 = Some(v1980);
                            // Rule at src\isa\s390x\lower.isle line 2575.
                            return v1981;
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1982 = constructor_load_v64(ctx, I32X4, v1872, v1871, v1873);
                            let v1983 = constructor_vec_unpacku_high(ctx, I32X4, v1982);
                            let v1984 = constructor_output_reg(ctx, v1983);
                            let v1985 = Some(v1984);
                            // Rule at src\isa\s390x\lower.isle line 2579.
                            return v1985;
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1982 = constructor_load_v64(ctx, I32X4, v1872, v1871, v1873);
                            let v1986 = constructor_vec_unpacks_high(ctx, I32X4, v1982);
                            let v1987 = constructor_output_reg(ctx, v1986);
                            let v1988 = Some(v1987);
                            // Rule at src\isa\s390x\lower.isle line 2583.
                            return v1988;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1322,
            arg: v1323,
            flags: v1324,
        } => {
            match v1322 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == R32 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v1339 = constructor_copy_reg(ctx, I32, v1326);
                                    let v1340 = constructor_output_reg(ctx, v1339);
                                    let v1341 = Some(v1340);
                                    // Rule at src\isa\s390x\lower.isle line 1736.
                                    return v1341;
                                }
                            }
                            I64 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == R64 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v1342 = constructor_copy_reg(ctx, I64, v1326);
                                    let v1343 = constructor_output_reg(ctx, v1342);
                                    let v1344 = Some(v1343);
                                    // Rule at src\isa\s390x\lower.isle line 1738.
                                    return v1344;
                                }
                            }
                            R32 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == I32 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v1339 = constructor_copy_reg(ctx, I32, v1326);
                                    let v1340 = constructor_output_reg(ctx, v1339);
                                    let v1341 = Some(v1340);
                                    // Rule at src\isa\s390x\lower.isle line 1732.
                                    return v1341;
                                }
                            }
                            R64 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == I64 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v1342 = constructor_copy_reg(ctx, I64, v1326);
                                    let v1343 = constructor_output_reg(ctx, v1342);
                                    let v1344 = Some(v1343);
                                    // Rule at src\isa\s390x\lower.isle line 1734.
                                    return v1344;
                                }
                            }
                            _ => {}
                        }
                        let v197 = C::multi_lane(ctx, v3);
                        if let Some(v198) = v197 {
                            let v1325 = C::value_type(ctx, v1323);
                            let v1355 = C::multi_lane(ctx, v1325);
                            if let Some(v1356) = v1355 {
                                if v198.0 == v1356.0 {
                                    if v198.1 == v1356.1 {
                                        let v1347 = constructor_output_value(ctx, v1323);
                                        let v1348 = Some(v1347);
                                        // Rule at src\isa\s390x\lower.isle line 1755.
                                        return v1348;
                                    }
                                }
                            }
                        }
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v1325 = C::value_type(ctx, v1323);
                            let v1359 = C::vr128_ty(ctx, v1325);
                            if let Some(v1360) = v1359 {
                                let v1326 = C::put_in_reg(ctx, v1323);
                                let v1361 = &constructor_lane_order_from_memflags(ctx, v1324);
                                let v1362 = constructor_abi_vec_elt_rev(ctx, v1361, v1360, v1326);
                                let v1363 = constructor_abi_vec_elt_rev(ctx, v1361, v43, v1362);
                                let v1364 = constructor_output_reg(ctx, v1363);
                                let v1365 = Some(v1364);
                                // Rule at src\isa\s390x\lower.isle line 1766.
                                return v1365;
                            }
                        }
                        let v1351 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1352) = v1351 {
                            let v1325 = C::value_type(ctx, v1323);
                            let v1353 = C::ty_scalar_float(ctx, v1325);
                            if let Some(v1354) = v1353 {
                                let v1347 = constructor_output_value(ctx, v1323);
                                let v1348 = Some(v1347);
                                // Rule at src\isa\s390x\lower.isle line 1750.
                                return v1348;
                            }
                        }
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v1325 = C::value_type(ctx, v1323);
                            let v1349 = C::gpr64_ty(ctx, v1325);
                            if let Some(v1350) = v1349 {
                                let v1347 = constructor_output_value(ctx, v1323);
                                let v1348 = Some(v1347);
                                // Rule at src\isa\s390x\lower.isle line 1745.
                                return v1348;
                            }
                        }
                        let v701 = C::gpr32_ty(ctx, v3);
                        if let Some(v702) = v701 {
                            let v1325 = C::value_type(ctx, v1323);
                            let v1345 = C::gpr32_ty(ctx, v1325);
                            if let Some(v1346) = v1345 {
                                let v1347 = constructor_output_value(ctx, v1323);
                                let v1348 = Some(v1347);
                                // Rule at src\isa\s390x\lower.isle line 1742.
                                return v1348;
                            }
                        }
                        match v3 {
                            I32 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == F32 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v60 = C::zero_reg(ctx);
                                    let v1336 =
                                        constructor_vec_extract_lane(ctx, F32X4, v1326, 0x0, v60);
                                    let v1337 = constructor_output_reg(ctx, v1336);
                                    let v1338 = Some(v1337);
                                    // Rule at src\isa\s390x\lower.isle line 1726.
                                    return v1338;
                                }
                            }
                            I64 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == F64 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v60 = C::zero_reg(ctx);
                                    let v1330 =
                                        constructor_vec_extract_lane(ctx, F64X2, v1326, 0x0, v60);
                                    let v1331 = constructor_output_reg(ctx, v1330);
                                    let v1332 = Some(v1331);
                                    // Rule at src\isa\s390x\lower.isle line 1718.
                                    return v1332;
                                }
                            }
                            F32 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == I32 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v60 = C::zero_reg(ctx);
                                    let v1333 = constructor_vec_insert_lane_undef(
                                        ctx, F32X4, v1326, 0x0, v60,
                                    );
                                    let v1334 = constructor_output_reg(ctx, v1333);
                                    let v1335 = Some(v1334);
                                    // Rule at src\isa\s390x\lower.isle line 1722.
                                    return v1335;
                                }
                            }
                            F64 => {
                                let v1325 = C::value_type(ctx, v1323);
                                if v1325 == I64 {
                                    let v1326 = C::put_in_reg(ctx, v1323);
                                    let v60 = C::zero_reg(ctx);
                                    let v1327 = constructor_vec_insert_lane_undef(
                                        ctx, F64X2, v1326, 0x0, v60,
                                    );
                                    let v1328 = constructor_output_reg(ctx, v1327);
                                    let v1329 = Some(v1328);
                                    // Rule at src\isa\s390x\lower.isle line 1714.
                                    return v1329;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v2134 = C::zero_offset(ctx);
                                let v2135 = &constructor_lower_address(ctx, v1324, v1323, v2134);
                                let v2136 = constructor_zext32_mem(ctx, I8, v2135);
                                let v2137 = constructor_output_reg(ctx, v2136);
                                let v2138 = Some(v2137);
                                // Rule at src\isa\s390x\lower.isle line 3210.
                                return v2138;
                            }
                            I16 => {
                                let v2139 = C::bigendian(ctx, v1324);
                                if let Some(v2140) = v2139 {
                                    let v2134 = C::zero_offset(ctx);
                                    let v2135 =
                                        &constructor_lower_address(ctx, v1324, v1323, v2134);
                                    let v2141 = constructor_zext32_mem(ctx, I16, v2135);
                                    let v2142 = constructor_output_reg(ctx, v2141);
                                    let v2143 = Some(v2142);
                                    // Rule at src\isa\s390x\lower.isle line 3214.
                                    return v2143;
                                }
                                let v2144 = C::littleendian(ctx, v1324);
                                if let Some(v2145) = v2144 {
                                    let v2134 = C::zero_offset(ctx);
                                    let v2135 =
                                        &constructor_lower_address(ctx, v1324, v1323, v2134);
                                    let v2146 = constructor_loadrev16(ctx, v2135);
                                    let v2147 = constructor_output_reg(ctx, v2146);
                                    let v2148 = Some(v2147);
                                    // Rule at src\isa\s390x\lower.isle line 3218.
                                    return v2148;
                                }
                            }
                            I32 => {
                                let v2139 = C::bigendian(ctx, v1324);
                                if let Some(v2140) = v2139 {
                                    let v2134 = C::zero_offset(ctx);
                                    let v2135 =
                                        &constructor_lower_address(ctx, v1324, v1323, v2134);
                                    let v2149 = constructor_load32(ctx, v2135);
                                    let v2150 = constructor_output_reg(ctx, v2149);
                                    let v2151 = Some(v2150);
                                    // Rule at src\isa\s390x\lower.isle line 3222.
                                    return v2151;
                                }
                                let v2144 = C::littleendian(ctx, v1324);
                                if let Some(v2145) = v2144 {
                                    let v2134 = C::zero_offset(ctx);
                                    let v2135 =
                                        &constructor_lower_address(ctx, v1324, v1323, v2134);
                                    let v2152 = constructor_loadrev32(ctx, v2135);
                                    let v2153 = constructor_output_reg(ctx, v2152);
                                    let v2154 = Some(v2153);
                                    // Rule at src\isa\s390x\lower.isle line 3226.
                                    return v2154;
                                }
                            }
                            I64 => {
                                let v2139 = C::bigendian(ctx, v1324);
                                if let Some(v2140) = v2139 {
                                    let v2134 = C::zero_offset(ctx);
                                    let v2135 =
                                        &constructor_lower_address(ctx, v1324, v1323, v2134);
                                    let v2155 = constructor_load64(ctx, v2135);
                                    let v2156 = constructor_output_reg(ctx, v2155);
                                    let v2157 = Some(v2156);
                                    // Rule at src\isa\s390x\lower.isle line 3230.
                                    return v2157;
                                }
                                let v2144 = C::littleendian(ctx, v1324);
                                if let Some(v2145) = v2144 {
                                    let v2134 = C::zero_offset(ctx);
                                    let v2135 =
                                        &constructor_lower_address(ctx, v1324, v1323, v2134);
                                    let v2158 = constructor_loadrev64(ctx, v2135);
                                    let v2159 = constructor_output_reg(ctx, v2158);
                                    let v2160 = Some(v2159);
                                    // Rule at src\isa\s390x\lower.isle line 3234.
                                    return v2160;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2511,
            args: v2512,
        } => {
            if let &Opcode::Return = v2511 {
                let v2513 = C::value_list_slice(ctx, v2512);
                let v2514 = constructor_lower_return(ctx, v2513);
                let v2515 = Some(v2514);
                // Rule at src\isa\s390x\lower.isle line 3890.
                return v2515;
            }
        }
        &InstructionData::NullAry { opcode: ref v34 } => {
            match v34 {
                &Opcode::Debugtrap => {
                    let v2413 = &constructor_debugtrap_impl(ctx);
                    let v2414 = constructor_side_effect(ctx, v2413);
                    let v2415 = Some(v2414);
                    // Rule at src\isa\s390x\lower.isle line 3816.
                    return v2415;
                }
                &Opcode::GetFramePointer => {
                    let v2586 = &C::memarg_frame_pointer_offset(ctx);
                    let v2587 = constructor_load64(ctx, v2586);
                    let v2588 = constructor_output_reg(ctx, v2587);
                    let v2589 = Some(v2588);
                    // Rule at src\isa\s390x\lower.isle line 4018.
                    return v2589;
                }
                &Opcode::GetStackPointer => {
                    let v2583 = constructor_sp(ctx);
                    let v2584 = constructor_output_reg(ctx, v2583);
                    let v2585 = Some(v2584);
                    // Rule at src\isa\s390x\lower.isle line 4015.
                    return v2585;
                }
                &Opcode::GetReturnAddress => {
                    let v2590 = &C::memarg_return_address_offset(ctx);
                    let v2591 = constructor_load64(ctx, v2590);
                    let v2592 = constructor_output_reg(ctx, v2591);
                    let v2593 = Some(v2592);
                    // Rule at src\isa\s390x\lower.isle line 4021.
                    return v2593;
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = constructor_imm(ctx, v3, 0x0);
                        let v37 = constructor_output_reg(ctx, v36);
                        let v38 = Some(v37);
                        // Rule at src\isa\s390x\lower.isle line 39.
                        return v38;
                    }
                }
                &Opcode::Nop => {
                    let v39 = C::invalid_reg(ctx);
                    let v40 = constructor_output_reg(ctx, v39);
                    let v41 = Some(v40);
                    // Rule at src\isa\s390x\lower.isle line 45.
                    return v41;
                }
                &Opcode::Fence => {
                    let v2180 = &constructor_fence_impl(ctx);
                    let v2181 = constructor_side_effect(ctx, v2180);
                    let v2182 = Some(v2181);
                    // Rule at src\isa\s390x\lower.isle line 3266.
                    return v2182;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1536,
            args: ref v1537,
            imm: v1538,
        } => {
            if let &Opcode::Shuffle = v1536 {
                let v1542 = C::u128_from_immediate(ctx, v1538);
                if let Some(v1543) = v1542 {
                    let v1544 = C::shuffle_mask_from_u128(ctx, v1543);
                    match v1544.1 {
                        0xF0F => {
                            let v1561 = C::u64_pair_split(ctx, v1544.0);
                            let v1564 = C::u32_pair_split(ctx, v1561.0);
                            let v1576 = C::u16_pair_split(ctx, v1564.1);
                            let v1579 = C::u8_pair_split(ctx, v1576.0);
                            match v1579.0 {
                                0x0 => {
                                    if v1579.1 == 0x1 {
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0x2 {
                                            if v1582.1 == 0x3 {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                if v1600.0 == 0x4 {
                                                    if v1600.1 == 0x5 {
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0x6 {
                                                            if v1603.1 == 0x7 {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1555 =
                                                                    C::put_in_reg(ctx, v1539.0);
                                                                let v1739 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1555,
                                                                    );
                                                                let v1740 = constructor_output_reg(
                                                                    ctx, v1739,
                                                                );
                                                                let v1741 = Some(v1740);
                                                                // Rule at src\isa\s390x\lower.isle line 2163.
                                                                return v1741;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1579.1 == 0x9 {
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0xA {
                                            if v1582.1 == 0xB {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                if v1600.0 == 0xC {
                                                    if v1600.1 == 0xD {
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0xE {
                                                            if v1603.1 == 0xF {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1555 =
                                                                    C::put_in_reg(ctx, v1539.0);
                                                                let v1757 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1555,
                                                                    );
                                                                let v1758 = constructor_output_reg(
                                                                    ctx, v1757,
                                                                );
                                                                let v1759 = Some(v1758);
                                                                // Rule at src\isa\s390x\lower.isle line 2177.
                                                                return v1759;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1579.1 == 0x11 {
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0x12 {
                                            if v1582.1 == 0x13 {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                if v1600.0 == 0x14 {
                                                    if v1600.1 == 0x15 {
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0x16 {
                                                            if v1603.1 == 0x17 {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1618 =
                                                                    C::put_in_reg(ctx, v1539.1);
                                                                let v1748 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1618,
                                                                    );
                                                                let v1749 = constructor_output_reg(
                                                                    ctx, v1748,
                                                                );
                                                                let v1750 = Some(v1749);
                                                                // Rule at src\isa\s390x\lower.isle line 2169.
                                                                return v1750;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1579.1 == 0x19 {
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0x1A {
                                            if v1582.1 == 0x1B {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                if v1600.0 == 0x1C {
                                                    if v1600.1 == 0x1D {
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0x1E {
                                                            if v1603.1 == 0x1F {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1618 =
                                                                    C::put_in_reg(ctx, v1539.1);
                                                                let v1766 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1618,
                                                                    );
                                                                let v1767 = constructor_output_reg(
                                                                    ctx, v1766,
                                                                );
                                                                let v1768 = Some(v1767);
                                                                // Rule at src\isa\s390x\lower.isle line 2183.
                                                                return v1768;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x3333 => {
                            let v1561 = C::u64_pair_split(ctx, v1544.0);
                            let v1564 = C::u32_pair_split(ctx, v1561.0);
                            let v1567 = C::u16_pair_split(ctx, v1564.0);
                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                            match v1573.0 {
                                0x0 => {
                                    if v1573.1 == 0x1 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0x2 {
                                            if v1582.1 == 0x3 {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                if v1594.0 == 0x4 {
                                                    if v1594.1 == 0x5 {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0x6 {
                                                            if v1603.1 == 0x7 {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1555 =
                                                                    C::put_in_reg(ctx, v1539.0);
                                                                let v1742 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1555,
                                                                    );
                                                                let v1743 = constructor_output_reg(
                                                                    ctx, v1742,
                                                                );
                                                                let v1744 = Some(v1743);
                                                                // Rule at src\isa\s390x\lower.isle line 2165.
                                                                return v1744;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1573.1 == 0x9 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0xA {
                                            if v1582.1 == 0xB {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                if v1594.0 == 0xC {
                                                    if v1594.1 == 0xD {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0xE {
                                                            if v1603.1 == 0xF {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1555 =
                                                                    C::put_in_reg(ctx, v1539.0);
                                                                let v1760 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1555,
                                                                    );
                                                                let v1761 = constructor_output_reg(
                                                                    ctx, v1760,
                                                                );
                                                                let v1762 = Some(v1761);
                                                                // Rule at src\isa\s390x\lower.isle line 2179.
                                                                return v1762;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1573.1 == 0x11 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0x12 {
                                            if v1582.1 == 0x13 {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                if v1594.0 == 0x14 {
                                                    if v1594.1 == 0x15 {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0x16 {
                                                            if v1603.1 == 0x17 {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1618 =
                                                                    C::put_in_reg(ctx, v1539.1);
                                                                let v1751 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1618,
                                                                    );
                                                                let v1752 = constructor_output_reg(
                                                                    ctx, v1751,
                                                                );
                                                                let v1753 = Some(v1752);
                                                                // Rule at src\isa\s390x\lower.isle line 2171.
                                                                return v1753;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1573.1 == 0x19 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                        if v1582.0 == 0x1A {
                                            if v1582.1 == 0x1B {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                if v1594.0 == 0x1C {
                                                    if v1594.1 == 0x1D {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                        if v1603.0 == 0x1E {
                                                            if v1603.1 == 0x1F {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1618 =
                                                                    C::put_in_reg(ctx, v1539.1);
                                                                let v1769 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1618,
                                                                    );
                                                                let v1770 = constructor_output_reg(
                                                                    ctx, v1769,
                                                                );
                                                                let v1771 = Some(v1770);
                                                                // Rule at src\isa\s390x\lower.isle line 2185.
                                                                return v1771;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x5555 => {
                            let v1561 = C::u64_pair_split(ctx, v1544.0);
                            let v1564 = C::u32_pair_split(ctx, v1561.0);
                            let v1567 = C::u16_pair_split(ctx, v1564.0);
                            let v1570 = C::u8_pair_split(ctx, v1567.0);
                            match v1570.1 {
                                0x0 => {
                                    let v1573 = C::u8_pair_split(ctx, v1567.1);
                                    if v1573.1 == 0x1 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                        if v1579.1 == 0x2 {
                                            let v1582 = C::u8_pair_split(ctx, v1576.1);
                                            if v1582.1 == 0x3 {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1591 = C::u8_pair_split(ctx, v1588.0);
                                                if v1591.1 == 0x4 {
                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                    if v1594.1 == 0x5 {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                        if v1600.1 == 0x6 {
                                                            let v1603 =
                                                                C::u8_pair_split(ctx, v1597.1);
                                                            if v1603.1 == 0x7 {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1555 =
                                                                    C::put_in_reg(ctx, v1539.0);
                                                                let v1745 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1555,
                                                                    );
                                                                let v1746 = constructor_output_reg(
                                                                    ctx, v1745,
                                                                );
                                                                let v1747 = Some(v1746);
                                                                // Rule at src\isa\s390x\lower.isle line 2167.
                                                                return v1747;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    let v1573 = C::u8_pair_split(ctx, v1567.1);
                                    if v1573.1 == 0x9 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                        if v1579.1 == 0xA {
                                            let v1582 = C::u8_pair_split(ctx, v1576.1);
                                            if v1582.1 == 0xB {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1591 = C::u8_pair_split(ctx, v1588.0);
                                                if v1591.1 == 0xC {
                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                    if v1594.1 == 0xD {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                        if v1600.1 == 0xE {
                                                            let v1603 =
                                                                C::u8_pair_split(ctx, v1597.1);
                                                            if v1603.1 == 0xF {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1555 =
                                                                    C::put_in_reg(ctx, v1539.0);
                                                                let v1763 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1555,
                                                                    );
                                                                let v1764 = constructor_output_reg(
                                                                    ctx, v1763,
                                                                );
                                                                let v1765 = Some(v1764);
                                                                // Rule at src\isa\s390x\lower.isle line 2181.
                                                                return v1765;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    let v1573 = C::u8_pair_split(ctx, v1567.1);
                                    if v1573.1 == 0x11 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                        if v1579.1 == 0x12 {
                                            let v1582 = C::u8_pair_split(ctx, v1576.1);
                                            if v1582.1 == 0x13 {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1591 = C::u8_pair_split(ctx, v1588.0);
                                                if v1591.1 == 0x14 {
                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                    if v1594.1 == 0x15 {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                        if v1600.1 == 0x16 {
                                                            let v1603 =
                                                                C::u8_pair_split(ctx, v1597.1);
                                                            if v1603.1 == 0x17 {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1618 =
                                                                    C::put_in_reg(ctx, v1539.1);
                                                                let v1754 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1618,
                                                                    );
                                                                let v1755 = constructor_output_reg(
                                                                    ctx, v1754,
                                                                );
                                                                let v1756 = Some(v1755);
                                                                // Rule at src\isa\s390x\lower.isle line 2173.
                                                                return v1756;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    let v1573 = C::u8_pair_split(ctx, v1567.1);
                                    if v1573.1 == 0x19 {
                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                        if v1579.1 == 0x1A {
                                            let v1582 = C::u8_pair_split(ctx, v1576.1);
                                            if v1582.1 == 0x1B {
                                                let v1585 = C::u32_pair_split(ctx, v1561.1);
                                                let v1588 = C::u16_pair_split(ctx, v1585.0);
                                                let v1591 = C::u8_pair_split(ctx, v1588.0);
                                                if v1591.1 == 0x1C {
                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                    if v1594.1 == 0x1D {
                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                        if v1600.1 == 0x1E {
                                                            let v1603 =
                                                                C::u8_pair_split(ctx, v1597.1);
                                                            if v1603.1 == 0x1F {
                                                                let v1539 = C::unpack_value_array_2(
                                                                    ctx, v1537,
                                                                );
                                                                let v1618 =
                                                                    C::put_in_reg(ctx, v1539.1);
                                                                let v1772 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1618,
                                                                    );
                                                                let v1773 = constructor_output_reg(
                                                                    ctx, v1772,
                                                                );
                                                                let v1774 = Some(v1773);
                                                                // Rule at src\isa\s390x\lower.isle line 2187.
                                                                return v1774;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0xFFFF => {
                            let v1561 = C::u64_pair_split(ctx, v1544.0);
                            let v1564 = C::u32_pair_split(ctx, v1561.0);
                            let v1567 = C::u16_pair_split(ctx, v1564.0);
                            let v1570 = C::u8_pair_split(ctx, v1567.0);
                            match v1570.0 {
                                0x0 => {
                                    match v1570.1 {
                                        0x0 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x1 {
                                                if v1573.1 == 0x1 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0x2 {
                                                        if v1579.1 == 0x2 {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0x3 {
                                                                if v1582.1 == 0x3 {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0x4 {
                                                                        if v1591.1 == 0x4 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x5 {
                                                                                if v1594.1 == 0x5 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x7 {
                                                                                                if v1603.1 == 0x7 {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1640 = constructor_vec_merge_high(ctx, I8X16, v1555, v1548);
                                                                                                    let v1641 = constructor_output_reg(ctx, v1640);
                                                                                                    let v1642 = Some(v1641);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2091.
                                                                                                    return v1642;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            match v1573.0 {
                                                0x0 => {
                                                    if v1573.1 == 0x1 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0x2 {
                                                            if v1579.1 == 0x3 {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0x2 {
                                                                    if v1582.1 == 0x3 {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0x4 {
                                                                            if v1591.1 == 0x5 {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0x4 {
                                                                                    if v1594.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1600.1 == 0x7 {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0x6 {
                                                                                                    if v1603.1 == 0x7 {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1637 = constructor_vec_merge_high(ctx, I16X8, v1555, v1548);
                                                                                                        let v1638 = constructor_output_reg(ctx, v1637);
                                                                                                        let v1639 = Some(v1638);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2089.
                                                                                                        return v1639;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x2 => {
                                                    if v1573.1 == 0x3 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        match v1579.0 {
                                                            0x0 => {
                                                                if v1579.1 == 0x1 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x2 {
                                                                        if v1582.1 == 0x3 {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0x4 {
                                                                                if v1591.1 == 0x5 {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0x4 {
                                                                                                if v1600.1 == 0x5 {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0x6 {
                                                                                                        if v1603.1 == 0x7 {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1634 = constructor_vec_merge_high(ctx, I32X4, v1555, v1548);
                                                                                                            let v1635 = constructor_output_reg(ctx, v1634);
                                                                                                            let v1636 = Some(v1635);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2087.
                                                                                                            return v1636;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x4 => {
                                                                if v1579.1 == 0x5 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x6 {
                                                                        if v1582.1 == 0x7 {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            match v1591.0 {
                                                                                0x0 => {
                                                                                    if v1591.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1594.1 == 0x3 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x4 {
                                                                                                    if v1600.1 == 0x5 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x6 {
                                                                                                            if v1603.1 == 0x7 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1631 = constructor_vec_merge_high(ctx, I64X2, v1555, v1548);
                                                                                                                let v1632 = constructor_output_reg(ctx, v1631);
                                                                                                                let v1633 = Some(v1632);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2085.
                                                                                                                return v1633;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1591.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1594.1 == 0xB {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0xC {
                                                                                                    if v1600.1 == 0xD {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0xE {
                                                                                                            if v1603.1 == 0xF {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1787 = constructor_vec_permute_dw_imm(ctx, I8X16, v1555, 0x0, v1548, 0x1);
                                                                                                                let v1788 = constructor_output_reg(ctx, v1787);
                                                                                                                let v1789 = Some(v1788);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2199.
                                                                                                                return v1789;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1591.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1594.1 == 0x13 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x14 {
                                                                                                    if v1600.1 == 0x15 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x16 {
                                                                                                            if v1603.1 == 0x17 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1606 = constructor_vec_merge_high(ctx, I64X2, v1555, v1556);
                                                                                                                let v1607 = constructor_output_reg(ctx, v1606);
                                                                                                                let v1608 = Some(v1607);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2069.
                                                                                                                return v1608;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1591.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1594.1 == 0x1B {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x1C {
                                                                                                    if v1600.1 == 0x1D {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x1E {
                                                                                                            if v1603.1 == 0x1F {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1775 = constructor_vec_permute_dw_imm(ctx, I8X16, v1555, 0x0, v1556, 0x1);
                                                                                                                let v1776 = constructor_output_reg(ctx, v1775);
                                                                                                                let v1777 = Some(v1776);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2191.
                                                                                                                return v1777;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1579.1 == 0x11 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x12 {
                                                                        if v1582.1 == 0x13 {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0x4 {
                                                                                if v1591.1 == 0x5 {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0x14 {
                                                                                                if v1600.1 == 0x15 {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0x16 {
                                                                                                        if v1603.1 == 0x17 {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1609 = constructor_vec_merge_high(ctx, I32X4, v1555, v1556);
                                                                                                            let v1610 = constructor_output_reg(ctx, v1609);
                                                                                                            let v1611 = Some(v1610);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2071.
                                                                                                            return v1611;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1573.1 == 0x11 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0x2 {
                                                            if v1579.1 == 0x3 {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0x12 {
                                                                    if v1582.1 == 0x13 {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0x4 {
                                                                            if v1591.1 == 0x5 {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0x14 {
                                                                                    if v1594.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1600.1 == 0x7 {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0x16 {
                                                                                                    if v1603.1 == 0x17 {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1612 = constructor_vec_merge_high(ctx, I16X8, v1555, v1556);
                                                                                                        let v1613 = constructor_output_reg(ctx, v1612);
                                                                                                        let v1614 = Some(v1613);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2073.
                                                                                                        return v1614;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x10 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x1 {
                                                if v1573.1 == 0x11 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0x2 {
                                                        if v1579.1 == 0x12 {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0x3 {
                                                                if v1582.1 == 0x13 {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0x4 {
                                                                        if v1591.1 == 0x14 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x5 {
                                                                                if v1594.1 == 0x15 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x7 {
                                                                                                if v1603.1 == 0x17 {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1615 = constructor_vec_merge_high(ctx, I8X16, v1555, v1556);
                                                                                                    let v1616 = constructor_output_reg(ctx, v1615);
                                                                                                    let v1617 = Some(v1616);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2075.
                                                                                                    return v1617;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x1 => {
                                    if v1570.1 == 0x3 {
                                        let v1573 = C::u8_pair_split(ctx, v1567.1);
                                        if v1573.0 == 0x5 {
                                            if v1573.1 == 0x7 {
                                                let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                if v1579.0 == 0x9 {
                                                    if v1579.1 == 0xB {
                                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                                        if v1582.0 == 0xD {
                                                            if v1582.1 == 0xF {
                                                                let v1585 =
                                                                    C::u32_pair_split(ctx, v1561.1);
                                                                let v1588 =
                                                                    C::u16_pair_split(ctx, v1585.0);
                                                                let v1591 =
                                                                    C::u8_pair_split(ctx, v1588.0);
                                                                match v1591.0 {
                                                                    0x1 => {
                                                                        if v1591.1 == 0x3 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x5 {
                                                                                if v1594.1 == 0x7 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xD {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1727 = constructor_vec_pack(ctx, I16X8, v1555, v1548);
                                                                                                    let v1728 = constructor_output_reg(ctx, v1727);
                                                                                                    let v1729 = Some(v1728);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2153.
                                                                                                    return v1729;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1591.1 == 0x13 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x15 {
                                                                                if v1594.1 == 0x17 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1D {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1709 = constructor_vec_pack(ctx, I16X8, v1555, v1556);
                                                                                                    let v1710 = constructor_output_reg(ctx, v1709);
                                                                                                    let v1711 = Some(v1710);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2141.
                                                                                                    return v1711;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x2 => {
                                    if v1570.1 == 0x3 {
                                        let v1573 = C::u8_pair_split(ctx, v1567.1);
                                        if v1573.0 == 0x6 {
                                            if v1573.1 == 0x7 {
                                                let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                if v1579.0 == 0xA {
                                                    if v1579.1 == 0xB {
                                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                                        if v1582.0 == 0xE {
                                                            if v1582.1 == 0xF {
                                                                let v1585 =
                                                                    C::u32_pair_split(ctx, v1561.1);
                                                                let v1588 =
                                                                    C::u16_pair_split(ctx, v1585.0);
                                                                let v1591 =
                                                                    C::u8_pair_split(ctx, v1588.0);
                                                                match v1591.0 {
                                                                    0x2 => {
                                                                        if v1591.1 == 0x3 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x6 {
                                                                                if v1594.1 == 0x7 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xE {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1724 = constructor_vec_pack(ctx, I32X4, v1555, v1548);
                                                                                                    let v1725 = constructor_output_reg(ctx, v1724);
                                                                                                    let v1726 = Some(v1725);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2151.
                                                                                                    return v1726;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1591.1 == 0x13 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x16 {
                                                                                if v1594.1 == 0x17 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1E {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1706 = constructor_vec_pack(ctx, I32X4, v1555, v1556);
                                                                                                    let v1707 = constructor_output_reg(ctx, v1706);
                                                                                                    let v1708 = Some(v1707);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2139.
                                                                                                    return v1708;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x4 => {
                                    if v1570.1 == 0x5 {
                                        let v1573 = C::u8_pair_split(ctx, v1567.1);
                                        if v1573.0 == 0x6 {
                                            if v1573.1 == 0x7 {
                                                let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                if v1579.0 == 0xC {
                                                    if v1579.1 == 0xD {
                                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                                        if v1582.0 == 0xE {
                                                            if v1582.1 == 0xF {
                                                                let v1585 =
                                                                    C::u32_pair_split(ctx, v1561.1);
                                                                let v1588 =
                                                                    C::u16_pair_split(ctx, v1585.0);
                                                                let v1591 =
                                                                    C::u8_pair_split(ctx, v1588.0);
                                                                match v1591.0 {
                                                                    0x4 => {
                                                                        if v1591.1 == 0x5 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x6 {
                                                                                if v1594.1 == 0x7 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xE {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1721 = constructor_vec_pack(ctx, I64X2, v1555, v1548);
                                                                                                    let v1722 = constructor_output_reg(ctx, v1721);
                                                                                                    let v1723 = Some(v1722);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2149.
                                                                                                    return v1723;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1591.1 == 0x15 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x16 {
                                                                                if v1594.1 == 0x17 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1E {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1703 = constructor_vec_pack(ctx, I64X2, v1555, v1556);
                                                                                                    let v1704 = constructor_output_reg(ctx, v1703);
                                                                                                    let v1705 = Some(v1704);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2137.
                                                                                                    return v1705;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    match v1570.1 {
                                        0x8 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x9 {
                                                if v1573.1 == 0x9 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0xA {
                                                        if v1579.1 == 0xA {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0xB {
                                                                if v1582.1 == 0xB {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0xC {
                                                                        if v1591.1 == 0xC {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0xD {
                                                                                if v1594.1 == 0xD {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xF {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1688 = constructor_vec_merge_low(ctx, I8X16, v1555, v1548);
                                                                                                    let v1689 = constructor_output_reg(ctx, v1688);
                                                                                                    let v1690 = Some(v1689);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2125.
                                                                                                    return v1690;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x9 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            match v1573.0 {
                                                0x8 => {
                                                    if v1573.1 == 0x9 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0xA {
                                                            if v1579.1 == 0xB {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0xA {
                                                                    if v1582.1 == 0xB {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0xC {
                                                                            if v1591.1 == 0xD {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0xC {
                                                                                    if v1594.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1600.1 == 0xF {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0xE {
                                                                                                    if v1603.1 == 0xF {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1685 = constructor_vec_merge_low(ctx, I16X8, v1555, v1548);
                                                                                                        let v1686 = constructor_output_reg(ctx, v1685);
                                                                                                        let v1687 = Some(v1686);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2123.
                                                                                                        return v1687;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0xA => {
                                                    if v1573.1 == 0xB {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        match v1579.0 {
                                                            0x8 => {
                                                                if v1579.1 == 0x9 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0xA {
                                                                        if v1582.1 == 0xB {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0xC {
                                                                                if v1591.1 == 0xD {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0xC {
                                                                                                if v1600.1 == 0xD {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0xE {
                                                                                                        if v1603.1 == 0xF {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1682 = constructor_vec_merge_low(ctx, I32X4, v1555, v1548);
                                                                                                            let v1683 = constructor_output_reg(ctx, v1682);
                                                                                                            let v1684 = Some(v1683);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2121.
                                                                                                            return v1684;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0xC => {
                                                                if v1579.1 == 0xD {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0xE {
                                                                        if v1582.1 == 0xF {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            match v1591.0 {
                                                                                0x0 => {
                                                                                    if v1591.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1594.1 == 0x3 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x4 {
                                                                                                    if v1600.1 == 0x5 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x6 {
                                                                                                            if v1603.1 == 0x7 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1790 = constructor_vec_permute_dw_imm(ctx, I8X16, v1555, 0x1, v1548, 0x0);
                                                                                                                let v1791 = constructor_output_reg(ctx, v1790);
                                                                                                                let v1792 = Some(v1791);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2201.
                                                                                                                return v1792;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1591.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1594.1 == 0xB {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0xC {
                                                                                                    if v1600.1 == 0xD {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0xE {
                                                                                                            if v1603.1 == 0xF {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1679 = constructor_vec_merge_low(ctx, I64X2, v1555, v1548);
                                                                                                                let v1680 = constructor_output_reg(ctx, v1679);
                                                                                                                let v1681 = Some(v1680);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2119.
                                                                                                                return v1681;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1591.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1594.1 == 0x13 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x14 {
                                                                                                    if v1600.1 == 0x15 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x16 {
                                                                                                            if v1603.1 == 0x17 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1778 = constructor_vec_permute_dw_imm(ctx, I8X16, v1555, 0x1, v1556, 0x0);
                                                                                                                let v1779 = constructor_output_reg(ctx, v1778);
                                                                                                                let v1780 = Some(v1779);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2193.
                                                                                                                return v1780;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1591.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1594.1 == 0x1B {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x1C {
                                                                                                    if v1600.1 == 0x1D {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x1E {
                                                                                                            if v1603.1 == 0x1F {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1655 = constructor_vec_merge_low(ctx, I64X2, v1555, v1556);
                                                                                                                let v1656 = constructor_output_reg(ctx, v1655);
                                                                                                                let v1657 = Some(v1656);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2103.
                                                                                                                return v1657;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1579.1 == 0x19 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x1A {
                                                                        if v1582.1 == 0x1B {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0xC {
                                                                                if v1591.1 == 0xD {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0x1C {
                                                                                                if v1600.1 == 0x1D {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0x1E {
                                                                                                        if v1603.1 == 0x1F {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1658 = constructor_vec_merge_low(ctx, I32X4, v1555, v1556);
                                                                                                            let v1659 = constructor_output_reg(ctx, v1658);
                                                                                                            let v1660 = Some(v1659);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2105.
                                                                                                            return v1660;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1573.1 == 0x19 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0xA {
                                                            if v1579.1 == 0xB {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0x1A {
                                                                    if v1582.1 == 0x1B {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0xC {
                                                                            if v1591.1 == 0xD {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0x1C {
                                                                                    if v1594.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1600.1 == 0xF {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0x1E {
                                                                                                    if v1603.1 == 0x1F {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1661 = constructor_vec_merge_low(ctx, I16X8, v1555, v1556);
                                                                                                        let v1662 = constructor_output_reg(ctx, v1661);
                                                                                                        let v1663 = Some(v1662);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2107.
                                                                                                        return v1663;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x18 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x9 {
                                                if v1573.1 == 0x19 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0xA {
                                                        if v1579.1 == 0x1A {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0xB {
                                                                if v1582.1 == 0x1B {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0xC {
                                                                        if v1591.1 == 0x1C {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0xD {
                                                                                if v1594.1 == 0x1D {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xF {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1664 = constructor_vec_merge_low(ctx, I8X16, v1555, v1556);
                                                                                                    let v1665 = constructor_output_reg(ctx, v1664);
                                                                                                    let v1666 = Some(v1665);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2109.
                                                                                                    return v1666;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x10 => {
                                    match v1570.1 {
                                        0x0 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x11 {
                                                if v1573.1 == 0x1 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0x12 {
                                                        if v1579.1 == 0x2 {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0x13 {
                                                                if v1582.1 == 0x3 {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0x14 {
                                                                        if v1591.1 == 0x4 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x15 {
                                                                                if v1594.1 == 0x5 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x17 {
                                                                                                if v1603.1 == 0x7 {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1628 = constructor_vec_merge_high(ctx, I8X16, v1618, v1548);
                                                                                                    let v1629 = constructor_output_reg(ctx, v1628);
                                                                                                    let v1630 = Some(v1629);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2083.
                                                                                                    return v1630;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x10 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x11 {
                                                if v1573.1 == 0x11 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0x12 {
                                                        if v1579.1 == 0x12 {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0x13 {
                                                                if v1582.1 == 0x13 {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0x14 {
                                                                        if v1591.1 == 0x14 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x15 {
                                                                                if v1594.1 == 0x15 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x17 {
                                                                                                if v1603.1 == 0x17 {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1652 = constructor_vec_merge_high(ctx, I8X16, v1618, v1556);
                                                                                                    let v1653 = constructor_output_reg(ctx, v1652);
                                                                                                    let v1654 = Some(v1653);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2099.
                                                                                                    return v1654;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x11 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            match v1573.0 {
                                                0x0 => {
                                                    if v1573.1 == 0x1 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0x12 {
                                                            if v1579.1 == 0x13 {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0x2 {
                                                                    if v1582.1 == 0x3 {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0x14 {
                                                                            if v1591.1 == 0x15 {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0x4 {
                                                                                    if v1594.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1600.1 == 0x17 {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0x6 {
                                                                                                    if v1603.1 == 0x7 {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1625 = constructor_vec_merge_high(ctx, I16X8, v1618, v1548);
                                                                                                        let v1626 = constructor_output_reg(ctx, v1625);
                                                                                                        let v1627 = Some(v1626);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2081.
                                                                                                        return v1627;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1573.1 == 0x11 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0x12 {
                                                            if v1579.1 == 0x13 {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0x12 {
                                                                    if v1582.1 == 0x13 {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0x14 {
                                                                            if v1591.1 == 0x15 {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0x14 {
                                                                                    if v1594.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1600.1 == 0x17 {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0x16 {
                                                                                                    if v1603.1 == 0x17 {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1649 = constructor_vec_merge_high(ctx, I16X8, v1618, v1556);
                                                                                                        let v1650 = constructor_output_reg(ctx, v1649);
                                                                                                        let v1651 = Some(v1650);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2097.
                                                                                                        return v1651;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x12 => {
                                                    if v1573.1 == 0x13 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        match v1579.0 {
                                                            0x0 => {
                                                                if v1579.1 == 0x1 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x2 {
                                                                        if v1582.1 == 0x3 {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0x14 {
                                                                                if v1591.1 == 0x15 {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0x4 {
                                                                                                if v1600.1 == 0x5 {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0x6 {
                                                                                                        if v1603.1 == 0x7 {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1622 = constructor_vec_merge_high(ctx, I32X4, v1618, v1548);
                                                                                                            let v1623 = constructor_output_reg(ctx, v1622);
                                                                                                            let v1624 = Some(v1623);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2079.
                                                                                                            return v1624;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1579.1 == 0x11 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x12 {
                                                                        if v1582.1 == 0x13 {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0x14 {
                                                                                if v1591.1 == 0x15 {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0x14 {
                                                                                                if v1600.1 == 0x15 {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0x16 {
                                                                                                        if v1603.1 == 0x17 {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1646 = constructor_vec_merge_high(ctx, I32X4, v1618, v1556);
                                                                                                            let v1647 = constructor_output_reg(ctx, v1646);
                                                                                                            let v1648 = Some(v1647);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2095.
                                                                                                            return v1648;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x14 => {
                                                                if v1579.1 == 0x15 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x16 {
                                                                        if v1582.1 == 0x17 {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            match v1591.0 {
                                                                                0x0 => {
                                                                                    if v1591.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1594.1 == 0x3 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x4 {
                                                                                                    if v1600.1 == 0x5 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x6 {
                                                                                                            if v1603.1 == 0x7 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1619 = constructor_vec_merge_high(ctx, I64X2, v1618, v1548);
                                                                                                                let v1620 = constructor_output_reg(ctx, v1619);
                                                                                                                let v1621 = Some(v1620);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2077.
                                                                                                                return v1621;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1591.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1594.1 == 0xB {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0xC {
                                                                                                    if v1600.1 == 0xD {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0xE {
                                                                                                            if v1603.1 == 0xF {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1781 = constructor_vec_permute_dw_imm(ctx, I8X16, v1618, 0x0, v1548, 0x1);
                                                                                                                let v1782 = constructor_output_reg(ctx, v1781);
                                                                                                                let v1783 = Some(v1782);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2195.
                                                                                                                return v1783;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1591.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1594.1 == 0x13 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x14 {
                                                                                                    if v1600.1 == 0x15 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x16 {
                                                                                                            if v1603.1 == 0x17 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1643 = constructor_vec_merge_high(ctx, I64X2, v1618, v1556);
                                                                                                                let v1644 = constructor_output_reg(ctx, v1643);
                                                                                                                let v1645 = Some(v1644);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2093.
                                                                                                                return v1645;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1591.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1594.1 == 0x1B {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x1C {
                                                                                                    if v1600.1 == 0x1D {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x1E {
                                                                                                            if v1603.1 == 0x1F {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1793 = constructor_vec_permute_dw_imm(ctx, I8X16, v1618, 0x0, v1556, 0x1);
                                                                                                                let v1794 = constructor_output_reg(ctx, v1793);
                                                                                                                let v1795 = Some(v1794);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2203.
                                                                                                                return v1795;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x11 => {
                                    if v1570.1 == 0x13 {
                                        let v1573 = C::u8_pair_split(ctx, v1567.1);
                                        if v1573.0 == 0x15 {
                                            if v1573.1 == 0x17 {
                                                let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                if v1579.0 == 0x19 {
                                                    if v1579.1 == 0x1B {
                                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                                        if v1582.0 == 0x1D {
                                                            if v1582.1 == 0x1F {
                                                                let v1585 =
                                                                    C::u32_pair_split(ctx, v1561.1);
                                                                let v1588 =
                                                                    C::u16_pair_split(ctx, v1585.0);
                                                                let v1591 =
                                                                    C::u8_pair_split(ctx, v1588.0);
                                                                match v1591.0 {
                                                                    0x1 => {
                                                                        if v1591.1 == 0x3 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x5 {
                                                                                if v1594.1 == 0x7 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xD {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1718 = constructor_vec_pack(ctx, I16X8, v1618, v1548);
                                                                                                    let v1719 = constructor_output_reg(ctx, v1718);
                                                                                                    let v1720 = Some(v1719);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2147.
                                                                                                    return v1720;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1591.1 == 0x13 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x15 {
                                                                                if v1594.1 == 0x17 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1D {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1736 = constructor_vec_pack(ctx, I16X8, v1618, v1556);
                                                                                                    let v1737 = constructor_output_reg(ctx, v1736);
                                                                                                    let v1738 = Some(v1737);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2159.
                                                                                                    return v1738;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x12 => {
                                    if v1570.1 == 0x13 {
                                        let v1573 = C::u8_pair_split(ctx, v1567.1);
                                        if v1573.0 == 0x16 {
                                            if v1573.1 == 0x17 {
                                                let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                if v1579.0 == 0x1A {
                                                    if v1579.1 == 0x1B {
                                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                                        if v1582.0 == 0x1E {
                                                            if v1582.1 == 0x1F {
                                                                let v1585 =
                                                                    C::u32_pair_split(ctx, v1561.1);
                                                                let v1588 =
                                                                    C::u16_pair_split(ctx, v1585.0);
                                                                let v1591 =
                                                                    C::u8_pair_split(ctx, v1588.0);
                                                                match v1591.0 {
                                                                    0x2 => {
                                                                        if v1591.1 == 0x3 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x6 {
                                                                                if v1594.1 == 0x7 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xE {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1715 = constructor_vec_pack(ctx, I32X4, v1618, v1548);
                                                                                                    let v1716 = constructor_output_reg(ctx, v1715);
                                                                                                    let v1717 = Some(v1716);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2145.
                                                                                                    return v1717;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1591.1 == 0x13 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x16 {
                                                                                if v1594.1 == 0x17 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1E {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1733 = constructor_vec_pack(ctx, I32X4, v1618, v1556);
                                                                                                    let v1734 = constructor_output_reg(ctx, v1733);
                                                                                                    let v1735 = Some(v1734);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2157.
                                                                                                    return v1735;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x14 => {
                                    if v1570.1 == 0x15 {
                                        let v1573 = C::u8_pair_split(ctx, v1567.1);
                                        if v1573.0 == 0x16 {
                                            if v1573.1 == 0x17 {
                                                let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                if v1579.0 == 0x1C {
                                                    if v1579.1 == 0x1D {
                                                        let v1582 = C::u8_pair_split(ctx, v1576.1);
                                                        if v1582.0 == 0x1E {
                                                            if v1582.1 == 0x1F {
                                                                let v1585 =
                                                                    C::u32_pair_split(ctx, v1561.1);
                                                                let v1588 =
                                                                    C::u16_pair_split(ctx, v1585.0);
                                                                let v1591 =
                                                                    C::u8_pair_split(ctx, v1588.0);
                                                                match v1591.0 {
                                                                    0x4 => {
                                                                        if v1591.1 == 0x5 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x6 {
                                                                                if v1594.1 == 0x7 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0xE {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1712 = constructor_vec_pack(ctx, I64X2, v1618, v1548);
                                                                                                    let v1713 = constructor_output_reg(ctx, v1712);
                                                                                                    let v1714 = Some(v1713);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2143.
                                                                                                    return v1714;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1591.1 == 0x15 {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x16 {
                                                                                if v1594.1 == 0x17 {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1E {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1730 = constructor_vec_pack(ctx, I64X2, v1618, v1556);
                                                                                                    let v1731 = constructor_output_reg(ctx, v1730);
                                                                                                    let v1732 = Some(v1731);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2155.
                                                                                                    return v1732;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    match v1570.1 {
                                        0x8 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x19 {
                                                if v1573.1 == 0x9 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0x1A {
                                                        if v1579.1 == 0xA {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0x1B {
                                                                if v1582.1 == 0xB {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0x1C {
                                                                        if v1591.1 == 0xC {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x1D {
                                                                                if v1594.1 == 0xD {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1F {
                                                                                                if v1603.1 == 0xF {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                    let v1676 = constructor_vec_merge_low(ctx, I8X16, v1618, v1548);
                                                                                                    let v1677 = constructor_output_reg(ctx, v1676);
                                                                                                    let v1678 = Some(v1677);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2117.
                                                                                                    return v1678;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x18 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            if v1573.0 == 0x19 {
                                                if v1573.1 == 0x19 {
                                                    let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                    let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                    if v1579.0 == 0x1A {
                                                        if v1579.1 == 0x1A {
                                                            let v1582 =
                                                                C::u8_pair_split(ctx, v1576.1);
                                                            if v1582.0 == 0x1B {
                                                                if v1582.1 == 0x1B {
                                                                    let v1585 = C::u32_pair_split(
                                                                        ctx, v1561.1,
                                                                    );
                                                                    let v1588 = C::u16_pair_split(
                                                                        ctx, v1585.0,
                                                                    );
                                                                    let v1591 = C::u8_pair_split(
                                                                        ctx, v1588.0,
                                                                    );
                                                                    if v1591.0 == 0x1C {
                                                                        if v1591.1 == 0x1C {
                                                                            let v1594 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.1,
                                                                                );
                                                                            if v1594.0 == 0x1D {
                                                                                if v1594.1 == 0x1D {
                                                                                    let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                    let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                    if v1600.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1600.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                            if v1603.0 == 0x1F {
                                                                                                if v1603.1 == 0x1F {
                                                                                                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                    let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                    let v1700 = constructor_vec_merge_low(ctx, I8X16, v1618, v1556);
                                                                                                    let v1701 = constructor_output_reg(ctx, v1700);
                                                                                                    let v1702 = Some(v1701);
                                                                                                    // Rule at src\isa\s390x\lower.isle line 2133.
                                                                                                    return v1702;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x19 => {
                                            let v1573 = C::u8_pair_split(ctx, v1567.1);
                                            match v1573.0 {
                                                0x8 => {
                                                    if v1573.1 == 0x9 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0x1A {
                                                            if v1579.1 == 0x1B {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0xA {
                                                                    if v1582.1 == 0xB {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0x1C {
                                                                            if v1591.1 == 0x1D {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0xC {
                                                                                    if v1594.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1600.1 == 0x1F {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0xE {
                                                                                                    if v1603.1 == 0xF {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                        let v1673 = constructor_vec_merge_low(ctx, I16X8, v1618, v1548);
                                                                                                        let v1674 = constructor_output_reg(ctx, v1673);
                                                                                                        let v1675 = Some(v1674);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2115.
                                                                                                        return v1675;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1573.1 == 0x19 {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        if v1579.0 == 0x1A {
                                                            if v1579.1 == 0x1B {
                                                                let v1582 =
                                                                    C::u8_pair_split(ctx, v1576.1);
                                                                if v1582.0 == 0x1A {
                                                                    if v1582.1 == 0x1B {
                                                                        let v1585 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1561.1,
                                                                            );
                                                                        let v1588 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1585.0,
                                                                            );
                                                                        let v1591 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1588.0,
                                                                            );
                                                                        if v1591.0 == 0x1C {
                                                                            if v1591.1 == 0x1D {
                                                                                let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                if v1594.0 == 0x1C {
                                                                                    if v1594.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                        let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                        if v1600.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1600.1 == 0x1F {
                                                                                                let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                if v1603.0 == 0x1E {
                                                                                                    if v1603.1 == 0x1F {
                                                                                                        let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                        let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                        let v1697 = constructor_vec_merge_low(ctx, I16X8, v1618, v1556);
                                                                                                        let v1698 = constructor_output_reg(ctx, v1697);
                                                                                                        let v1699 = Some(v1698);
                                                                                                        // Rule at src\isa\s390x\lower.isle line 2131.
                                                                                                        return v1699;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x1A => {
                                                    if v1573.1 == 0x1B {
                                                        let v1576 = C::u16_pair_split(ctx, v1564.1);
                                                        let v1579 = C::u8_pair_split(ctx, v1576.0);
                                                        match v1579.0 {
                                                            0x8 => {
                                                                if v1579.1 == 0x9 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0xA {
                                                                        if v1582.1 == 0xB {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0x1C {
                                                                                if v1591.1 == 0x1D {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0xC {
                                                                                                if v1600.1 == 0xD {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0xE {
                                                                                                        if v1603.1 == 0xF {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                            let v1670 = constructor_vec_merge_low(ctx, I32X4, v1618, v1548);
                                                                                                            let v1671 = constructor_output_reg(ctx, v1670);
                                                                                                            let v1672 = Some(v1671);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2113.
                                                                                                            return v1672;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1579.1 == 0x19 {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x1A {
                                                                        if v1582.1 == 0x1B {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            if v1591.0 == 0x1C {
                                                                                if v1591.1 == 0x1D {
                                                                                    let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                    if v1594.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1594.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                            let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                            if v1600.0 == 0x1C {
                                                                                                if v1600.1 == 0x1D {
                                                                                                    let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                    if v1603.0 == 0x1E {
                                                                                                        if v1603.1 == 0x1F {
                                                                                                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                            let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                            let v1694 = constructor_vec_merge_low(ctx, I32X4, v1618, v1556);
                                                                                                            let v1695 = constructor_output_reg(ctx, v1694);
                                                                                                            let v1696 = Some(v1695);
                                                                                                            // Rule at src\isa\s390x\lower.isle line 2129.
                                                                                                            return v1696;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1C => {
                                                                if v1579.1 == 0x1D {
                                                                    let v1582 = C::u8_pair_split(
                                                                        ctx, v1576.1,
                                                                    );
                                                                    if v1582.0 == 0x1E {
                                                                        if v1582.1 == 0x1F {
                                                                            let v1585 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1561.1,
                                                                                );
                                                                            let v1588 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1585.0,
                                                                                );
                                                                            let v1591 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1588.0,
                                                                                );
                                                                            match v1591.0 {
                                                                                0x0 => {
                                                                                    if v1591.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1594.1 == 0x3 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x4 {
                                                                                                    if v1600.1 == 0x5 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x6 {
                                                                                                            if v1603.1 == 0x7 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1784 = constructor_vec_permute_dw_imm(ctx, I8X16, v1618, 0x1, v1548, 0x0);
                                                                                                                let v1785 = constructor_output_reg(ctx, v1784);
                                                                                                                let v1786 = Some(v1785);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2197.
                                                                                                                return v1786;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1591.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1594.1 == 0xB {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0xC {
                                                                                                    if v1600.1 == 0xD {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0xE {
                                                                                                            if v1603.1 == 0xF {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1548 = C::put_in_reg(ctx, v1539.0);
                                                                                                                let v1667 = constructor_vec_merge_low(ctx, I64X2, v1618, v1548);
                                                                                                                let v1668 = constructor_output_reg(ctx, v1667);
                                                                                                                let v1669 = Some(v1668);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2111.
                                                                                                                return v1669;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1591.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1594.1 == 0x13 {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x14 {
                                                                                                    if v1600.1 == 0x15 {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x16 {
                                                                                                            if v1603.1 == 0x17 {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1796 = constructor_vec_permute_dw_imm(ctx, I8X16, v1618, 0x1, v1556, 0x0);
                                                                                                                let v1797 = constructor_output_reg(ctx, v1796);
                                                                                                                let v1798 = Some(v1797);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2205.
                                                                                                                return v1798;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1591.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1594 = C::u8_pair_split(ctx, v1588.1);
                                                                                        if v1594.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1594.1 == 0x1B {
                                                                                                let v1597 = C::u16_pair_split(ctx, v1585.1);
                                                                                                let v1600 = C::u8_pair_split(ctx, v1597.0);
                                                                                                if v1600.0 == 0x1C {
                                                                                                    if v1600.1 == 0x1D {
                                                                                                        let v1603 = C::u8_pair_split(ctx, v1597.1);
                                                                                                        if v1603.0 == 0x1E {
                                                                                                            if v1603.1 == 0x1F {
                                                                                                                let v1539 = C::unpack_value_array_2(ctx, v1537);
                                                                                                                let v1618 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1556 = C::put_in_reg(ctx, v1539.1);
                                                                                                                let v1691 = constructor_vec_merge_low(ctx, I64X2, v1618, v1556);
                                                                                                                let v1692 = constructor_output_reg(ctx, v1691);
                                                                                                                let v1693 = Some(v1692);
                                                                                                                // Rule at src\isa\s390x\lower.isle line 2127.
                                                                                                                return v1693;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                            let v1539 = C::unpack_value_array_2(ctx, v1537);
                            let v1555 = C::put_in_reg(ctx, v1539.0);
                            let v1556 = C::put_in_reg(ctx, v1539.1);
                            let v1557 = constructor_vec_imm(ctx, I8X16, v1544.0);
                            let v1558 = constructor_vec_permute(ctx, I8X16, v1555, v1556, v1557);
                            let v1559 = constructor_output_reg(ctx, v1558);
                            let v1560 = Some(v1559);
                            // Rule at src\isa\s390x\lower.isle line 2065.
                            return v1560;
                        }
                        _ => {}
                    }
                    let v1547 = constructor_vec_imm_byte_mask(ctx, I8X16, v1544.1);
                    let v1539 = C::unpack_value_array_2(ctx, v1537);
                    let v1548 = C::put_in_reg(ctx, v1539.0);
                    let v1549 = C::put_in_reg(ctx, v1539.1);
                    let v1550 = constructor_vec_imm(ctx, I8X16, v1544.0);
                    let v1551 = constructor_vec_permute(ctx, I8X16, v1548, v1549, v1550);
                    let v1552 = constructor_vec_and(ctx, I8X16, v1547, v1551);
                    let v1553 = constructor_output_reg(ctx, v1552);
                    let v1554 = Some(v1553);
                    // Rule at src\isa\s390x\lower.isle line 2060.
                    return v1554;
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1815,
            stack_slot: v1816,
            offset: v1817,
        } => {
            if let &Opcode::StackAddr = v1815 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1818 = constructor_stack_addr_impl(ctx, v3, v1816, v1817);
                    let v1819 = constructor_output_reg(ctx, v1818);
                    let v1820 = Some(v1819);
                    // Rule at src\isa\s390x\lower.isle line 2247.
                    return v1820;
                }
            }
        }
        &InstructionData::Store {
            opcode: ref v1440,
            args: ref v1441,
            flags: v1442,
            offset: v1443,
        } => {
            match v1440 {
                &Opcode::Store => {
                    let v1444 = C::unpack_value_array_2(ctx, v1441);
                    let v1447 = C::def_inst(ctx, v1444.0);
                    if let Some(v1448) = v1447 {
                        let v1449 = &C::inst_data(ctx, v1448);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref v1450,
                            arg: v1451,
                            imm: v1452,
                        } = v1449
                        {
                            if let &Opcode::Extractlane = v1450 {
                                let v1455 = C::bigendian(ctx, v1442);
                                if let Some(v1456) = v1455 {
                                    let v1457 = C::put_in_reg(ctx, v1451);
                                    let v1458 =
                                        &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                    let v1453 = C::value_type(ctx, v1451);
                                    let v1454 = C::u8_from_uimm8(ctx, v1452);
                                    let v1459 = C::be_lane_idx(ctx, v1453, v1454);
                                    let v1460 = &constructor_vec_store_lane(
                                        ctx, v1453, v1457, v1458, v1459,
                                    );
                                    let v1461 = constructor_side_effect(ctx, v1460);
                                    let v1462 = Some(v1461);
                                    // Rule at src\isa\s390x\lower.isle line 1903.
                                    return v1462;
                                }
                                let v1463 = C::littleendian(ctx, v1442);
                                if let Some(v1464) = v1463 {
                                    let v1457 = C::put_in_reg(ctx, v1451);
                                    let v1458 =
                                        &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                    let v1453 = C::value_type(ctx, v1451);
                                    let v1454 = C::u8_from_uimm8(ctx, v1452);
                                    let v1459 = C::be_lane_idx(ctx, v1453, v1454);
                                    let v1465 = &constructor_vec_store_lane_little(
                                        ctx, v1453, v1457, v1458, v1459,
                                    );
                                    let v1466 = constructor_side_effect(ctx, v1465);
                                    let v1467 = Some(v1466);
                                    // Rule at src\isa\s390x\lower.isle line 1910.
                                    return v1467;
                                }
                            }
                        }
                    }
                    let v1799 = &C::lane_order(ctx);
                    match v1799 {
                        &LaneOrder::LittleEndian => {
                            let v1989 = C::value_type(ctx, v1444.0);
                            let v2015 = C::vr128_ty(ctx, v1989);
                            if let Some(v2016) = v2015 {
                                let v1455 = C::bigendian(ctx, v1442);
                                if let Some(v1456) = v1455 {
                                    let v2002 = C::put_in_reg(ctx, v1444.0);
                                    let v2023 = &constructor_vec_store_elt_rev(
                                        ctx, v2016, v2002, v1442, v1444.1, v1443,
                                    );
                                    let v2024 = constructor_side_effect(ctx, v2023);
                                    let v2025 = Some(v2024);
                                    // Rule at src\isa\s390x\lower.isle line 2697.
                                    return v2025;
                                }
                                let v1463 = C::littleendian(ctx, v1442);
                                if let Some(v1464) = v1463 {
                                    let v2002 = C::put_in_reg(ctx, v1444.0);
                                    let v2026 = &constructor_vec_store_full_rev(
                                        ctx, v2016, v2002, v1442, v1444.1, v1443,
                                    );
                                    let v2027 = constructor_side_effect(ctx, v2026);
                                    let v2028 = Some(v2027);
                                    // Rule at src\isa\s390x\lower.isle line 2703.
                                    return v2028;
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v1989 = C::value_type(ctx, v1444.0);
                            let v2015 = C::vr128_ty(ctx, v1989);
                            if let Some(v2016) = v2015 {
                                let v1455 = C::bigendian(ctx, v1442);
                                if let Some(v1456) = v1455 {
                                    let v2002 = C::put_in_reg(ctx, v1444.0);
                                    let v1458 =
                                        &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                    let v2017 = &constructor_vec_store(ctx, v2002, v1458);
                                    let v2018 = constructor_side_effect(ctx, v2017);
                                    let v2019 = Some(v2018);
                                    // Rule at src\isa\s390x\lower.isle line 2685.
                                    return v2019;
                                }
                                let v1463 = C::littleendian(ctx, v1442);
                                if let Some(v1464) = v1463 {
                                    let v2002 = C::put_in_reg(ctx, v1444.0);
                                    let v2020 = &constructor_vec_store_byte_rev(
                                        ctx, v2016, v2002, v1442, v1444.1, v1443,
                                    );
                                    let v2021 = constructor_side_effect(ctx, v2020);
                                    let v2022 = Some(v2021);
                                    // Rule at src\isa\s390x\lower.isle line 2691.
                                    return v2022;
                                }
                            }
                        }
                        _ => {}
                    }
                    let v1989 = C::value_type(ctx, v1444.0);
                    match v1989 {
                        I8 => {
                            let v1990 =
                                &constructor_istore8_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                            let v1991 = constructor_side_effect(ctx, v1990);
                            let v1992 = Some(v1991);
                            // Rule at src\isa\s390x\lower.isle line 2641.
                            return v1992;
                        }
                        I16 => {
                            let v1993 =
                                &constructor_istore16_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                            let v1994 = constructor_side_effect(ctx, v1993);
                            let v1995 = Some(v1994);
                            // Rule at src\isa\s390x\lower.isle line 2645.
                            return v1995;
                        }
                        I32 => {
                            let v1996 =
                                &constructor_istore32_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                            let v1997 = constructor_side_effect(ctx, v1996);
                            let v1998 = Some(v1997);
                            // Rule at src\isa\s390x\lower.isle line 2649.
                            return v1998;
                        }
                        I64 => {
                            let v1999 =
                                &constructor_istore64_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                            let v2000 = constructor_side_effect(ctx, v1999);
                            let v2001 = Some(v2000);
                            // Rule at src\isa\s390x\lower.isle line 2653.
                            return v2001;
                        }
                        R64 => {
                            let v1999 =
                                &constructor_istore64_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                            let v2000 = constructor_side_effect(ctx, v1999);
                            let v2001 = Some(v2000);
                            // Rule at src\isa\s390x\lower.isle line 2657.
                            return v2001;
                        }
                        F32 => {
                            let v1463 = C::littleendian(ctx, v1442);
                            if let Some(v1464) = v1463 {
                                let v2002 = C::put_in_reg(ctx, v1444.0);
                                let v1458 = &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                let v2006 = &constructor_vec_store_lane_little(
                                    ctx, F32X4, v2002, v1458, 0x0,
                                );
                                let v2007 = constructor_side_effect(ctx, v2006);
                                let v2008 = Some(v2007);
                                // Rule at src\isa\s390x\lower.isle line 2667.
                                return v2008;
                            }
                            let v1455 = C::bigendian(ctx, v1442);
                            if let Some(v1456) = v1455 {
                                let v2002 = C::put_in_reg(ctx, v1444.0);
                                let v1458 = &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                let v2003 =
                                    &constructor_vec_store_lane(ctx, F32X4, v2002, v1458, 0x0);
                                let v2004 = constructor_side_effect(ctx, v2003);
                                let v2005 = Some(v2004);
                                // Rule at src\isa\s390x\lower.isle line 2661.
                                return v2005;
                            }
                        }
                        F64 => {
                            let v1463 = C::littleendian(ctx, v1442);
                            if let Some(v1464) = v1463 {
                                let v2002 = C::put_in_reg(ctx, v1444.0);
                                let v1458 = &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                let v2012 = &constructor_vec_store_lane_little(
                                    ctx, F64X2, v2002, v1458, 0x0,
                                );
                                let v2013 = constructor_side_effect(ctx, v2012);
                                let v2014 = Some(v2013);
                                // Rule at src\isa\s390x\lower.isle line 2679.
                                return v2014;
                            }
                            let v1455 = C::bigendian(ctx, v1442);
                            if let Some(v1456) = v1455 {
                                let v2002 = C::put_in_reg(ctx, v1444.0);
                                let v1458 = &constructor_lower_address(ctx, v1442, v1444.1, v1443);
                                let v2009 =
                                    &constructor_vec_store_lane(ctx, F64X2, v2002, v1458, 0x0);
                                let v2010 = constructor_side_effect(ctx, v2009);
                                let v2011 = Some(v2010);
                                // Rule at src\isa\s390x\lower.isle line 2673.
                                return v2011;
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Istore8 => {
                    let v1444 = C::unpack_value_array_2(ctx, v1441);
                    let v1990 = &constructor_istore8_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                    let v1991 = constructor_side_effect(ctx, v1990);
                    let v1992 = Some(v1991);
                    // Rule at src\isa\s390x\lower.isle line 2797.
                    return v1992;
                }
                &Opcode::Istore16 => {
                    let v1444 = C::unpack_value_array_2(ctx, v1441);
                    let v1993 = &constructor_istore16_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                    let v1994 = constructor_side_effect(ctx, v1993);
                    let v1995 = Some(v1994);
                    // Rule at src\isa\s390x\lower.isle line 2815.
                    return v1995;
                }
                &Opcode::Istore32 => {
                    let v1444 = C::unpack_value_array_2(ctx, v1441);
                    let v1996 = &constructor_istore32_impl(ctx, v1442, v1444.0, v1444.1, v1443);
                    let v1997 = constructor_side_effect(ctx, v1996);
                    let v1998 = Some(v1997);
                    // Rule at src\isa\s390x\lower.isle line 2841.
                    return v1998;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v2161,
            args: ref v2162,
            flags: v2163,
        } => {
            if let &Opcode::AtomicStore = v2161 {
                let v2164 = C::unpack_value_array_2(ctx, v2162);
                let v2167 = C::value_type(ctx, v2164.0);
                match v2167 {
                    I8 => {
                        let v2134 = C::zero_offset(ctx);
                        let v2168 = &constructor_istore8_impl(ctx, v2163, v2164.0, v2164.1, v2134);
                        let v2169 = constructor_atomic_store_impl(ctx, v2168);
                        let v2170 = Some(v2169);
                        // Rule at src\isa\s390x\lower.isle line 3247.
                        return v2170;
                    }
                    I16 => {
                        let v2134 = C::zero_offset(ctx);
                        let v2171 = &constructor_istore16_impl(ctx, v2163, v2164.0, v2164.1, v2134);
                        let v2172 = constructor_atomic_store_impl(ctx, v2171);
                        let v2173 = Some(v2172);
                        // Rule at src\isa\s390x\lower.isle line 3251.
                        return v2173;
                    }
                    I32 => {
                        let v2134 = C::zero_offset(ctx);
                        let v2174 = &constructor_istore32_impl(ctx, v2163, v2164.0, v2164.1, v2134);
                        let v2175 = constructor_atomic_store_impl(ctx, v2174);
                        let v2176 = Some(v2175);
                        // Rule at src\isa\s390x\lower.isle line 3255.
                        return v2176;
                    }
                    I64 => {
                        let v2134 = C::zero_offset(ctx);
                        let v2177 = &constructor_istore64_impl(ctx, v2163, v2164.0, v2164.1, v2134);
                        let v2178 = constructor_atomic_store_impl(ctx, v2177);
                        let v2179 = Some(v2178);
                        // Rule at src\isa\s390x\lower.isle line 3259.
                        return v2179;
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v910,
            args: ref v911,
        } => {
            match v910 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1351 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1352) = v1351 {
                            let v912 = C::unpack_value_array_3(ctx, v911);
                            let v2376 = C::maybe_uextend(ctx, v912.0);
                            if let Some(v2377) = v2376 {
                                let v2378 = C::def_inst(ctx, v2377);
                                if let Some(v2379) = v2378 {
                                    let v2380 = &C::inst_data(ctx, v2379);
                                    if let &InstructionData::FloatCompare {
                                        opcode: ref v2381,
                                        args: ref v2382,
                                        cond: ref v2383,
                                    } = v2380
                                    {
                                        if let &Opcode::Fcmp = v2381 {
                                            if let &FloatCC::LessThan = v2383 {
                                                let v2384 = C::unpack_value_array_2(ctx, v2382);
                                                if v912.1 == v2384.1 {
                                                    if v912.2 == v2384.0 {
                                                        let v2392 = C::put_in_reg(ctx, v2384.0);
                                                        let v2393 = C::put_in_reg(ctx, v2384.1);
                                                        let v2394 = constructor_fmax_pseudo_reg(
                                                            ctx, v1352, v2392, v2393,
                                                        );
                                                        let v2395 =
                                                            constructor_output_reg(ctx, v2394);
                                                        let v2396 = Some(v2395);
                                                        // Rule at src\isa\s390x\lower.isle line 3733.
                                                        return v2396;
                                                    }
                                                }
                                                if v912.1 == v2384.0 {
                                                    if v912.2 == v2384.1 {
                                                        let v2387 = C::put_in_reg(ctx, v2384.1);
                                                        let v2388 = C::put_in_reg(ctx, v2384.0);
                                                        let v2389 = constructor_fmin_pseudo_reg(
                                                            ctx, v1352, v2387, v2388,
                                                        );
                                                        let v2390 =
                                                            constructor_output_reg(ctx, v2389);
                                                        let v2391 = Some(v2390);
                                                        // Rule at src\isa\s390x\lower.isle line 3731.
                                                        return v2391;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v912 = C::unpack_value_array_3(ctx, v911);
                        let v2372 = &constructor_value_nonzero(ctx, v912.0);
                        let v917 = C::put_in_reg(ctx, v912.1);
                        let v1122 = C::put_in_reg(ctx, v912.2);
                        let v2373 = constructor_select_bool_reg(ctx, v3, v2372, v917, v1122);
                        let v2374 = constructor_output_reg(ctx, v2373);
                        let v2375 = Some(v2374);
                        // Rule at src\isa\s390x\lower.isle line 3726.
                        return v2375;
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v912 = C::unpack_value_array_3(ctx, v911);
                        let v2372 = &constructor_value_nonzero(ctx, v912.0);
                        let v917 = C::put_in_reg(ctx, v912.1);
                        let v1122 = C::put_in_reg(ctx, v912.2);
                        let v3 = C::value_type(ctx, v2);
                        let v2373 = constructor_select_bool_reg(ctx, v3, v2372, v917, v1122);
                        let v2374 = constructor_output_reg(ctx, v2373);
                        let v2375 = Some(v2374);
                        // Rule at src\isa\s390x\lower.isle line 3742.
                        return v2375;
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v912 = C::unpack_value_array_3(ctx, v911);
                            let v935 = C::def_inst(ctx, v912.0);
                            if let Some(v936) = v935 {
                                let v937 = &C::inst_data(ctx, v936);
                                if let &InstructionData::LoadNoOffset {
                                    opcode: ref v938,
                                    arg: v939,
                                    flags: v940,
                                } = v937
                                {
                                    if let &Opcode::Bitcast = v938 {
                                        let v941 = C::def_inst(ctx, v939);
                                        if let Some(v942) = v941 {
                                            let v943 = &C::inst_data(ctx, v942);
                                            if let &InstructionData::FloatCompare {
                                                opcode: ref v944,
                                                args: ref v945,
                                                cond: ref v946,
                                            } = v943
                                            {
                                                if let &Opcode::Fcmp = v944 {
                                                    if let &FloatCC::LessThan = v946 {
                                                        let v947 =
                                                            C::unpack_value_array_2(ctx, v945);
                                                        if v912.1 == v947.1 {
                                                            if v912.2 == v947.0 {
                                                                let v955 =
                                                                    C::put_in_reg(ctx, v947.0);
                                                                let v956 =
                                                                    C::put_in_reg(ctx, v947.1);
                                                                let v957 =
                                                                    constructor_fmax_pseudo_reg(
                                                                        ctx, v174, v955, v956,
                                                                    );
                                                                let v958 = constructor_output_reg(
                                                                    ctx, v957,
                                                                );
                                                                let v959 = Some(v958);
                                                                // Rule at src\isa\s390x\lower.isle line 1140.
                                                                return v959;
                                                            }
                                                        }
                                                        if v912.1 == v947.0 {
                                                            if v912.2 == v947.1 {
                                                                let v950 =
                                                                    C::put_in_reg(ctx, v947.1);
                                                                let v951 =
                                                                    C::put_in_reg(ctx, v947.0);
                                                                let v952 =
                                                                    constructor_fmin_pseudo_reg(
                                                                        ctx, v174, v950, v951,
                                                                    );
                                                                let v953 = constructor_output_reg(
                                                                    ctx, v952,
                                                                );
                                                                let v954 = Some(v953);
                                                                // Rule at src\isa\s390x\lower.isle line 1138.
                                                                return v954;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v766 = C::mie2_enabled(ctx, v3);
                            if let Some(v767) = v766 {
                                let v912 = C::unpack_value_array_3(ctx, v911);
                                let v916 = C::put_in_reg(ctx, v912.0);
                                let v917 = C::put_in_reg(ctx, v912.1);
                                let v918 = constructor_and_reg(ctx, v70, v917, v916);
                                let v919 = C::put_in_reg(ctx, v912.2);
                                let v920 = constructor_and_not_reg(ctx, v70, v919, v916);
                                let v921 = constructor_or_reg(ctx, v70, v920, v918);
                                let v922 = constructor_output_reg(ctx, v921);
                                let v923 = Some(v922);
                                // Rule at src\isa\s390x\lower.isle line 1120.
                                return v923;
                            }
                            let v771 = C::mie2_disabled(ctx, v3);
                            if let Some(v772) = v771 {
                                let v912 = C::unpack_value_array_3(ctx, v911);
                                let v916 = C::put_in_reg(ctx, v912.0);
                                let v917 = C::put_in_reg(ctx, v912.1);
                                let v918 = constructor_and_reg(ctx, v70, v917, v916);
                                let v919 = C::put_in_reg(ctx, v912.2);
                                let v924 = constructor_not_reg(ctx, v70, v916);
                                let v925 = constructor_and_reg(ctx, v70, v919, v924);
                                let v926 = constructor_or_reg(ctx, v70, v925, v918);
                                let v927 = constructor_output_reg(ctx, v926);
                                let v928 = Some(v927);
                                // Rule at src\isa\s390x\lower.isle line 1127.
                                return v928;
                            }
                        }
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v912 = C::unpack_value_array_3(ctx, v911);
                            let v929 = C::put_in_reg(ctx, v912.1);
                            let v930 = C::put_in_reg(ctx, v912.2);
                            let v931 = C::put_in_reg(ctx, v912.0);
                            let v932 = constructor_vec_select(ctx, v43, v929, v930, v931);
                            let v933 = constructor_output_reg(ctx, v932);
                            let v934 = Some(v933);
                            // Rule at src\isa\s390x\lower.isle line 1134.
                            return v934;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v912 = C::unpack_value_array_3(ctx, v911);
                        let v916 = C::put_in_reg(ctx, v912.0);
                        let v917 = C::put_in_reg(ctx, v912.1);
                        let v1122 = C::put_in_reg(ctx, v912.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1123 = constructor_fma_reg(ctx, v3, v916, v917, v1122);
                        let v1124 = constructor_output_reg(ctx, v1123);
                        let v1125 = Some(v1124);
                        // Rule at src\isa\s390x\lower.isle line 1415.
                        return v1125;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1366,
            args: ref v1367,
            imm: v1368,
        } => {
            if let &Opcode::Insertlane = v1366 {
                let v1369 = C::unpack_value_array_2(ctx, v1367);
                let v1407 = C::sinkable_inst(ctx, v1369.1);
                if let Some(v1408) = v1407 {
                    let v1409 = &C::inst_data(ctx, v1408);
                    if let &InstructionData::Load {
                        opcode: ref v1410,
                        arg: v1411,
                        flags: v1412,
                        offset: v1413,
                    } = v1409
                    {
                        if let &Opcode::Load = v1410 {
                            let v1420 = C::littleendian(ctx, v1412);
                            if let Some(v1421) = v1420 {
                                let v1377 = C::put_in_reg(ctx, v1369.0);
                                let v1416 = &constructor_sink_load(ctx, v1408);
                                let v1372 = C::value_type(ctx, v1369.0);
                                let v1374 = C::u8_from_uimm8(ctx, v1368);
                                let v1379 = C::be_lane_idx(ctx, v1372, v1374);
                                let v1422 = constructor_vec_load_lane_little(
                                    ctx, v1372, v1377, v1416, v1379,
                                );
                                let v1423 = constructor_output_reg(ctx, v1422);
                                let v1424 = Some(v1423);
                                // Rule at src\isa\s390x\lower.isle line 1805.
                                return v1424;
                            }
                            let v1414 = C::bigendian(ctx, v1412);
                            if let Some(v1415) = v1414 {
                                let v1377 = C::put_in_reg(ctx, v1369.0);
                                let v1416 = &constructor_sink_load(ctx, v1408);
                                let v1372 = C::value_type(ctx, v1369.0);
                                let v1374 = C::u8_from_uimm8(ctx, v1368);
                                let v1379 = C::be_lane_idx(ctx, v1372, v1374);
                                let v1417 =
                                    constructor_vec_load_lane(ctx, v1372, v1377, v1416, v1379);
                                let v1418 = constructor_output_reg(ctx, v1417);
                                let v1419 = Some(v1418);
                                // Rule at src\isa\s390x\lower.isle line 1800.
                                return v1419;
                            }
                        }
                    }
                }
                let v1402 = C::i16_from_value(ctx, v1369.1);
                if let Some(v1403) = v1402 {
                    let v1377 = C::put_in_reg(ctx, v1369.0);
                    let v1372 = C::value_type(ctx, v1369.0);
                    let v1374 = C::u8_from_uimm8(ctx, v1368);
                    let v1385 = C::be_lane_idx(ctx, v1372, v1374);
                    let v1404 = constructor_vec_insert_lane_imm(ctx, v1372, v1377, v1403, v1385);
                    let v1405 = constructor_output_reg(ctx, v1404);
                    let v1406 = Some(v1405);
                    // Rule at src\isa\s390x\lower.isle line 1795.
                    return v1406;
                }
                let v1390 = C::def_inst(ctx, v1369.1);
                if let Some(v1391) = v1390 {
                    let v1392 = &C::inst_data(ctx, v1391);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref v1393,
                        arg: v1394,
                        imm: v1395,
                    } = v1392
                    {
                        if let &Opcode::Extractlane = v1393 {
                            let v1377 = C::put_in_reg(ctx, v1369.0);
                            let v1372 = C::value_type(ctx, v1369.0);
                            let v1374 = C::u8_from_uimm8(ctx, v1368);
                            let v1385 = C::be_lane_idx(ctx, v1372, v1374);
                            let v1397 = C::put_in_reg(ctx, v1394);
                            let v1396 = C::u8_from_uimm8(ctx, v1395);
                            let v1398 = C::be_lane_idx(ctx, v1372, v1396);
                            let v1399 = constructor_vec_move_lane_and_insert(
                                ctx, v1372, v1377, v1385, v1397, v1398,
                            );
                            let v1400 = constructor_output_reg(ctx, v1399);
                            let v1401 = Some(v1400);
                            // Rule at src\isa\s390x\lower.isle line 1788.
                            return v1401;
                        }
                    }
                }
                let v1373 = C::value_type(ctx, v1369.1);
                let v1375 = C::ty_int_ref_scalar_64(ctx, v1373);
                if let Some(v1376) = v1375 {
                    let v1377 = C::put_in_reg(ctx, v1369.0);
                    let v1378 = C::put_in_reg(ctx, v1369.1);
                    let v1372 = C::value_type(ctx, v1369.0);
                    let v1374 = C::u8_from_uimm8(ctx, v1368);
                    let v1379 = C::be_lane_idx(ctx, v1372, v1374);
                    let v63 = C::zero_reg(ctx);
                    let v1380 = constructor_vec_insert_lane(ctx, v1372, v1377, v1378, v1379, v63);
                    let v1381 = constructor_output_reg(ctx, v1380);
                    let v1382 = Some(v1381);
                    // Rule at src\isa\s390x\lower.isle line 1775.
                    return v1382;
                }
                let v1383 = C::ty_scalar_float(ctx, v1373);
                if let Some(v1384) = v1383 {
                    let v1377 = C::put_in_reg(ctx, v1369.0);
                    let v1372 = C::value_type(ctx, v1369.0);
                    let v1374 = C::u8_from_uimm8(ctx, v1368);
                    let v1385 = C::be_lane_idx(ctx, v1372, v1374);
                    let v1386 = C::put_in_reg(ctx, v1369.1);
                    let v1387 =
                        constructor_vec_move_lane_and_insert(ctx, v1372, v1377, v1385, v1386, 0x0);
                    let v1388 = constructor_output_reg(ctx, v1387);
                    let v1389 = Some(v1388);
                    // Rule at src\isa\s390x\lower.isle line 1782.
                    return v1389;
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v2397,
            code: ref v2398,
        } => {
            if let &Opcode::Trap = v2397 {
                let v2399 = &constructor_trap_impl(ctx, v2398);
                let v2400 = constructor_side_effect(ctx, v2399);
                let v2401 = Some(v2400);
                // Rule at src\isa\s390x\lower.isle line 3798.
                return v2401;
            }
        }
        &InstructionData::Unary {
            opcode: ref v54,
            arg: v55,
        } => {
            match v54 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1493 = C::sinkable_inst(ctx, v55);
                        if let Some(v1494) = v1493 {
                            let v1495 = &C::inst_data(ctx, v1494);
                            if let &InstructionData::Load {
                                opcode: ref v1496,
                                arg: v1497,
                                flags: v1498,
                                offset: v1499,
                            } = v1495
                            {
                                if let &Opcode::Load = v1496 {
                                    let v1506 = C::littleendian(ctx, v1498);
                                    if let Some(v1507) = v1506 {
                                        let v1502 = &constructor_sink_load(ctx, v1494);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1508 =
                                            constructor_vec_load_replicate_little(ctx, v3, v1502);
                                        let v1509 = constructor_output_reg(ctx, v1508);
                                        let v1510 = Some(v1509);
                                        // Rule at src\isa\s390x\lower.isle line 1972.
                                        return v1510;
                                    }
                                    let v1500 = C::bigendian(ctx, v1498);
                                    if let Some(v1501) = v1500 {
                                        let v1502 = &constructor_sink_load(ctx, v1494);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1503 = constructor_vec_load_replicate(ctx, v3, v1502);
                                        let v1504 = constructor_output_reg(ctx, v1503);
                                        let v1505 = Some(v1504);
                                        // Rule at src\isa\s390x\lower.isle line 1968.
                                        return v1505;
                                    }
                                }
                            }
                        }
                        let v1488 = C::i16_from_value(ctx, v55);
                        if let Some(v1489) = v1488 {
                            let v3 = C::value_type(ctx, v2);
                            let v1490 = constructor_vec_imm_replicate(ctx, v3, v1489);
                            let v1491 = constructor_output_reg(ctx, v1490);
                            let v1492 = Some(v1491);
                            // Rule at src\isa\s390x\lower.isle line 1964.
                            return v1492;
                        }
                        let v300 = C::def_inst(ctx, v55);
                        if let Some(v301) = v300 {
                            let v302 = &C::inst_data(ctx, v301);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1479,
                                arg: v1480,
                                imm: v1481,
                            } = v302
                            {
                                if let &Opcode::Extractlane = v1479 {
                                    let v1483 = C::put_in_reg(ctx, v1480);
                                    let v3 = C::value_type(ctx, v2);
                                    let v1482 = C::u8_from_uimm8(ctx, v1481);
                                    let v1484 = C::be_lane_idx(ctx, v3, v1482);
                                    let v1485 =
                                        constructor_vec_replicate_lane(ctx, v3, v1483, v1484);
                                    let v1486 = constructor_output_reg(ctx, v1485);
                                    let v1487 = Some(v1486);
                                    // Rule at src\isa\s390x\lower.isle line 1960.
                                    return v1487;
                                }
                            }
                        }
                        let v56 = C::value_type(ctx, v55);
                        let v1468 = C::ty_int_ref_scalar_64(ctx, v56);
                        if let Some(v1469) = v1468 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v60 = C::zero_reg(ctx);
                            let v3 = C::value_type(ctx, v2);
                            let v1470 = constructor_vec_insert_lane_undef(ctx, v3, v57, 0x0, v60);
                            let v1471 = constructor_vec_replicate_lane(ctx, v3, v1470, 0x0);
                            let v1472 = constructor_output_reg(ctx, v1471);
                            let v1473 = Some(v1472);
                            // Rule at src\isa\s390x\lower.isle line 1950.
                            return v1473;
                        }
                        let v1474 = C::ty_scalar_float(ctx, v56);
                        if let Some(v1475) = v1474 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v3 = C::value_type(ctx, v2);
                            let v1476 = constructor_vec_replicate_lane(ctx, v3, v57, 0x0);
                            let v1477 = constructor_output_reg(ctx, v1476);
                            let v1478 = Some(v1477);
                            // Rule at src\isa\s390x\lower.isle line 1955.
                            return v1478;
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v2292 = &constructor_vany_true_val(ctx, v55);
                            let v2293 = constructor_lower_bool(ctx, v70, v2292);
                            let v2294 = constructor_output_reg(ctx, v2293);
                            let v2295 = Some(v2294);
                            // Rule at src\isa\s390x\lower.isle line 3571.
                            return v2295;
                        }
                    }
                }
                &Opcode::VallTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v2288 = &constructor_vall_true_val(ctx, v55);
                            let v2289 = constructor_lower_bool(ctx, v70, v2288);
                            let v2290 = constructor_output_reg(ctx, v2289);
                            let v2291 = Some(v2290);
                            // Rule at src\isa\s390x\lower.isle line 3493.
                            return v2291;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1799 = &C::lane_order(ctx);
                    match v1799 {
                        &LaneOrder::LittleEndian => {
                            let v56 = C::value_type(ctx, v55);
                            let v2296 = C::multi_lane(ctx, v56);
                            if let Some(v2297) = v2296 {
                                match v2297.0 {
                                    0x8 => {
                                        if v2297.1 == 0x10 {
                                            let v2310 = constructor_imm8x16(
                                                ctx, 0x0, 0x8, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
                                                0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
                                            );
                                            let v2311 = constructor_vec_imm(ctx, I8X16, v2310);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2313 =
                                                constructor_vec_bitpermute(ctx, v2312, v2311);
                                            let v477 = C::zero_reg(ctx);
                                            let v2314 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2313, 0x0, v477,
                                            );
                                            let v2315 = constructor_output_reg(ctx, v2314);
                                            let v2316 = Some(v2315);
                                            // Rule at src\isa\s390x\lower.isle line 3647.
                                            return v2316;
                                        }
                                    }
                                    0x10 => {
                                        if v2297.1 == 0x8 {
                                            let v2324 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60,
                                                0x70,
                                            );
                                            let v2325 = constructor_vec_imm(ctx, I8X16, v2324);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2326 =
                                                constructor_vec_bitpermute(ctx, v2312, v2325);
                                            let v477 = C::zero_reg(ctx);
                                            let v2327 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2326, 0x0, v477,
                                            );
                                            let v2328 = constructor_output_reg(ctx, v2327);
                                            let v2329 = Some(v2328);
                                            // Rule at src\isa\s390x\lower.isle line 3658.
                                            return v2329;
                                        }
                                    }
                                    0x20 => {
                                        if v2297.1 == 0x4 {
                                            let v2336 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x0, 0x20, 0x40,
                                                0x60,
                                            );
                                            let v2337 = constructor_vec_imm(ctx, I8X16, v2336);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2338 =
                                                constructor_vec_bitpermute(ctx, v2312, v2337);
                                            let v477 = C::zero_reg(ctx);
                                            let v2339 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2338, 0x0, v477,
                                            );
                                            let v2340 = constructor_output_reg(ctx, v2339);
                                            let v2341 = Some(v2340);
                                            // Rule at src\isa\s390x\lower.isle line 3669.
                                            return v2341;
                                        }
                                    }
                                    0x40 => {
                                        if v2297.1 == 0x2 {
                                            let v2348 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x0,
                                                0x40,
                                            );
                                            let v2349 = constructor_vec_imm(ctx, I8X16, v2348);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2350 =
                                                constructor_vec_bitpermute(ctx, v2312, v2349);
                                            let v477 = C::zero_reg(ctx);
                                            let v2351 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2350, 0x0, v477,
                                            );
                                            let v2352 = constructor_output_reg(ctx, v2351);
                                            let v2353 = Some(v2352);
                                            // Rule at src\isa\s390x\lower.isle line 3680.
                                            return v2353;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v56 = C::value_type(ctx, v55);
                            let v2296 = C::multi_lane(ctx, v56);
                            if let Some(v2297) = v2296 {
                                match v2297.0 {
                                    0x8 => {
                                        if v2297.1 == 0x10 {
                                            let v2317 = constructor_imm8x16(
                                                ctx, 0x78, 0x70, 0x68, 0x60, 0x58, 0x50, 0x48,
                                                0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x8, 0x0,
                                            );
                                            let v2318 = constructor_vec_imm(ctx, I8X16, v2317);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2319 =
                                                constructor_vec_bitpermute(ctx, v2312, v2318);
                                            let v477 = C::zero_reg(ctx);
                                            let v2320 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2319, 0x0, v477,
                                            );
                                            let v2321 = constructor_output_reg(ctx, v2320);
                                            let v2322 = Some(v2321);
                                            // Rule at src\isa\s390x\lower.isle line 3652.
                                            return v2322;
                                        }
                                    }
                                    0x10 => {
                                        if v2297.1 == 0x8 {
                                            let v2330 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10,
                                                0x0,
                                            );
                                            let v2331 = constructor_vec_imm(ctx, I8X16, v2330);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2332 =
                                                constructor_vec_bitpermute(ctx, v2312, v2331);
                                            let v477 = C::zero_reg(ctx);
                                            let v2333 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2332, 0x0, v477,
                                            );
                                            let v2334 = constructor_output_reg(ctx, v2333);
                                            let v2335 = Some(v2334);
                                            // Rule at src\isa\s390x\lower.isle line 3663.
                                            return v2335;
                                        }
                                    }
                                    0x20 => {
                                        if v2297.1 == 0x4 {
                                            let v2342 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0x20,
                                                0x0,
                                            );
                                            let v2343 = constructor_vec_imm(ctx, I8X16, v2342);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2344 =
                                                constructor_vec_bitpermute(ctx, v2312, v2343);
                                            let v477 = C::zero_reg(ctx);
                                            let v2345 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2344, 0x0, v477,
                                            );
                                            let v2346 = constructor_output_reg(ctx, v2345);
                                            let v2347 = Some(v2346);
                                            // Rule at src\isa\s390x\lower.isle line 3674.
                                            return v2347;
                                        }
                                    }
                                    0x40 => {
                                        if v2297.1 == 0x2 {
                                            let v2354 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40,
                                                0x0,
                                            );
                                            let v2355 = constructor_vec_imm(ctx, I8X16, v2354);
                                            let v2312 = C::put_in_reg(ctx, v55);
                                            let v2356 =
                                                constructor_vec_bitpermute(ctx, v2312, v2355);
                                            let v477 = C::zero_reg(ctx);
                                            let v2357 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2356, 0x0, v477,
                                            );
                                            let v2358 = constructor_output_reg(ctx, v2357);
                                            let v2359 = Some(v2358);
                                            // Rule at src\isa\s390x\lower.isle line 3685.
                                            return v2359;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v300 = C::def_inst(ctx, v55);
                            if let Some(v301) = v300 {
                                let v302 = &C::inst_data(ctx, v301);
                                if let &InstructionData::Unary {
                                    opcode: ref v303,
                                    arg: v304,
                                } = v302
                                {
                                    if let &Opcode::Sextend = v303 {
                                        let v305 = C::value_type(ctx, v304);
                                        if v305 == I32 {
                                            let v306 = C::put_in_reg(ctx, v304);
                                            let v326 = constructor_neg_reg_sext32(ctx, v70, v306);
                                            let v327 = constructor_output_reg(ctx, v326);
                                            let v328 = Some(v327);
                                            // Rule at src\isa\s390x\lower.isle line 235.
                                            return v328;
                                        }
                                    }
                                }
                            }
                            let v57 = C::put_in_reg(ctx, v55);
                            let v323 = constructor_neg_reg(ctx, v70, v57);
                            let v324 = constructor_output_reg(ctx, v323);
                            let v325 = Some(v324);
                            // Rule at src\isa\s390x\lower.isle line 231.
                            return v325;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v329 = constructor_vec_neg(ctx, v174, v57);
                            let v330 = constructor_output_reg(ctx, v329);
                            let v331 = Some(v330);
                            // Rule at src\isa\s390x\lower.isle line 239.
                            return v331;
                        }
                        if v3 == I128 {
                            let v315 = constructor_vec_imm(ctx, I128, 0x0);
                            let v316 = C::put_in_reg(ctx, v55);
                            let v317 = constructor_vec_sub(ctx, I128, v315, v316);
                            let v332 = constructor_output_reg(ctx, v317);
                            let v333 = Some(v332);
                            // Rule at src\isa\s390x\lower.isle line 243.
                            return v333;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v300 = C::def_inst(ctx, v55);
                            if let Some(v301) = v300 {
                                let v302 = &C::inst_data(ctx, v301);
                                if let &InstructionData::Unary {
                                    opcode: ref v303,
                                    arg: v304,
                                } = v302
                                {
                                    if let &Opcode::Sextend = v303 {
                                        let v305 = C::value_type(ctx, v304);
                                        if v305 == I32 {
                                            let v306 = C::put_in_reg(ctx, v304);
                                            let v307 = constructor_abs_reg_sext32(ctx, v70, v306);
                                            let v308 = constructor_output_reg(ctx, v307);
                                            let v309 = Some(v308);
                                            // Rule at src\isa\s390x\lower.isle line 211.
                                            return v309;
                                        }
                                    }
                                }
                            }
                            let v295 = constructor_ty_ext32(ctx, v70);
                            let v296 = constructor_put_in_reg_sext32(ctx, v55);
                            let v297 = constructor_abs_reg(ctx, v295, v296);
                            let v298 = constructor_output_reg(ctx, v297);
                            let v299 = Some(v298);
                            // Rule at src\isa\s390x\lower.isle line 207.
                            return v299;
                        }
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v310 = constructor_vec_abs(ctx, v174, v57);
                            let v311 = constructor_output_reg(ctx, v310);
                            let v312 = Some(v311);
                            // Rule at src\isa\s390x\lower.isle line 215.
                            return v312;
                        }
                        if v3 == I128 {
                            let v315 = constructor_vec_imm(ctx, I128, 0x0);
                            let v316 = C::put_in_reg(ctx, v55);
                            let v317 = constructor_vec_sub(ctx, I128, v315, v316);
                            let v318 = constructor_vec_replicate_lane(ctx, I64X2, v316, 0x0);
                            let v319 = constructor_vec_cmph(ctx, I64X2, v315, v318);
                            let v320 = constructor_vec_select(ctx, I128, v317, v316, v319);
                            let v321 = constructor_output_reg(ctx, v320);
                            let v322 = Some(v321);
                            // Rule at src\isa\s390x\lower.isle line 219.
                            return v322;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v300 = C::def_inst(ctx, v55);
                        if let Some(v301) = v300 {
                            let v302 = &C::inst_data(ctx, v301);
                            if let &InstructionData::Binary {
                                opcode: ref v779,
                                args: ref v780,
                            } = v302
                            {
                                if let &Opcode::Bxor = v779 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v42 = C::vr128_ty(ctx, v3);
                                    if let Some(v43) = v42 {
                                        let v781 = C::unpack_value_array_2(ctx, v780);
                                        let v784 = C::put_in_reg(ctx, v781.0);
                                        let v785 = C::put_in_reg(ctx, v781.1);
                                        let v789 = constructor_vec_not_xor(ctx, v43, v784, v785);
                                        let v790 = constructor_output_reg(ctx, v789);
                                        let v791 = Some(v790);
                                        // Rule at src\isa\s390x\lower.isle line 989.
                                        return v791;
                                    }
                                    let v69 = C::fits_in_64(ctx, v3);
                                    if let Some(v70) = v69 {
                                        let v766 = C::mie2_enabled(ctx, v3);
                                        if let Some(v767) = v766 {
                                            let v781 = C::unpack_value_array_2(ctx, v780);
                                            let v784 = C::put_in_reg(ctx, v781.0);
                                            let v785 = C::put_in_reg(ctx, v781.1);
                                            let v786 =
                                                constructor_not_xor_reg(ctx, v70, v784, v785);
                                            let v787 = constructor_output_reg(ctx, v786);
                                            let v788 = Some(v787);
                                            // Rule at src\isa\s390x\lower.isle line 985.
                                            return v788;
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v766 = C::mie2_enabled(ctx, v3);
                            if let Some(v767) = v766 {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v768 = constructor_not_or_reg(ctx, v70, v57, v57);
                                let v769 = constructor_output_reg(ctx, v768);
                                let v770 = Some(v769);
                                // Rule at src\isa\s390x\lower.isle line 971.
                                return v770;
                            }
                            let v771 = C::mie2_disabled(ctx, v3);
                            if let Some(v772) = v771 {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v773 = constructor_not_reg(ctx, v70, v57);
                                let v774 = constructor_output_reg(ctx, v773);
                                let v775 = Some(v774);
                                // Rule at src\isa\s390x\lower.isle line 976.
                                return v775;
                            }
                        }
                        let v42 = C::vr128_ty(ctx, v3);
                        if let Some(v43) = v42 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v776 = constructor_vec_not(ctx, v43, v57);
                            let v777 = constructor_output_reg(ctx, v776);
                            let v778 = Some(v777);
                            // Rule at src\isa\s390x\lower.isle line 980.
                            return v778;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v969 = constructor_bitrev_bits(ctx, 0x1, 0xAAAAAAAAAAAAAAAA, v3, v57);
                        let v970 = constructor_bitrev_bits(ctx, 0x2, 0xCCCCCCCCCCCCCCCC, v3, v969);
                        let v971 = constructor_bitrev_bits(ctx, 0x4, 0xF0F0F0F0F0F0F0F0, v3, v970);
                        let v972 = constructor_bitrev_bytes(ctx, v3, v971);
                        let v973 = constructor_output_reg(ctx, v972);
                        let v974 = Some(v973);
                        // Rule at src\isa\s390x\lower.isle line 1153.
                        return v974;
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v708 = constructor_put_in_reg_zext64(ctx, v55);
                            let v979 = constructor_clz_reg(ctx, 0x40, v708);
                            let v980 = constructor_clz_offset(ctx, v70, v979);
                            let v981 = constructor_output_reg(ctx, v980);
                            let v982 = Some(v981);
                            // Rule at src\isa\s390x\lower.isle line 1204.
                            return v982;
                        }
                        if v3 == I128 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v983 = constructor_vec_clz(ctx, I64X2, v57);
                            let v984 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v985 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v984, 0x0, v983, 0x0);
                            let v986 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v984, 0x0, v983, 0x1);
                            let v987 = constructor_vec_add(ctx, I64X2, v985, v986);
                            let v989 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v990 = constructor_vec_cmpeq(ctx, I64X2, v985, v989);
                            let v991 = constructor_vec_select(ctx, I128, v987, v985, v990);
                            let v992 = constructor_output_reg(ctx, v991);
                            let v993 = Some(v992);
                            // Rule at src\isa\s390x\lower.isle line 1212.
                            return v993;
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v730 = constructor_put_in_reg_sext64(ctx, v55);
                            let v734 = constructor_ashr_imm(ctx, I64, v730, 0x3F);
                            let v994 = constructor_xor_reg(ctx, I64, v730, v734);
                            let v995 = constructor_clz_reg(ctx, 0x40, v994);
                            let v996 = constructor_cls_offset(ctx, v70, v995);
                            let v997 = constructor_output_reg(ctx, v996);
                            let v998 = Some(v997);
                            // Rule at src\isa\s390x\lower.isle line 1238.
                            return v998;
                        }
                        if v3 == I128 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v1000 = constructor_vec_imm_splat(ctx, I8X16, 0xFF);
                            let v1001 = constructor_vec_ashr_by_byte(ctx, v57, v1000);
                            let v1002 = constructor_vec_ashr_by_bit(ctx, v1001, v1000);
                            let v1003 = constructor_vec_xor(ctx, I128, v57, v1002);
                            let v1004 = constructor_vec_clz(ctx, I64X2, v1003);
                            let v1005 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v1006 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v1005, 0x0, v1004, 0x0);
                            let v1007 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v1005, 0x0, v1004, 0x1);
                            let v1008 = constructor_vec_add(ctx, I64X2, v1006, v1007);
                            let v1009 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v1010 = constructor_vec_cmpeq(ctx, I64X2, v1006, v1009);
                            let v1011 = constructor_vec_select(ctx, I128, v1008, v1006, v1010);
                            let v1012 = constructor_vec_add(ctx, I128, v1011, v1000);
                            let v1013 = constructor_output_reg(ctx, v1012);
                            let v1014 = Some(v1013);
                            // Rule at src\isa\s390x\lower.isle line 1246.
                            return v1014;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v701 = C::gpr32_ty(ctx, v3);
                        if let Some(v702) = v701 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v1015 = constructor_ctz_guardbit(ctx, v702);
                            let v1016 = constructor_or_uimm16shifted(ctx, I64, v57, v1015);
                            let v1017 = constructor_neg_reg(ctx, I64, v1016);
                            let v1018 = constructor_and_reg(ctx, I64, v1016, v1017);
                            let v1019 = constructor_clz_reg(ctx, 0x40, v1018);
                            let v1021 = constructor_imm(ctx, v702, 0x3F);
                            let v1022 = constructor_sub_reg(ctx, v702, v1021, v1019);
                            let v1023 = constructor_output_reg(ctx, v1022);
                            let v1024 = Some(v1023);
                            // Rule at src\isa\s390x\lower.isle line 1275.
                            return v1024;
                        }
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v1025 = constructor_neg_reg(ctx, I64, v57);
                            let v1026 = constructor_and_reg(ctx, I64, v57, v1025);
                            let v1028 = constructor_clz_reg(ctx, -0x1, v1026);
                            let v1029 = constructor_imm(ctx, I64, 0x3F);
                            let v1030 = constructor_sub_reg(ctx, I64, v1029, v1028);
                            let v1031 = constructor_output_reg(ctx, v1030);
                            let v1032 = Some(v1031);
                            // Rule at src\isa\s390x\lower.isle line 1290.
                            return v1032;
                        }
                        if v3 == I128 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v1033 = constructor_vec_ctz(ctx, I64X2, v57);
                            let v984 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v1034 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v984, 0x0, v1033, 0x0);
                            let v1035 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v984, 0x0, v1033, 0x1);
                            let v1036 = constructor_vec_add(ctx, I64X2, v1034, v1035);
                            let v989 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v1037 = constructor_vec_cmpeq(ctx, I64X2, v1035, v989);
                            let v1038 = constructor_vec_select(ctx, I128, v1036, v1035, v1037);
                            let v1039 = constructor_output_reg(ctx, v1038);
                            let v1040 = Some(v1039);
                            // Rule at src\isa\s390x\lower.isle line 1297.
                            return v1040;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v975 = constructor_bitrev_bytes(ctx, v3, v57);
                        let v976 = constructor_output_reg(ctx, v975);
                        let v977 = Some(v976);
                        // Rule at src\isa\s390x\lower.isle line 1188.
                        return v977;
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v173 = C::ty_vec128(ctx, v3);
                        if let Some(v174) = v173 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v1074 = constructor_vec_popcnt(ctx, v174, v57);
                            let v1075 = constructor_output_reg(ctx, v1074);
                            let v1076 = Some(v1075);
                            // Rule at src\isa\s390x\lower.isle line 1345.
                            return v1076;
                        }
                        match v3 {
                            I8 => {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v1041 = constructor_popcnt_byte(ctx, v57);
                                let v1042 = constructor_output_reg(ctx, v1041);
                                let v1043 = Some(v1042);
                                // Rule at src\isa\s390x\lower.isle line 1310.
                                return v1043;
                            }
                            I16 => {
                                let v771 = C::mie2_disabled(ctx, v3);
                                if let Some(v772) = v771 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1041 = constructor_popcnt_byte(ctx, v57);
                                    let v1048 = constructor_lshr_imm(ctx, I32, v1041, 0x8);
                                    let v1049 = constructor_add_reg(ctx, I32, v1041, v1048);
                                    let v1051 = C::uimm16shifted(ctx, 0xFF, 0x0);
                                    let v1052 =
                                        constructor_and_uimm16shifted(ctx, I32, v1049, v1051);
                                    let v1053 = constructor_output_reg(ctx, v1052);
                                    let v1054 = Some(v1053);
                                    // Rule at src\isa\s390x\lower.isle line 1326.
                                    return v1054;
                                }
                            }
                            I32 => {
                                let v771 = C::mie2_disabled(ctx, v3);
                                if let Some(v772) = v771 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1041 = constructor_popcnt_byte(ctx, v57);
                                    let v1056 = constructor_lshl_imm(ctx, I32, v1041, 0x10);
                                    let v1057 = constructor_add_reg(ctx, I32, v1041, v1056);
                                    let v1058 = constructor_lshl_imm(ctx, I32, v1057, 0x8);
                                    let v1059 = constructor_add_reg(ctx, I32, v1057, v1058);
                                    let v1061 = constructor_lshr_imm(ctx, I32, v1059, 0x18);
                                    let v1062 = constructor_output_reg(ctx, v1061);
                                    let v1063 = Some(v1062);
                                    // Rule at src\isa\s390x\lower.isle line 1331.
                                    return v1063;
                                }
                            }
                            I64 => {
                                let v771 = C::mie2_disabled(ctx, v3);
                                if let Some(v772) = v771 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1041 = constructor_popcnt_byte(ctx, v57);
                                    let v1064 = constructor_lshl_imm(ctx, I64, v1041, 0x20);
                                    let v1065 = constructor_add_reg(ctx, I64, v1041, v1064);
                                    let v1066 = constructor_lshl_imm(ctx, I64, v1065, 0x10);
                                    let v1067 = constructor_add_reg(ctx, I64, v1065, v1066);
                                    let v1068 = constructor_lshl_imm(ctx, I64, v1067, 0x8);
                                    let v1069 = constructor_add_reg(ctx, I64, v1067, v1068);
                                    let v1071 = constructor_lshr_imm(ctx, I64, v1069, 0x38);
                                    let v1072 = constructor_output_reg(ctx, v1071);
                                    let v1073 = Some(v1072);
                                    // Rule at src\isa\s390x\lower.isle line 1337.
                                    return v1073;
                                }
                            }
                            I128 => {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v1077 = constructor_vec_popcnt(ctx, I64X2, v57);
                                let v984 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v1078 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v984, 0x0, v1077, 0x0,
                                );
                                let v1079 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v984, 0x0, v1077, 0x1,
                                );
                                let v1080 = constructor_vec_add(ctx, I64X2, v1078, v1079);
                                let v1081 = constructor_output_reg(ctx, v1080);
                                let v1082 = Some(v1081);
                                // Rule at src\isa\s390x\lower.isle line 1349.
                                return v1082;
                            }
                            _ => {}
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v766 = C::mie2_enabled(ctx, v3);
                            if let Some(v767) = v766 {
                                let v708 = constructor_put_in_reg_zext64(ctx, v55);
                                let v1044 = constructor_popcnt_reg(ctx, v708);
                                let v1045 = constructor_output_reg(ctx, v1044);
                                let v1046 = Some(v1045);
                                // Rule at src\isa\s390x\lower.isle line 1315.
                                return v1046;
                            }
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1126 = constructor_sqrt_reg(ctx, v3, v57);
                        let v1127 = constructor_output_reg(ctx, v1126);
                        let v1128 = Some(v1127);
                        // Rule at src\isa\s390x\lower.isle line 1422.
                        return v1128;
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1129 = constructor_fneg_reg(ctx, v3, v57);
                        let v1130 = constructor_output_reg(ctx, v1129);
                        let v1131 = Some(v1130);
                        // Rule at src\isa\s390x\lower.isle line 1429.
                        return v1131;
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1132 = constructor_fabs_reg(ctx, v3, v57);
                        let v1133 = constructor_output_reg(ctx, v1132);
                        let v1134 = Some(v1133);
                        // Rule at src\isa\s390x\lower.isle line 1436.
                        return v1134;
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1135 = constructor_ceil_reg(ctx, v3, v57);
                        let v1136 = constructor_output_reg(ctx, v1135);
                        let v1137 = Some(v1136);
                        // Rule at src\isa\s390x\lower.isle line 1443.
                        return v1137;
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1138 = constructor_floor_reg(ctx, v3, v57);
                        let v1139 = constructor_output_reg(ctx, v1138);
                        let v1140 = Some(v1139);
                        // Rule at src\isa\s390x\lower.isle line 1450.
                        return v1140;
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1141 = constructor_trunc_reg(ctx, v3, v57);
                        let v1142 = constructor_output_reg(ctx, v1141);
                        let v1143 = Some(v1142);
                        // Rule at src\isa\s390x\lower.isle line 1457.
                        return v1143;
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v1144 = constructor_nearest_reg(ctx, v3, v57);
                        let v1145 = constructor_output_reg(ctx, v1144);
                        let v1146 = Some(v1145);
                        // Rule at src\isa\s390x\lower.isle line 1464.
                        return v1146;
                    }
                }
                &Opcode::IsNull => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v56 = C::value_type(ctx, v55);
                            if v56 == R64 {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v2360 = &constructor_icmps_simm16(ctx, I64, v57, 0x0);
                                let v2362 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v2363 = &constructor_bool(ctx, v2360, v2362);
                                let v2364 = constructor_lower_bool(ctx, I8, v2363);
                                let v2365 = constructor_output_reg(ctx, v2364);
                                let v2366 = Some(v2365);
                                // Rule at src\isa\s390x\lower.isle line 3695.
                                return v2366;
                            }
                        }
                    }
                }
                &Opcode::IsInvalid => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I8 {
                            let v56 = C::value_type(ctx, v55);
                            if v56 == R64 {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v2367 = &constructor_icmps_simm16(ctx, I64, v57, -0x1);
                                let v2362 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                                let v2368 = &constructor_bool(ctx, v2367, v2362);
                                let v2369 = constructor_lower_bool(ctx, I8, v2368);
                                let v2370 = constructor_output_reg(ctx, v2369);
                                let v2371 = Some(v2370);
                                // Rule at src\isa\s390x\lower.isle line 3701.
                                return v2371;
                            }
                        }
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1493 = C::sinkable_inst(ctx, v55);
                        if let Some(v1494) = v1493 {
                            let v1495 = &C::inst_data(ctx, v1494);
                            if let &InstructionData::Load {
                                opcode: ref v1496,
                                arg: v1497,
                                flags: v1498,
                                offset: v1499,
                            } = v1495
                            {
                                if let &Opcode::Load = v1496 {
                                    let v1506 = C::littleendian(ctx, v1498);
                                    if let Some(v1507) = v1506 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1511 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1529 = &constructor_sink_load(ctx, v1494);
                                        let v1512 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1533 = constructor_vec_load_lane_little(
                                            ctx, v3, v1511, v1529, v1512,
                                        );
                                        let v1534 = constructor_output_reg(ctx, v1533);
                                        let v1535 = Some(v1534);
                                        // Rule at src\isa\s390x\lower.isle line 2033.
                                        return v1535;
                                    }
                                    let v1500 = C::bigendian(ctx, v1498);
                                    if let Some(v1501) = v1500 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1511 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1529 = &constructor_sink_load(ctx, v1494);
                                        let v1512 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1530 =
                                            constructor_vec_load_lane(ctx, v3, v1511, v1529, v1512);
                                        let v1531 = constructor_output_reg(ctx, v1530);
                                        let v1532 = Some(v1531);
                                        // Rule at src\isa\s390x\lower.isle line 2029.
                                        return v1532;
                                    }
                                }
                            }
                        }
                        let v1488 = C::i16_from_value(ctx, v55);
                        if let Some(v1489) = v1488 {
                            let v3 = C::value_type(ctx, v2);
                            let v1511 = constructor_vec_imm(ctx, v3, 0x0);
                            let v1525 = C::be_lane_idx(ctx, v3, 0x0);
                            let v1526 =
                                constructor_vec_insert_lane_imm(ctx, v3, v1511, v1489, v1525);
                            let v1527 = constructor_output_reg(ctx, v1526);
                            let v1528 = Some(v1527);
                            // Rule at src\isa\s390x\lower.isle line 2025.
                            return v1528;
                        }
                        let v300 = C::def_inst(ctx, v55);
                        if let Some(v301) = v300 {
                            let v302 = &C::inst_data(ctx, v301);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1479,
                                arg: v1480,
                                imm: v1481,
                            } = v302
                            {
                                if let &Opcode::Extractlane = v1479 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v1516 = C::be_lane_idx(ctx, v3, 0x0);
                                    let v1520 = C::put_in_reg(ctx, v1480);
                                    let v1482 = C::u8_from_uimm8(ctx, v1481);
                                    let v1521 = C::be_lane_idx(ctx, v3, v1482);
                                    let v1522 = constructor_vec_move_lane_and_zero(
                                        ctx, v3, v1516, v1520, v1521,
                                    );
                                    let v1523 = constructor_output_reg(ctx, v1522);
                                    let v1524 = Some(v1523);
                                    // Rule at src\isa\s390x\lower.isle line 2020.
                                    return v1524;
                                }
                            }
                        }
                        let v56 = C::value_type(ctx, v55);
                        let v1468 = C::ty_int_ref_scalar_64(ctx, v56);
                        if let Some(v1469) = v1468 {
                            let v3 = C::value_type(ctx, v2);
                            let v1511 = constructor_vec_imm(ctx, v3, 0x0);
                            let v316 = C::put_in_reg(ctx, v55);
                            let v1512 = C::be_lane_idx(ctx, v3, 0x0);
                            let v63 = C::zero_reg(ctx);
                            let v1513 =
                                constructor_vec_insert_lane(ctx, v3, v1511, v316, v1512, v63);
                            let v1514 = constructor_output_reg(ctx, v1513);
                            let v1515 = Some(v1514);
                            // Rule at src\isa\s390x\lower.isle line 2009.
                            return v1515;
                        }
                        let v1474 = C::ty_scalar_float(ctx, v56);
                        if let Some(v1475) = v1474 {
                            let v3 = C::value_type(ctx, v2);
                            let v1516 = C::be_lane_idx(ctx, v3, 0x0);
                            let v316 = C::put_in_reg(ctx, v55);
                            let v1517 =
                                constructor_vec_move_lane_and_zero(ctx, v3, v1516, v316, 0x0);
                            let v1518 = constructor_output_reg(ctx, v1517);
                            let v1519 = Some(v1518);
                            // Rule at src\isa\s390x\lower.isle line 2015.
                            return v1519;
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v960 = &constructor_value_nonzero(ctx, v55);
                        let v3 = C::value_type(ctx, v2);
                        let v961 = constructor_lower_bool_to_mask(ctx, v3, v960);
                        let v962 = constructor_output_reg(ctx, v961);
                        let v963 = Some(v962);
                        // Rule at src\isa\s390x\lower.isle line 1147.
                        return v963;
                    }
                }
                &Opcode::Ireduce => {
                    let v56 = C::value_type(ctx, v55);
                    let v692 = C::fits_in_64(ctx, v56);
                    if let Some(v693) = v692 {
                        let v694 = constructor_output_value(ctx, v55);
                        let v695 = Some(v694);
                        // Rule at src\isa\s390x\lower.isle line 880.
                        return v695;
                    }
                    let v696 = C::vr128_ty(ctx, v56);
                    if let Some(v697) = v696 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v60 = C::zero_reg(ctx);
                        let v698 = constructor_vec_extract_lane(ctx, I64X2, v57, 0x1, v60);
                        let v699 = constructor_output_reg(ctx, v698);
                        let v700 = Some(v699);
                        // Rule at src\isa\s390x\lower.isle line 884.
                        return v700;
                    }
                }
                &Opcode::SwidenLow => {
                    let v56 = C::value_type(ctx, v55);
                    let v752 = C::ty_vec128(ctx, v56);
                    if let Some(v753) = v752 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v754 = constructor_vec_unpacks_low_lane_order(ctx, v753, v57);
                        let v755 = constructor_output_reg(ctx, v754);
                        let v756 = Some(v755);
                        // Rule at src\isa\s390x\lower.isle line 946.
                        return v756;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v56 = C::value_type(ctx, v55);
                    let v752 = C::ty_vec128(ctx, v56);
                    if let Some(v753) = v752 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v757 = constructor_vec_unpacks_high_lane_order(ctx, v753, v57);
                        let v758 = constructor_output_reg(ctx, v757);
                        let v759 = Some(v758);
                        // Rule at src\isa\s390x\lower.isle line 952.
                        return v759;
                    }
                }
                &Opcode::UwidenLow => {
                    let v56 = C::value_type(ctx, v55);
                    let v752 = C::ty_vec128(ctx, v56);
                    if let Some(v753) = v752 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v760 = constructor_vec_unpacku_low_lane_order(ctx, v753, v57);
                        let v761 = constructor_output_reg(ctx, v760);
                        let v762 = Some(v761);
                        // Rule at src\isa\s390x\lower.isle line 958.
                        return v762;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v56 = C::value_type(ctx, v55);
                    let v752 = C::ty_vec128(ctx, v56);
                    if let Some(v753) = v752 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v763 = constructor_vec_unpacku_high_lane_order(ctx, v753, v57);
                        let v764 = constructor_output_reg(ctx, v763);
                        let v765 = Some(v764);
                        // Rule at src\isa\s390x\lower.isle line 964.
                        return v765;
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v708 = constructor_put_in_reg_zext64(ctx, v55);
                            let v709 = constructor_output_reg(ctx, v708);
                            let v710 = Some(v709);
                            // Rule at src\isa\s390x\lower.isle line 895.
                            return v710;
                        }
                        let v701 = C::gpr32_ty(ctx, v3);
                        if let Some(v702) = v701 {
                            let v703 = constructor_put_in_reg_zext32(ctx, v55);
                            let v704 = constructor_output_reg(ctx, v703);
                            let v705 = Some(v704);
                            // Rule at src\isa\s390x\lower.isle line 891.
                            return v705;
                        }
                        if v3 == I128 {
                            let v56 = C::value_type(ctx, v55);
                            match v56 {
                                I8 => {
                                    let v315 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v316 = C::put_in_reg(ctx, v55);
                                    let v712 = C::zero_reg(ctx);
                                    let v713 = constructor_vec_insert_lane(
                                        ctx, I8X16, v315, v316, 0xF, v712,
                                    );
                                    let v714 = constructor_output_reg(ctx, v713);
                                    let v715 = Some(v714);
                                    // Rule at src\isa\s390x\lower.isle line 899.
                                    return v715;
                                }
                                I16 => {
                                    let v315 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v316 = C::put_in_reg(ctx, v55);
                                    let v712 = C::zero_reg(ctx);
                                    let v717 = constructor_vec_insert_lane(
                                        ctx, I16X8, v315, v316, 0x7, v712,
                                    );
                                    let v718 = constructor_output_reg(ctx, v717);
                                    let v719 = Some(v718);
                                    // Rule at src\isa\s390x\lower.isle line 901.
                                    return v719;
                                }
                                I32 => {
                                    let v315 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v316 = C::put_in_reg(ctx, v55);
                                    let v712 = C::zero_reg(ctx);
                                    let v721 = constructor_vec_insert_lane(
                                        ctx, I32X4, v315, v316, 0x3, v712,
                                    );
                                    let v722 = constructor_output_reg(ctx, v721);
                                    let v723 = Some(v722);
                                    // Rule at src\isa\s390x\lower.isle line 903.
                                    return v723;
                                }
                                I64 => {
                                    let v315 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v316 = C::put_in_reg(ctx, v55);
                                    let v712 = C::zero_reg(ctx);
                                    let v724 = constructor_vec_insert_lane(
                                        ctx, I64X2, v315, v316, 0x1, v712,
                                    );
                                    let v725 = constructor_output_reg(ctx, v724);
                                    let v726 = Some(v725);
                                    // Rule at src\isa\s390x\lower.isle line 905.
                                    return v726;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v706 = C::gpr64_ty(ctx, v3);
                        if let Some(v707) = v706 {
                            let v730 = constructor_put_in_reg_sext64(ctx, v55);
                            let v731 = constructor_output_reg(ctx, v730);
                            let v732 = Some(v731);
                            // Rule at src\isa\s390x\lower.isle line 916.
                            return v732;
                        }
                        let v701 = C::gpr32_ty(ctx, v3);
                        if let Some(v702) = v701 {
                            let v727 = constructor_put_in_reg_sext32(ctx, v55);
                            let v728 = constructor_output_reg(ctx, v727);
                            let v729 = Some(v728);
                            // Rule at src\isa\s390x\lower.isle line 912.
                            return v729;
                        }
                        if v3 == I128 {
                            let v730 = constructor_put_in_reg_sext64(ctx, v55);
                            let v734 = constructor_ashr_imm(ctx, I64, v730, 0x3F);
                            let v735 = constructor_mov_to_vec128(ctx, I128, v734, v730);
                            let v736 = constructor_output_reg(ctx, v735);
                            let v737 = Some(v736);
                            // Rule at src\isa\s390x\lower.isle line 920.
                            return v737;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v56 = C::value_type(ctx, v55);
                            let v1147 = constructor_fpromote_reg(ctx, v70, v56, v57);
                            let v1148 = constructor_output_reg(ctx, v1147);
                            let v1149 = Some(v1148);
                            // Rule at src\isa\s390x\lower.isle line 1471.
                            return v1149;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v56 = C::value_type(ctx, v55);
                            let v1155 =
                                constructor_fdemote_reg(ctx, v70, v56, &FpuRoundMode::Current, v57);
                            let v1156 = constructor_output_reg(ctx, v1155);
                            let v1157 = Some(v1156);
                            // Rule at src\isa\s390x\lower.isle line 1485.
                            return v1157;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v56 = C::value_type(ctx, v55);
                            if v56 == F64X2 {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v1158 = constructor_fdemote_reg(
                                    ctx,
                                    F32X4,
                                    F64X2,
                                    &FpuRoundMode::Current,
                                    v57,
                                );
                                let v1159 = constructor_vec_lshr_imm(ctx, I64X2, v1158, 0x20);
                                let v1160 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v1161 =
                                    constructor_vec_pack_lane_order(ctx, I64X2, v1159, v1160);
                                let v1162 = constructor_output_reg(ctx, v1161);
                                let v1163 = Some(v1162);
                                // Rule at src\isa\s390x\lower.isle line 1492.
                                return v1163;
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v56 = C::value_type(ctx, v55);
                            if v56 == F32X4 {
                                let v57 = C::put_in_reg(ctx, v55);
                                let v316 = C::put_in_reg(ctx, v55);
                                let v1150 =
                                    constructor_vec_merge_low_lane_order(ctx, I32X4, v57, v316);
                                let v1151 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1150);
                                let v1152 = constructor_output_reg(ctx, v1151);
                                let v1153 = Some(v1152);
                                // Rule at src\isa\s390x\lower.isle line 1478.
                                return v1153;
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v56 = C::value_type(ctx, v55);
                            let v1236 = &constructor_fcmp_reg(ctx, v56, v57, v57);
                            let v1238 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1239 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v1240 = constructor_trap_if(ctx, v1236, v1238, v1239);
                            let v1241 = constructor_fcvt_to_uint_ub(ctx, v56, v70);
                            let v1242 = &constructor_fcmp_reg(ctx, v56, v57, v1241);
                            let v1244 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1245 = &C::trap_code_integer_overflow(ctx);
                            let v1246 = constructor_trap_if(ctx, v1242, v1244, v1245);
                            let v1247 = constructor_fcvt_to_uint_lb(ctx, v56);
                            let v1248 = &constructor_fcmp_reg(ctx, v56, v57, v1247);
                            let v1250 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1251 = constructor_trap_if(ctx, v1248, v1250, v1245);
                            let v1252 = constructor_fcvt_flt_ty(ctx, v70, v56);
                            let v1253 = constructor_fpromote_reg(ctx, v1252, v56, v57);
                            let v1255 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1252,
                                &FpuRoundMode::ToZero,
                                v1253,
                            );
                            let v1256 = constructor_output_reg(ctx, v1255);
                            let v1257 = Some(v1256);
                            // Rule at src\isa\s390x\lower.isle line 1584.
                            return v1257;
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v56 = C::value_type(ctx, v55);
                            let v1236 = &constructor_fcmp_reg(ctx, v56, v57, v57);
                            let v1238 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1239 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v1240 = constructor_trap_if(ctx, v1236, v1238, v1239);
                            let v1258 = constructor_fcvt_to_sint_ub(ctx, v56, v70);
                            let v1259 = &constructor_fcmp_reg(ctx, v56, v57, v1258);
                            let v1244 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1245 = &C::trap_code_integer_overflow(ctx);
                            let v1260 = constructor_trap_if(ctx, v1259, v1244, v1245);
                            let v1261 = constructor_fcvt_to_sint_lb(ctx, v56, v70);
                            let v1262 = &constructor_fcmp_reg(ctx, v56, v57, v1261);
                            let v1250 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1263 = constructor_trap_if(ctx, v1262, v1250, v1245);
                            let v1252 = constructor_fcvt_flt_ty(ctx, v70, v56);
                            let v1253 = constructor_fpromote_reg(ctx, v1252, v56, v57);
                            let v1264 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1252,
                                &FpuRoundMode::ToZero,
                                v1253,
                            );
                            let v1265 = constructor_output_reg(ctx, v1264);
                            let v1266 = Some(v1265);
                            // Rule at src\isa\s390x\lower.isle line 1608.
                            return v1266;
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == F32X4 {
                                    let v1180 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1181) = v1180 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v1274 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v57,
                                        );
                                        let v1275 = constructor_output_reg(ctx, v1274);
                                        let v1276 = Some(v1275);
                                        // Rule at src\isa\s390x\lower.isle line 1644.
                                        return v1276;
                                    }
                                    let v1185 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1186) = v1185 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v316 = C::put_in_reg(ctx, v55);
                                        let v1277 =
                                            constructor_vec_merge_high(ctx, I32X4, v57, v316);
                                        let v1278 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1277);
                                        let v1279 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1278,
                                        );
                                        let v1280 = C::put_in_reg(ctx, v55);
                                        let v1281 = C::put_in_reg(ctx, v55);
                                        let v1282 =
                                            constructor_vec_merge_low(ctx, I32X4, v1280, v1281);
                                        let v1283 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1282);
                                        let v1284 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1283,
                                        );
                                        let v1285 =
                                            constructor_vec_pack_usat(ctx, I64X2, v1279, v1284);
                                        let v1286 = constructor_output_reg(ctx, v1285);
                                        let v1287 = Some(v1286);
                                        // Rule at src\isa\s390x\lower.isle line 1649.
                                        return v1287;
                                    }
                                }
                            }
                            I64X2 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == F64X2 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1288 = constructor_fcvt_to_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v57,
                                    );
                                    let v1289 = constructor_output_reg(ctx, v1288);
                                    let v1290 = Some(v1289);
                                    // Rule at src\isa\s390x\lower.isle line 1658.
                                    return v1290;
                                }
                            }
                            _ => {}
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v56 = C::value_type(ctx, v55);
                            let v1267 = constructor_fcvt_flt_ty(ctx, v70, v56);
                            let v1268 = constructor_fcvt_int_ty(ctx, v70, v56);
                            let v1269 = constructor_fpromote_reg(ctx, v1267, v56, v57);
                            let v1270 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1267,
                                &FpuRoundMode::ToZero,
                                v1269,
                            );
                            let v1271 = constructor_uint_sat_reg(ctx, v70, v1268, v1270);
                            let v1272 = constructor_output_reg(ctx, v1271);
                            let v1273 = Some(v1272);
                            // Rule at src\isa\s390x\lower.isle line 1632.
                            return v1273;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == F32X4 {
                                    let v1180 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1181) = v1180 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v1300 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v57,
                                        );
                                        let v1301 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1302 = C::put_in_reg(ctx, v55);
                                        let v1190 = C::put_in_reg(ctx, v55);
                                        let v1303 =
                                            constructor_vec_fcmpeq(ctx, F32X4, v1302, v1190);
                                        let v1304 =
                                            constructor_vec_select(ctx, I32X4, v1300, v1301, v1303);
                                        let v1305 = constructor_output_reg(ctx, v1304);
                                        let v1306 = Some(v1305);
                                        // Rule at src\isa\s390x\lower.isle line 1684.
                                        return v1306;
                                    }
                                    let v1185 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1186) = v1185 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v316 = C::put_in_reg(ctx, v55);
                                        let v1277 =
                                            constructor_vec_merge_high(ctx, I32X4, v57, v316);
                                        let v1278 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1277);
                                        let v1307 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1278,
                                        );
                                        let v1280 = C::put_in_reg(ctx, v55);
                                        let v1281 = C::put_in_reg(ctx, v55);
                                        let v1282 =
                                            constructor_vec_merge_low(ctx, I32X4, v1280, v1281);
                                        let v1283 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1282);
                                        let v1308 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1283,
                                        );
                                        let v1309 =
                                            constructor_vec_pack_ssat(ctx, I64X2, v1307, v1308);
                                        let v1310 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1311 = C::put_in_reg(ctx, v55);
                                        let v1312 = C::put_in_reg(ctx, v55);
                                        let v1313 =
                                            constructor_vec_fcmpeq(ctx, F32X4, v1311, v1312);
                                        let v1314 =
                                            constructor_vec_select(ctx, I32X4, v1309, v1310, v1313);
                                        let v1315 = constructor_output_reg(ctx, v1314);
                                        let v1316 = Some(v1315);
                                        // Rule at src\isa\s390x\lower.isle line 1692.
                                        return v1316;
                                    }
                                }
                            }
                            I64X2 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == F64X2 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1317 = constructor_fcvt_to_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v57,
                                    );
                                    let v984 = constructor_vec_imm(ctx, I64X2, 0x0);
                                    let v1302 = C::put_in_reg(ctx, v55);
                                    let v1190 = C::put_in_reg(ctx, v55);
                                    let v1318 = constructor_vec_fcmpeq(ctx, F64X2, v1302, v1190);
                                    let v1319 =
                                        constructor_vec_select(ctx, I64X2, v1317, v984, v1318);
                                    let v1320 = constructor_output_reg(ctx, v1319);
                                    let v1321 = Some(v1320);
                                    // Rule at src\isa\s390x\lower.isle line 1704.
                                    return v1321;
                                }
                            }
                            _ => {}
                        }
                        let v69 = C::fits_in_64(ctx, v3);
                        if let Some(v70) = v69 {
                            let v57 = C::put_in_reg(ctx, v55);
                            let v56 = C::value_type(ctx, v55);
                            let v1267 = constructor_fcvt_flt_ty(ctx, v70, v56);
                            let v1268 = constructor_fcvt_int_ty(ctx, v70, v56);
                            let v1269 = constructor_fpromote_reg(ctx, v1267, v56, v57);
                            let v1291 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1267,
                                &FpuRoundMode::ToZero,
                                v1269,
                            );
                            let v1292 = &constructor_fcmp_reg(ctx, v56, v57, v57);
                            let v1293 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1295 = &constructor_cmov_imm(ctx, v1268, v1293, 0x0, v1291);
                            let v1296 = constructor_with_flags_reg(ctx, v1292, v1295);
                            let v1297 = constructor_sint_sat_reg(ctx, v70, v1268, v1296);
                            let v1298 = constructor_output_reg(ctx, v1297);
                            let v1299 = Some(v1298);
                            // Rule at src\isa\s390x\lower.isle line 1665.
                            return v1299;
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v56 = C::value_type(ctx, v55);
                                let v1164 = C::vxrs_ext2_enabled(ctx, v56);
                                if let Some(v1165) = v1164 {
                                    let v1166 = C::fits_in_32(ctx, v56);
                                    if let Some(v1167) = v1166 {
                                        let v703 = constructor_put_in_reg_zext32(ctx, v55);
                                        let v1169 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v703,
                                        );
                                        let v1170 = constructor_output_reg(ctx, v1169);
                                        let v1171 = Some(v1170);
                                        // Rule at src\isa\s390x\lower.isle line 1501.
                                        return v1171;
                                    }
                                }
                                let v692 = C::fits_in_64(ctx, v56);
                                if let Some(v693) = v692 {
                                    let v708 = constructor_put_in_reg_zext64(ctx, v55);
                                    let v1173 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v708,
                                    );
                                    let v1174 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v1173,
                                    );
                                    let v1175 = constructor_output_reg(ctx, v1174);
                                    let v1176 = Some(v1175);
                                    // Rule at src\isa\s390x\lower.isle line 1507.
                                    return v1176;
                                }
                            }
                            F64 => {
                                let v56 = C::value_type(ctx, v55);
                                let v692 = C::fits_in_64(ctx, v56);
                                if let Some(v693) = v692 {
                                    let v708 = constructor_put_in_reg_zext64(ctx, v55);
                                    let v1177 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v708,
                                    );
                                    let v1178 = constructor_output_reg(ctx, v1177);
                                    let v1179 = Some(v1178);
                                    // Rule at src\isa\s390x\lower.isle line 1513.
                                    return v1179;
                                }
                            }
                            F32X4 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == I32X4 {
                                    let v1180 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1181) = v1180 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v1182 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v57,
                                        );
                                        let v1183 = constructor_output_reg(ctx, v1182);
                                        let v1184 = Some(v1183);
                                        // Rule at src\isa\s390x\lower.isle line 1518.
                                        return v1184;
                                    }
                                    let v1185 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1186) = v1185 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v1187 = constructor_vec_unpacku_high(ctx, I32X4, v57);
                                        let v1188 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1187,
                                        );
                                        let v1189 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1188,
                                        );
                                        let v1190 = C::put_in_reg(ctx, v55);
                                        let v1191 = constructor_vec_unpacku_low(ctx, I32X4, v1190);
                                        let v1192 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1191,
                                        );
                                        let v1193 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1192,
                                        );
                                        let v1203 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v1204 = constructor_vec_imm(ctx, I8X16, v1203);
                                        let v1205 = constructor_vec_permute(
                                            ctx, F32X4, v1189, v1193, v1204,
                                        );
                                        let v1206 = constructor_output_reg(ctx, v1205);
                                        let v1207 = Some(v1206);
                                        // Rule at src\isa\s390x\lower.isle line 1523.
                                        return v1207;
                                    }
                                }
                            }
                            F64X2 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == I64X2 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1208 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v57,
                                    );
                                    let v1209 = constructor_output_reg(ctx, v1208);
                                    let v1210 = Some(v1209);
                                    // Rule at src\isa\s390x\lower.isle line 1535.
                                    return v1210;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v56 = C::value_type(ctx, v55);
                                let v1164 = C::vxrs_ext2_enabled(ctx, v56);
                                if let Some(v1165) = v1164 {
                                    let v1166 = C::fits_in_32(ctx, v56);
                                    if let Some(v1167) = v1166 {
                                        let v727 = constructor_put_in_reg_sext32(ctx, v55);
                                        let v1211 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v727,
                                        );
                                        let v1212 = constructor_output_reg(ctx, v1211);
                                        let v1213 = Some(v1212);
                                        // Rule at src\isa\s390x\lower.isle line 1542.
                                        return v1213;
                                    }
                                }
                                let v692 = C::fits_in_64(ctx, v56);
                                if let Some(v693) = v692 {
                                    let v730 = constructor_put_in_reg_sext64(ctx, v55);
                                    let v1214 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v730,
                                    );
                                    let v1215 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v1214,
                                    );
                                    let v1216 = constructor_output_reg(ctx, v1215);
                                    let v1217 = Some(v1216);
                                    // Rule at src\isa\s390x\lower.isle line 1548.
                                    return v1217;
                                }
                            }
                            F64 => {
                                let v56 = C::value_type(ctx, v55);
                                let v692 = C::fits_in_64(ctx, v56);
                                if let Some(v693) = v692 {
                                    let v730 = constructor_put_in_reg_sext64(ctx, v55);
                                    let v1218 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v730,
                                    );
                                    let v1219 = constructor_output_reg(ctx, v1218);
                                    let v1220 = Some(v1219);
                                    // Rule at src\isa\s390x\lower.isle line 1554.
                                    return v1220;
                                }
                            }
                            F32X4 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == I32X4 {
                                    let v1180 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1181) = v1180 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v1221 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v57,
                                        );
                                        let v1222 = constructor_output_reg(ctx, v1221);
                                        let v1223 = Some(v1222);
                                        // Rule at src\isa\s390x\lower.isle line 1559.
                                        return v1223;
                                    }
                                    let v1185 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1186) = v1185 {
                                        let v57 = C::put_in_reg(ctx, v55);
                                        let v1224 = constructor_vec_unpacks_high(ctx, I32X4, v57);
                                        let v1225 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1224,
                                        );
                                        let v1226 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1225,
                                        );
                                        let v1190 = C::put_in_reg(ctx, v55);
                                        let v1227 = constructor_vec_unpacks_low(ctx, I32X4, v1190);
                                        let v1228 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1227,
                                        );
                                        let v1229 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1228,
                                        );
                                        let v1203 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v1204 = constructor_vec_imm(ctx, I8X16, v1203);
                                        let v1230 = constructor_vec_permute(
                                            ctx, F32X4, v1226, v1229, v1204,
                                        );
                                        let v1231 = constructor_output_reg(ctx, v1230);
                                        let v1232 = Some(v1231);
                                        // Rule at src\isa\s390x\lower.isle line 1564.
                                        return v1232;
                                    }
                                }
                            }
                            F64X2 => {
                                let v56 = C::value_type(ctx, v55);
                                if v56 == I64X2 {
                                    let v57 = C::put_in_reg(ctx, v55);
                                    let v1233 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v57,
                                    );
                                    let v1234 = constructor_output_reg(ctx, v1233);
                                    let v1235 = Some(v1234);
                                    // Rule at src\isa\s390x\lower.isle line 1576.
                                    return v1235;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v56 = C::value_type(ctx, v55);
                    if v56 == I128 {
                        let v57 = C::put_in_reg(ctx, v55);
                        let v60 = C::zero_reg(ctx);
                        let v61 = constructor_vec_extract_lane(ctx, I64X2, v57, 0x0, v60);
                        let v63 = C::zero_reg(ctx);
                        let v64 = constructor_vec_extract_lane(ctx, I64X2, v57, 0x1, v63);
                        let v65 = C::value_reg(ctx, v64);
                        let v66 = C::value_reg(ctx, v61);
                        let v67 = C::output_pair(ctx, v65, v66);
                        let v68 = Some(v67);
                        // Rule at src\isa\s390x\lower.isle line 57.
                        return v68;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v26,
            constant_handle: v27,
        } => {
            if let &Opcode::Vconst = v26 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v28 = C::u128_from_constant(ctx, v27);
                    if let Some(v29) = v28 {
                        let v3 = C::value_type(ctx, v2);
                        let v30 = C::be_vec_const(ctx, v3, v29);
                        let v31 = constructor_vec_imm(ctx, v3, v30);
                        let v32 = constructor_output_reg(ctx, v31);
                        let v33 = Some(v32);
                        // Rule at src\isa\s390x\lower.isle line 33.
                        return v33;
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1840,
            global_value: v1841,
        } => {
            match v1840 {
                &Opcode::SymbolValue => {
                    let v1842 = C::symbol_value_data(ctx, v1841);
                    if let Some(v1843) = v1842 {
                        let v1847 = C::reloc_distance_near(ctx, v1843.1);
                        if let Some(v1848) = v1847 {
                            let v1849 = constructor_memarg_symbol_offset(ctx, v1843.2);
                            if let Some(v1850) = v1849 {
                                let v1830 = C::memflags_trusted(ctx);
                                let v1851 = &C::memarg_symbol(ctx, v1843.0, v1850, v1830);
                                let v1852 = constructor_load_addr(ctx, v1851);
                                let v1853 = constructor_output_reg(ctx, v1852);
                                let v1854 = Some(v1853);
                                // Rule at src\isa\s390x\lower.isle line 2265.
                                return v1854;
                            }
                        }
                        let v1855 = SymbolReloc::Absolute {
                            name: v1843.0,
                            offset: v1843.2,
                        };
                        let v1856 = constructor_load_symbol_reloc(ctx, &v1855);
                        let v1857 = constructor_output_reg(ctx, v1856);
                        let v1858 = Some(v1857);
                        // Rule at src\isa\s390x\lower.isle line 2271.
                        return v1858;
                    }
                }
                &Opcode::TlsValue => {
                    let v1842 = C::symbol_value_data(ctx, v1841);
                    if let Some(v1843) = v1842 {
                        if v1843.2 == 0x0 {
                            let v1859 = C::tls_model_is_elf_gd(ctx);
                            if let Some(v1860) = v1859 {
                                let v1862 = &C::memarg_got(ctx);
                                let v1863 = constructor_load_addr(ctx, v1862);
                                let v1861 = SymbolReloc::TlsGd { name: v1843.0 };
                                let v1864 = constructor_load_symbol_reloc(ctx, &v1861);
                                let v1865 =
                                    constructor_lib_call_tls_get_offset(ctx, v1863, v1864, &v1861);
                                let v1866 = constructor_thread_pointer(ctx);
                                let v1867 = constructor_add_reg(ctx, I64, v1865, v1866);
                                let v1868 = constructor_output_reg(ctx, v1867);
                                let v1869 = Some(v1868);
                                // Rule at src\isa\s390x\lower.isle line 2278.
                                return v1869;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v11,
            imm: v12,
        } => {
            if let &Opcode::F32const = v11 {
                let v13 = C::u32_from_ieee32(ctx, v12);
                let v15 = C::u32_as_u64(ctx, v13);
                let v16 = constructor_imm(ctx, F32, v15);
                let v17 = constructor_output_reg(ctx, v16);
                let v18 = Some(v17);
                // Rule at src\isa\s390x\lower.isle line 21.
                return v18;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v19,
            imm: v20,
        } => {
            if let &Opcode::F64const = v19 {
                let v21 = C::u64_from_ieee64(ctx, v20);
                let v23 = constructor_imm(ctx, F64, v21);
                let v24 = constructor_output_reg(ctx, v23);
                let v25 = Some(v24);
                // Rule at src\isa\s390x\lower.isle line 27.
                return v25;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    let v10 = Some(v9);
                    // Rule at src\isa\s390x\lower.isle line 15.
                    return v10;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v10,
            arg: v11,
            table: v12,
        } => {
            if let &Opcode::BrTable = v10 {
                let v13 = C::jump_table_targets(ctx, arg1);
                if let Some(v14) = v13 {
                    let v17 = constructor_put_in_reg_zext64(ctx, v11);
                    let v19 = C::jump_table_size(ctx, &v14.1);
                    let v20 = &constructor_icmpu_uimm32(ctx, I64, v17, v19);
                    let v22 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThanOrEqual);
                    let v23 = &constructor_bool(ctx, v20, v22);
                    let v24 = &constructor_oneway_cond_br_bool(ctx, v23, v14.0);
                    let v25 = constructor_emit_side_effect(ctx, v24);
                    let v27 = constructor_lshl_imm(ctx, I64, v17, 0x2);
                    let v28 = &constructor_jt_sequence(ctx, v27, &v14.1);
                    let v29 = constructor_emit_side_effect(ctx, v28);
                    let v30 = Some(v29);
                    // Rule at src\isa\s390x\lower.isle line 3760.
                    return v30;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v31,
            arg: v32,
            blocks: ref v33,
        } => {
            if let &Opcode::Brif = v31 {
                let v37 = C::two_targets(ctx, arg1);
                if let Some(v38) = v37 {
                    let v41 = &constructor_value_nonzero(ctx, v32);
                    let v42 = &constructor_cond_br_bool(ctx, v41, v38.0, v38.1);
                    let v43 = constructor_emit_side_effect(ctx, v42);
                    let v44 = Some(v43);
                    // Rule at src\isa\s390x\lower.isle line 3792.
                    return v44;
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jump_impl(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src\isa\s390x\lower.isle line 3752.
                    return v9;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I128 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v24 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v14);
            let v25 = C::zero_reg(ctx);
            let v26 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v25);
            let v27 = C::zero_reg(ctx);
            let v28 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v27);
            let v29 = constructor_umul_wide(ctx, v24, v28);
            let v30 = C::regpair_lo(ctx, v29);
            let v31 = C::regpair_hi(ctx, v29);
            let v32 = constructor_mul_reg(ctx, I64, v24, v26);
            let v33 = constructor_mul_reg(ctx, I64, v13, v28);
            let v34 = constructor_add_reg(ctx, I64, v32, v31);
            let v35 = constructor_add_reg(ctx, I64, v33, v34);
            let v36 = constructor_mov_to_vec128(ctx, I64X2, v35, v30);
            // Rule at src\isa\s390x\lower.isle line 405.
            return v36;
        }
        I8X16 => {
            let v4 = constructor_vec_mul(ctx, I8X16, arg1, arg2);
            // Rule at src\isa\s390x\lower.isle line 392.
            return v4;
        }
        I16X8 => {
            let v6 = constructor_vec_mul(ctx, I16X8, arg1, arg2);
            // Rule at src\isa\s390x\lower.isle line 393.
            return v6;
        }
        I32X4 => {
            let v8 = constructor_vec_mul(ctx, I32X4, arg1, arg2);
            // Rule at src\isa\s390x\lower.isle line 394.
            return v8;
        }
        I64X2 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v15 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v14);
            let v16 = constructor_mul_reg(ctx, I64, v13, v15);
            let v18 = C::zero_reg(ctx);
            let v19 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v18);
            let v20 = C::zero_reg(ctx);
            let v21 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v20);
            let v22 = constructor_mul_reg(ctx, I64, v19, v21);
            let v23 = constructor_mov_to_vec128(ctx, I64X2, v16, v22);
            // Rule at src\isa\s390x\lower.isle line 397.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_mul_impl", "src\\isa\\s390x\\lower.isle line 387"
    )
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32X4 => {
            let v4 = constructor_vec_mul_impl(ctx, I32X4, arg1, arg2);
            let v6 = constructor_vec_imm_bit_mask(ctx, I32X4, 0x11, 0x11);
            let v7 = constructor_vec_add(ctx, I32X4, v4, v6);
            let v9 = constructor_vec_ashr_imm(ctx, I32X4, v7, 0xF);
            // Rule at src\isa\s390x\lower.isle line 509.
            return v9;
        }
        I64X2 => {
            let v11 = constructor_vec_mul_impl(ctx, I64X2, arg1, arg2);
            let v13 = constructor_vec_imm_bit_mask(ctx, I64X2, 0x21, 0x21);
            let v14 = constructor_vec_add(ctx, I64X2, v11, v13);
            let v16 = constructor_vec_ashr_imm(ctx, I64X2, v14, 0x1F);
            // Rule at src\isa\s390x\lower.isle line 513.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sqmul_impl", "src\\isa\\s390x\\lower.isle line 508"
    )
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_not_neg1(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src\isa\s390x\lower.isle line 624.
            return false;
        }
    }
    // Rule at src\isa\s390x\lower.isle line 627.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = constructor_int_max(ctx, arg2);
            let v7 = constructor_imm(ctx, arg1, v6);
            let v8 = constructor_xor_reg(ctx, arg1, v7, arg3);
            let v9 = constructor_and_reg(ctx, arg1, v8, arg4);
            let v12 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v13 = &C::trap_code_integer_overflow(ctx);
            let v14 = constructor_icmps_simm16_and_trap(ctx, arg1, v9, -0x1, v12, v13);
            // Rule at src\isa\s390x\lower.isle line 640.
            return v14;
        }
        false => {
            let v5 = C::invalid_reg(ctx);
            // Rule at src\isa\s390x\lower.isle line 639.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_sdiv_overflow", "src\\isa\\s390x\\lower.isle line 638"
    )
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\lower.isle line 647.
            return 0x7F;
        }
        I16 => {
            // Rule at src\isa\s390x\lower.isle line 648.
            return 0x7FFF;
        }
        I32 => {
            // Rule at src\isa\s390x\lower.isle line 649.
            return 0x7FFFFFFF;
        }
        I64 => {
            // Rule at src\isa\s390x\lower.isle line 650.
            return 0x7FFFFFFFFFFFFFFF;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_max", "src\\isa\\s390x\\lower.isle line 646"
    )
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                I32 => {
                    // Rule at src\isa\s390x\lower.isle line 668.
                    return arg2;
                }
                I64 => {
                    let v6 = &constructor_icmps_simm16(ctx, I64, arg3, -0x1);
                    let v8 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                    let v10 = &constructor_cmov_imm(ctx, I64, v8, 0x0, arg2);
                    let v11 = constructor_with_flags_reg(ctx, v6, v10);
                    // Rule at src\isa\s390x\lower.isle line 669.
                    return v11;
                }
                _ => {}
            }
        }
        false => {
            // Rule at src\isa\s390x\lower.isle line 667.
            return arg2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_avoid_srem_overflow", "src\\isa\\s390x\\lower.isle line 666"
    )
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Reg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = constructor_imm(ctx, v4, arg1);
        let v7 = constructor_ty_ext32(ctx, v4);
        let v8 = constructor_lshl_imm(ctx, v7, arg3, arg0);
        let v9 = constructor_ty_ext32(ctx, v4);
        let v10 = constructor_lshr_imm(ctx, v9, arg3, arg0);
        let v11 = constructor_and_reg(ctx, v4, v8, v6);
        let v12 = constructor_not_reg(ctx, v4, v6);
        let v13 = constructor_and_reg(ctx, v4, v10, v12);
        let v14 = constructor_or_reg(ctx, v4, v11, v13);
        // Rule at src\isa\s390x\lower.isle line 1160.
        return v14;
    }
    let v15 = C::vr128_ty(ctx, arg2);
    if let Some(v16) = v15 {
        let v18 = constructor_vec_imm_splat(ctx, I64X2, arg1);
        let v20 = C::u8_as_u64(ctx, arg0);
        let v21 = constructor_vec_imm_splat(ctx, I8X16, v20);
        let v22 = constructor_vec_lshl_by_bit(ctx, arg3, v21);
        let v23 = constructor_vec_lshr_by_bit(ctx, arg3, v21);
        let v24 = constructor_vec_select(ctx, v16, v22, v23, v18);
        // Rule at src\isa\s390x\lower.isle line 1168.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bits", "src\\isa\\s390x\\lower.isle line 1159"
    )
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            // Rule at src\isa\s390x\lower.isle line 1176.
            return arg1;
        }
        I16 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            let v5 = constructor_lshr_imm(ctx, I32, v3, 0x10);
            // Rule at src\isa\s390x\lower.isle line 1177.
            return v5;
        }
        I32 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            // Rule at src\isa\s390x\lower.isle line 1178.
            return v3;
        }
        I64 => {
            let v7 = constructor_bswap_reg(ctx, I64, arg1);
            // Rule at src\isa\s390x\lower.isle line 1179.
            return v7;
        }
        I128 => {
            let v26 = constructor_imm8x16(
                ctx, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0,
            );
            let v27 = constructor_vec_imm(ctx, I8X16, v26);
            let v28 = constructor_vec_permute(ctx, I128, arg1, arg1, v27);
            // Rule at src\isa\s390x\lower.isle line 1180.
            return v28;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bytes", "src\\isa\\s390x\\lower.isle line 1175"
    )
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x38);
            // Rule at src\isa\s390x\lower.isle line 1197.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x30);
            // Rule at src\isa\s390x\lower.isle line 1198.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x20);
            // Rule at src\isa\s390x\lower.isle line 1199.
            return v10;
        }
        I64 => {
            // Rule at src\isa\s390x\lower.isle line 1200.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "clz_offset", "src\\isa\\s390x\\lower.isle line 1196"
    )
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x39);
            // Rule at src\isa\s390x\lower.isle line 1228.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x31);
            // Rule at src\isa\s390x\lower.isle line 1229.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x21);
            // Rule at src\isa\s390x\lower.isle line 1230.
            return v10;
        }
        I64 => {
            let v13 = constructor_add_simm16(ctx, I64, arg1, -0x1);
            // Rule at src\isa\s390x\lower.isle line 1231.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cls_offset", "src\\isa\\s390x\\lower.isle line 1227"
    )
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(ctx: &mut C, arg0: Type) -> UImm16Shifted {
    match arg0 {
        I8 => {
            let v3 = C::uimm16shifted(ctx, 0x100, 0x0);
            // Rule at src\isa\s390x\lower.isle line 1282.
            return v3;
        }
        I16 => {
            let v6 = C::uimm16shifted(ctx, 0x1, 0x10);
            // Rule at src\isa\s390x\lower.isle line 1283.
            return v6;
        }
        I32 => {
            let v8 = C::uimm16shifted(ctx, 0x1, 0x20);
            // Rule at src\isa\s390x\lower.isle line 1284.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ctz_guardbit", "src\\isa\\s390x\\lower.isle line 1281"
    )
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg2 {
                0x0 => {
                    let v10 = constructor_vec_permute_dw_imm(ctx, arg0, arg3, arg4, arg1, 0x1);
                    // Rule at src\isa\s390x\lower.isle line 1814.
                    return v10;
                }
                0x1 => {
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, arg1, 0x0, arg3, arg4);
                    // Rule at src\isa\s390x\lower.isle line 1816.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg2 == arg4 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg2);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_select(ctx, arg0, arg3, arg1, v14);
        // Rule at src\isa\s390x\lower.isle line 1820.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg3, arg4);
    let v17 = C::lane_byte_mask(ctx, arg0, arg2);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_select(ctx, arg0, v16, arg1, v18);
    // Rule at src\isa\s390x\lower.isle line 1825.
    return v19;
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = constructor_vec_load_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src\isa\s390x\lower.isle line 1834.
                return v8;
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1838.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = constructor_loadrev16(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v16 = constructor_vec_insert_lane(ctx, arg0, arg1, v14, arg3, v15);
                    // Rule at src\isa\s390x\lower.isle line 1849.
                    return v16;
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1841.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v17 = constructor_loadrev32(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v18 = constructor_vec_insert_lane(ctx, arg0, arg1, v17, arg3, v15);
                    // Rule at src\isa\s390x\lower.isle line 1852.
                    return v18;
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1844.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v19 = constructor_loadrev64(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v20 = constructor_vec_insert_lane(ctx, arg0, arg1, v19, arg3, v15);
                    // Rule at src\isa\s390x\lower.isle line 1855.
                    return v20;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little", "src\\isa\\s390x\\lower.isle line 1831"
    )
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v7 = constructor_vec_load_lane_undef(ctx, arg0, arg1, arg2);
                // Rule at src\isa\s390x\lower.isle line 1863.
                return v7;
            }
            0x10 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1867.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v13 = constructor_loadrev16(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_insert_lane_undef(ctx, arg0, v13, arg2, v14);
                    // Rule at src\isa\s390x\lower.isle line 1878.
                    return v15;
                }
            }
            0x20 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1870.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v16 = constructor_loadrev32(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v17 = constructor_vec_insert_lane_undef(ctx, arg0, v16, arg2, v14);
                    // Rule at src\isa\s390x\lower.isle line 1881.
                    return v17;
                }
            }
            0x40 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1873.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v18 = constructor_loadrev64(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v19 = constructor_vec_insert_lane_undef(ctx, arg0, v18, arg2, v14);
                    // Rule at src\isa\s390x\lower.isle line 1884.
                    return v19;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little_undef", "src\\isa\\s390x\\lower.isle line 1860"
    )
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = &constructor_vec_store_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src\isa\s390x\lower.isle line 1921.
                return v8.clone();
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1925.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v16 = &constructor_storerev16(ctx, v15, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1936.
                    return v16.clone();
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1928.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v17 = &constructor_storerev32(ctx, v15, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1939.
                    return v17.clone();
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 1931.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v18 = &constructor_storerev64(ctx, v15, arg2);
                    // Rule at src\isa\s390x\lower.isle line 1942.
                    return v18.clone();
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_little", "src\\isa\\s390x\\lower.isle line 1918"
    )
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v6 = constructor_vec_load_replicate(ctx, arg0, arg1);
                // Rule at src\isa\s390x\lower.isle line 1980.
                return v6;
            }
            0x10 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src\isa\s390x\lower.isle line 1984.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src\isa\s390x\lower.isle line 1995.
                    return v14;
                }
            }
            0x20 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src\isa\s390x\lower.isle line 1987.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src\isa\s390x\lower.isle line 1998.
                    return v14;
                }
            }
            0x40 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src\isa\s390x\lower.isle line 1990.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src\isa\s390x\lower.isle line 2001.
                    return v14;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_little", "src\\isa\\s390x\\lower.isle line 1977"
    )
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg1 {
                0x0 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v11 = constructor_vec_permute_dw_imm(ctx, arg0, arg2, arg3, v9, 0x0);
                    // Rule at src\isa\s390x\lower.isle line 2041.
                    return v11;
                }
                0x1 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, v9, 0x0, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 2043.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg1 == arg3 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg1);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_and(ctx, arg0, arg2, v14);
        // Rule at src\isa\s390x\lower.isle line 2047.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg2, arg3);
    let v17 = C::lane_byte_mask(ctx, arg0, arg1);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_and(ctx, arg0, v16, v18);
    // Rule at src\isa\s390x\lower.isle line 2052.
    return v19;
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &C::lib_call_info_tls_get_offset(ctx, v4, arg0, arg1, arg2);
    let v6 = &constructor_lib_call(ctx, v5);
    let v7 = constructor_side_effect(ctx, v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\s390x\lower.isle line 2288.
    return v8;
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(ctx: &mut C) -> Reg {
    let v2 = constructor_load_ar(ctx, 0x0);
    let v4 = constructor_lshl_imm(ctx, I64, v2, 0x20);
    let v6 = constructor_insert_ar(ctx, v4, 0x1);
    // Rule at src\isa\s390x\lower.isle line 2296.
    return v6;
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v3 = C::vr128_ty(ctx, arg0);
    if let Some(v4) = v3 {
        let v1 = C::vxrs_ext2_enabled(ctx, arg0);
        if let Some(v2) = v1 {
            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v9 = constructor_vec_loadrev(ctx, v4, v8);
            // Rule at src\isa\s390x\lower.isle line 2379.
            return v9;
        }
        let v10 = C::vxrs_ext2_disabled(ctx, arg0);
        if let Some(v11) = v10 {
            let v13 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x0);
            let v15 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x8);
            let v16 = constructor_loadrev64(ctx, v13);
            let v17 = constructor_loadrev64(ctx, v15);
            let v18 = constructor_mov_to_vec128(ctx, v4, v17, v16);
            // Rule at src\isa\s390x\lower.isle line 2383.
            return v18;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_full_rev", "src\\isa\\s390x\\lower.isle line 2376"
    )
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                if v7.1 == 0x10 {
                    let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                    let v11 = constructor_vec_load(ctx, arg0, v10);
                    // Rule at src\isa\s390x\lower.isle line 2399.
                    return v11;
                }
            }
            0x10 => {
                if v7.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_byte16rev(ctx, arg0, v10);
                        // Rule at src\isa\s390x\lower.isle line 2409.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src\isa\s390x\lower.isle line 2420.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v7.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_byte32rev(ctx, arg0, v10);
                        // Rule at src\isa\s390x\lower.isle line 2406.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src\isa\s390x\lower.isle line 2417.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v7.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_byte64rev(ctx, arg0, v10);
                        // Rule at src\isa\s390x\lower.isle line 2403.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src\isa\s390x\lower.isle line 2414.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = constructor_vec_load_full_rev(ctx, I128, arg1, arg2, arg3);
        // Rule at src\isa\s390x\lower.isle line 2395.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_byte_rev", "src\\isa\\s390x\\lower.isle line 2392"
    )
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src\isa\s390x\lower.isle line 2434.
                    return v11;
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_elt16rev(ctx, arg0, v5);
                        // Rule at src\isa\s390x\lower.isle line 2444.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src\isa\s390x\lower.isle line 2455.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_elt32rev(ctx, arg0, v5);
                        // Rule at src\isa\s390x\lower.isle line 2441.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src\isa\s390x\lower.isle line 2452.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_elt64rev(ctx, arg0, v5);
                        // Rule at src\isa\s390x\lower.isle line 2438.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src\isa\s390x\lower.isle line 2449.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
        let v6 = constructor_vec_load(ctx, I128, v5);
        // Rule at src\isa\s390x\lower.isle line 2430.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_elt_rev", "src\\isa\\s390x\\lower.isle line 2426"
    )
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = &C::lane_order(ctx);
    match v6 {
        &LaneOrder::LittleEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src\isa\s390x\lower.isle line 2606.
                            return v13;
                        }
                    }
                    0x10 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v21 = constructor_vec_rot_imm(ctx, I16X8, v13, 0x8);
                                // Rule at src\isa\s390x\lower.isle line 2617.
                                return v21;
                            }
                        }
                    }
                    0x20 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v24 = constructor_vec_rot_imm(ctx, I64X2, v10, 0x20);
                                // Rule at src\isa\s390x\lower.isle line 2629.
                                return v24;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                // Rule at src\isa\s390x\lower.isle line 2596.
                return v13;
            }
        }
        &LaneOrder::BigEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src\isa\s390x\lower.isle line 2601.
                            return v10;
                        }
                    }
                    0x10 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v20 = constructor_vec_rot_imm(ctx, I16X8, v10, 0x8);
                                // Rule at src\isa\s390x\lower.isle line 2611.
                                return v20;
                            }
                        }
                    }
                    0x20 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v23 = constructor_vec_rot_imm(ctx, I64X2, v13, 0x20);
                                // Rule at src\isa\s390x\lower.isle line 2623.
                                return v23;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v2 = C::bigendian(ctx, arg1);
            if let Some(v3) = v2 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                // Rule at src\isa\s390x\lower.isle line 2591.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "load_v64", "src\\isa\\s390x\\lower.isle line 2588"
    )
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v1 = C::vxrs_ext2_enabled(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v8 = &constructor_vec_storerev(ctx, arg1, v7);
        // Rule at src\isa\s390x\lower.isle line 2713.
        return v8.clone();
    }
    let v9 = C::vxrs_ext2_disabled(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x0);
        let v14 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x8);
        let v17 = C::zero_reg(ctx);
        let v18 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v17);
        let v19 = C::zero_reg(ctx);
        let v20 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v19);
        let v21 = &constructor_storerev64(ctx, v18, v12);
        let v22 = &constructor_storerev64(ctx, v20, v14);
        let v23 = &constructor_side_effect_concat(ctx, v21, v22);
        // Rule at src\isa\s390x\lower.isle line 2717.
        return v23.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_full_rev", "src\\isa\\s390x\\lower.isle line 2710"
    )
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                    let v12 = &constructor_vec_store(ctx, arg1, v11);
                    // Rule at src\isa\s390x\lower.isle line 2734.
                    return v12.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v17 = &constructor_vec_store_byte16rev(ctx, arg1, v11);
                        // Rule at src\isa\s390x\lower.isle line 2744.
                        return v17.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src\isa\s390x\lower.isle line 2755.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_byte32rev(ctx, arg1, v11);
                        // Rule at src\isa\s390x\lower.isle line 2741.
                        return v16.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src\isa\s390x\lower.isle line 2752.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_byte64rev(ctx, arg1, v11);
                        // Rule at src\isa\s390x\lower.isle line 2738.
                        return v15.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src\isa\s390x\lower.isle line 2749.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v6 = &constructor_vec_store_full_rev(ctx, I128, arg1, arg2, arg3, arg4);
        // Rule at src\isa\s390x\lower.isle line 2730.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_byte_rev", "src\\isa\\s390x\\lower.isle line 2727"
    )
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_vec_store_full_rev(ctx, arg0, arg1, arg2, arg3, arg4);
                    // Rule at src\isa\s390x\lower.isle line 2768.
                    return v11.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_elt16rev(ctx, arg1, v5);
                        // Rule at src\isa\s390x\lower.isle line 2778.
                        return v16.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src\isa\s390x\lower.isle line 2789.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_elt32rev(ctx, arg1, v5);
                        // Rule at src\isa\s390x\lower.isle line 2775.
                        return v15.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src\isa\s390x\lower.isle line 2786.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v14 = &constructor_vec_store_elt64rev(ctx, arg1, v5);
                        // Rule at src\isa\s390x\lower.isle line 2772.
                        return v14.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src\isa\s390x\lower.isle line 2783.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v6 = &constructor_vec_store(ctx, arg1, v5);
        // Rule at src\isa\s390x\lower.isle line 2764.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_elt_rev", "src\\isa\\s390x\\lower.isle line 2761"
    )
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v7 = C::u8_from_value(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v10 = &constructor_store8_imm(ctx, v8, v9);
        // Rule at src\isa\s390x\lower.isle line 2808.
        return v10.clone();
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = &constructor_lower_address(ctx, arg0, arg2, arg3);
    let v6 = &constructor_store8(ctx, v4, v5);
    // Rule at src\isa\s390x\lower.isle line 2804.
    return v6.clone();
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v12 = C::i16_from_value(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v15 = &constructor_store16_imm(ctx, v13, v14);
            // Rule at src\isa\s390x\lower.isle line 2830.
            return v15.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store16(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2822.
        return v8.clone();
    }
    let v9 = C::littleendian(ctx, arg0);
    if let Some(v10) = v9 {
        let v16 = C::i16_from_swapped_value(ctx, arg1);
        if let Some(v17) = v16 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v18 = &constructor_store16_imm(ctx, v17, v14);
            // Rule at src\isa\s390x\lower.isle line 2834.
            return v18.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v11 = &constructor_storerev16(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2826.
        return v11.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore16_impl", "src\\isa\\s390x\\lower.isle line 2819"
    )
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store32_simm16(ctx, v10, v11);
            // Rule at src\isa\s390x\lower.isle line 2852.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store32(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2848.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev32(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2856.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore32_impl", "src\\isa\\s390x\\lower.isle line 2845"
    )
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store64_simm16(ctx, v10, v11);
            // Rule at src\isa\s390x\lower.isle line 2870.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store64(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2866.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev64(ctx, v6, v7);
        // Rule at src\isa\s390x\lower.isle line 2874.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore64_impl", "src\\isa\\s390x\\lower.isle line 2863"
    )
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg3 {
        &AtomicRmwOp::Add => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v39 = &constructor_aluop_add(ctx, v38);
            let v40 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v39, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3037.
            return v40;
        }
        &AtomicRmwOp::And => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src\isa\s390x\lower.isle line 2999.
                return v32;
            }
        }
        &AtomicRmwOp::Nand => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v14 = C::mie2_enabled(ctx, arg1);
                if let Some(v15) = v14 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v17 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, arg6);
                        // Rule at src\isa\s390x\lower.isle line 2979.
                        return v17;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v19 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, v18);
                        // Rule at src\isa\s390x\lower.isle line 2982.
                        return v19;
                    }
                }
                let v20 = C::mie2_disabled(ctx, arg1);
                if let Some(v21) = v20 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v23 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, arg6);
                        let v24 = constructor_push_not_reg(ctx, arg0, v3, arg4, v23);
                        // Rule at src\isa\s390x\lower.isle line 2985.
                        return v24;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v25 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, v18);
                        let v26 = constructor_push_not_reg(ctx, arg0, v3, arg4, v25);
                        // Rule at src\isa\s390x\lower.isle line 2989.
                        return v26;
                    }
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                let v37 = constructor_atomic_rmw_body_invert(ctx, arg0, v28, arg2, arg4, v32);
                // Rule at src\isa\s390x\lower.isle line 3005.
                return v37;
            }
        }
        &AtomicRmwOp::Or => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v34 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Or,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src\isa\s390x\lower.isle line 3001.
                return v34;
            }
        }
        &AtomicRmwOp::Smax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v48 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
            let v49 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v48, arg4, arg5, arg6,
            );
            // Rule at src\isa\s390x\lower.isle line 3078.
            return v49;
        }
        &AtomicRmwOp::Smin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v45 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
            let v46 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v45, arg4, arg5, arg6,
            );
            // Rule at src\isa\s390x\lower.isle line 3075.
            return v46;
        }
        &AtomicRmwOp::Sub => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v41 = &constructor_aluop_sub(ctx, v38);
            let v42 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v41, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3039.
            return v42;
        }
        &AtomicRmwOp::Umax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v55 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
            let v56 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v55, arg4, arg5, arg6,
            );
            // Rule at src\isa\s390x\lower.isle line 3084.
            return v56;
        }
        &AtomicRmwOp::Umin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v52 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
            let v53 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v52, arg4, arg5, arg6,
            );
            // Rule at src\isa\s390x\lower.isle line 3081.
            return v53;
        }
        &AtomicRmwOp::Xchg => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v5 = C::bigendian(ctx, arg2);
                if let Some(v6) = v5 {
                    // Rule at src\isa\s390x\lower.isle line 2968.
                    return arg6;
                }
                let v11 = C::littleendian(ctx, arg2);
                if let Some(v12) = v11 {
                    let v13 = constructor_bswap_reg(ctx, v3, arg6);
                    // Rule at src\isa\s390x\lower.isle line 2971.
                    return v13;
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v30 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Insert,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src\isa\s390x\lower.isle line 2997.
                return v30;
            }
        }
        &AtomicRmwOp::Xor => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v36 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Xor,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src\isa\s390x\lower.isle line 3003.
                return v36;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body", "src\\isa\\s390x\\lower.isle line 2963"
    )
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v10 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x28, 0x18);
            // Rule at src\isa\s390x\lower.isle line 3013.
            return v10;
        }
        I16 => {
            let v11 = C::bigendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v15 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x30, 0x10);
                // Rule at src\isa\s390x\lower.isle line 3017.
                return v15;
            }
            let v16 = C::littleendian(ctx, arg2);
            if let Some(v17) = v16 {
                let v19 = constructor_bswap_reg(ctx, I32, arg6);
                let v22 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, v19, 0x30, 0x40, -0x10);
                // Rule at src\isa\s390x\lower.isle line 3021.
                return v22;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_rxsbg", "src\\isa\\s390x\\lower.isle line 3010"
    )
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v8 = C::uimm32shifted(ctx, 0xFF000000, 0x0);
            let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v8);
            // Rule at src\isa\s390x\lower.isle line 3027.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v13 = C::uimm32shifted(ctx, 0xFFFF0000, 0x0);
                let v14 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v13);
                // Rule at src\isa\s390x\lower.isle line 3030.
                return v14;
            }
            let v15 = C::littleendian(ctx, arg2);
            if let Some(v16) = v15 {
                let v18 = C::uimm32shifted(ctx, 0xFFFF, 0x0);
                let v19 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v18);
                // Rule at src\isa\s390x\lower.isle line 3033.
                return v19;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_invert", "src\\isa\\s390x\\lower.isle line 3025"
    )
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v23 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v22);
            // Rule at src\isa\s390x\lower.isle line 3060.
            return v23;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v11 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, arg6);
            // Rule at src\isa\s390x\lower.isle line 3046.
            return v11;
        }
    }
    let v12 = C::littleendian(ctx, arg2);
    if let Some(v13) = v12 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v14 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, arg5);
            let v15 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v14, arg6);
            let v16 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, v15);
            // Rule at src\isa\s390x\lower.isle line 3050.
            return v16;
        }
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v24 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, arg5);
            let v25 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v24, v22);
            let v26 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, v25);
            // Rule at src\isa\s390x\lower.isle line 3068.
            return v26;
        }
    }
    if arg1 == I8 {
        let v19 = constructor_lshl_imm(ctx, I32, arg6, 0x18);
        let v20 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v19);
        // Rule at src\isa\s390x\lower.isle line 3056.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_addsub", "src\\isa\\s390x\\lower.isle line 3043"
    )
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v34 = &constructor_cmp_rr(ctx, arg3, v33, arg6);
            let v19 = &C::invert_cond(ctx, arg4);
            let v35 = constructor_push_break_if(ctx, arg0, v34, v19);
            let v37 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                arg6,
                v33,
                0x20,
                0x30,
                0x0,
            );
            // Rule at src\isa\s390x\lower.isle line 3119.
            return v37;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v12 = &constructor_cmp_rr(ctx, arg3, arg7, arg6);
            let v13 = &C::invert_cond(ctx, arg4);
            let v14 = constructor_push_break_if(ctx, arg0, v12, v13);
            // Rule at src\isa\s390x\lower.isle line 3094.
            return arg7;
        }
    }
    let v15 = C::littleendian(ctx, arg2);
    if let Some(v16) = v15 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v17 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg6);
            let v18 = &constructor_cmp_rr(ctx, arg3, arg7, v17);
            let v19 = &C::invert_cond(ctx, arg4);
            let v20 = constructor_push_break_if(ctx, arg0, v18, v19);
            let v21 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg7);
            // Rule at src\isa\s390x\lower.isle line 3101.
            return v21;
        }
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v38 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, arg6);
            let v39 = &constructor_cmp_rr(ctx, arg3, v33, v38);
            let v40 = &C::invert_cond(ctx, arg4);
            let v41 = constructor_push_break_if(ctx, arg0, v39, v40);
            let v42 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                v38,
                v33,
                0x20,
                0x30,
                0x0,
            );
            let v43 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, v42);
            // Rule at src\isa\s390x\lower.isle line 3126.
            return v43;
        }
    }
    if arg1 == I8 {
        let v24 = constructor_lshl_imm(ctx, I32, arg7, 0x18);
        let v25 = &constructor_cmp_rr(ctx, arg3, v24, arg6);
        let v19 = &C::invert_cond(ctx, arg4);
        let v26 = constructor_push_break_if(ctx, arg0, v25, v19);
        let v31 = constructor_push_rxsbg(
            ctx,
            arg0,
            &RxSBGOp::Insert,
            arg5,
            arg6,
            v24,
            0x20,
            0x28,
            0x0,
        );
        // Rule at src\isa\s390x\lower.isle line 3113.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_minmax", "src\\isa\\s390x\\lower.isle line 3089"
    )
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v11 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x28, 0x18);
            let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
            let v14 = constructor_push_break_if(ctx, arg0, v11, v13);
            let v16 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg3,
                arg4,
                arg6,
                0x20,
                0x28,
                0x18,
            );
            // Rule at src\isa\s390x\lower.isle line 3178.
            return v16;
        }
        I16 => {
            let v17 = C::bigendian(ctx, arg2);
            if let Some(v18) = v17 {
                let v21 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x30, 0x10);
                let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v22 = constructor_push_break_if(ctx, arg0, v21, v13);
                let v23 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    arg6,
                    0x20,
                    0x30,
                    0x10,
                );
                // Rule at src\isa\s390x\lower.isle line 3185.
                return v23;
            }
            let v24 = C::littleendian(ctx, arg2);
            if let Some(v25) = v24 {
                let v27 = constructor_bswap_reg(ctx, I32, arg5);
                let v28 = constructor_bswap_reg(ctx, I32, arg6);
                let v31 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, v27, 0x30, 0x40, -0x10);
                let v32 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v33 = constructor_push_break_if(ctx, arg0, v31, v32);
                let v34 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    v28,
                    0x30,
                    0x40,
                    -0x10,
                );
                // Rule at src\isa\s390x\lower.isle line 3196.
                return v34;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_body", "src\\isa\\s390x\\lower.isle line 3171"
    )
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = &constructor_fence_impl(ctx);
    let v3 = constructor_side_effect(ctx, v2);
    // Rule at src\isa\s390x\lower.isle line 3242.
    return v3;
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> ProducesBool {
    match arg1 {
        &IntCC::Equal => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v23 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                let v24 = &constructor_bool(ctx, v21, v23);
                // Rule at src\isa\s390x\lower.isle line 3388.
                return v24.clone();
            }
        }
        &IntCC::NotEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v26 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                let v27 = &constructor_bool(ctx, v21, v26);
                // Rule at src\isa\s390x\lower.isle line 3391.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                // Rule at src\isa\s390x\lower.isle line 3397.
                return v28.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                let v32 = &constructor_invert_bool(ctx, v31);
                // Rule at src\isa\s390x\lower.isle line 3401.
                return v32.clone();
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                // Rule at src\isa\s390x\lower.isle line 3399.
                return v31.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                let v33 = &constructor_invert_bool(ctx, v28);
                // Rule at src\isa\s390x\lower.isle line 3403.
                return v33.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                // Rule at src\isa\s390x\lower.isle line 3408.
                return v34.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                let v36 = &constructor_invert_bool(ctx, v35);
                // Rule at src\isa\s390x\lower.isle line 3412.
                return v36.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                // Rule at src\isa\s390x\lower.isle line 3410.
                return v35.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                let v37 = &constructor_invert_bool(ctx, v34);
                // Rule at src\isa\s390x\lower.isle line 3414.
                return v37.clone();
            }
        }
        _ => {}
    }
    let v5 = C::value_type(ctx, arg2);
    let v6 = C::fits_in_64(ctx, v5);
    if let Some(v7) = v6 {
        let v2 = C::signed(ctx, arg1);
        if let Some(v3) = v2 {
            let v9 = &constructor_icmps_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v11 = &constructor_bool(ctx, v9, v10);
            // Rule at src\isa\s390x\lower.isle line 3309.
            return v11.clone();
        }
        let v12 = C::unsigned(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_icmpu_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v15 = &constructor_bool(ctx, v14, v10);
            // Rule at src\isa\s390x\lower.isle line 3312.
            return v15.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_val", "src\\isa\\s390x\\lower.isle line 3306"
    )
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v28 = C::sinkable_inst(ctx, arg2);
            if let Some(v29) = v28 {
                let v30 = &C::inst_data(ctx, v29);
                if let &InstructionData::Load {
                    opcode: ref v31,
                    arg: v32,
                    flags: v33,
                    offset: v34,
                } = v30
                {
                    match v31 {
                        &Opcode::Load => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v25 = C::value_type(ctx, arg2);
                                if v25 == I16 {
                                    let v6 = constructor_ty_ext32(ctx, v4);
                                    let v7 = constructor_put_in_reg_sext32(ctx, arg1);
                                    let v39 = &constructor_sink_load(ctx, v29);
                                    let v40 = &constructor_icmps_mem_sext16(ctx, v6, v7, v39);
                                    // Rule at src\isa\s390x\lower.isle line 3338.
                                    return v40.clone();
                                }
                                let v26 = C::ty_32_or_64(ctx, v25);
                                if let Some(v27) = v26 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v37 = &constructor_sink_load(ctx, v29);
                                    let v38 = &constructor_icmps_mem(ctx, v4, v16, v37);
                                    // Rule at src\isa\s390x\lower.isle line 3334.
                                    return v38.clone();
                                }
                            }
                        }
                        &Opcode::Sload16 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v41 = &constructor_sink_sload16(ctx, v29);
                                let v42 = &constructor_icmps_mem_sext16(ctx, v4, v16, v41);
                                // Rule at src\isa\s390x\lower.isle line 3342.
                                return v42.clone();
                            }
                        }
                        &Opcode::Sload32 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v43 = &constructor_sink_sload32(ctx, v29);
                                let v44 = &constructor_icmps_mem_sext32(ctx, v4, v16, v43);
                                // Rule at src\isa\s390x\lower.isle line 3344.
                                return v44.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Sextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmps_reg_sext32(ctx, v4, v16, v17);
                        // Rule at src\isa\s390x\lower.isle line 3324.
                        return v18.clone();
                    }
                }
            }
        }
        let v19 = C::i16_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v21 = &constructor_icmps_simm16(ctx, v6, v7, v20);
            // Rule at src\isa\s390x\lower.isle line 3328.
            return v21.clone();
        }
        let v22 = C::i32_from_value(ctx, arg2);
        if let Some(v23) = v22 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v24 = &constructor_icmps_simm32(ctx, v6, v7, v23);
            // Rule at src\isa\s390x\lower.isle line 3330.
            return v24.clone();
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_sext32(ctx, arg1);
        let v8 = constructor_put_in_reg_sext32(ctx, arg2);
        let v9 = &constructor_icmps_reg(ctx, v6, v7, v8);
        // Rule at src\isa\s390x\lower.isle line 3320.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmps_val", "src\\isa\\s390x\\lower.isle line 3317"
    )
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v25 = C::sinkable_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::Load {
                    opcode: ref v28,
                    arg: v29,
                    flags: v30,
                    offset: v31,
                } = v27
                {
                    match v28 {
                        &Opcode::Load => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v22 = C::value_type(ctx, arg2);
                                let v23 = C::ty_32_or_64(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v34 = &constructor_sink_load(ctx, v26);
                                    let v35 = &constructor_icmpu_mem(ctx, v4, v16, v34);
                                    // Rule at src\isa\s390x\lower.isle line 3364.
                                    return v35.clone();
                                }
                                if v22 == I16 {
                                    let v36 = constructor_load_sym(ctx, v26);
                                    if let Some(v37) = v36 {
                                        let v6 = constructor_ty_ext32(ctx, v4);
                                        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
                                        let v38 = &constructor_sink_load(ctx, v37);
                                        let v39 = &constructor_icmpu_mem_zext16(ctx, v6, v7, v38);
                                        // Rule at src\isa\s390x\lower.isle line 3370.
                                        return v39.clone();
                                    }
                                }
                            }
                        }
                        &Opcode::Uload16 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v40 = constructor_uload16_sym(ctx, v26);
                                if let Some(v41) = v40 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v42 = &constructor_sink_uload16(ctx, v41);
                                    let v43 = &constructor_icmpu_mem_zext16(ctx, v4, v16, v42);
                                    // Rule at src\isa\s390x\lower.isle line 3378.
                                    return v43.clone();
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v44 = &constructor_sink_uload32(ctx, v26);
                                let v45 = &constructor_icmpu_mem_zext32(ctx, v4, v16, v44);
                                // Rule at src\isa\s390x\lower.isle line 3382.
                                return v45.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v19 = C::u32_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_zext32(ctx, arg1);
            let v21 = &constructor_icmpu_uimm32(ctx, v6, v7, v20);
            // Rule at src\isa\s390x\lower.isle line 3360.
            return v21.clone();
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Uextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmpu_reg_zext32(ctx, v4, v16, v17);
                        // Rule at src\isa\s390x\lower.isle line 3356.
                        return v18.clone();
                    }
                }
            }
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
        let v8 = constructor_put_in_reg_zext32(ctx, arg2);
        let v9 = &constructor_icmpu_reg(ctx, v6, v7, v8);
        // Rule at src\isa\s390x\lower.isle line 3352.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmpu_val", "src\\isa\\s390x\\lower.isle line 3349"
    )
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> ProducesBool {
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = C::put_in_reg(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v6 = &constructor_fcmp_reg(ctx, v2, v4, v5);
    let v7 = &C::floatcc_as_cond(ctx, arg0);
    let v8 = &constructor_bool(ctx, v6, v7);
    // Rule at src\isa\s390x\lower.isle line 3452.
    return v8.clone();
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src\isa\s390x\lower.isle line 3535.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src\isa\s390x\lower.isle line 3541.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src\isa\s390x\lower.isle line 3547.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src\isa\s390x\lower.isle line 3553.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src\isa\s390x\lower.isle line 3559.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src\isa\s390x\lower.isle line 3538.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src\isa\s390x\lower.isle line 3562.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src\isa\s390x\lower.isle line 3556.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src\isa\s390x\lower.isle line 3550.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src\isa\s390x\lower.isle line 3544.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src\isa\s390x\lower.isle line 3503.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src\isa\s390x\lower.isle line 3506.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src\isa\s390x\lower.isle line 3509.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src\isa\s390x\lower.isle line 3518.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src\isa\s390x\lower.isle line 3515.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src\isa\s390x\lower.isle line 3512.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src\isa\s390x\lower.isle line 3521.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src\isa\s390x\lower.isle line 3530.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src\isa\s390x\lower.isle line 3527.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src\isa\s390x\lower.isle line 3524.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src\isa\s390x\lower.isle line 3498.
    return v8.clone();
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src\isa\s390x\lower.isle line 3613.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src\isa\s390x\lower.isle line 3619.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src\isa\s390x\lower.isle line 3625.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src\isa\s390x\lower.isle line 3631.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src\isa\s390x\lower.isle line 3637.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src\isa\s390x\lower.isle line 3616.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src\isa\s390x\lower.isle line 3640.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src\isa\s390x\lower.isle line 3634.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src\isa\s390x\lower.isle line 3628.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src\isa\s390x\lower.isle line 3622.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src\isa\s390x\lower.isle line 3581.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src\isa\s390x\lower.isle line 3584.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src\isa\s390x\lower.isle line 3587.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src\isa\s390x\lower.isle line 3596.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src\isa\s390x\lower.isle line 3593.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src\isa\s390x\lower.isle line 3590.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src\isa\s390x\lower.isle line 3599.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src\isa\s390x\lower.isle line 3608.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src\isa\s390x\lower.isle line 3605.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src\isa\s390x\lower.isle line 3602.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src\isa\s390x\lower.isle line 3576.
    return v8.clone();
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v12,
                args: ref v13,
                cond: ref v14,
            } => {
                if let &Opcode::Fcmp = v12 {
                    let v15 = C::unpack_value_array_2(ctx, v13);
                    let v18 = &constructor_fcmp_val(ctx, v14, v15.0, v15.1);
                    // Rule at src\isa\s390x\lower.isle line 3714.
                    return v18.clone();
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v7 = C::unpack_value_array_2(ctx, v5);
                    let v11 = &constructor_icmp_val(ctx, false, v6, v7.0, v7.1);
                    // Rule at src\isa\s390x\lower.isle line 3713.
                    return v11.clone();
                }
            }
            _ => {}
        }
    }
    let v19 = C::value_type(ctx, arg0);
    let v20 = C::gpr32_ty(ctx, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_put_in_reg_sext32(ctx, arg0);
        let v25 = &constructor_icmps_simm16(ctx, I32, v23, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v28 = &constructor_bool(ctx, v25, v27);
        // Rule at src\isa\s390x\lower.isle line 3715.
        return v28.clone();
    }
    let v29 = C::gpr64_ty(ctx, v19);
    if let Some(v30) = v29 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v33 = &constructor_icmps_simm16(ctx, I64, v32, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v34 = &constructor_bool(ctx, v33, v27);
        // Rule at src\isa\s390x\lower.isle line 3718.
        return v34.clone();
    }
    let v35 = C::vr128_ty(ctx, v19);
    if let Some(v36) = v35 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v39 = constructor_vec_imm(ctx, I64X2, 0x0);
        let v40 = &constructor_vec_cmpeqs(ctx, I64X2, v32, v39);
        let v42 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
        let v43 = &constructor_bool(ctx, v40, v42);
        // Rule at src\isa\s390x\lower.isle line 3721.
        return v43.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "value_nonzero", "src\\isa\\s390x\\lower.isle line 3712"
    )
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = &C::abi_call_stack_args(ctx, arg0);
    let v5 = constructor_lower_call_args_buffer(ctx, arg0, v4, arg1, arg2);
    let v6 = constructor_lower_call_args_slots(ctx, arg0, v3, v4, arg1, arg2);
    let v7 = constructor_lower_call_ret_arg(ctx, arg0, v3, v4);
    let v8 = &C::args_builder_finish(ctx, v3);
    // Rule at src\isa\s390x\lower.isle line 3927.
    return v8.clone();
}

// Generated as internal constructor for term lower_call_rets.
pub fn constructor_lower_call_rets<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallRetList,
    arg2: Range,
    arg3: &InstOutputBuilder,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_builder_finish(ctx, arg3);
            // Rule at src\isa\s390x\lower.isle line 3937.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v9 = &C::abi_call_stack_rets(ctx, arg0);
            let v10 = &C::abi_get_ret(ctx, arg0, v6);
            let v11 = constructor_copy_from_arg(ctx, arg1, v8, v9, v10);
            let v12 = C::output_builder_push(ctx, arg3, v11);
            let v13 = constructor_lower_call_rets(ctx, arg0, arg1, v7, arg3);
            // Rule at src\isa\s390x\lower.isle line 3938.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_rets", "src\\isa\\s390x\\lower.isle line 3936"
    )
}

// Generated as internal constructor for term lower_return_call_args.
pub fn constructor_lower_return_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = &C::abi_return_call_stack_args(ctx, arg0);
    let v5 = constructor_lower_call_args_buffer(ctx, arg0, v4, arg1, arg2);
    let v6 = constructor_lower_call_args_slots(ctx, arg0, v3, v4, arg1, arg2);
    let v7 = constructor_lower_return_call_ret_arg(ctx, arg0, v3, v4);
    let v8 = &C::args_builder_finish(ctx, v3);
    // Rule at src\isa\s390x\lower.isle line 3970.
    return v8.clone();
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &MemArg,
    arg2: Range,
    arg3: ValueSlice,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_none(ctx);
            // Rule at src\isa\s390x\lower.isle line 3983.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_get_arg(ctx, arg0, v6);
            let v9 = C::value_slice_get(ctx, arg3, v6);
            let v10 = constructor_copy_to_buffer(ctx, arg1, v8, v9);
            let v11 = constructor_lower_call_args_buffer(ctx, arg0, arg1, v7, arg3);
            // Rule at src\isa\s390x\lower.isle line 3984.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_buffer", "src\\isa\\s390x\\lower.isle line 3982"
    )
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
    arg3: Range,
    arg4: ValueSlice,
) -> InstOutput {
    let v4 = &C::range_view(ctx, arg3);
    match v4 {
        &RangeView::Empty => {
            let v6 = C::output_none(ctx);
            // Rule at src\isa\s390x\lower.isle line 3991.
            return v6;
        }
        &RangeView::NonEmpty {
            index: v7,
            rest: v8,
        } => {
            let v9 = &C::abi_lane_order(ctx, arg0);
            let v10 = &C::abi_get_arg(ctx, arg0, v7);
            let v11 = C::value_slice_get(ctx, arg4, v7);
            let v12 = constructor_copy_to_arg(ctx, arg1, v9, arg2, v10, v11);
            let v13 = constructor_lower_call_args_slots(ctx, arg0, arg1, arg2, v8, arg4);
            // Rule at src\isa\s390x\lower.isle line 3992.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_slots", "src\\isa\\s390x\\lower.isle line 3990"
    )
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
) -> InstOutput {
    let v6 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = &C::abi_arg_only_slot(ctx, v7);
        if let Some(v9) = v8 {
            let v10 = &C::abi_lane_order(ctx, arg0);
            let v11 = &C::abi_call_stack_rets(ctx, arg0);
            let v12 = constructor_load_addr(ctx, v11);
            let v13 = constructor_copy_reg_to_arg_slot(ctx, arg1, v10, arg2, v9, v12);
            // Rule at src\isa\s390x\lower.isle line 4001.
            return v13;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::output_none(ctx);
        // Rule at src\isa\s390x\lower.isle line 4000.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_ret_arg", "src\\isa\\s390x\\lower.isle line 3999"
    )
}

// Generated as internal constructor for term lower_return_call_ret_arg.
pub fn constructor_lower_return_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
) -> InstOutput {
    let v6 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = &C::abi_arg_only_slot(ctx, v7);
        if let Some(v9) = v8 {
            let v10 = &C::abi_lane_order(ctx, arg0);
            let v11 = C::abi_unwrap_ret_area_ptr(ctx);
            let v12 = constructor_copy_reg_to_arg_slot(ctx, arg1, v10, arg2, v9, v11);
            // Rule at src\isa\s390x\lower.isle line 4008.
            return v12;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::output_none(ctx);
        // Rule at src\isa\s390x\lower.isle line 4007.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_return_call_ret_arg", "src\\isa\\s390x\\lower.isle line 4006"
    )
}
