// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\aarch64\inst.isle
// - src\isa\aarch64\inst_neon.isle
// - src\isa\aarch64\lower.isle
// - src\isa\aarch64\lower_dynamic_neon.isle
// - D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64)
        -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_size_from_type(&mut self, arg0: Type) -> Option<u16>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn targets_jt_space(&mut self, arg0: &BoxVecMachLabel) -> CodeOffset;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn ashr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn simm7_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<SImm7Scaled>;
    fn uimm12_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<UImm12Scaled>;
    fn simm9_from_i64(&mut self, arg0: i64) -> Option<SImm9>;
    fn u64_low32_bits_unset(&mut self, arg0: u64) -> Option<u64>;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn asimd_mov_mod_imm_zero(&mut self, arg0: &ScalarSize) -> ASIMDMovModImm;
    fn asimd_mov_mod_imm_from_u64(
        &mut self,
        arg0: u64,
        arg1: &ScalarSize,
    ) -> Option<ASIMDMovModImm>;
    fn asimd_fp_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDFPModImm>;
    fn shuffle_dup8_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup16_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup32_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup64_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn vec_extract_imm4_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn shift_masked_imm(&mut self, arg0: Type, arg1: u64) -> u8;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn test_and_compare_bit_const(&mut self, arg0: Type, arg1: u64) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src\prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 354.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 396.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 415.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 423.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\aarch64\inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        lane: u8,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecFmlaElem {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
        idx: u8,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TestBitAndBranch {
        kind: TestBitAndBranchKind,
        taken: BranchTarget,
        not_taken: BranchTarget,
        rn: Reg,
        bit: u8,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Adrp {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        default: MachLabel,
        targets: BoxVecMachLabel,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Paci {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: BoxExternalName,
        rd: WritableReg,
        tmp: WritableReg,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src\isa\aarch64\inst.isle line 986.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src\isa\aarch64\inst.isle line 1024.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
    UMAddL,
    SMAddL,
}

/// Internal type MoveWideOp: defined at src\isa\aarch64\inst.isle line 1036.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src\isa\aarch64\inst.isle line 1076.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src\isa\aarch64\inst.isle line 1093.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
    },
    SPOffset {
        off: i64,
    },
    FPOffset {
        off: i64,
    },
    Const {
        addr: VCodeConstant,
    },
    IncomingArg {
        off: i64,
    },
    SlotOffset {
        off: i64,
    },
}

/// Internal type PairAMode: defined at src\isa\aarch64\inst.isle line 1195.
#[derive(Clone, Debug)]
pub enum PairAMode {
    SignedOffset { reg: Reg, simm7: SImm7Scaled },
    SPPreIndexed { simm7: SImm7Scaled },
    SPPostIndexed { simm7: SImm7Scaled },
}

/// Internal type TestBitAndBranchKind: defined at src\isa\aarch64\inst.isle line 1215.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum TestBitAndBranchKind {
    Z,
    NZ,
}

/// Internal type FPUOp1: defined at src\isa\aarch64\inst.isle line 1311.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src\isa\aarch64\inst.isle line 1321.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src\isa\aarch64\inst.isle line 1332.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
    MSub,
}

/// Internal type FpuToIntOp: defined at src\isa\aarch64\inst.isle line 1341.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src\isa\aarch64\inst.isle line 1354.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src\isa\aarch64\inst.isle line 1368.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src\isa\aarch64\inst.isle line 1381.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src\isa\aarch64\inst.isle line 1390.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Zip2,
    Sqrdmulh,
    Uzp1,
    Uzp2,
    Trn1,
    Trn2,
}

/// Internal type VecALUModOp: defined at src\isa\aarch64\inst.isle line 1477.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
    Fmls,
}

/// Internal type VecMisc2: defined at src\isa\aarch64\inst.isle line 1488.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev16,
    Rev32,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src\isa\aarch64\inst.isle line 1549.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src\isa\aarch64\inst.isle line 1564.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src\isa\aarch64\inst.isle line 1578.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src\isa\aarch64\inst.isle line 1590.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src\isa\aarch64\inst.isle line 1599.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src\isa\aarch64\inst.isle line 1607.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src\isa\aarch64\inst.isle line 1618.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src\isa\aarch64\inst.isle line 1627.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src\isa\aarch64\inst.isle line 1638.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src\isa\aarch64\inst.isle line 1645.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src\isa\aarch64\inst.isle line 1660.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src\isa\aarch64\inst.isle line 1676.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    ASP,
    BSP,
    AZ,
    BZ,
}

/// Internal type BranchTargetType: defined at src\isa\aarch64\inst.isle line 1689.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ImmExtend: defined at src\isa\aarch64\inst.isle line 2913.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src\isa\aarch64\inst.isle line 3824.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC { flags: ProducesFlags, cc: IntCC },
}

/// Internal type IsFneg: defined at src\isa\aarch64\lower.isle line 516.
#[derive(Clone, Debug)]
pub enum IsFneg {
    Result { negate: u64, value: Value },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src\prelude.isle line 408.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        R32 => {
            // Rule at src\prelude.isle line 415.
            return true;
        }
        R64 => {
            // Rule at src\prelude.isle line 416.
            return true;
        }
        _ => {}
    }
    // Rule at src\prelude.isle line 417.
    return false;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src\prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src\prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src\\prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src\\prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 364.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 366.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 369.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src\\prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 377.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 382.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 384.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 386.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src\\prelude_lower.isle line 381"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 411.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src\\prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 441.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 442.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src\\prelude_lower.isle line 440"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src\prelude_lower.isle line 447.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src\prelude_lower.isle line 449.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src\\prelude_lower.isle line 446"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 462.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 456.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src\\prelude_lower.isle line 455"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 493.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 499.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 511.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 527.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 534.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 547.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 487.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 479.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src\\prelude_lower.isle line 477"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src\prelude_lower.isle line 565.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 572.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src\prelude_lower.isle line 583.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 588.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 593.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 598.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 603.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src\\prelude_lower.isle line 581"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 612.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 620.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src\prelude_lower.isle line 629.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src\prelude_lower.isle line 637.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src\prelude_lower.isle line 646.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 706.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 714.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src\prelude_lower.isle line 723.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 731.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 740.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 659.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 667.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src\prelude_lower.isle line 676.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 684.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 693.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 753.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 761.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 770.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 778.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 787.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 799.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 807.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 824.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 816.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 832.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 841.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src\\prelude_lower.isle line 609"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1045.
    return v2;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\aarch64\inst.isle line 1219.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\aarch64\inst.isle line 1220.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size", "src\\isa\\aarch64\\inst.isle line 1218"
    )
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src\isa\aarch64\inst.isle line 1232.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src\isa\aarch64\inst.isle line 1233.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src\isa\aarch64\inst.isle line 1234.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src\isa\aarch64\inst.isle line 1235.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src\isa\aarch64\inst.isle line 1236.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src\isa\aarch64\inst.isle line 1238.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src\isa\aarch64\inst.isle line 1239.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "scalar_size", "src\\isa\\aarch64\\inst.isle line 1230"
    )
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                // Rule at src\isa\aarch64\inst.isle line 1243.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src\isa\aarch64\inst.isle line 1244.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src\isa\aarch64\inst.isle line 1245.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src\isa\aarch64\inst.isle line 1246.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8 => {
                // Rule at src\isa\aarch64\inst.isle line 1247.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src\isa\aarch64\inst.isle line 1248.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src\isa\aarch64\inst.isle line 1249.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src\isa\aarch64\inst.isle line 1250.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_size", "src\\isa\\aarch64\\inst.isle line 1242"
    )
}

// Generated as internal constructor for term vector_lane_size.
pub fn constructor_vector_lane_size<C: Context>(ctx: &mut C, arg0: &VectorSize) -> ScalarSize {
    match arg0 {
        &VectorSize::Size8x8 => {
            // Rule at src\isa\aarch64\inst.isle line 1255.
            return ScalarSize::Size8;
        }
        &VectorSize::Size8x16 => {
            // Rule at src\isa\aarch64\inst.isle line 1254.
            return ScalarSize::Size8;
        }
        &VectorSize::Size16x4 => {
            // Rule at src\isa\aarch64\inst.isle line 1257.
            return ScalarSize::Size16;
        }
        &VectorSize::Size16x8 => {
            // Rule at src\isa\aarch64\inst.isle line 1256.
            return ScalarSize::Size16;
        }
        &VectorSize::Size32x2 => {
            // Rule at src\isa\aarch64\inst.isle line 1259.
            return ScalarSize::Size32;
        }
        &VectorSize::Size32x4 => {
            // Rule at src\isa\aarch64\inst.isle line 1258.
            return ScalarSize::Size32;
        }
        &VectorSize::Size64x2 => {
            // Rule at src\isa\aarch64\inst.isle line 1260.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_lane_size", "src\\isa\\aarch64\\inst.isle line 1253"
    )
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                match v2.1 {
                    0x8 => {
                        // Rule at src\isa\aarch64\inst.isle line 1295.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src\isa\aarch64\inst.isle line 1296.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v2.1 {
                    0x4 => {
                        // Rule at src\isa\aarch64\inst.isle line 1297.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src\isa\aarch64\inst.isle line 1298.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v2.1 {
                    0x2 => {
                        // Rule at src\isa\aarch64\inst.isle line 1299.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src\isa\aarch64\inst.isle line 1300.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\aarch64\inst.isle line 1301.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8 => {
                match v13.1 {
                    0x8 => {
                        // Rule at src\isa\aarch64\inst.isle line 1302.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src\isa\aarch64\inst.isle line 1303.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v13.1 {
                    0x4 => {
                        // Rule at src\isa\aarch64\inst.isle line 1304.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src\isa\aarch64\inst.isle line 1305.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v13.1 {
                    0x2 => {
                        // Rule at src\isa\aarch64\inst.isle line 1306.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src\isa\aarch64\inst.isle line 1307.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v13.1 == 0x2 {
                    // Rule at src\isa\aarch64\inst.isle line 1308.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_size", "src\\isa\\aarch64\\inst.isle line 1294"
    )
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = Some(v13);
                        // Rule at src\isa\aarch64\inst.isle line 1806.
                        return v14;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src\isa\aarch64\inst.isle line 1852.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 1860.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 1867.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 1874.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1881.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1888.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1895.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1902.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 1909.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 1917.
    return v9;
}

// Generated as internal constructor for term vec_fmla_elem.
pub fn constructor_vec_fmla_elem<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
    arg5: u8,
) -> Reg {
    let v7 = C::temp_writable_reg(ctx, I8X16);
    let v8 = MInst::VecFmlaElem {
        alu_op: arg0.clone(),
        rd: v7,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
        idx: arg5,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v7);
    // Rule at src\isa\aarch64\inst.isle line 1925.
    return v10;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 1931.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 1937.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1944.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 1951.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 1958.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 1964.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1971.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 1978.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupFromFpu {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        lane: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 1985.
    return v7;
}

// Generated as internal constructor for term vec_dup_imm.
pub fn constructor_vec_dup_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDMovModImm,
    arg1: bool,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupImm {
        rd: v4,
        imm: arg0,
        invert: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 1992.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 1999.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2006.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src\isa\aarch64\inst.isle line 2014.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift", "src\\isa\\aarch64\\inst.isle line 2013"
    )
}

// Generated as internal constructor for term cmp_rr_shift_asr.
pub fn constructor_cmp_rr_shift_asr<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::ashr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src\isa\aarch64\inst.isle line 2023.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift_asr", "src\\isa\\aarch64\\inst.isle line 2022"
    )
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2031.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src\isa\aarch64\inst.isle line 2039.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2046.
    return v10;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2053.
    return v9;
}

// Generated as internal constructor for term alu_rrr_with_flags_chained.
pub fn constructor_alu_rrr_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ConsumesAndProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ConsumesAndProducesFlags::ReturnsReg {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2061.
    return v9;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(ctx: &mut C, arg0: &BitOp, arg1: Type, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2069.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2076.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2084.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2092.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2101.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src\isa\aarch64\inst.isle line 2108.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src\isa\aarch64\inst.isle line 2114.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src\isa\aarch64\inst.isle line 2120.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2126.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src\isa\aarch64\inst.isle line 2130.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\aarch64\inst.isle line 2137.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2145.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2152.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2158.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2165.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2174.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2183.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2190.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2197.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2204.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2212.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2219.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v5 = C::temp_writable_reg(ctx, F32);
            let v6 = MInst::FpuCSel32 {
                rd: v5,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v7 = C::writable_reg_to_reg(ctx, v5);
            let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v6,
                result: v7,
            };
            // Rule at src\isa\aarch64\inst.isle line 2227.
            return v8;
        }
        F64 => {
            let v10 = C::temp_writable_reg(ctx, F64);
            let v11 = MInst::FpuCSel64 {
                rd: v10,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v12 = C::writable_reg_to_reg(ctx, v10);
            let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v11,
                result: v12,
            };
            // Rule at src\isa\aarch64\inst.isle line 2233.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_csel", "src\\isa\\aarch64\\inst.isle line 2226"
    )
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2241.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(ctx: &mut C, arg0: &FpuRoundMode, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2249.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 { rd: v10, rn: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src\isa\aarch64\inst.isle line 2260.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 { rd: v3, rn: arg1 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2256.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2267.
    return v6;
}

// Generated as internal constructor for term fpu_move_fp_imm.
pub fn constructor_fpu_move_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMoveFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2274.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2281.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2288.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2295.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2302.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2308.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2315.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2322.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 2329.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: u8) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2336.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 2343.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src\isa\aarch64\inst.isle line 2350.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src\isa\aarch64\inst.isle line 2358.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2372.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2380.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2387.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src\isa\aarch64\inst.isle line 2393.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\aarch64\inst.isle line 2403.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    let v8 = &constructor_produces_flags_concat(ctx, arg5, &v7);
    // Rule at src\isa\aarch64\inst.isle line 2413.
    return v8.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src\isa\aarch64\inst.isle line 2418.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2428.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2431.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2434.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2437.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2440.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2443.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2448.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2451.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2454.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2457.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2460.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::value_regs_get(ctx, arg1, 0x0);
    let v7 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src\isa\aarch64\inst.isle line 2463.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2483.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2488.
    return v5;
}

// Generated as internal constructor for term umaddl.
pub fn constructor_umaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::UMAddL, I32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2492.
    return v5;
}

// Generated as internal constructor for term smaddl.
pub fn constructor_smaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::SMAddL, I32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2496.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2500.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2504.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2508.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2512.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2516.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2520.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2524.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2528.
    return v3;
}

// Generated as internal constructor for term rev16.
pub fn constructor_rev16<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev16, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2532.
    return v3;
}

// Generated as internal constructor for term rev32.
pub fn constructor_rev32<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev32, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2536.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2540.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2544.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2548.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2552.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2556.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2560.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2564.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2568.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2572.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src\isa\aarch64\inst.isle line 2576.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Csdb };
    // Rule at src\isa\aarch64\inst.isle line 2581.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Brk };
    // Rule at src\isa\aarch64\inst.isle line 2586.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2591.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2595.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2599.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0);
    // Rule at src\isa\aarch64\inst.isle line 2604.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2610.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2614.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src\isa\aarch64\inst.isle line 2619.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src\isa\aarch64\inst.isle line 2622.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src\isa\aarch64\inst.isle line 2625.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src\isa\aarch64\inst.isle line 2628.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2632.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2636.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2640.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2644.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2648.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2652.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2656.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2660.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2663.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2667.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2670.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2674.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2677.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2681.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2685.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2689.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2694.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2697.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2702.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2705.
    return v4;
}

// Generated as internal constructor for term orr_shift.
pub fn constructor_orr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Orr, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 2708.
    return v5;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2711.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2716.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2719.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2722.
    return v4;
}

// Generated as internal constructor for term eor.
pub fn constructor_eor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Eor, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2726.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2729.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2734.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2737.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2741.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2745.
    return v4;
}

// Generated as internal constructor for term ushl_vec_imm.
pub fn constructor_ushl_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Shl, arg1, arg0, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2749.
    return v4;
}

// Generated as internal constructor for term ushr_vec_imm.
pub fn constructor_ushr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, arg1, arg0, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2753.
    return v4;
}

// Generated as internal constructor for term sshr_vec_imm.
pub fn constructor_sshr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Sshr, arg1, arg0, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2757.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2762.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2765.
    return v4;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2770.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2775.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2780.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2785.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2788.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2791.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 2796.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 2801.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src\isa\aarch64\inst.isle line 2806.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\aarch64\inst.isle line 2812.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2818.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2823.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2828.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2833.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2838.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2843.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2848.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2853.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2858.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 2863.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src\isa\aarch64\inst.isle line 2868.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2877.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2880.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2883.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2886.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2889.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2892.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 2895.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src\isa\aarch64\inst.isle line 2898.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 2904.
    return v7;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                let v10 = C::add_range_fact(ctx, v8, 0x40, arg2, arg2);
                // Rule at src\isa\aarch64\inst.isle line 2932.
                return v10;
            }
            let v11 = C::ty_32_or_64(ctx, v2);
            if let Some(v12) = v11 {
                let v13 = C::move_wide_const_from_inverted_u64(ctx, v12, arg2);
                if let Some(v14) = v13 {
                    let v15 = &constructor_operand_size(ctx, v12);
                    let v16 = constructor_movn(ctx, v14, v15);
                    let v17 = C::add_range_fact(ctx, v16, 0x40, arg2, arg2);
                    // Rule at src\isa\aarch64\inst.isle line 2937.
                    return v17;
                }
            }
            let v18 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v19) = v18 {
                let v20 = C::imm_size_from_type(ctx, v2);
                if let Some(v21) = v20 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = constructor_orr_imm(ctx, v2, v22, v19);
                    let v24 = C::add_range_fact(ctx, v23, v21, arg2, arg2);
                    // Rule at src\isa\aarch64\inst.isle line 2945.
                    return v24;
                }
            }
        }
        let v25 = C::load_constant64_full(ctx, v2, arg1, arg2);
        // Rule at src\isa\aarch64\inst.isle line 2956.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src\\isa\\aarch64\\inst.isle line 2928"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 2967.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 2968.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x20);
        // Rule at src\isa\aarch64\inst.isle line 2963.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src\\isa\\aarch64\\inst.isle line 2962"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 2976.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src\isa\aarch64\inst.isle line 2977.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x20);
        // Rule at src\isa\aarch64\inst.isle line 2972.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src\\isa\\aarch64\\inst.isle line 2971"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x40);
        // Rule at src\isa\aarch64\inst.isle line 2981.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\aarch64\inst.isle line 2985.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src\\isa\\aarch64\\inst.isle line 2980"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x40);
        // Rule at src\isa\aarch64\inst.isle line 2989.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src\isa\aarch64\inst.isle line 2993.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src\\isa\\aarch64\\inst.isle line 2988"
    )
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::cond_br_zero(ctx, arg0);
    let v2 = &C::trap_code_division_by_zero(ctx);
    let v3 = MInst::TrapIf {
        kind: v1,
        trap_code: v2.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src\isa\aarch64\inst.isle line 2998.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\aarch64\inst.isle line 3003.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src\isa\aarch64\inst.isle line 3004.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "size_from_ty", "src\\isa\\aarch64\\inst.isle line 3002"
    )
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v7 = C::u8_into_imm12(ctx, 0x1);
    let v8 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v4.clone(),
        rd: v5,
        rn: arg2,
        imm12: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = &constructor_size_from_ty(ctx, arg0);
    let v11 = C::u8_into_uimm5(ctx, 0x1);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = MInst::CCmpImm {
        size: v10.clone(),
        rn: arg1,
        imm: v11,
        nzcv: v13,
        cond: Cond::Eq,
    };
    let v16 = C::emit(ctx, &v15);
    let v18 = C::cond_br_cond(ctx, &Cond::Vs);
    let v19 = &C::trap_code_integer_overflow(ctx);
    let v20 = MInst::TrapIf {
        kind: v18,
        trap_code: v19.clone(),
    };
    let v21 = C::emit(ctx, &v20);
    // Rule at src\isa\aarch64\inst.isle line 3010.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src\isa\aarch64\inst.isle line 3029.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Reg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1
    {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src\isa\aarch64\inst.isle line 3036.
            return v6;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_atomic_load", "src\\isa\\aarch64\\inst.isle line 3035"
    )
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45
                        {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src\isa\aarch64\inst.isle line 3061.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src\isa\aarch64\inst.isle line 3053.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31
                        {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src\isa\aarch64\inst.isle line 3058.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src\isa\aarch64\inst.isle line 3050.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src\isa\aarch64\inst.isle line 3046.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22
                        {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src\isa\aarch64\inst.isle line 3073.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src\isa\aarch64\inst.isle line 3070.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src\isa\aarch64\inst.isle line 3068.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0);
    let v8 = C::value_regs_get(ctx, v4, 0x1);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0);
    let v11 = C::value_regs_get(ctx, v9, 0x1);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src\isa\aarch64\inst.isle line 3082.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\aarch64\inst.isle line 3097.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: BoxExternalName, arg1: i64) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3104.
    return v6;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: i32) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v17 = C::i32_from_iconst(ctx, v9.0);
                if let Some(v18) = v17 {
                    let v19 = C::s32_add_fallible(ctx, v18, arg2);
                    if let Some(v20) = v19 {
                        let v21 = &constructor_amode_no_more_iconst(ctx, arg0, v9.1, v20);
                        // Rule at src\isa\aarch64\inst.isle line 3129.
                        return v21.clone();
                    }
                }
                let v12 = C::i32_from_iconst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = C::s32_add_fallible(ctx, v13, arg2);
                    if let Some(v15) = v14 {
                        let v16 = &constructor_amode_no_more_iconst(ctx, arg0, v9.0, v15);
                        // Rule at src\isa\aarch64\inst.isle line 3126.
                        return v16.clone();
                    }
                }
            }
        }
    }
    let v3 = &constructor_amode_no_more_iconst(ctx, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3124.
    return v3.clone();
}

// Generated as internal constructor for term amode_no_more_iconst.
pub fn constructor_amode_no_more_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: i32,
) -> AMode {
    let v16 = C::def_inst(ctx, arg1);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::Binary {
            opcode: ref v19,
            args: ref v20,
        } = v18
        {
            if let &Opcode::Iadd = v19 {
                let v21 = C::unpack_value_array_2(ctx, v20);
                let v39 = C::def_inst(ctx, v21.0);
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Binary {
                        opcode: ref v67,
                        args: ref v68,
                    } = v41
                    {
                        if let &Opcode::Ishl = v67 {
                            let v69 = C::unpack_value_array_2(ctx, v68);
                            let v72 = C::def_inst(ctx, v69.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v75,
                                    imm: v76,
                                } = v74
                                {
                                    if let &Opcode::Iconst = v75 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v77 = C::u64_from_imm64(ctx, v76);
                                        let v78 = C::u64_shl(ctx, 0x1, v77);
                                        let v79 = C::u64_eq(ctx, v62, v78);
                                        if v79 == true {
                                            let v45 = C::put_in_reg(ctx, v21.1);
                                            let v46 = constructor_amode_add(ctx, v45, arg2);
                                            let v80 =
                                                &constructor_amode_reg_scaled(ctx, v46, v69.0);
                                            // Rule at src\isa\aarch64\inst.isle line 3176.
                                            return v80.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v28 = C::def_inst(ctx, v21.1);
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Binary {
                        opcode: ref v50,
                        args: ref v51,
                    } = v30
                    {
                        if let &Opcode::Ishl = v50 {
                            let v52 = C::unpack_value_array_2(ctx, v51);
                            let v55 = C::def_inst(ctx, v52.1);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v58,
                                    imm: v59,
                                } = v57
                                {
                                    if let &Opcode::Iconst = v58 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v60 = C::u64_from_imm64(ctx, v59);
                                        let v64 = C::u64_shl(ctx, 0x1, v60);
                                        let v65 = C::u64_eq(ctx, v62, v64);
                                        if v65 == true {
                                            let v24 = C::put_in_reg(ctx, v21.0);
                                            let v25 = constructor_amode_add(ctx, v24, arg2);
                                            let v66 =
                                                &constructor_amode_reg_scaled(ctx, v25, v52.0);
                                            // Rule at src\isa\aarch64\inst.isle line 3173.
                                            return v66.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Unary {
                        opcode: ref v42,
                        arg: v43,
                    } = v41
                    {
                        match v42 {
                            &Opcode::Uextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v48 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3161.
                                    return v48;
                                }
                            }
                            &Opcode::Sextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v49 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3163.
                                    return v49;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Unary {
                        opcode: ref v31,
                        arg: v32,
                    } = v30
                    {
                        match v31 {
                            &Opcode::Uextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v36 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3157.
                                    return v36;
                                }
                            }
                            &Opcode::Sextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v38 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src\isa\aarch64\inst.isle line 3159.
                                    return v38;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v24 = C::put_in_reg(ctx, v21.0);
                let v25 = constructor_amode_add(ctx, v24, arg2);
                let v26 = C::put_in_reg(ctx, v21.1);
                let v27 = AMode::RegReg { rn: v25, rm: v26 };
                // Rule at src\isa\aarch64\inst.isle line 3155.
                return v27;
            }
        }
    }
    let v6 = C::i32_as_i64(ctx, arg2);
    let v13 = &C::uimm12_scaled_from_i64(ctx, v6, arg0);
    if let Some(v14) = v13 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v15 = AMode::UnsignedOffset {
            rn: v3,
            uimm12: v14.clone(),
        };
        // Rule at src\isa\aarch64\inst.isle line 3144.
        return v15;
    }
    let v10 = &C::simm9_from_i64(ctx, v6);
    if let Some(v11) = v10 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v12 = AMode::Unscaled {
            rn: v3,
            simm9: v11.clone(),
        };
        // Rule at src\isa\aarch64\inst.isle line 3141.
        return v12;
    }
    let v3 = C::put_in_reg(ctx, arg1);
    let v7 = C::i64_as_u64(ctx, v6);
    let v8 = constructor_imm(ctx, I64, &ImmExtend::Zero, v7);
    let v9 = AMode::RegReg { rn: v3, rm: v8 };
    // Rule at src\isa\aarch64\inst.isle line 3136.
    return v9;
}

// Generated as internal constructor for term amode_reg_scaled.
pub fn constructor_amode_reg_scaled<C: Context>(ctx: &mut C, arg0: Reg, arg1: Value) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Unary {
            opcode: ref v7,
            arg: v8,
        } = v6
        {
            match v7 {
                &Opcode::Uextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v12 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::UXTW,
                        };
                        // Rule at src\isa\aarch64\inst.isle line 3183.
                        return v12;
                    }
                }
                &Opcode::Sextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v14 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::SXTW,
                        };
                        // Rule at src\isa\aarch64\inst.isle line 3185.
                        return v14;
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg1);
    let v3 = AMode::RegScaled { rn: arg0, rm: v2 };
    // Rule at src\isa\aarch64\inst.isle line 3181.
    return v3;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    if arg1 == 0x0 {
        // Rule at src\isa\aarch64\inst.isle line 3196.
        return arg0;
    }
    let v4 = C::i32_as_i64(ctx, arg1);
    let v5 = C::i64_as_u64(ctx, v4);
    let v8 = C::imm12_from_u64(ctx, v5);
    if let Some(v9) = v8 {
        let v10 = constructor_add_imm(ctx, I64, arg0, v9);
        // Rule at src\isa\aarch64\inst.isle line 3193.
        return v10;
    }
    let v6 = constructor_imm(ctx, I64, &ImmExtend::Zero, v5);
    let v7 = constructor_add(ctx, I64, arg0, v6);
    // Rule at src\isa\aarch64\inst.isle line 3191.
    return v7;
}

// Generated as internal constructor for term pair_amode.
pub fn constructor_pair_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> PairAMode {
    let v9 = C::i32_as_i64(ctx, arg1);
    let v10 = C::simm7_scaled_from_i64(ctx, v9, I64);
    if let Some(v11) = v10 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v12 = PairAMode::SignedOffset {
            reg: v6,
            simm7: v11,
        };
        // Rule at src\isa\aarch64\inst.isle line 3208.
        return v12;
    }
    let v4 = C::simm7_scaled_from_i64(ctx, 0x0, I64);
    if let Some(v5) = v4 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = constructor_amode_add(ctx, v6, arg1);
        let v8 = PairAMode::SignedOffset { reg: v7, simm7: v5 };
        // Rule at src\isa\aarch64\inst.isle line 3203.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "pair_amode", "src\\isa\\aarch64\\inst.isle line 3200"
    )
}

// Generated as internal constructor for term sink_load_into_addr.
pub fn constructor_sink_load_into_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: Inst) -> Reg {
    let v2 = &C::inst_data(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2
    {
        if let &Opcode::Load = v3 {
            let v8 = C::sink_inst(ctx, arg1);
            let v9 = C::put_in_reg(ctx, v4);
            let v7 = C::offset32(ctx, v6);
            let v10 = C::i32_as_i64(ctx, v7);
            let v11 = C::i64_as_u64(ctx, v10);
            let v12 = constructor_add_imm_to_addr(ctx, v9, v11);
            // Rule at src\isa\aarch64\inst.isle line 3223.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load_into_addr", "src\\isa\\aarch64\\inst.isle line 3222"
    )
}

// Generated as internal constructor for term add_imm_to_addr.
pub fn constructor_add_imm_to_addr<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    if arg1 == 0x0 {
        // Rule at src\isa\aarch64\inst.isle line 3228.
        return arg0;
    }
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_add_imm(ctx, I64, arg0, v3);
        // Rule at src\isa\aarch64\inst.isle line 3229.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg1);
    let v8 = constructor_add(ctx, I64, arg0, v7);
    // Rule at src\isa\aarch64\inst.isle line 3230.
    return v8;
}

// Generated as internal constructor for term constant_f32.
pub fn constructor_constant_f32<C: Context>(ctx: &mut C, arg0: u32) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src\isa\aarch64\inst.isle line 3238.
        return v5;
    }
    let v6 = C::u32_as_u64(ctx, arg0);
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, v6, &ScalarSize::Size32);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size32);
        // Rule at src\isa\aarch64\inst.isle line 3242.
        return v9;
    }
    let v12 = constructor_imm(ctx, I32, &ImmExtend::Zero, v6);
    let v13 = constructor_mov_to_fpu(ctx, v12, &ScalarSize::Size32);
    // Rule at src\isa\aarch64\inst.isle line 3245.
    return v13;
}

// Generated as internal constructor for term constant_f64.
pub fn constructor_constant_f64<C: Context>(ctx: &mut C, arg0: u64) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src\isa\aarch64\inst.isle line 3256.
        return v5;
    }
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, &ScalarSize::Size64);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size64);
        // Rule at src\isa\aarch64\inst.isle line 3260.
        return v9;
    }
    let v10 = C::u64_as_u32(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = constructor_constant_f32(ctx, v11);
        // Rule at src\isa\aarch64\inst.isle line 3263.
        return v12;
    }
    let v13 = C::u64_low32_bits_unset(ctx, arg0);
    if let Some(v14) = v13 {
        let v17 = constructor_imm(ctx, I64, &ImmExtend::Zero, v14);
        let v18 = constructor_mov_to_fpu(ctx, v17, &ScalarSize::Size64);
        // Rule at src\isa\aarch64\inst.isle line 3265.
        return v18;
    }
    let v19 = C::emit_u64_le_const(ctx, arg0);
    let v20 = AMode::Const { addr: v19 };
    let v21 = C::mem_flags_trusted(ctx);
    let v22 = constructor_fpu_load64(ctx, &v20, v21);
    // Rule at src\isa\aarch64\inst.isle line 3267.
    return v22;
}

// Generated as internal constructor for term constant_f128.
pub fn constructor_constant_f128<C: Context>(ctx: &mut C, arg0: u128) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size8);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size8x16);
        // Rule at src\isa\aarch64\inst.isle line 3276.
        return v5;
    }
    let v6 = C::u128_as_u64(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = constructor_constant_f64(ctx, v7);
        // Rule at src\isa\aarch64\inst.isle line 3282.
        return v8;
    }
    let v9 = C::u128_replicated_u64(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = constructor_splat_const(ctx, v10, &VectorSize::Size64x2);
        // Rule at src\isa\aarch64\inst.isle line 3286.
        return v12;
    }
    let v13 = C::emit_u128_le_const(ctx, arg0);
    let v14 = AMode::Const { addr: v13 };
    let v15 = C::mem_flags_trusted(ctx);
    let v16 = constructor_fpu_load128(ctx, &v14, v15);
    // Rule at src\isa\aarch64\inst.isle line 3290.
    return v16;
}

// Generated as internal constructor for term splat_const.
pub fn constructor_splat_const<C: Context>(ctx: &mut C, arg0: u64, arg1: &VectorSize) -> Reg {
    match arg1 {
        &VectorSize::Size16x4 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v18 = constructor_splat_const(ctx, v14, &VectorSize::Size8x8);
                // Rule at src\isa\aarch64\inst.isle line 3309.
                return v18;
            }
        }
        &VectorSize::Size16x8 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v16 = constructor_splat_const(ctx, v14, &VectorSize::Size8x16);
                // Rule at src\isa\aarch64\inst.isle line 3307.
                return v16;
            }
        }
        &VectorSize::Size32x2 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v11 = constructor_splat_const(ctx, v7, &VectorSize::Size16x4);
                // Rule at src\isa\aarch64\inst.isle line 3305.
                return v11;
            }
        }
        &VectorSize::Size32x4 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v9 = constructor_splat_const(ctx, v7, &VectorSize::Size16x8);
                // Rule at src\isa\aarch64\inst.isle line 3303.
                return v9;
            }
        }
        &VectorSize::Size64x2 => {
            let v1 = C::u64_replicated_u32(ctx, arg0);
            if let Some(v2) = v1 {
                let v5 = constructor_splat_const(ctx, v2, &VectorSize::Size32x4);
                // Rule at src\isa\aarch64\inst.isle line 3301.
                return v5;
            }
        }
        _ => {}
    }
    let v19 = &constructor_vector_lane_size(ctx, arg1);
    let v20 = C::asimd_mov_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_vec_dup_imm(ctx, v21, false, arg1);
        // Rule at src\isa\aarch64\inst.isle line 3314.
        return v23;
    }
    let v24 = C::u64_not(ctx, arg0);
    let v25 = C::asimd_mov_mod_imm_from_u64(ctx, v24, v19);
    if let Some(v26) = v25 {
        let v28 = constructor_vec_dup_imm(ctx, v26, true, arg1);
        // Rule at src\isa\aarch64\inst.isle line 3317.
        return v28;
    }
    match arg1 {
        &VectorSize::Size32x2 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v36 = constructor_vec_dup_imm(ctx, v34, false, &VectorSize::Size64x2);
                let v37 = constructor_fpu_extend(ctx, v36, &ScalarSize::Size64);
                // Rule at src\isa\aarch64\inst.isle line 3326.
                return v37;
            }
        }
        &VectorSize::Size32x4 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v36 = constructor_vec_dup_imm(ctx, v34, false, &VectorSize::Size64x2);
                // Rule at src\isa\aarch64\inst.isle line 3323.
                return v36;
            }
        }
        _ => {}
    }
    let v38 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v39) = v38 {
        let v40 = constructor_vec_dup_fp_imm(ctx, v39, arg1);
        // Rule at src\isa\aarch64\inst.isle line 3330.
        return v40;
    }
    let v43 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v44 = constructor_vec_dup(ctx, v43, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3336.
    return v44;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3371.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3376.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3381.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3401.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3406.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src\isa\aarch64\inst.isle line 3411.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 3416.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\aarch64\inst.isle line 3426.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 3440.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\aarch64\inst.isle line 3454.
    return v10;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v5 = MInst::Mov {
                size: OperandSize::Size32,
                rd: v3,
                rm: arg1,
            };
            let v6 = C::emit(ctx, &v5);
            let v7 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src\isa\aarch64\inst.isle line 3467.
            return v7;
        }
        I64 => {
            let v9 = C::temp_writable_reg(ctx, I64);
            let v11 = MInst::Mov {
                size: OperandSize::Size64,
                rd: v9,
                rm: arg1,
            };
            let v12 = C::emit(ctx, &v11);
            let v13 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src\isa\aarch64\inst.isle line 3473.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src\\isa\\aarch64\\inst.isle line 3466"
    )
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst.isle line 3483.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg { rd: arg0, rm: arg1 };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\aarch64\inst.isle line 3489.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\aarch64\inst.isle line 3505.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\aarch64\inst.isle line 3509.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset { off: 0x8 };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src\isa\aarch64\inst.isle line 3513.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset { off: 0x8 };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src\isa\aarch64\inst.isle line 3529.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_link", "src\\isa\\aarch64\\inst.isle line 3512"
    )
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src\isa\aarch64\inst.isle line 3545.
            return 0x1F;
        }
        F64 => {
            // Rule at src\isa\aarch64\inst.isle line 3544.
            return 0x3F;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max_shift", "src\\isa\\aarch64\\inst.isle line 3543"
    )
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Type) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src\isa\aarch64\inst.isle line 3550.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v22 = C::lane_type(ctx, arg2);
        let v23 = constructor_max_shift(ctx, v22);
        let v24 = &constructor_vector_size(ctx, arg2);
        let v25 = constructor_ushr_vec_imm(ctx, arg1, v23, v24);
        let v27 = &constructor_vector_size(ctx, arg2);
        let v28 = constructor_max_shift(ctx, v22);
        let v29 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v25,
            size: v27.clone(),
            imm: v28,
        };
        let v30 = C::emit(ctx, &v29);
        let v31 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src\isa\aarch64\inst.isle line 3555.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcopy_sign", "src\\isa\\aarch64\\inst.isle line 3549"
    )
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0);
    // Rule at src\isa\aarch64\inst.isle line 3564.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0);
                        // Rule at src\isa\aarch64\inst.isle line 3577.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0);
                        // Rule at src\isa\aarch64\inst.isle line 3585.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            // Rule at src\isa\aarch64\inst.isle line 3593.
            return v30;
        }
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0);
            // Rule at src\isa\aarch64\inst.isle line 3601.
            return v35;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_underflow_check", "src\\isa\\aarch64\\inst.isle line 3576"
    )
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    // Rule at src\isa\aarch64\inst.isle line 3611.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src\isa\aarch64\inst.isle line 3627.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src\isa\aarch64\inst.isle line 3646.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src\isa\aarch64\inst.isle line 3644.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src\isa\aarch64\inst.isle line 3654.
                return v26;
            }
        }
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src\isa\aarch64\inst.isle line 3648.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_cvt_sat", "src\\isa\\aarch64\\inst.isle line 3643"
    )
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80);
            // Rule at src\isa\aarch64\inst.isle line 3667.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000);
            // Rule at src\isa\aarch64\inst.isle line 3668.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_min", "src\\isa\\aarch64\\inst.isle line 3666"
    )
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7F);
            // Rule at src\isa\aarch64\inst.isle line 3671.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7FFF);
            // Rule at src\isa\aarch64\inst.isle line 3672.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_max", "src\\isa\\aarch64\\inst.isle line 3670"
    )
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(ctx: &mut C, arg0: &FpuToIntOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3675.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(ctx: &mut C, arg0: &IntToFpuOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3683.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(ctx: &mut C, arg0: Reg) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src\isa\aarch64\inst.isle line 3699.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 3705.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src\isa\aarch64\inst.isle line 3713.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3757.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3735.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src\isa\aarch64\inst.isle line 3760.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src\isa\aarch64\inst.isle line 3738.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3770.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 3786.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 3749.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src\isa\aarch64\inst.isle line 3725.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3722.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3773.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 3783.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 3752.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3764.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3742.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 3780.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3767.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src\isa\aarch64\inst.isle line 3745.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src\isa\aarch64\inst.isle line 3777.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmp", "src\\isa\\aarch64\\inst.isle line 3719"
    )
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src\isa\aarch64\inst.isle line 3798.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src\isa\aarch64\inst.isle line 3802.
        return v17.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vanytrue", "src\\isa\\aarch64\\inst.isle line 3797"
    )
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::box_external_name(ctx, arg0);
    let v5 = MInst::ElfTlsGetAddr {
        symbol: v4,
        rd: v2,
        tmp: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst.isle line 3811.
    return v7;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst.isle line 3818.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src\isa\aarch64\inst.isle line 3829.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src\isa\aarch64\inst.isle line 3833.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_to_bool", "src\\isa\\aarch64\\inst.isle line 3832"
    )
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src\isa\aarch64\inst.isle line 3838.
        return v1.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_flags", "src\\isa\\aarch64\\inst.isle line 3837"
    )
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src\isa\aarch64\inst.isle line 3842.
        return v2.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_cc", "src\\isa\\aarch64\\inst.isle line 3841"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Sext);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src\isa\aarch64\inst.isle line 3876.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src\isa\aarch64\inst.isle line 3942.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src\isa\aarch64\inst.isle line 3944.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src\isa\aarch64\inst.isle line 3880.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Uext);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src\isa\aarch64\inst.isle line 3883.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src\isa\aarch64\inst.isle line 3886.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src\isa\aarch64\inst.isle line 3889.
        return v36.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp", "src\\isa\\aarch64\\inst.isle line 3847"
    )
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src\isa\aarch64\inst.isle line 3857.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src\isa\aarch64\inst.isle line 3919.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src\isa\aarch64\inst.isle line 3923.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0);
            let v29 = C::value_regs_get(ctx, v24, 0x1);
            let v30 = C::value_regs_get(ctx, v25, 0x0);
            let v31 = C::value_regs_get(ctx, v25, 0x1);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src\isa\aarch64\inst.isle line 3952.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src\isa\aarch64\inst.isle line 3871.
        return v17;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_into_reg", "src\\isa\\aarch64\\inst.isle line 3848"
    )
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4047.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4026.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4055.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4036.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4051.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4031.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4059.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src\isa\aarch64\inst.isle line 4041.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 3853.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src\isa\aarch64\inst.isle line 3904.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src\isa\aarch64\inst.isle line 3899.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src\isa\aarch64\inst.isle line 3910.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src\isa\aarch64\inst.isle line 3913.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_const", "src\\isa\\aarch64\\inst.isle line 3850"
    )
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ArgumentExtension,
) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src\isa\aarch64\inst.isle line 3867.
                    return ExtendOp::UXTB;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src\isa\aarch64\inst.isle line 3865.
                    return ExtendOp::SXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src\isa\aarch64\inst.isle line 3868.
                    return ExtendOp::UXTH;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src\isa\aarch64\inst.isle line 3866.
                    return ExtendOp::SXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_extend_op", "src\\isa\\aarch64\\inst.isle line 3864"
    )
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0);
    let v7 = C::value_regs_get(ctx, v2, 0x1);
    let v8 = C::value_regs_get(ctx, v3, 0x0);
    let v9 = C::value_regs_get(ctx, v3, 0x1);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src\isa\aarch64\inst.isle line 3931.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src\isa\aarch64\inst.isle line 3967.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src\isa\aarch64\inst.isle line 4016.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src\isa\aarch64\inst.isle line 4004.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v19 = C::value_regs_get(ctx, arg2, 0x1);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src\isa\aarch64\inst.isle line 3995.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0);
            let v11 = C::u8_into_imm12(ctx, 0x0);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src\isa\aarch64\inst.isle line 3982.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src\\isa\\aarch64\\inst.isle line 3975"
    )
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    if arg2 == I128 {
        let v21 = C::temp_writable_reg(ctx, I64);
        let v22 = C::temp_writable_reg(ctx, I64);
        let v23 = C::put_in_regs(ctx, arg3);
        let v24 = C::put_in_regs(ctx, arg4);
        let v26 = C::value_regs_get(ctx, v23, 0x0);
        let v28 = C::value_regs_get(ctx, v23, 0x1);
        let v29 = C::value_regs_get(ctx, v24, 0x0);
        let v30 = C::value_regs_get(ctx, v24, 0x1);
        let v33 = C::writable_reg_to_reg(ctx, v21);
        let v34 = C::writable_reg_to_reg(ctx, v22);
        let v35 = C::value_regs(ctx, v33, v34);
        let v31 = MInst::CSel {
            rd: v21,
            cond: arg1.clone(),
            rn: v26,
            rm: v29,
        };
        let v32 = MInst::CSel {
            rd: v22,
            cond: arg1.clone(),
            rn: v28,
            rm: v30,
        };
        let v36 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v31,
            inst2: v32,
            result: v35,
        };
        let v37 = constructor_with_flags(ctx, arg0, &v36);
        // Rule at src\isa\aarch64\inst.isle line 4073.
        return v37;
    }
    let v11 = C::ty_vec128(ctx, arg2);
    if let Some(v12) = v11 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v7, v8);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src\isa\aarch64\inst.isle line 4068.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_fpu_csel(ctx, v4, arg1, v7, v8);
        let v10 = constructor_with_flags(ctx, arg0, v9);
        // Rule at src\isa\aarch64\inst.isle line 4066.
        return v10;
    }
    let v38 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v39) = v38 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v40 = &constructor_csel(ctx, arg1, v7, v8);
        let v41 = constructor_with_flags(ctx, arg0, v40);
        // Rule at src\isa\aarch64\inst.isle line 4087.
        return v41;
    }
    let v15 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v16) = v15 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v18 = &constructor_fpu_csel(ctx, F64, arg1, v7, v8);
        let v19 = constructor_with_flags(ctx, arg0, v18);
        // Rule at src\isa\aarch64\inst.isle line 4070.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select", "src\\isa\\aarch64\\inst.isle line 4065"
    )
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(ctx: &mut C, arg0: BranchTarget) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\aarch64\inst.isle line 4093.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &BoxVecMachLabel,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::JTSequence {
        default: arg1,
        targets: arg2.clone(),
        ridx: arg0,
        rtmp1: v4,
        rtmp2: v5,
    };
    let v7 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v6 };
    // Rule at src\isa\aarch64\inst.isle line 4115.
    return v7;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\aarch64\inst.isle line 4123.
    return v4;
}

// Generated as internal constructor for term test_branch.
pub fn constructor_test_branch<C: Context>(
    ctx: &mut C,
    arg0: &TestBitAndBranchKind,
    arg1: BranchTarget,
    arg2: BranchTarget,
    arg3: Reg,
    arg4: u8,
) -> SideEffectNoResult {
    let v5 = MInst::TestBitAndBranch {
        kind: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
        rn: arg3,
        bit: arg4,
    };
    let v6 = SideEffectNoResult::Inst { inst: v5 };
    // Rule at src\isa\aarch64\inst.isle line 4129.
    return v6;
}

// Generated as internal constructor for term tbnz.
pub fn constructor_tbnz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::NZ, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 4134.
    return v5.clone();
}

// Generated as internal constructor for term tbz.
pub fn constructor_tbz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::Z, arg0, arg1, arg2, arg3);
    // Rule at src\isa\aarch64\inst.isle line 4139.
    return v5.clone();
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> ProducesFlags {
    let v1 = MInst::MovToNZCV { rn: arg0 };
    let v2 = ProducesFlags::ProducesFlagsSideEffect { inst: v1 };
    // Rule at src\isa\aarch64\inst.isle line 4144.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(ctx: &mut C, arg0: CodeOffset) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland { needed_space: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\aarch64\inst.isle line 4150.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src\isa\aarch64\inst.isle line 4156.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v15 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
    let v16 = &constructor_with_flags_side_effect(ctx, v14, v15);
    let v17 = constructor_emit_side_effect(ctx, v16);
    // Rule at src\isa\aarch64\inst.isle line 4160.
    return v17;
}

// Generated as internal constructor for term vec_uzp1.
pub fn constructor_vec_uzp1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4168.
    return v4;
}

// Generated as internal constructor for term vec_uzp2.
pub fn constructor_vec_uzp2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp2, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4172.
    return v4;
}

// Generated as internal constructor for term vec_zip1.
pub fn constructor_vec_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4176.
    return v4;
}

// Generated as internal constructor for term vec_zip2.
pub fn constructor_vec_zip2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip2, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4180.
    return v4;
}

// Generated as internal constructor for term vec_trn1.
pub fn constructor_vec_trn1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn1, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4184.
    return v4;
}

// Generated as internal constructor for term vec_trn2.
pub fn constructor_vec_trn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn2, arg0, arg1, arg2);
    // Rule at src\isa\aarch64\inst.isle line 4188.
    return v4;
}

// Generated as internal constructor for term vec_dup_fp_imm.
pub fn constructor_vec_dup_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 4204.
    return v6;
}

// Generated as internal constructor for term fpu_load64.
pub fn constructor_fpu_load64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 4211.
    return v6;
}

// Generated as internal constructor for term fpu_load128.
pub fn constructor_fpu_load128<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\aarch64\inst.isle line 4218.
    return v6;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 { rd: v2, rn: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\aarch64\inst_neon.isle line 4.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1731,
            args: ref v1732,
            flags: v1733,
        } => {
            if let &Opcode::AtomicCas = v1731 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1615 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1616) = v1615 {
                        let v1638 = C::use_lse(ctx, arg0);
                        if let Some(v1639) = v1638 {
                            let v1734 = C::unpack_value_array_3(ctx, v1732);
                            let v1738 = C::put_in_reg(ctx, v1734.0);
                            let v1739 = C::put_in_reg(ctx, v1734.1);
                            let v1740 = C::put_in_reg(ctx, v1734.2);
                            let v1741 =
                                constructor_lse_atomic_cas(ctx, v1738, v1739, v1740, v1616, v1733);
                            let v1742 = constructor_output_reg(ctx, v1741);
                            let v1743 = Some(v1742);
                            // Rule at src\isa\aarch64\lower.isle line 2161.
                            return v1743;
                        }
                        let v1734 = C::unpack_value_array_3(ctx, v1732);
                        let v1738 = C::put_in_reg(ctx, v1734.0);
                        let v1739 = C::put_in_reg(ctx, v1734.1);
                        let v1740 = C::put_in_reg(ctx, v1734.2);
                        let v1744 =
                            constructor_atomic_cas_loop(ctx, v1738, v1739, v1740, v1616, v1733);
                        let v1745 = constructor_output_reg(ctx, v1744);
                        let v1746 = Some(v1745);
                        // Rule at src\isa\aarch64\lower.isle line 2166.
                        return v1746;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1640,
            args: ref v1641,
            flags: v1642,
            op: ref v1643,
        } => {
            if let &Opcode::AtomicRmw = v1640 {
                match v1643 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1649 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1650 = constructor_output_reg(ctx, v1649);
                                    let v1651 = Some(v1650);
                                    // Rule at src\isa\aarch64\lower.isle line 2088.
                                    return v1651;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1688 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Add,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1689 = constructor_output_reg(ctx, v1688);
                                let v1690 = Some(v1689);
                                // Rule at src\isa\aarch64\lower.isle line 2126.
                                return v1690;
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1532 = C::zero_reg(ctx);
                                    let v1682 = constructor_eon(ctx, v1616, v1648, v1532);
                                    let v1683 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Clr,
                                        v1644.0,
                                        v1682,
                                        v1616,
                                        v1642,
                                    );
                                    let v1684 = constructor_output_reg(ctx, v1683);
                                    let v1685 = Some(v1684);
                                    // Rule at src\isa\aarch64\lower.isle line 2120.
                                    return v1685;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1696 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::And,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1697 = constructor_output_reg(ctx, v1696);
                                let v1698 = Some(v1697);
                                // Rule at src\isa\aarch64\lower.isle line 2132.
                                return v1698;
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1700 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Nand,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1701 = constructor_output_reg(ctx, v1700);
                                let v1702 = Some(v1701);
                                // Rule at src\isa\aarch64\lower.isle line 2135.
                                return v1702;
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1657 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Set,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1658 = constructor_output_reg(ctx, v1657);
                                    let v1659 = Some(v1658);
                                    // Rule at src\isa\aarch64\lower.isle line 2096.
                                    return v1659;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1704 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Orr,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1705 = constructor_output_reg(ctx, v1704);
                                let v1706 = Some(v1705);
                                // Rule at src\isa\aarch64\lower.isle line 2138.
                                return v1706;
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1661 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smax,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1662 = constructor_output_reg(ctx, v1661);
                                    let v1663 = Some(v1662);
                                    // Rule at src\isa\aarch64\lower.isle line 2100.
                                    return v1663;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1716 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smax,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1717 = constructor_output_reg(ctx, v1716);
                                let v1718 = Some(v1717);
                                // Rule at src\isa\aarch64\lower.isle line 2147.
                                return v1718;
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1665 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smin,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1666 = constructor_output_reg(ctx, v1665);
                                    let v1667 = Some(v1666);
                                    // Rule at src\isa\aarch64\lower.isle line 2104.
                                    return v1667;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1712 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smin,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1713 = constructor_output_reg(ctx, v1712);
                                let v1714 = Some(v1713);
                                // Rule at src\isa\aarch64\lower.isle line 2144.
                                return v1714;
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v729 = C::zero_reg(ctx);
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1676 = C::put_in_reg(ctx, v1644.1);
                                    let v1677 = constructor_sub(ctx, v1616, v729, v1676);
                                    let v1678 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1644.0,
                                        v1677,
                                        v1616,
                                        v1642,
                                    );
                                    let v1679 = constructor_output_reg(ctx, v1678);
                                    let v1680 = Some(v1679);
                                    // Rule at src\isa\aarch64\lower.isle line 2116.
                                    return v1680;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1692 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Sub,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1693 = constructor_output_reg(ctx, v1692);
                                let v1694 = Some(v1693);
                                // Rule at src\isa\aarch64\lower.isle line 2129.
                                return v1694;
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1669 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umax,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1670 = constructor_output_reg(ctx, v1669);
                                    let v1671 = Some(v1670);
                                    // Rule at src\isa\aarch64\lower.isle line 2108.
                                    return v1671;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1724 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umax,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1725 = constructor_output_reg(ctx, v1724);
                                let v1726 = Some(v1725);
                                // Rule at src\isa\aarch64\lower.isle line 2153.
                                return v1726;
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1673 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umin,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1674 = constructor_output_reg(ctx, v1673);
                                    let v1675 = Some(v1674);
                                    // Rule at src\isa\aarch64\lower.isle line 2112.
                                    return v1675;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1720 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umin,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1721 = constructor_output_reg(ctx, v1720);
                                let v1722 = Some(v1721);
                                // Rule at src\isa\aarch64\lower.isle line 2150.
                                return v1722;
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1728 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Xchg,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1729 = constructor_output_reg(ctx, v1728);
                                let v1730 = Some(v1729);
                                // Rule at src\isa\aarch64\lower.isle line 2156.
                                return v1730;
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1615 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1616) = v1615 {
                                let v1638 = C::use_lse(ctx, arg0);
                                if let Some(v1639) = v1638 {
                                    let v1644 = C::unpack_value_array_2(ctx, v1641);
                                    let v1648 = C::put_in_reg(ctx, v1644.1);
                                    let v1653 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Eor,
                                        v1644.0,
                                        v1648,
                                        v1616,
                                        v1642,
                                    );
                                    let v1654 = constructor_output_reg(ctx, v1653);
                                    let v1655 = Some(v1654);
                                    // Rule at src\isa\aarch64\lower.isle line 2092.
                                    return v1655;
                                }
                                let v1644 = C::unpack_value_array_2(ctx, v1641);
                                let v1687 = C::put_in_reg(ctx, v1644.0);
                                let v1676 = C::put_in_reg(ctx, v1644.1);
                                let v1708 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Eor,
                                    v1687,
                                    v1676,
                                    v1616,
                                    v1642,
                                );
                                let v1709 = constructor_output_reg(ctx, v1708);
                                let v1710 = Some(v1709);
                                // Rule at src\isa\aarch64\lower.isle line 2141.
                                return v1710;
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v34,
            args: ref v35,
        } => {
            match v34 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v36 = C::unpack_value_array_2(ctx, v35);
                        let v39 = C::put_in_reg(ctx, v36.0);
                        let v40 = C::put_in_reg(ctx, v36.1);
                        let v279 = constructor_vec_tbl(ctx, v39, v40);
                        let v280 = constructor_output_reg(ctx, v279);
                        let v281 = Some(v280);
                        // Rule at src\isa\aarch64\lower.isle line 241.
                        return v281;
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v851 = C::ty_int(ctx, v3);
                            if let Some(v852) = v851 {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v858 = constructor_cmp_and_choose(
                                    ctx,
                                    v33,
                                    &Cond::Lt,
                                    true,
                                    v36.0,
                                    v36.1,
                                );
                                let v859 = C::output(ctx, v858);
                                let v860 = Some(v859);
                                // Rule at src\isa\aarch64\lower.isle line 1095.
                                return v860;
                            }
                        }
                        if v3 == I64X2 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v63 = C::put_in_reg(ctx, v36.1);
                            let v406 = C::put_in_reg(ctx, v36.0);
                            let v877 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v63,
                                v406,
                                &VectorSize::Size64x2,
                            );
                            let v878 = C::put_in_reg(ctx, v36.0);
                            let v879 = C::put_in_reg(ctx, v36.1);
                            let v880 = constructor_bsl(ctx, I64X2, v877, v878, v879);
                            let v881 = constructor_output_reg(ctx, v880);
                            let v882 = Some(v881);
                            // Rule at src\isa\aarch64\lower.isle line 1107.
                            return v882;
                        }
                        let v869 = C::not_i64x2(ctx, v3);
                        if let Some(v870) = v869 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v872 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v39, v40, v138);
                            let v873 = constructor_output_reg(ctx, v872);
                            let v874 = Some(v873);
                            // Rule at src\isa\aarch64\lower.isle line 1104.
                            return v874;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v851 = C::ty_int(ctx, v3);
                            if let Some(v852) = v851 {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v854 = constructor_cmp_and_choose(
                                    ctx,
                                    v33,
                                    &Cond::Lo,
                                    false,
                                    v36.0,
                                    v36.1,
                                );
                                let v855 = C::output(ctx, v854);
                                let v856 = Some(v855);
                                // Rule at src\isa\aarch64\lower.isle line 1093.
                                return v856;
                            }
                        }
                        if v3 == I64X2 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v63 = C::put_in_reg(ctx, v36.1);
                            let v406 = C::put_in_reg(ctx, v36.0);
                            let v888 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v63,
                                v406,
                                &VectorSize::Size64x2,
                            );
                            let v878 = C::put_in_reg(ctx, v36.0);
                            let v879 = C::put_in_reg(ctx, v36.1);
                            let v889 = constructor_bsl(ctx, I64X2, v888, v878, v879);
                            let v890 = constructor_output_reg(ctx, v889);
                            let v891 = Some(v890);
                            // Rule at src\isa\aarch64\lower.isle line 1113.
                            return v891;
                        }
                        let v869 = C::not_i64x2(ctx, v3);
                        if let Some(v870) = v869 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v884 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v39, v40, v138);
                            let v885 = constructor_output_reg(ctx, v884);
                            let v886 = Some(v885);
                            // Rule at src\isa\aarch64\lower.isle line 1110.
                            return v886;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v851 = C::ty_int(ctx, v3);
                            if let Some(v852) = v851 {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v866 = constructor_cmp_and_choose(
                                    ctx,
                                    v33,
                                    &Cond::Gt,
                                    true,
                                    v36.0,
                                    v36.1,
                                );
                                let v867 = C::output(ctx, v866);
                                let v868 = Some(v867);
                                // Rule at src\isa\aarch64\lower.isle line 1099.
                                return v868;
                            }
                        }
                        if v3 == I64X2 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v896 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v39,
                                v40,
                                &VectorSize::Size64x2,
                            );
                            let v878 = C::put_in_reg(ctx, v36.0);
                            let v879 = C::put_in_reg(ctx, v36.1);
                            let v897 = constructor_bsl(ctx, I64X2, v896, v878, v879);
                            let v898 = constructor_output_reg(ctx, v897);
                            let v899 = Some(v898);
                            // Rule at src\isa\aarch64\lower.isle line 1119.
                            return v899;
                        }
                        let v869 = C::not_i64x2(ctx, v3);
                        if let Some(v870) = v869 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v893 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v39, v40, v138);
                            let v894 = constructor_output_reg(ctx, v893);
                            let v895 = Some(v894);
                            // Rule at src\isa\aarch64\lower.isle line 1116.
                            return v895;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v851 = C::ty_int(ctx, v3);
                            if let Some(v852) = v851 {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v862 = constructor_cmp_and_choose(
                                    ctx,
                                    v33,
                                    &Cond::Hi,
                                    false,
                                    v36.0,
                                    v36.1,
                                );
                                let v863 = C::output(ctx, v862);
                                let v864 = Some(v863);
                                // Rule at src\isa\aarch64\lower.isle line 1097.
                                return v864;
                            }
                        }
                        if v3 == I64X2 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v904 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v39,
                                v40,
                                &VectorSize::Size64x2,
                            );
                            let v878 = C::put_in_reg(ctx, v36.0);
                            let v879 = C::put_in_reg(ctx, v36.1);
                            let v905 = constructor_bsl(ctx, I64X2, v904, v878, v879);
                            let v906 = constructor_output_reg(ctx, v905);
                            let v907 = Some(v906);
                            // Rule at src\isa\aarch64\lower.isle line 1125.
                            return v907;
                        }
                        let v869 = C::not_i64x2(ctx, v3);
                        if let Some(v870) = v869 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v901 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v39, v40, v138);
                            let v902 = constructor_output_reg(ctx, v901);
                            let v903 = Some(v902);
                            // Rule at src\isa\aarch64\lower.isle line 1122.
                            return v903;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v405 = constructor_splat_const(ctx, 0x1, &VectorSize::Size64x2);
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v406 = C::put_in_reg(ctx, v36.0);
                            let v127 = C::put_in_reg(ctx, v36.1);
                            let v407 = constructor_orr_vec(ctx, v406, v127, &VectorSize::Size64x2);
                            let v408 = constructor_and_vec(ctx, v407, v405, &VectorSize::Size64x2);
                            let v409 = C::put_in_reg(ctx, v36.0);
                            let v411 =
                                constructor_ushr_vec_imm(ctx, v409, 0x1, &VectorSize::Size64x2);
                            let v412 = C::put_in_reg(ctx, v36.1);
                            let v413 =
                                constructor_ushr_vec_imm(ctx, v412, 0x1, &VectorSize::Size64x2);
                            let v414 = constructor_add_vec(ctx, v411, v413, &VectorSize::Size64x2);
                            let v415 = constructor_add_vec(ctx, v408, v414, &VectorSize::Size64x2);
                            let v416 = constructor_output_reg(ctx, v415);
                            let v417 = Some(v416);
                            // Rule at src\isa\aarch64\lower.isle line 371.
                            return v417;
                        }
                        let v418 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v419) = v418 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v421 = &constructor_vector_size(ctx, v419);
                            let v422 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v39, v40, v421);
                            let v423 = constructor_output_reg(ctx, v422);
                            let v424 = Some(v423);
                            // Rule at src\isa\aarch64\lower.isle line 380.
                            return v424;
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v717 = constructor_uqadd(ctx, v39, v40, v716);
                            let v718 = constructor_output_reg(ctx, v717);
                            let v719 = Some(v718);
                            // Rule at src\isa\aarch64\lower.isle line 745.
                            return v719;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v720 = constructor_sqadd(ctx, v39, v40, v716);
                            let v721 = constructor_output_reg(ctx, v720);
                            let v722 = Some(v721);
                            // Rule at src\isa\aarch64\lower.isle line 750.
                            return v722;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v723 = constructor_uqsub(ctx, v39, v40, v716);
                            let v724 = constructor_output_reg(ctx, v723);
                            let v725 = Some(v724);
                            // Rule at src\isa\aarch64\lower.isle line 755.
                            return v725;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v726 = constructor_sqsub(ctx, v39, v40, v716);
                            let v727 = constructor_output_reg(ctx, v726);
                            let v728 = Some(v727);
                            // Rule at src\isa\aarch64\lower.isle line 760.
                            return v728;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Binary {
                                    opcode: ref v87,
                                    args: ref v88,
                                } = v46
                                {
                                    match v87 {
                                        &Opcode::Imul => {
                                            let v89 = C::unpack_value_array_2(ctx, v88);
                                            let v119 = C::put_in_reg(ctx, v89.0);
                                            let v120 = C::put_in_reg(ctx, v89.1);
                                            let v121 = C::put_in_reg(ctx, v36.0);
                                            let v122 = constructor_madd(ctx, v33, v119, v120, v121);
                                            let v123 = constructor_output_reg(ctx, v122);
                                            let v124 = Some(v123);
                                            // Rule at src\isa\aarch64\lower.isle line 88.
                                            return v124;
                                        }
                                        &Opcode::Ishl => {
                                            let v89 = C::unpack_value_array_2(ctx, v88);
                                            let v92 = C::def_inst(ctx, v89.1);
                                            if let Some(v93) = v92 {
                                                let v94 = &C::inst_data(ctx, v93);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v95,
                                                    imm: v96,
                                                } = v94
                                                {
                                                    if let &Opcode::Iconst = v95 {
                                                        let v97 = C::lshl_from_imm64(ctx, v33, v96);
                                                        if let Some(v98) = v97 {
                                                            let v39 = C::put_in_reg(ctx, v36.0);
                                                            let v99 = C::put_in_reg(ctx, v89.0);
                                                            let v100 = constructor_add_shift(
                                                                ctx, v33, v39, v99, v98,
                                                            );
                                                            let v101 =
                                                                constructor_output_reg(ctx, v100);
                                                            let v102 = Some(v101);
                                                            // Rule at src\isa\aarch64\lower.isle line 77.
                                                            return v102;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                match v57 {
                                    &InstructionData::Binary {
                                        opcode: ref v103,
                                        args: ref v104,
                                    } => {
                                        match v103 {
                                            &Opcode::Imul => {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v125 = C::put_in_reg(ctx, v105.0);
                                                let v126 = C::put_in_reg(ctx, v105.1);
                                                let v127 = C::put_in_reg(ctx, v36.1);
                                                let v128 =
                                                    constructor_madd(ctx, v33, v125, v126, v127);
                                                let v129 = constructor_output_reg(ctx, v128);
                                                let v130 = Some(v129);
                                                // Rule at src\isa\aarch64\lower.isle line 91.
                                                return v130;
                                            }
                                            &Opcode::Ishl => {
                                                let v105 = C::unpack_value_array_2(ctx, v104);
                                                let v108 = C::def_inst(ctx, v105.1);
                                                if let Some(v109) = v108 {
                                                    let v110 = &C::inst_data(ctx, v109);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v111,
                                                        imm: v112,
                                                    } = v110
                                                    {
                                                        if let &Opcode::Iconst = v111 {
                                                            let v113 =
                                                                C::lshl_from_imm64(ctx, v33, v112);
                                                            if let Some(v114) = v113 {
                                                                let v63 = C::put_in_reg(ctx, v36.1);
                                                                let v115 =
                                                                    C::put_in_reg(ctx, v105.0);
                                                                let v116 = constructor_add_shift(
                                                                    ctx, v33, v63, v115, v114,
                                                                );
                                                                let v117 = constructor_output_reg(
                                                                    ctx, v116,
                                                                );
                                                                let v118 = Some(v117);
                                                                // Rule at src\isa\aarch64\lower.isle line 82.
                                                                return v118;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v58,
                                        imm: v59,
                                    } => {
                                        if let &Opcode::Iconst = v58 {
                                            let v60 = C::u64_from_imm64(ctx, v59);
                                            let v61 = C::imm12_from_u64(ctx, v60);
                                            if let Some(v62) = v61 {
                                                let v63 = C::put_in_reg(ctx, v36.1);
                                                let v64 = constructor_add_imm(ctx, v33, v63, v62);
                                                let v65 = constructor_output_reg(ctx, v64);
                                                let v66 = Some(v65);
                                                // Rule at src\isa\aarch64\lower.isle line 54.
                                                return v66;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v49 = C::u64_from_imm64(ctx, v48);
                                        let v50 = C::imm12_from_u64(ctx, v49);
                                        if let Some(v51) = v50 {
                                            let v39 = C::put_in_reg(ctx, v36.0);
                                            let v52 = constructor_add_imm(ctx, v33, v39, v51);
                                            let v53 = constructor_output_reg(ctx, v52);
                                            let v54 = Some(v53);
                                            // Rule at src\isa\aarch64\lower.isle line 51.
                                            return v54;
                                        }
                                    }
                                }
                            }
                            let v72 = constructor_imm12_from_negated_value(ctx, v36.0);
                            if let Some(v73) = v72 {
                                let v63 = C::put_in_reg(ctx, v36.1);
                                let v74 = constructor_sub_imm(ctx, v33, v63, v73);
                                let v75 = constructor_output_reg(ctx, v74);
                                let v76 = Some(v75);
                                // Rule at src\isa\aarch64\lower.isle line 63.
                                return v76;
                            }
                            let v67 = constructor_imm12_from_negated_value(ctx, v36.1);
                            if let Some(v68) = v67 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v69 = constructor_sub_imm(ctx, v33, v39, v68);
                                let v70 = constructor_output_reg(ctx, v69);
                                let v71 = Some(v70);
                                // Rule at src\isa\aarch64\lower.isle line 59.
                                return v71;
                            }
                            let v82 = &C::extended_value_from_value(ctx, v36.0);
                            if let Some(v83) = v82 {
                                let v63 = C::put_in_reg(ctx, v36.1);
                                let v84 = constructor_add_extend(ctx, v33, v63, v83);
                                let v85 = constructor_output_reg(ctx, v84);
                                let v86 = Some(v85);
                                // Rule at src\isa\aarch64\lower.isle line 72.
                                return v86;
                            }
                            let v77 = &C::extended_value_from_value(ctx, v36.1);
                            if let Some(v78) = v77 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v79 = constructor_add_extend(ctx, v33, v39, v78);
                                let v80 = constructor_output_reg(ctx, v79);
                                let v81 = Some(v80);
                                // Rule at src\isa\aarch64\lower.isle line 69.
                                return v81;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v41 = constructor_add(ctx, v33, v39, v40);
                            let v42 = constructor_output_reg(ctx, v41);
                            let v43 = Some(v42);
                            // Rule at src\isa\aarch64\lower.isle line 47.
                            return v43;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v139 = constructor_add_vec(ctx, v39, v40, v138);
                            let v140 = constructor_output_reg(ctx, v139);
                            let v141 = Some(v140);
                            // Rule at src\isa\aarch64\lower.isle line 100.
                            return v141;
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v142 = C::put_in_regs(ctx, v36.0);
                            let v144 = C::value_regs_get(ctx, v142, 0x0);
                            let v146 = C::value_regs_get(ctx, v142, 0x1);
                            let v147 = C::put_in_regs(ctx, v36.1);
                            let v148 = C::value_regs_get(ctx, v147, 0x0);
                            let v149 = C::value_regs_get(ctx, v147, 0x1);
                            let v151 = &constructor_add_with_flags_paired(ctx, I64, v144, v148);
                            let v152 = &constructor_adc_paired(ctx, I64, v146, v149);
                            let v153 = constructor_with_flags(ctx, v151, v152);
                            let v154 = C::output(ctx, v153);
                            let v155 = Some(v154);
                            // Rule at src\isa\aarch64\lower.isle line 104.
                            return v155;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v139 = constructor_add_vec(ctx, v39, v40, v138);
                            let v2257 = C::value_reg(ctx, v139);
                            let v2258 = C::output(ctx, v2257);
                            let v2259 = Some(v2258);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 3.
                            return v2259;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v67 = constructor_imm12_from_negated_value(ctx, v36.1);
                            if let Some(v68) = v67 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v698 = constructor_add_imm(ctx, v33, v39, v68);
                                let v699 = constructor_output_reg(ctx, v698);
                                let v700 = Some(v699);
                                // Rule at src\isa\aarch64\lower.isle line 719.
                                return v700;
                            }
                            let v77 = &C::extended_value_from_value(ctx, v36.1);
                            if let Some(v78) = v77 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v701 = constructor_sub_extend(ctx, v33, v39, v78);
                                let v702 = constructor_output_reg(ctx, v701);
                                let v703 = Some(v702);
                                // Rule at src\isa\aarch64\lower.isle line 725.
                                return v703;
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                match v46 {
                                    &InstructionData::Binary {
                                        opcode: ref v87,
                                        args: ref v88,
                                    } => {
                                        if let &Opcode::Imul = v87 {
                                            let v89 = C::unpack_value_array_2(ctx, v88);
                                            let v119 = C::put_in_reg(ctx, v89.0);
                                            let v120 = C::put_in_reg(ctx, v89.1);
                                            let v121 = C::put_in_reg(ctx, v36.0);
                                            let v131 = constructor_msub(ctx, v33, v119, v120, v121);
                                            let v132 = constructor_output_reg(ctx, v131);
                                            let v133 = Some(v132);
                                            // Rule at src\isa\aarch64\lower.isle line 95.
                                            return v133;
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v47,
                                        imm: v48,
                                    } => {
                                        if let &Opcode::Iconst = v47 {
                                            let v49 = C::u64_from_imm64(ctx, v48);
                                            let v50 = C::imm12_from_u64(ctx, v49);
                                            if let Some(v51) = v50 {
                                                let v39 = C::put_in_reg(ctx, v36.0);
                                                let v695 = constructor_sub_imm(ctx, v33, v39, v51);
                                                let v696 = constructor_output_reg(ctx, v695);
                                                let v697 = Some(v696);
                                                // Rule at src\isa\aarch64\lower.isle line 714.
                                                return v697;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v142 = C::put_in_regs(ctx, v36.0);
                            let v710 = C::put_in_regs(ctx, v36.1);
                            let v711 = constructor_sub_i128(ctx, v142, v710);
                            let v712 = C::output(ctx, v711);
                            let v713 = Some(v712);
                            // Rule at src\isa\aarch64\lower.isle line 740.
                            return v713;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v707 = constructor_sub_vec(ctx, v39, v40, v138);
                            let v708 = constructor_output_reg(ctx, v707);
                            let v709 = Some(v708);
                            // Rule at src\isa\aarch64\lower.isle line 736.
                            return v709;
                        }
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Binary {
                                    opcode: ref v87,
                                    args: ref v88,
                                } = v46
                                {
                                    if let &Opcode::Ishl = v87 {
                                        let v89 = C::unpack_value_array_2(ctx, v88);
                                        let v92 = C::def_inst(ctx, v89.1);
                                        if let Some(v93) = v92 {
                                            let v94 = &C::inst_data(ctx, v93);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v95,
                                                imm: v96,
                                            } = v94
                                            {
                                                if let &Opcode::Iconst = v95 {
                                                    let v97 = C::lshl_from_imm64(ctx, v33, v96);
                                                    if let Some(v98) = v97 {
                                                        let v39 = C::put_in_reg(ctx, v36.0);
                                                        let v99 = C::put_in_reg(ctx, v89.0);
                                                        let v704 = constructor_sub_shift(
                                                            ctx, v33, v39, v99, v98,
                                                        );
                                                        let v705 =
                                                            constructor_output_reg(ctx, v704);
                                                        let v706 = Some(v705);
                                                        // Rule at src\isa\aarch64\lower.isle line 730.
                                                        return v706;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v692 = constructor_sub(ctx, v33, v39, v40);
                            let v693 = constructor_output_reg(ctx, v692);
                            let v694 = Some(v693);
                            // Rule at src\isa\aarch64\lower.isle line 710.
                            return v694;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v707 = constructor_sub_vec(ctx, v39, v40, v138);
                            let v2260 = C::value_reg(ctx, v707);
                            let v2261 = C::output(ctx, v2260);
                            let v2262 = Some(v2261);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 7.
                            return v2262;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v142 = C::put_in_regs(ctx, v36.0);
                                let v144 = C::value_regs_get(ctx, v142, 0x0);
                                let v146 = C::value_regs_get(ctx, v142, 0x1);
                                let v147 = C::put_in_regs(ctx, v36.1);
                                let v148 = C::value_regs_get(ctx, v147, 0x0);
                                let v149 = C::value_regs_get(ctx, v147, 0x1);
                                let v746 = constructor_umulh(ctx, I64, v144, v148);
                                let v747 = constructor_madd(ctx, I64, v144, v149, v746);
                                let v748 = constructor_madd(ctx, I64, v146, v148, v747);
                                let v749 = C::zero_reg(ctx);
                                let v750 = constructor_madd(ctx, I64, v144, v148, v749);
                                let v751 = C::value_regs(ctx, v750, v748);
                                let v752 = C::output(ctx, v751);
                                let v753 = Some(v752);
                                // Rule at src\isa\aarch64\lower.isle line 784.
                                return v753;
                            }
                            I16X8 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::Unary {
                                        opcode: ref v362,
                                        arg: v363,
                                    } = v46
                                    {
                                        match v362 {
                                            &Opcode::SwidenLow => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenLow = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I8X16 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I8X16 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v771 = constructor_smull8(
                                                                        ctx, v364, v770, false,
                                                                    );
                                                                    let v772 =
                                                                        constructor_output_reg(
                                                                            ctx, v771,
                                                                        );
                                                                    let v773 = Some(v772);
                                                                    // Rule at src\isa\aarch64\lower.isle line 883.
                                                                    return v773;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenHigh = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I8X16 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I8X16 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v774 = constructor_smull8(
                                                                        ctx, v364, v770, true,
                                                                    );
                                                                    let v775 =
                                                                        constructor_output_reg(
                                                                            ctx, v774,
                                                                        );
                                                                    let v776 = Some(v775);
                                                                    // Rule at src\isa\aarch64\lower.isle line 889.
                                                                    return v776;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenLow = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I8X16 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I8X16 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v777 = constructor_umull8(
                                                                        ctx, v364, v770, false,
                                                                    );
                                                                    let v778 =
                                                                        constructor_output_reg(
                                                                            ctx, v777,
                                                                        );
                                                                    let v779 = Some(v778);
                                                                    // Rule at src\isa\aarch64\lower.isle line 895.
                                                                    return v779;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenHigh = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I8X16 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I8X16 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v780 = constructor_umull8(
                                                                        ctx, v364, v770, true,
                                                                    );
                                                                    let v781 =
                                                                        constructor_output_reg(
                                                                            ctx, v780,
                                                                        );
                                                                    let v782 = Some(v781);
                                                                    // Rule at src\isa\aarch64\lower.isle line 901.
                                                                    return v782;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::Unary {
                                        opcode: ref v362,
                                        arg: v363,
                                    } = v46
                                    {
                                        match v362 {
                                            &Opcode::SwidenLow => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenLow = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I16X8 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I16X8 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v783 = constructor_smull16(
                                                                        ctx, v364, v770, false,
                                                                    );
                                                                    let v784 =
                                                                        constructor_output_reg(
                                                                            ctx, v783,
                                                                        );
                                                                    let v785 = Some(v784);
                                                                    // Rule at src\isa\aarch64\lower.isle line 907.
                                                                    return v785;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenHigh = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I16X8 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I16X8 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v786 = constructor_smull16(
                                                                        ctx, v364, v770, true,
                                                                    );
                                                                    let v787 =
                                                                        constructor_output_reg(
                                                                            ctx, v786,
                                                                        );
                                                                    let v788 = Some(v787);
                                                                    // Rule at src\isa\aarch64\lower.isle line 913.
                                                                    return v788;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenLow = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I16X8 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I16X8 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v789 = constructor_umull16(
                                                                        ctx, v364, v770, false,
                                                                    );
                                                                    let v790 =
                                                                        constructor_output_reg(
                                                                            ctx, v789,
                                                                        );
                                                                    let v791 = Some(v790);
                                                                    // Rule at src\isa\aarch64\lower.isle line 919.
                                                                    return v791;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenHigh = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I16X8 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I16X8 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v792 = constructor_umull16(
                                                                        ctx, v364, v770, true,
                                                                    );
                                                                    let v793 =
                                                                        constructor_output_reg(
                                                                            ctx, v792,
                                                                        );
                                                                    let v794 = Some(v793);
                                                                    // Rule at src\isa\aarch64\lower.isle line 925.
                                                                    return v794;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::Unary {
                                        opcode: ref v362,
                                        arg: v363,
                                    } = v46
                                    {
                                        match v362 {
                                            &Opcode::SwidenLow => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenLow = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I32X4 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I32X4 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v795 = constructor_smull32(
                                                                        ctx, v364, v770, false,
                                                                    );
                                                                    let v796 =
                                                                        constructor_output_reg(
                                                                            ctx, v795,
                                                                        );
                                                                    let v797 = Some(v796);
                                                                    // Rule at src\isa\aarch64\lower.isle line 931.
                                                                    return v797;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenHigh = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I32X4 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I32X4 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v798 = constructor_smull32(
                                                                        ctx, v364, v770, true,
                                                                    );
                                                                    let v799 =
                                                                        constructor_output_reg(
                                                                            ctx, v798,
                                                                        );
                                                                    let v800 = Some(v799);
                                                                    // Rule at src\isa\aarch64\lower.isle line 937.
                                                                    return v800;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenLow = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I32X4 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I32X4 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v801 = constructor_umull32(
                                                                        ctx, v364, v770, false,
                                                                    );
                                                                    let v802 =
                                                                        constructor_output_reg(
                                                                            ctx, v801,
                                                                        );
                                                                    let v803 = Some(v802);
                                                                    // Rule at src\isa\aarch64\lower.isle line 943.
                                                                    return v803;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenHigh = v360 {
                                                            let v768 = C::value_type(ctx, v361);
                                                            if v768 == I32X4 {
                                                                let v769 = C::value_type(ctx, v363);
                                                                if v769 == I32X4 {
                                                                    let v364 =
                                                                        C::put_in_reg(ctx, v361);
                                                                    let v770 =
                                                                        C::put_in_reg(ctx, v363);
                                                                    let v804 = constructor_umull32(
                                                                        ctx, v364, v770, true,
                                                                    );
                                                                    let v805 =
                                                                        constructor_output_reg(
                                                                            ctx, v804,
                                                                        );
                                                                    let v806 = Some(v805);
                                                                    // Rule at src\isa\aarch64\lower.isle line 949.
                                                                    return v806;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v759 = constructor_rev64(ctx, v40, &VectorSize::Size32x4);
                                let v760 = constructor_mul(ctx, v759, v39, &VectorSize::Size32x4);
                                let v761 = constructor_xtn(ctx, v39, &ScalarSize::Size32);
                                let v762 = constructor_addp(ctx, v760, v760, &VectorSize::Size32x4);
                                let v763 = constructor_xtn(ctx, v40, &ScalarSize::Size32);
                                let v764 = constructor_shll32(ctx, v762, false);
                                let v765 = constructor_umlal32(ctx, v764, v763, v761, false);
                                let v766 = constructor_output_reg(ctx, v765);
                                let v767 = Some(v766);
                                // Rule at src\isa\aarch64\lower.isle line 844.
                                return v767;
                            }
                            _ => {}
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v754 = C::not_i64x2(ctx, v715);
                            if let Some(v755) = v754 {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v716 = &constructor_vector_size(ctx, v715);
                                let v756 = constructor_mul(ctx, v39, v40, v716);
                                let v757 = constructor_output_reg(ctx, v756);
                                let v758 = Some(v757);
                                // Rule at src\isa\aarch64\lower.isle line 812.
                                return v758;
                            }
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v328 = C::zero_reg(ctx);
                            let v743 = constructor_madd(ctx, v33, v39, v40, v328);
                            let v744 = constructor_output_reg(ctx, v743);
                            let v745 = Some(v744);
                            // Rule at src\isa\aarch64\lower.isle line 780.
                            return v745;
                        }
                        let v418 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v419) = v418 {
                            let v2263 = C::dynamic_lane(ctx, v419);
                            if let Some(v2264) = v2263 {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v421 = &constructor_vector_size(ctx, v419);
                                let v2268 =
                                    constructor_vec_rrr(ctx, &VecALUOp::Mul, v39, v40, v421);
                                let v2269 = C::value_reg(ctx, v2268);
                                let v2270 = C::output(ctx, v2269);
                                let v2271 = Some(v2270);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 11.
                                return v2271;
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v818 = constructor_umulh(ctx, I64, v39, v40);
                            let v819 = constructor_output_reg(ctx, v818);
                            let v820 = Some(v819);
                            // Rule at src\isa\aarch64\lower.isle line 968.
                            return v820;
                        }
                        let v387 = C::fits_in_32(ctx, v3);
                        if let Some(v388) = v387 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v821 = constructor_put_in_reg_zext64(ctx, v36.0);
                            let v822 = constructor_put_in_reg_zext64(ctx, v36.1);
                            let v328 = C::zero_reg(ctx);
                            let v823 = constructor_madd(ctx, I64, v821, v822, v328);
                            let v813 = C::ty_bits(ctx, v388);
                            let v814 = C::imm_shift_from_u8(ctx, v813);
                            let v824 = constructor_lsr_imm(ctx, I64, v823, v814);
                            let v825 = C::value_reg(ctx, v824);
                            let v826 = C::output(ctx, v825);
                            let v827 = Some(v826);
                            // Rule at src\isa\aarch64\lower.isle line 971.
                            return v827;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v807 = constructor_smulh(ctx, I64, v39, v40);
                            let v808 = constructor_output_reg(ctx, v807);
                            let v809 = Some(v808);
                            // Rule at src\isa\aarch64\lower.isle line 956.
                            return v809;
                        }
                        let v387 = C::fits_in_32(ctx, v3);
                        if let Some(v388) = v387 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v810 = constructor_put_in_reg_sext64(ctx, v36.0);
                            let v811 = constructor_put_in_reg_sext64(ctx, v36.1);
                            let v328 = C::zero_reg(ctx);
                            let v812 = constructor_madd(ctx, I64, v810, v811, v328);
                            let v813 = C::ty_bits(ctx, v388);
                            let v814 = C::imm_shift_from_u8(ctx, v813);
                            let v815 = constructor_asr_imm(ctx, I64, v812, v814);
                            let v816 = constructor_output_reg(ctx, v815);
                            let v817 = Some(v816);
                            // Rule at src\isa\aarch64\lower.isle line 959.
                            return v817;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v426 =
                                constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v39, v40, v138);
                            let v427 = constructor_output_reg(ctx, v426);
                            let v428 = Some(v427);
                            // Rule at src\isa\aarch64\lower.isle line 385.
                            return v428;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v821 = constructor_put_in_reg_zext64(ctx, v36.0);
                            let v828 = constructor_put_nonzero_in_reg_zext64(ctx, v36.1);
                            let v829 = constructor_a64_udiv(ctx, I64, v821, v828);
                            let v830 = constructor_output_reg(ctx, v829);
                            let v831 = Some(v830);
                            // Rule at src\isa\aarch64\lower.isle line 987.
                            return v831;
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v837 = C::safe_divisor_from_imm64(ctx, v33, v48);
                                        if let Some(v838) = v837 {
                                            let v810 = constructor_put_in_reg_sext64(ctx, v36.0);
                                            let v840 =
                                                constructor_imm(ctx, v33, &ImmExtend::Sign, v838);
                                            let v841 = constructor_a64_sdiv(ctx, I64, v810, v840);
                                            let v842 = constructor_output_reg(ctx, v841);
                                            let v843 = Some(v842);
                                            // Rule at src\isa\aarch64\lower.isle line 1029.
                                            return v843;
                                        }
                                    }
                                }
                            }
                            let v810 = constructor_put_in_reg_sext64(ctx, v36.0);
                            let v832 = constructor_put_nonzero_in_reg_sext64(ctx, v36.1);
                            let v833 = constructor_trap_if_div_overflow(ctx, v33, v810, v832);
                            let v834 = constructor_a64_sdiv(ctx, I64, v833, v832);
                            let v835 = constructor_output_reg(ctx, v834);
                            let v836 = Some(v835);
                            // Rule at src\isa\aarch64\lower.isle line 1020.
                            return v836;
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v821 = constructor_put_in_reg_zext64(ctx, v36.0);
                            let v828 = constructor_put_nonzero_in_reg_zext64(ctx, v36.1);
                            let v829 = constructor_a64_udiv(ctx, I64, v821, v828);
                            let v844 = constructor_msub(ctx, I64, v829, v828, v821);
                            let v845 = constructor_output_reg(ctx, v844);
                            let v846 = Some(v845);
                            // Rule at src\isa\aarch64\lower.isle line 1058.
                            return v846;
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v810 = constructor_put_in_reg_sext64(ctx, v36.0);
                            let v832 = constructor_put_nonzero_in_reg_sext64(ctx, v36.1);
                            let v847 = constructor_a64_sdiv(ctx, I64, v810, v832);
                            let v848 = constructor_msub(ctx, I64, v847, v832, v810);
                            let v849 = constructor_output_reg(ctx, v848);
                            let v850 = Some(v849);
                            // Rule at src\isa\aarch64\lower.isle line 1065.
                            return v850;
                        }
                    }
                }
                &Opcode::UaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2152 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2153) = v2152 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2156 = constructor_overflow_op_normal(
                                ctx,
                                v2153,
                                v36.0,
                                v36.1,
                                &ALUOp::AddS,
                                &Cond::Hs,
                            );
                            let v2157 = Some(v2156);
                            // Rule at src\isa\aarch64\lower.isle line 2723.
                            return v2157;
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2150 = constructor_overflow_op_small(
                                ctx,
                                v1164,
                                v36.0,
                                v36.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Add,
                            );
                            let v2151 = Some(v2150);
                            // Rule at src\isa\aarch64\lower.isle line 2719.
                            return v2151;
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2159 = constructor_overflow_op_128(
                                ctx,
                                v36.0,
                                v36.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Hs,
                            );
                            let v2160 = Some(v2159);
                            // Rule at src\isa\aarch64\lower.isle line 2727.
                            return v2160;
                        }
                    }
                }
                &Opcode::SaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2152 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2153) = v2152 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2165 = constructor_overflow_op_normal(
                                ctx,
                                v2153,
                                v36.0,
                                v36.1,
                                &ALUOp::AddS,
                                &Cond::Vs,
                            );
                            let v2166 = Some(v2165);
                            // Rule at src\isa\aarch64\lower.isle line 2741.
                            return v2166;
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2162 = constructor_overflow_op_small(
                                ctx,
                                v1164,
                                v36.0,
                                v36.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Add,
                            );
                            let v2163 = Some(v2162);
                            // Rule at src\isa\aarch64\lower.isle line 2736.
                            return v2163;
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2167 = constructor_overflow_op_128(
                                ctx,
                                v36.0,
                                v36.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Vs,
                            );
                            let v2168 = Some(v2167);
                            // Rule at src\isa\aarch64\lower.isle line 2747.
                            return v2168;
                        }
                    }
                }
                &Opcode::UsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2152 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2153) = v2152 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2173 = constructor_overflow_op_normal(
                                ctx,
                                v2153,
                                v36.0,
                                v36.1,
                                &ALUOp::SubS,
                                &Cond::Lo,
                            );
                            let v2174 = Some(v2173);
                            // Rule at src\isa\aarch64\lower.isle line 2761.
                            return v2174;
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2170 = constructor_overflow_op_small(
                                ctx,
                                v1164,
                                v36.0,
                                v36.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Sub,
                            );
                            let v2171 = Some(v2170);
                            // Rule at src\isa\aarch64\lower.isle line 2756.
                            return v2171;
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2176 = constructor_overflow_op_128(
                                ctx,
                                v36.0,
                                v36.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Lo,
                            );
                            let v2177 = Some(v2176);
                            // Rule at src\isa\aarch64\lower.isle line 2767.
                            return v2177;
                        }
                    }
                }
                &Opcode::SsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2152 = C::ty_32_or_64(ctx, v3);
                        if let Some(v2153) = v2152 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2180 = constructor_overflow_op_normal(
                                ctx,
                                v2153,
                                v36.0,
                                v36.1,
                                &ALUOp::SubS,
                                &Cond::Vs,
                            );
                            let v2181 = Some(v2180);
                            // Rule at src\isa\aarch64\lower.isle line 2781.
                            return v2181;
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2178 = constructor_overflow_op_small(
                                ctx,
                                v1164,
                                v36.0,
                                v36.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Sub,
                            );
                            let v2179 = Some(v2178);
                            // Rule at src\isa\aarch64\lower.isle line 2776.
                            return v2179;
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2182 = constructor_overflow_op_128(
                                ctx,
                                v36.0,
                                v36.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Vs,
                            );
                            let v2183 = Some(v2182);
                            // Rule at src\isa\aarch64\lower.isle line 2787.
                            return v2183;
                        }
                    }
                }
                &Opcode::UmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v328 = C::zero_reg(ctx);
                                let v2195 = constructor_umaddl(ctx, v39, v40, v328);
                                let v2197 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v2195,
                                    v2195,
                                    &ExtendOp::UXTW,
                                );
                                let v2198 = &constructor_cset(ctx, &Cond::Ne);
                                let v2199 = constructor_with_flags_reg(ctx, v2197, v2198);
                                let v2200 = C::value_reg(ctx, v2195);
                                let v2201 = C::value_reg(ctx, v2199);
                                let v2202 = C::output_pair(ctx, v2200, v2201);
                                let v2203 = Some(v2202);
                                // Rule at src\isa\aarch64\lower.isle line 2813.
                                return v2203;
                            }
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v328 = C::zero_reg(ctx);
                                let v2204 = constructor_madd(ctx, I64, v39, v40, v328);
                                let v1178 = C::put_in_reg(ctx, v36.0);
                                let v2205 = C::put_in_reg(ctx, v36.1);
                                let v2206 = constructor_umulh(ctx, I64, v1178, v2205);
                                let v2207 = C::u8_into_imm12(ctx, 0x0);
                                let v2208 = &constructor_cmp64_imm(ctx, v2206, v2207);
                                let v2209 = &constructor_cset(ctx, &Cond::Ne);
                                let v2210 = constructor_with_flags_reg(ctx, v2208, v2209);
                                let v2211 = C::value_reg(ctx, v2204);
                                let v2212 = C::value_reg(ctx, v2210);
                                let v2213 = C::output_pair(ctx, v2211, v2212);
                                let v2214 = Some(v2213);
                                // Rule at src\isa\aarch64\lower.isle line 2827.
                                return v2214;
                            }
                            _ => {}
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v2184 =
                                &constructor_lower_extend_op(ctx, v1164, &ArgumentExtension::Uext);
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2185 = constructor_put_in_reg_zext32(ctx, v36.0);
                            let v2186 = constructor_put_in_reg_zext32(ctx, v36.1);
                            let v1008 = C::zero_reg(ctx);
                            let v2187 = constructor_madd(ctx, v1164, v2185, v2186, v1008);
                            let v2188 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v2187,
                                v2187,
                                v2184,
                            );
                            let v2189 = &constructor_cset(ctx, &Cond::Ne);
                            let v2190 = constructor_with_flags_reg(ctx, v2188, v2189);
                            let v2191 = C::value_reg(ctx, v2187);
                            let v2192 = C::value_reg(ctx, v2190);
                            let v2193 = C::output_pair(ctx, v2191, v2192);
                            let v2194 = Some(v2193);
                            // Rule at src\isa\aarch64\lower.isle line 2797.
                            return v2194;
                        }
                    }
                }
                &Opcode::SmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v328 = C::zero_reg(ctx);
                                let v2225 = constructor_smaddl(ctx, v39, v40, v328);
                                let v2227 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v2225,
                                    v2225,
                                    &ExtendOp::SXTW,
                                );
                                let v2198 = &constructor_cset(ctx, &Cond::Ne);
                                let v2228 = constructor_with_flags_reg(ctx, v2227, v2198);
                                let v2229 = C::value_reg(ctx, v2225);
                                let v2230 = C::value_reg(ctx, v2228);
                                let v2231 = C::output_pair(ctx, v2229, v2230);
                                let v2232 = Some(v2231);
                                // Rule at src\isa\aarch64\lower.isle line 2861.
                                return v2232;
                            }
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v40 = C::put_in_reg(ctx, v36.1);
                                let v328 = C::zero_reg(ctx);
                                let v2204 = constructor_madd(ctx, I64, v39, v40, v328);
                                let v1178 = C::put_in_reg(ctx, v36.0);
                                let v2205 = C::put_in_reg(ctx, v36.1);
                                let v2233 = constructor_smulh(ctx, I64, v1178, v2205);
                                let v2235 = &constructor_cmp_rr_shift_asr(
                                    ctx,
                                    &OperandSize::Size64,
                                    v2233,
                                    v2204,
                                    0x3F,
                                );
                                let v2236 = &constructor_cset(ctx, &Cond::Ne);
                                let v2237 = constructor_with_flags_reg(ctx, v2235, v2236);
                                let v2238 = C::value_reg(ctx, v2204);
                                let v2239 = C::value_reg(ctx, v2237);
                                let v2240 = C::output_pair(ctx, v2238, v2239);
                                let v2241 = Some(v2240);
                                // Rule at src\isa\aarch64\lower.isle line 2875.
                                return v2241;
                            }
                            _ => {}
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v2215 =
                                &constructor_lower_extend_op(ctx, v1164, &ArgumentExtension::Sext);
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v2216 = constructor_put_in_reg_sext32(ctx, v36.0);
                            let v2217 = constructor_put_in_reg_sext32(ctx, v36.1);
                            let v1008 = C::zero_reg(ctx);
                            let v2218 = constructor_madd(ctx, v1164, v2216, v2217, v1008);
                            let v2219 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v2218,
                                v2218,
                                v2215,
                            );
                            let v2189 = &constructor_cset(ctx, &Cond::Ne);
                            let v2220 = constructor_with_flags_reg(ctx, v2219, v2189);
                            let v2221 = C::value_reg(ctx, v2218);
                            let v2222 = C::value_reg(ctx, v2220);
                            let v2223 = C::output_pair(ctx, v2221, v2222);
                            let v2224 = Some(v2223);
                            // Rule at src\isa\aarch64\lower.isle line 2845.
                            return v2224;
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v63 = C::put_in_reg(ctx, v36.1);
                                        let v1051 = C::put_in_reg(ctx, v361);
                                        let v716 = &constructor_vector_size(ctx, v715);
                                        let v1052 = constructor_bic_vec(ctx, v63, v1051, v716);
                                        let v1053 = constructor_output_reg(ctx, v1052);
                                        let v1054 = Some(v1053);
                                        // Rule at src\isa\aarch64\lower.isle line 1290.
                                        return v1054;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v39 = C::put_in_reg(ctx, v36.0);
                                        let v770 = C::put_in_reg(ctx, v363);
                                        let v716 = &constructor_vector_size(ctx, v715);
                                        let v1048 = constructor_bic_vec(ctx, v39, v770, v716);
                                        let v1049 = constructor_output_reg(ctx, v1048);
                                        let v1050 = Some(v1049);
                                        // Rule at src\isa\aarch64\lower.isle line 1288.
                                        return v1050;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v1045 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v36.1,
                                            v361,
                                        );
                                        let v1046 = C::output(ctx, v1045);
                                        let v1047 = Some(v1046);
                                        // Rule at src\isa\aarch64\lower.isle line 1286.
                                        return v1047;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v1042 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v36.0,
                                            v363,
                                        );
                                        let v1043 = C::output(ctx, v1042);
                                        let v1044 = Some(v1043);
                                        // Rule at src\isa\aarch64\lower.isle line 1285.
                                        return v1044;
                                    }
                                }
                            }
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v1039 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v33,
                                            v36.1,
                                            v361,
                                        );
                                        let v1040 = constructor_output_reg(ctx, v1039);
                                        let v1041 = Some(v1040);
                                        // Rule at src\isa\aarch64\lower.isle line 1282.
                                        return v1041;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v1036 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v33,
                                            v36.0,
                                            v363,
                                        );
                                        let v1037 = constructor_output_reg(ctx, v1036);
                                        let v1038 = Some(v1037);
                                        // Rule at src\isa\aarch64\lower.isle line 1280.
                                        return v1038;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1029 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v36.0, v36.1);
                            let v1030 = C::output(ctx, v1029);
                            let v1031 = Some(v1030);
                            // Rule at src\isa\aarch64\lower.isle line 1271.
                            return v1031;
                        }
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1026 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::And,
                                v33,
                                v36.0,
                                v36.1,
                            );
                            let v1027 = constructor_output_reg(ctx, v1026);
                            let v1028 = Some(v1027);
                            // Rule at src\isa\aarch64\lower.isle line 1268.
                            return v1028;
                        }
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v1032 = constructor_and_vec(ctx, v39, v40, v716);
                            let v1033 = constructor_output_reg(ctx, v1032);
                            let v1034 = Some(v1033);
                            // Rule at src\isa\aarch64\lower.isle line 1273.
                            return v1034;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v1075 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v36.1,
                                            v361,
                                        );
                                        let v1076 = C::output(ctx, v1075);
                                        let v1077 = Some(v1076);
                                        // Rule at src\isa\aarch64\lower.isle line 1313.
                                        return v1077;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v1072 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v36.0,
                                            v363,
                                        );
                                        let v1073 = C::output(ctx, v1072);
                                        let v1074 = Some(v1073);
                                        // Rule at src\isa\aarch64\lower.isle line 1312.
                                        return v1074;
                                    }
                                }
                            }
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v1069 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v33,
                                            v36.1,
                                            v361,
                                        );
                                        let v1070 = constructor_output_reg(ctx, v1069);
                                        let v1071 = Some(v1070);
                                        // Rule at src\isa\aarch64\lower.isle line 1309.
                                        return v1071;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v1066 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v33,
                                            v36.0,
                                            v363,
                                        );
                                        let v1067 = constructor_output_reg(ctx, v1066);
                                        let v1068 = Some(v1067);
                                        // Rule at src\isa\aarch64\lower.isle line 1307.
                                        return v1068;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1059 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v36.0, v36.1);
                            let v1060 = C::output(ctx, v1059);
                            let v1061 = Some(v1060);
                            // Rule at src\isa\aarch64\lower.isle line 1298.
                            return v1061;
                        }
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1056 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Orr,
                                v33,
                                v36.0,
                                v36.1,
                            );
                            let v1057 = constructor_output_reg(ctx, v1056);
                            let v1058 = Some(v1057);
                            // Rule at src\isa\aarch64\lower.isle line 1295.
                            return v1058;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v1062 = constructor_orr_vec(ctx, v39, v40, v716);
                            let v1063 = constructor_output_reg(ctx, v1062);
                            let v1064 = Some(v1063);
                            // Rule at src\isa\aarch64\lower.isle line 1300.
                            return v1064;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v1097 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v36.1,
                                            v361,
                                        );
                                        let v1098 = C::output(ctx, v1097);
                                        let v1099 = Some(v1098);
                                        // Rule at src\isa\aarch64\lower.isle line 1335.
                                        return v1099;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v1094 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v36.0,
                                            v363,
                                        );
                                        let v1095 = C::output(ctx, v1094);
                                        let v1096 = Some(v1095);
                                        // Rule at src\isa\aarch64\lower.isle line 1334.
                                        return v1096;
                                    }
                                }
                            }
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v55 = C::def_inst(ctx, v36.0);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::Unary {
                                    opcode: ref v360,
                                    arg: v361,
                                } = v57
                                {
                                    if let &Opcode::Bnot = v360 {
                                        let v1091 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v33,
                                            v36.1,
                                            v361,
                                        );
                                        let v1092 = constructor_output_reg(ctx, v1091);
                                        let v1093 = Some(v1092);
                                        // Rule at src\isa\aarch64\lower.isle line 1331.
                                        return v1093;
                                    }
                                }
                            }
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::Unary {
                                    opcode: ref v362,
                                    arg: v363,
                                } = v46
                                {
                                    if let &Opcode::Bnot = v362 {
                                        let v1088 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v33,
                                            v36.0,
                                            v363,
                                        );
                                        let v1089 = constructor_output_reg(ctx, v1088);
                                        let v1090 = Some(v1089);
                                        // Rule at src\isa\aarch64\lower.isle line 1329.
                                        return v1090;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1082 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v36.0, v36.1);
                            let v1083 = C::output(ctx, v1082);
                            let v1084 = Some(v1083);
                            // Rule at src\isa\aarch64\lower.isle line 1320.
                            return v1084;
                        }
                        if let Some(v33) = v32 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1079 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Eor,
                                v33,
                                v36.0,
                                v36.1,
                            );
                            let v1080 = constructor_output_reg(ctx, v1079);
                            let v1081 = Some(v1080);
                            // Rule at src\isa\aarch64\lower.isle line 1317.
                            return v1081;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v716 = &constructor_vector_size(ctx, v715);
                            let v1085 = constructor_eor_vec(ctx, v39, v40, v716);
                            let v1086 = constructor_output_reg(ctx, v1085);
                            let v1087 = Some(v1086);
                            // Rule at src\isa\aarch64\lower.isle line 1322.
                            return v1087;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v47,
                                        imm: v48,
                                    } = v46
                                    {
                                        if let &Opcode::Iconst = v47 {
                                            let v1186 = C::imm_shift_from_imm64(ctx, I32, v48);
                                            if let Some(v1187) = v1186 {
                                                let v39 = C::put_in_reg(ctx, v36.0);
                                                let v1188 = C::negate_imm_shift(ctx, I32, v1187);
                                                let v1189 =
                                                    constructor_a64_rotr_imm(ctx, I32, v39, v1188);
                                                let v1190 = constructor_output_reg(ctx, v1189);
                                                let v1191 = Some(v1190);
                                                // Rule at src\isa\aarch64\lower.isle line 1579.
                                                return v1191;
                                            }
                                        }
                                    }
                                }
                                let v1165 = C::put_in_regs(ctx, v36.1);
                                let v1166 = C::value_regs_get(ctx, v1165, 0x0);
                                let v328 = C::zero_reg(ctx);
                                let v1167 = constructor_sub(ctx, I32, v328, v1166);
                                let v1178 = C::put_in_reg(ctx, v36.0);
                                let v1179 = constructor_a64_rotr(ctx, I32, v1178, v1167);
                                let v1180 = constructor_output_reg(ctx, v1179);
                                let v1181 = Some(v1180);
                                // Rule at src\isa\aarch64\lower.isle line 1567.
                                return v1181;
                            }
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v47,
                                        imm: v48,
                                    } = v46
                                    {
                                        if let &Opcode::Iconst = v47 {
                                            let v1192 = C::imm_shift_from_imm64(ctx, I64, v48);
                                            if let Some(v1193) = v1192 {
                                                let v39 = C::put_in_reg(ctx, v36.0);
                                                let v1194 = C::negate_imm_shift(ctx, I64, v1193);
                                                let v1195 =
                                                    constructor_a64_rotr_imm(ctx, I64, v39, v1194);
                                                let v1196 = constructor_output_reg(ctx, v1195);
                                                let v1197 = Some(v1196);
                                                // Rule at src\isa\aarch64\lower.isle line 1584.
                                                return v1197;
                                            }
                                        }
                                    }
                                }
                                let v1165 = C::put_in_regs(ctx, v36.1);
                                let v1166 = C::value_regs_get(ctx, v1165, 0x0);
                                let v328 = C::zero_reg(ctx);
                                let v1182 = constructor_sub(ctx, I64, v328, v1166);
                                let v1178 = C::put_in_reg(ctx, v36.0);
                                let v1183 = constructor_a64_rotr(ctx, I64, v1178, v1182);
                                let v1184 = constructor_output_reg(ctx, v1183);
                                let v1185 = Some(v1184);
                                // Rule at src\isa\aarch64\lower.isle line 1573.
                                return v1185;
                            }
                            I128 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v142 = C::put_in_regs(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1199 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v1200 = constructor_sub(ctx, I64, v1199, v1107);
                                let v1201 = constructor_lower_shl128(ctx, v142, v1107);
                                let v1202 = constructor_lower_ushr128(ctx, v142, v1200);
                                let v1203 = C::value_regs_get(ctx, v1201, 0x0);
                                let v1204 = C::value_regs_get(ctx, v1202, 0x0);
                                let v1205 = constructor_orr(ctx, I64, v1203, v1204);
                                let v1206 = C::value_regs_get(ctx, v1201, 0x1);
                                let v1207 = C::value_regs_get(ctx, v1202, 0x1);
                                let v1208 = constructor_orr(ctx, I64, v1206, v1207);
                                let v1209 = C::value_regs(ctx, v1205, v1208);
                                let v1210 = C::output(ctx, v1209);
                                let v1211 = Some(v1210);
                                // Rule at src\isa\aarch64\lower.isle line 1594.
                                return v1211;
                            }
                            _ => {}
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v1172 = C::imm_shift_from_imm64(ctx, v1164, v48);
                                        if let Some(v1173) = v1172 {
                                            let v1124 = constructor_put_in_reg_zext32(ctx, v36.0);
                                            let v1174 = C::negate_imm_shift(ctx, v1164, v1173);
                                            let v1175 = constructor_small_rotr_imm(
                                                ctx, v1164, v1124, v1174,
                                            );
                                            let v1176 = constructor_output_reg(ctx, v1175);
                                            let v1177 = Some(v1176);
                                            // Rule at src\isa\aarch64\lower.isle line 1554.
                                            return v1177;
                                        }
                                    }
                                }
                            }
                            let v1165 = C::put_in_regs(ctx, v36.1);
                            let v1166 = C::value_regs_get(ctx, v1165, 0x0);
                            let v328 = C::zero_reg(ctx);
                            let v1167 = constructor_sub(ctx, I32, v328, v1166);
                            let v1168 = constructor_put_in_reg_zext32(ctx, v36.0);
                            let v1169 = constructor_small_rotr(ctx, v1164, v1168, v1167);
                            let v1170 = constructor_output_reg(ctx, v1169);
                            let v1171 = Some(v1170);
                            // Rule at src\isa\aarch64\lower.isle line 1548.
                            return v1171;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v47,
                                        imm: v48,
                                    } = v46
                                    {
                                        if let &Opcode::Iconst = v47 {
                                            let v1186 = C::imm_shift_from_imm64(ctx, I32, v48);
                                            if let Some(v1187) = v1186 {
                                                let v39 = C::put_in_reg(ctx, v36.0);
                                                let v1224 =
                                                    constructor_a64_rotr_imm(ctx, I32, v39, v1187);
                                                let v1225 = constructor_output_reg(ctx, v1224);
                                                let v1226 = Some(v1225);
                                                // Rule at src\isa\aarch64\lower.isle line 1624.
                                                return v1226;
                                            }
                                        }
                                    }
                                }
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1215 = constructor_a64_rotr(ctx, I32, v39, v1107);
                                let v1216 = constructor_output_reg(ctx, v1215);
                                let v1217 = Some(v1216);
                                // Rule at src\isa\aarch64\lower.isle line 1611.
                                return v1217;
                            }
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v47,
                                        imm: v48,
                                    } = v46
                                    {
                                        if let &Opcode::Iconst = v47 {
                                            let v1192 = C::imm_shift_from_imm64(ctx, I64, v48);
                                            if let Some(v1193) = v1192 {
                                                let v39 = C::put_in_reg(ctx, v36.0);
                                                let v1227 =
                                                    constructor_a64_rotr_imm(ctx, I64, v39, v1193);
                                                let v1228 = constructor_output_reg(ctx, v1227);
                                                let v1229 = Some(v1228);
                                                // Rule at src\isa\aarch64\lower.isle line 1629.
                                                return v1229;
                                            }
                                        }
                                    }
                                }
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1218 = constructor_a64_rotr(ctx, I64, v39, v1107);
                                let v1219 = constructor_output_reg(ctx, v1218);
                                let v1220 = Some(v1219);
                                // Rule at src\isa\aarch64\lower.isle line 1615.
                                return v1220;
                            }
                            I128 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v142 = C::put_in_regs(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1199 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v1200 = constructor_sub(ctx, I64, v1199, v1107);
                                let v1230 = constructor_lower_ushr128(ctx, v142, v1107);
                                let v1231 = constructor_lower_shl128(ctx, v142, v1200);
                                let v1232 = C::value_regs_get(ctx, v1230, 0x1);
                                let v1233 = C::value_regs_get(ctx, v1231, 0x1);
                                let v1234 = constructor_orr(ctx, I64, v1232, v1233);
                                let v1235 = C::value_regs_get(ctx, v1230, 0x0);
                                let v1236 = C::value_regs_get(ctx, v1231, 0x0);
                                let v1237 = constructor_orr(ctx, I64, v1235, v1236);
                                let v1238 = C::value_regs(ctx, v1237, v1234);
                                let v1239 = C::output(ctx, v1238);
                                let v1240 = Some(v1239);
                                // Rule at src\isa\aarch64\lower.isle line 1678.
                                return v1240;
                            }
                            _ => {}
                        }
                        let v1163 = C::fits_in_16(ctx, v3);
                        if let Some(v1164) = v1163 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v1172 = C::imm_shift_from_imm64(ctx, v1164, v48);
                                        if let Some(v1173) = v1172 {
                                            let v1124 = constructor_put_in_reg_zext32(ctx, v36.0);
                                            let v1221 = constructor_small_rotr_imm(
                                                ctx, v1164, v1124, v1173,
                                            );
                                            let v1222 = constructor_output_reg(ctx, v1221);
                                            let v1223 = Some(v1222);
                                            // Rule at src\isa\aarch64\lower.isle line 1619.
                                            return v1223;
                                        }
                                    }
                                }
                            }
                            let v1124 = constructor_put_in_reg_zext32(ctx, v36.0);
                            let v710 = C::put_in_regs(ctx, v36.1);
                            let v1107 = C::value_regs_get(ctx, v710, 0x0);
                            let v1212 = constructor_small_rotr(ctx, v1164, v1124, v1107);
                            let v1213 = constructor_output_reg(ctx, v1212);
                            let v1214 = Some(v1213);
                            // Rule at src\isa\aarch64\lower.isle line 1607.
                            return v1214;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v1104 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v39, v36.1);
                                let v1105 = constructor_output_reg(ctx, v1104);
                                let v1106 = Some(v1105);
                                // Rule at src\isa\aarch64\lower.isle line 1344.
                                return v1106;
                            }
                            I128 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v142 = C::put_in_regs(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1108 = constructor_lower_shl128(ctx, v142, v1107);
                                let v1109 = C::output(ctx, v1108);
                                let v1110 = Some(v1109);
                                // Rule at src\isa\aarch64\lower.isle line 1348.
                                return v1110;
                            }
                            _ => {}
                        }
                        let v387 = C::fits_in_32(ctx, v3);
                        if let Some(v388) = v387 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v1101 = constructor_do_shift(ctx, &ALUOp::Lsl, v388, v39, v36.1);
                            let v1102 = constructor_output_reg(ctx, v1101);
                            let v1103 = Some(v1102);
                            // Rule at src\isa\aarch64\lower.isle line 1340.
                            return v1103;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v39 = C::put_in_reg(ctx, v36.0);
                                        let v739 = &constructor_vector_size(ctx, v715);
                                        let v49 = C::u64_from_imm64(ctx, v48);
                                        let v1119 = C::shift_masked_imm(ctx, v715, v49);
                                        let v1120 = constructor_ushl_vec_imm(ctx, v39, v1119, v739);
                                        let v1121 = constructor_output_reg(ctx, v1120);
                                        let v1122 = Some(v1121);
                                        // Rule at src\isa\aarch64\lower.isle line 1383.
                                        return v1122;
                                    }
                                }
                            }
                            let v1111 = &constructor_vector_size(ctx, v715);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1113 = C::shift_mask(ctx, v715);
                            let v1114 = constructor_and_imm(ctx, I32, v40, v1113);
                            let v1115 = constructor_vec_dup(ctx, v1114, v1111);
                            let v409 = C::put_in_reg(ctx, v36.0);
                            let v1116 = constructor_sshl(ctx, v409, v1115, v1111);
                            let v1117 = constructor_output_reg(ctx, v1116);
                            let v1118 = Some(v1117);
                            // Rule at src\isa\aarch64\lower.isle line 1378.
                            return v1118;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v821 = constructor_put_in_reg_zext64(ctx, v36.0);
                                let v1128 =
                                    constructor_do_shift(ctx, &ALUOp::Lsr, I64, v821, v36.1);
                                let v1129 = constructor_output_reg(ctx, v1128);
                                let v1130 = Some(v1129);
                                // Rule at src\isa\aarch64\lower.isle line 1435.
                                return v1130;
                            }
                            I128 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v142 = C::put_in_regs(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1131 = constructor_lower_ushr128(ctx, v142, v1107);
                                let v1132 = C::output(ctx, v1131);
                                let v1133 = Some(v1132);
                                // Rule at src\isa\aarch64\lower.isle line 1439.
                                return v1133;
                            }
                            _ => {}
                        }
                        let v387 = C::fits_in_32(ctx, v3);
                        if let Some(v388) = v387 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1124 = constructor_put_in_reg_zext32(ctx, v36.0);
                            let v1125 = constructor_do_shift(ctx, &ALUOp::Lsr, v388, v1124, v36.1);
                            let v1126 = constructor_output_reg(ctx, v1125);
                            let v1127 = Some(v1126);
                            // Rule at src\isa\aarch64\lower.isle line 1431.
                            return v1127;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v49 = C::u64_from_imm64(ctx, v48);
                                        let v1119 = C::shift_masked_imm(ctx, v715, v49);
                                        if v1119 == 0x0 {
                                            let v1144 = constructor_output_value(ctx, v36.0);
                                            let v1145 = Some(v1144);
                                            // Rule at src\isa\aarch64\lower.isle line 1454.
                                            return v1145;
                                        }
                                        let v39 = C::put_in_reg(ctx, v36.0);
                                        let v739 = &constructor_vector_size(ctx, v715);
                                        let v1141 = constructor_ushr_vec_imm(ctx, v39, v1119, v739);
                                        let v1142 = constructor_output_reg(ctx, v1141);
                                        let v1143 = Some(v1142);
                                        // Rule at src\isa\aarch64\lower.isle line 1452.
                                        return v1143;
                                    }
                                }
                            }
                            let v1111 = &constructor_vector_size(ctx, v715);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1113 = C::shift_mask(ctx, v715);
                            let v1114 = constructor_and_imm(ctx, I32, v40, v1113);
                            let v1134 = C::zero_reg(ctx);
                            let v1135 = constructor_sub(ctx, I64, v1134, v1114);
                            let v1136 = constructor_vec_dup(ctx, v1135, v1111);
                            let v1137 = C::put_in_reg(ctx, v36.0);
                            let v1138 = constructor_ushl(ctx, v1137, v1136, v1111);
                            let v1139 = constructor_output_reg(ctx, v1138);
                            let v1140 = Some(v1139);
                            // Rule at src\isa\aarch64\lower.isle line 1447.
                            return v1140;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v810 = constructor_put_in_reg_sext64(ctx, v36.0);
                                let v1151 =
                                    constructor_do_shift(ctx, &ALUOp::Asr, I64, v810, v36.1);
                                let v1152 = constructor_output_reg(ctx, v1151);
                                let v1153 = Some(v1152);
                                // Rule at src\isa\aarch64\lower.isle line 1492.
                                return v1153;
                            }
                            I128 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v142 = C::put_in_regs(ctx, v36.0);
                                let v710 = C::put_in_regs(ctx, v36.1);
                                let v1107 = C::value_regs_get(ctx, v710, 0x0);
                                let v1154 = constructor_lower_sshr128(ctx, v142, v1107);
                                let v1155 = C::output(ctx, v1154);
                                let v1156 = Some(v1155);
                                // Rule at src\isa\aarch64\lower.isle line 1496.
                                return v1156;
                            }
                            _ => {}
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v44 = C::def_inst(ctx, v36.1);
                            if let Some(v45) = v44 {
                                let v46 = &C::inst_data(ctx, v45);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v47,
                                    imm: v48,
                                } = v46
                                {
                                    if let &Opcode::Iconst = v47 {
                                        let v49 = C::u64_from_imm64(ctx, v48);
                                        let v1119 = C::shift_masked_imm(ctx, v715, v49);
                                        if v1119 == 0x0 {
                                            let v1144 = constructor_output_value(ctx, v36.0);
                                            let v1145 = Some(v1144);
                                            // Rule at src\isa\aarch64\lower.isle line 1512.
                                            return v1145;
                                        }
                                        let v39 = C::put_in_reg(ctx, v36.0);
                                        let v739 = &constructor_vector_size(ctx, v715);
                                        let v1160 = constructor_sshr_vec_imm(ctx, v39, v1119, v739);
                                        let v1161 = constructor_output_reg(ctx, v1160);
                                        let v1162 = Some(v1161);
                                        // Rule at src\isa\aarch64\lower.isle line 1510.
                                        return v1162;
                                    }
                                }
                            }
                            let v1111 = &constructor_vector_size(ctx, v715);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1113 = C::shift_mask(ctx, v715);
                            let v1114 = constructor_and_imm(ctx, I32, v40, v1113);
                            let v1134 = C::zero_reg(ctx);
                            let v1135 = constructor_sub(ctx, I64, v1134, v1114);
                            let v1136 = constructor_vec_dup(ctx, v1135, v1111);
                            let v1137 = C::put_in_reg(ctx, v36.0);
                            let v1157 = constructor_sshl(ctx, v1137, v1136, v1111);
                            let v1158 = constructor_output_reg(ctx, v1157);
                            let v1159 = Some(v1158);
                            // Rule at src\isa\aarch64\lower.isle line 1505.
                            return v1159;
                        }
                        let v387 = C::fits_in_32(ctx, v3);
                        if let Some(v388) = v387 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1147 = constructor_put_in_reg_sext32(ctx, v36.0);
                            let v1148 = constructor_do_shift(ctx, &ALUOp::Asr, v388, v1147, v36.1);
                            let v1149 = constructor_output_reg(ctx, v1148);
                            let v1150 = Some(v1149);
                            // Rule at src\isa\aarch64\lower.isle line 1488.
                            return v1150;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v436 = &constructor_scalar_size(ctx, v434);
                            let v437 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v39, v40, v436);
                            let v438 = constructor_output_reg(ctx, v437);
                            let v439 = Some(v438);
                            // Rule at src\isa\aarch64\lower.isle line 393.
                            return v439;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v430 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v39, v40, v138);
                            let v431 = constructor_output_reg(ctx, v430);
                            let v432 = Some(v431);
                            // Rule at src\isa\aarch64\lower.isle line 390.
                            return v432;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v430 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v39, v40, v138);
                            let v2272 = C::value_reg(ctx, v430);
                            let v2273 = C::output(ctx, v2272);
                            let v2274 = Some(v2273);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 15.
                            return v2274;
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v436 = &constructor_scalar_size(ctx, v434);
                            let v445 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v39, v40, v436);
                            let v446 = constructor_output_reg(ctx, v445);
                            let v447 = Some(v446);
                            // Rule at src\isa\aarch64\lower.isle line 401.
                            return v447;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v441 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v39, v40, v138);
                            let v442 = constructor_output_reg(ctx, v441);
                            let v443 = Some(v442);
                            // Rule at src\isa\aarch64\lower.isle line 398.
                            return v443;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v441 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v39, v40, v138);
                            let v2275 = C::value_reg(ctx, v441);
                            let v2276 = C::output(ctx, v2275);
                            let v2277 = Some(v2276);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 19.
                            return v2277;
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v436 = &constructor_scalar_size(ctx, v434);
                            let v453 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v39, v40, v436);
                            let v454 = constructor_output_reg(ctx, v453);
                            let v455 = Some(v454);
                            // Rule at src\isa\aarch64\lower.isle line 409.
                            return v455;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v449 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v39, v40, v138);
                            let v450 = constructor_output_reg(ctx, v449);
                            let v451 = Some(v450);
                            // Rule at src\isa\aarch64\lower.isle line 406.
                            return v451;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v449 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v39, v40, v138);
                            let v2278 = C::value_reg(ctx, v449);
                            let v2279 = C::output(ctx, v2278);
                            let v2280 = Some(v2279);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 23.
                            return v2280;
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v436 = &constructor_scalar_size(ctx, v434);
                            let v461 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v39, v40, v436);
                            let v462 = constructor_output_reg(ctx, v461);
                            let v463 = Some(v462);
                            // Rule at src\isa\aarch64\lower.isle line 417.
                            return v463;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v457 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v39, v40, v138);
                            let v458 = constructor_output_reg(ctx, v457);
                            let v459 = Some(v458);
                            // Rule at src\isa\aarch64\lower.isle line 414.
                            return v459;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v457 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v39, v40, v138);
                            let v2281 = C::value_reg(ctx, v457);
                            let v2282 = C::output(ctx, v2281);
                            let v2283 = Some(v2282);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 27.
                            return v2283;
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v36 = C::unpack_value_array_2(ctx, v35);
                        let v39 = C::put_in_reg(ctx, v36.0);
                        let v40 = C::put_in_reg(ctx, v36.1);
                        let v3 = C::value_type(ctx, v2);
                        let v581 = constructor_fcopy_sign(ctx, v39, v40, v3);
                        let v582 = constructor_output_reg(ctx, v581);
                        let v583 = Some(v582);
                        // Rule at src\isa\aarch64\lower.isle line 594.
                        return v583;
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v436 = &constructor_scalar_size(ctx, v434);
                            let v469 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v39, v40, v436);
                            let v470 = constructor_output_reg(ctx, v469);
                            let v471 = Some(v470);
                            // Rule at src\isa\aarch64\lower.isle line 425.
                            return v471;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v465 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v39, v40, v138);
                            let v466 = constructor_output_reg(ctx, v465);
                            let v467 = Some(v466);
                            // Rule at src\isa\aarch64\lower.isle line 422.
                            return v467;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v465 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v39, v40, v138);
                            let v2284 = C::value_reg(ctx, v465);
                            let v2285 = C::output(ctx, v2284);
                            let v2286 = Some(v2285);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 31.
                            return v2286;
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v436 = &constructor_scalar_size(ctx, v434);
                            let v477 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v39, v40, v436);
                            let v478 = constructor_output_reg(ctx, v477);
                            let v479 = Some(v478);
                            // Rule at src\isa\aarch64\lower.isle line 433.
                            return v479;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v473 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v39, v40, v138);
                            let v474 = constructor_output_reg(ctx, v473);
                            let v475 = Some(v474);
                            // Rule at src\isa\aarch64\lower.isle line 430.
                            return v475;
                        }
                        let v2253 = C::dynamic_lane(ctx, v3);
                        if let Some(v2254) = v2253 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v138 = &constructor_vector_size(ctx, v3);
                            let v473 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v39, v40, v138);
                            let v2287 = C::value_reg(ctx, v473);
                            let v2288 = C::output(ctx, v2287);
                            let v2289 = Some(v2288);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 35.
                            return v2289;
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1758 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1759) = v1758 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1760 = constructor_mov_vec_elem(
                                ctx,
                                v39,
                                v40,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1761 = &constructor_lane_size(ctx, v1759);
                            let v1762 = constructor_sqxtn(ctx, v1760, v1761);
                            let v1763 = constructor_output_reg(ctx, v1762);
                            let v1764 = Some(v1763);
                            // Rule at src\isa\aarch64\lower.isle line 2180.
                            return v1764;
                        }
                        let v1750 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1751) = v1750 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1752 = C::zero_value(ctx, v36.1);
                            if let Some(v1753) = v1752 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v1754 = &constructor_lane_size(ctx, v1751);
                                let v1755 = constructor_sqxtn(ctx, v39, v1754);
                                let v1756 = constructor_output_reg(ctx, v1755);
                                let v1757 = Some(v1756);
                                // Rule at src\isa\aarch64\lower.isle line 2176.
                                return v1757;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v1754 = &constructor_lane_size(ctx, v1751);
                            let v1755 = constructor_sqxtn(ctx, v39, v1754);
                            let v1765 = C::put_in_reg(ctx, v36.1);
                            let v1766 = &constructor_lane_size(ctx, v1751);
                            let v1767 = constructor_sqxtn2(ctx, v1755, v1765, v1766);
                            let v1768 = constructor_output_reg(ctx, v1767);
                            let v1769 = Some(v1768);
                            // Rule at src\isa\aarch64\lower.isle line 2184.
                            return v1769;
                        }
                        let v2296 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2297) = v2296 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1760 = constructor_mov_vec_elem(
                                ctx,
                                v39,
                                v40,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v2298 = &constructor_lane_size(ctx, v2297);
                            let v2299 = constructor_sqxtn(ctx, v1760, v2298);
                            let v2300 = constructor_output_reg(ctx, v2299);
                            let v2301 = Some(v2300);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 43.
                            return v2301;
                        }
                        let v2290 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2291) = v2290 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1752 = C::zero_value(ctx, v36.1);
                            if let Some(v1753) = v1752 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v2292 = &constructor_lane_size(ctx, v2291);
                                let v2293 = constructor_sqxtn(ctx, v39, v2292);
                                let v2294 = constructor_output_reg(ctx, v2293);
                                let v2295 = Some(v2294);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 39.
                                return v2295;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v2292 = &constructor_lane_size(ctx, v2291);
                            let v2293 = constructor_sqxtn(ctx, v39, v2292);
                            let v1765 = C::put_in_reg(ctx, v36.1);
                            let v2302 = &constructor_lane_size(ctx, v2291);
                            let v2303 = constructor_sqxtn2(ctx, v2293, v1765, v2302);
                            let v2304 = constructor_output_reg(ctx, v2303);
                            let v2305 = Some(v2304);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 47.
                            return v2305;
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1758 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1759) = v1758 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1760 = constructor_mov_vec_elem(
                                ctx,
                                v39,
                                v40,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1761 = &constructor_lane_size(ctx, v1759);
                            let v1773 = constructor_sqxtun(ctx, v1760, v1761);
                            let v1774 = constructor_output_reg(ctx, v1773);
                            let v1775 = Some(v1774);
                            // Rule at src\isa\aarch64\lower.isle line 2195.
                            return v1775;
                        }
                        let v1750 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1751) = v1750 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1752 = C::zero_value(ctx, v36.1);
                            if let Some(v1753) = v1752 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v1754 = &constructor_lane_size(ctx, v1751);
                                let v1770 = constructor_sqxtun(ctx, v39, v1754);
                                let v1771 = constructor_output_reg(ctx, v1770);
                                let v1772 = Some(v1771);
                                // Rule at src\isa\aarch64\lower.isle line 2191.
                                return v1772;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v1754 = &constructor_lane_size(ctx, v1751);
                            let v1770 = constructor_sqxtun(ctx, v39, v1754);
                            let v1765 = C::put_in_reg(ctx, v36.1);
                            let v1766 = &constructor_lane_size(ctx, v1751);
                            let v1776 = constructor_sqxtun2(ctx, v1770, v1765, v1766);
                            let v1777 = constructor_output_reg(ctx, v1776);
                            let v1778 = Some(v1777);
                            // Rule at src\isa\aarch64\lower.isle line 2199.
                            return v1778;
                        }
                        let v2296 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2297) = v2296 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1760 = constructor_mov_vec_elem(
                                ctx,
                                v39,
                                v40,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v2298 = &constructor_lane_size(ctx, v2297);
                            let v2309 = constructor_sqxtun(ctx, v1760, v2298);
                            let v2310 = constructor_output_reg(ctx, v2309);
                            let v2311 = Some(v2310);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 57.
                            return v2311;
                        }
                        let v2290 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2291) = v2290 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1752 = C::zero_value(ctx, v36.1);
                            if let Some(v1753) = v1752 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v2292 = &constructor_lane_size(ctx, v2291);
                                let v2306 = constructor_sqxtun(ctx, v39, v2292);
                                let v2307 = constructor_output_reg(ctx, v2306);
                                let v2308 = Some(v2307);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 53.
                                return v2308;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v2292 = &constructor_lane_size(ctx, v2291);
                            let v2306 = constructor_sqxtun(ctx, v39, v2292);
                            let v1765 = C::put_in_reg(ctx, v36.1);
                            let v2302 = &constructor_lane_size(ctx, v2291);
                            let v2312 = constructor_sqxtun2(ctx, v2306, v1765, v2302);
                            let v2313 = constructor_output_reg(ctx, v2312);
                            let v2314 = Some(v2313);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 61.
                            return v2314;
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1758 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1759) = v1758 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1760 = constructor_mov_vec_elem(
                                ctx,
                                v39,
                                v40,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1761 = &constructor_lane_size(ctx, v1759);
                            let v1782 = constructor_uqxtn(ctx, v1760, v1761);
                            let v1783 = constructor_output_reg(ctx, v1782);
                            let v1784 = Some(v1783);
                            // Rule at src\isa\aarch64\lower.isle line 2211.
                            return v1784;
                        }
                        let v1750 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1751) = v1750 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1752 = C::zero_value(ctx, v36.1);
                            if let Some(v1753) = v1752 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v1754 = &constructor_lane_size(ctx, v1751);
                                let v1779 = constructor_uqxtn(ctx, v39, v1754);
                                let v1780 = constructor_output_reg(ctx, v1779);
                                let v1781 = Some(v1780);
                                // Rule at src\isa\aarch64\lower.isle line 2207.
                                return v1781;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v1754 = &constructor_lane_size(ctx, v1751);
                            let v1779 = constructor_uqxtn(ctx, v39, v1754);
                            let v1765 = C::put_in_reg(ctx, v36.1);
                            let v1766 = &constructor_lane_size(ctx, v1751);
                            let v1785 = constructor_uqxtn2(ctx, v1779, v1765, v1766);
                            let v1786 = constructor_output_reg(ctx, v1785);
                            let v1787 = Some(v1786);
                            // Rule at src\isa\aarch64\lower.isle line 2215.
                            return v1787;
                        }
                        let v2296 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v2297) = v2296 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v1760 = constructor_mov_vec_elem(
                                ctx,
                                v39,
                                v40,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v2298 = &constructor_lane_size(ctx, v2297);
                            let v2318 = constructor_uqxtn(ctx, v1760, v2298);
                            let v2319 = constructor_output_reg(ctx, v2318);
                            let v2320 = Some(v2319);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 71.
                            return v2320;
                        }
                        let v2290 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v2291) = v2290 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v1752 = C::zero_value(ctx, v36.1);
                            if let Some(v1753) = v1752 {
                                let v39 = C::put_in_reg(ctx, v36.0);
                                let v2292 = &constructor_lane_size(ctx, v2291);
                                let v2315 = constructor_uqxtn(ctx, v39, v2292);
                                let v2316 = constructor_output_reg(ctx, v2315);
                                let v2317 = Some(v2316);
                                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 67.
                                return v2317;
                            }
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v2292 = &constructor_lane_size(ctx, v2291);
                            let v2315 = constructor_uqxtn(ctx, v39, v2292);
                            let v1765 = C::put_in_reg(ctx, v36.1);
                            let v2302 = &constructor_lane_size(ctx, v2291);
                            let v2321 = constructor_uqxtn2(ctx, v2315, v1765, v2302);
                            let v2322 = constructor_output_reg(ctx, v2321);
                            let v2323 = Some(v2322);
                            // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 75.
                            return v2323;
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::Unary {
                                        opcode: ref v362,
                                        arg: v363,
                                    } = v46
                                    {
                                        match v362 {
                                            &Opcode::SwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenLow = v360 {
                                                            if v361 == v363 {
                                                                let v364 = C::put_in_reg(ctx, v361);
                                                                let v365 =
                                                                    constructor_saddlp8(ctx, v364);
                                                                let v366 = constructor_output_reg(
                                                                    ctx, v365,
                                                                );
                                                                let v367 = Some(v366);
                                                                // Rule at src\isa\aarch64\lower.isle line 322.
                                                                return v367;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenLow = v360 {
                                                            if v361 == v363 {
                                                                let v364 = C::put_in_reg(ctx, v361);
                                                                let v371 =
                                                                    constructor_uaddlp8(ctx, v364);
                                                                let v372 = constructor_output_reg(
                                                                    ctx, v371,
                                                                );
                                                                let v373 = Some(v372);
                                                                // Rule at src\isa\aarch64\lower.isle line 330.
                                                                return v373;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v36 = C::unpack_value_array_2(ctx, v35);
                                let v44 = C::def_inst(ctx, v36.1);
                                if let Some(v45) = v44 {
                                    let v46 = &C::inst_data(ctx, v45);
                                    if let &InstructionData::Unary {
                                        opcode: ref v362,
                                        arg: v363,
                                    } = v46
                                    {
                                        match v362 {
                                            &Opcode::SwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::SwidenLow = v360 {
                                                            if v361 == v363 {
                                                                let v364 = C::put_in_reg(ctx, v361);
                                                                let v368 =
                                                                    constructor_saddlp16(ctx, v364);
                                                                let v369 = constructor_output_reg(
                                                                    ctx, v368,
                                                                );
                                                                let v370 = Some(v369);
                                                                // Rule at src\isa\aarch64\lower.isle line 326.
                                                                return v370;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v55 = C::def_inst(ctx, v36.0);
                                                if let Some(v56) = v55 {
                                                    let v57 = &C::inst_data(ctx, v56);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v360,
                                                        arg: v361,
                                                    } = v57
                                                    {
                                                        if let &Opcode::UwidenLow = v360 {
                                                            if v361 == v363 {
                                                                let v364 = C::put_in_reg(ctx, v361);
                                                                let v374 =
                                                                    constructor_uaddlp16(ctx, v364);
                                                                let v375 = constructor_output_reg(
                                                                    ctx, v374,
                                                                );
                                                                let v376 = Some(v375);
                                                                // Rule at src\isa\aarch64\lower.isle line 334.
                                                                return v376;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v36 = C::unpack_value_array_2(ctx, v35);
                        let v39 = C::put_in_reg(ctx, v36.0);
                        let v40 = C::put_in_reg(ctx, v36.1);
                        let v138 = &constructor_vector_size(ctx, v3);
                        let v377 = constructor_addp(ctx, v39, v40, v138);
                        let v378 = constructor_output_reg(ctx, v377);
                        let v379 = Some(v378);
                        // Rule at src\isa\aarch64\lower.isle line 337.
                        return v379;
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v36 = C::unpack_value_array_2(ctx, v35);
                            let v39 = C::put_in_reg(ctx, v36.0);
                            let v40 = C::put_in_reg(ctx, v36.1);
                            let v292 = C::value_regs(ctx, v39, v40);
                            let v293 = C::output(ctx, v292);
                            let v294 = Some(v293);
                            // Rule at src\isa\aarch64\lower.isle line 255.
                            return v294;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2052,
            arg: v2053,
            imm: v2054,
        } => {
            match v2052 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v2055 = C::u8_from_uimm8(ctx, v2054);
                            if v2055 == 0x0 {
                                let v2056 = constructor_output_value(ctx, v2053);
                                let v2057 = Some(v2056);
                                // Rule at src\isa\aarch64\lower.isle line 2534.
                                return v2057;
                            }
                            let v2058 = C::put_in_reg(ctx, v2053);
                            let v2063 = C::value_type(ctx, v2053);
                            let v2064 = &constructor_vector_size(ctx, v2063);
                            let v2065 = constructor_fpu_move_from_vec(ctx, v2058, v2055, v2064);
                            let v2066 = constructor_output_reg(ctx, v2065);
                            let v2067 = Some(v2066);
                            // Rule at src\isa\aarch64\lower.isle line 2542.
                            return v2067;
                        }
                        let v851 = C::ty_int(ctx, v3);
                        if let Some(v852) = v851 {
                            let v2058 = C::put_in_reg(ctx, v2053);
                            let v2059 = &constructor_scalar_size(ctx, v852);
                            let v2055 = C::u8_from_uimm8(ctx, v2054);
                            let v2060 = constructor_mov_from_vec(ctx, v2058, v2055, v2059);
                            let v2061 = constructor_output_reg(ctx, v2060);
                            let v2062 = Some(v2061);
                            // Rule at src\isa\aarch64\lower.isle line 2537.
                            return v2062;
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v2054 == 0x0 {
                        let v2058 = C::put_in_reg(ctx, v2053);
                        let v2333 = C::value_reg(ctx, v2058);
                        let v2334 = C::output(ctx, v2333);
                        let v2335 = Some(v2334);
                        // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 87.
                        return v2335;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1861,
            args: v1862,
            func_ref: v1863,
        } => {
            match v1861 {
                &Opcode::Call => {
                    let v1865 = C::func_ref_data(ctx, v1863);
                    let v1864 = C::value_list_slice(ctx, v1862);
                    let v1869 = C::gen_call(ctx, v1865.0, v1865.1, v1865.2, v1864);
                    let v1870 = Some(v1869);
                    // Rule at src\isa\aarch64\lower.isle line 2295.
                    return v1870;
                }
                &Opcode::ReturnCall => {
                    let v1865 = C::func_ref_data(ctx, v1863);
                    let v1864 = C::value_list_slice(ctx, v1862);
                    let v1886 = C::gen_return_call(ctx, v1865.0, v1865.1, v1865.2, v1864);
                    let v1887 = Some(v1886);
                    // Rule at src\isa\aarch64\lower.isle line 2309.
                    return v1887;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1871,
            args: v1872,
            sig_ref: v1873,
        } => {
            match v1871 {
                &Opcode::CallIndirect => {
                    let v1874 = C::value_list_slice(ctx, v1872);
                    let v1875 = C::value_slice_unwrap(ctx, v1874);
                    if let Some(v1876) = v1875 {
                        let v1879 = C::gen_call_indirect(ctx, v1873, v1876.0, v1876.1);
                        let v1880 = Some(v1879);
                        // Rule at src\isa\aarch64\lower.isle line 2298.
                        return v1880;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1874 = C::value_list_slice(ctx, v1872);
                    let v1875 = C::value_slice_unwrap(ctx, v1874);
                    if let Some(v1876) = v1875 {
                        let v1888 = C::gen_return_call_indirect(ctx, v1873, v1876.0, v1876.1);
                        let v1889 = Some(v1888);
                        // Rule at src\isa\aarch64\lower.isle line 2312.
                        return v1889;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v2324,
            dynamic_stack_slot: v2325,
        } => {
            if let &Opcode::DynamicStackAddr = v2324 {
                let v2326 = C::temp_writable_reg(ctx, I64);
                let v2327 = &C::abi_dynamic_stackslot_addr(ctx, v2326, v2325);
                let v2328 = C::emit(ctx, v2327);
                let v2329 = C::writable_reg_to_reg(ctx, v2326);
                let v2330 = C::value_reg(ctx, v2329);
                let v2331 = C::output(ctx, v2330);
                let v2332 = Some(v2331);
                // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 81.
                return v2332;
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1391,
            args: ref v1392,
            cond: ref v1393,
        } => {
            if let &Opcode::Fcmp = v1391 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v134 = C::multi_lane(ctx, v3);
                    if let Some(v135) = v134 {
                        let v1394 = C::unpack_value_array_2(ctx, v1392);
                        let v1399 = C::zero_value(ctx, v1394.1);
                        if let Some(v1400) = v1399 {
                            let v1397 = &C::fcmp_zero_cond_not_eq(ctx, v1393);
                            if let Some(v1398) = v1397 {
                                let v1401 = C::put_in_reg(ctx, v1394.0);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1402 = constructor_fcmeq0(ctx, v1401, v380);
                                let v1403 = constructor_not(ctx, v1402, v380);
                                let v1404 = C::value_reg(ctx, v1403);
                                let v1405 = C::output(ctx, v1404);
                                let v1406 = Some(v1405);
                                // Rule at src\isa\aarch64\lower.isle line 1891.
                                return v1406;
                            }
                            let v1407 = &C::fcmp_zero_cond(ctx, v1393);
                            if let Some(v1408) = v1407 {
                                let v1401 = C::put_in_reg(ctx, v1394.0);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1409 = constructor_float_cmp_zero(ctx, v1408, v1401, v380);
                                let v1410 = C::value_reg(ctx, v1409);
                                let v1411 = C::output(ctx, v1410);
                                let v1412 = Some(v1411);
                                // Rule at src\isa\aarch64\lower.isle line 1897.
                                return v1412;
                            }
                        }
                        let v1413 = C::zero_value(ctx, v1394.0);
                        if let Some(v1414) = v1413 {
                            let v1397 = &C::fcmp_zero_cond_not_eq(ctx, v1393);
                            if let Some(v1398) = v1397 {
                                let v1415 = C::put_in_reg(ctx, v1394.1);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1416 = constructor_fcmeq0(ctx, v1415, v380);
                                let v1417 = constructor_not(ctx, v1416, v380);
                                let v1418 = C::value_reg(ctx, v1417);
                                let v1419 = C::output(ctx, v1418);
                                let v1420 = Some(v1419);
                                // Rule at src\isa\aarch64\lower.isle line 1903.
                                return v1420;
                            }
                            let v1407 = &C::fcmp_zero_cond(ctx, v1393);
                            if let Some(v1408) = v1407 {
                                let v1415 = C::put_in_reg(ctx, v1394.1);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1421 =
                                    constructor_float_cmp_zero_swap(ctx, v1408, v1415, v380);
                                let v1422 = C::value_reg(ctx, v1421);
                                let v1423 = C::output(ctx, v1422);
                                let v1424 = Some(v1423);
                                // Rule at src\isa\aarch64\lower.isle line 1909.
                                return v1424;
                            }
                        }
                    }
                    let v1394 = C::unpack_value_array_2(ctx, v1392);
                    let v1425 = C::value_type(ctx, v1394.0);
                    let v1426 = C::ty_scalar_float(ctx, v1425);
                    if let Some(v1427) = v1426 {
                        let v1428 = &constructor_scalar_size(ctx, v1427);
                        let v1429 = C::put_in_reg(ctx, v1394.0);
                        let v1430 = C::put_in_reg(ctx, v1394.1);
                        let v1431 = &constructor_fpu_cmp(ctx, v1428, v1429, v1430);
                        let v1432 = &C::fp_cond_code(ctx, v1393);
                        let v1433 = &constructor_materialize_bool_result(ctx, v1432);
                        let v1434 = constructor_with_flags(ctx, v1431, v1433);
                        let v1435 = C::output(ctx, v1434);
                        let v1436 = Some(v1435);
                        // Rule at src\isa\aarch64\lower.isle line 1915.
                        return v1436;
                    }
                    let v1437 = C::ty_vector_float(ctx, v1425);
                    if let Some(v1438) = v1437 {
                        let v1401 = C::put_in_reg(ctx, v1394.0);
                        let v1439 = C::put_in_reg(ctx, v1394.1);
                        let v1440 = &C::fp_cond_code(ctx, v1393);
                        let v1441 = constructor_vec_cmp(ctx, v1401, v1439, v1425, v1440);
                        let v1442 = constructor_output_reg(ctx, v1441);
                        let v1443 = Some(v1442);
                        // Rule at src\isa\aarch64\lower.isle line 1920.
                        return v1443;
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1830,
            func_ref: v1831,
        } => {
            if let &Opcode::FuncAddr = v1830 {
                let v1832 = C::func_ref_data(ctx, v1831);
                let v1836 = C::box_external_name(ctx, v1832.1);
                let v1838 = constructor_load_ext_name(ctx, v1836, 0x0);
                let v1839 = constructor_output_reg(ctx, v1838);
                let v1840 = Some(v1839);
                // Rule at src\isa\aarch64\lower.isle line 2274.
                return v1840;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v2136,
            args: ref v2137,
            code: ref v2138,
        } => {
            if let &Opcode::UaddOverflowTrap = v2136 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v32 = C::fits_in_64(ctx, v3);
                    if let Some(v33) = v32 {
                        let v2139 = C::unpack_value_array_2(ctx, v2137);
                        let v2142 = C::put_in_reg(ctx, v2139.0);
                        let v2143 = C::put_in_reg(ctx, v2139.1);
                        let v2144 = &constructor_add_with_flags_paired(ctx, v33, v2142, v2143);
                        let v2145 = constructor_trap_if_overflow(ctx, v2144, v2138);
                        let v2146 = constructor_output_reg(ctx, v2145);
                        let v2147 = Some(v2146);
                        // Rule at src\isa\aarch64\lower.isle line 2639.
                        return v2147;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1444,
            args: ref v1445,
            cond: ref v1446,
        } => {
            if let &Opcode::Icmp = v1444 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v134 = C::multi_lane(ctx, v3);
                    if let Some(v135) = v134 {
                        let v1447 = C::unpack_value_array_2(ctx, v1445);
                        let v1452 = C::zero_value(ctx, v1447.1);
                        if let Some(v1453) = v1452 {
                            let v1450 = &C::icmp_zero_cond_not_eq(ctx, v1446);
                            if let Some(v1451) = v1450 {
                                let v1454 = C::put_in_reg(ctx, v1447.0);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1455 = constructor_cmeq0(ctx, v1454, v380);
                                let v1456 = constructor_not(ctx, v1455, v380);
                                let v1457 = C::value_reg(ctx, v1456);
                                let v1458 = C::output(ctx, v1457);
                                let v1459 = Some(v1458);
                                // Rule at src\isa\aarch64\lower.isle line 1926.
                                return v1459;
                            }
                            let v1460 = &C::icmp_zero_cond(ctx, v1446);
                            if let Some(v1461) = v1460 {
                                let v1454 = C::put_in_reg(ctx, v1447.0);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1462 = constructor_int_cmp_zero(ctx, v1461, v1454, v380);
                                let v1463 = C::value_reg(ctx, v1462);
                                let v1464 = C::output(ctx, v1463);
                                let v1465 = Some(v1464);
                                // Rule at src\isa\aarch64\lower.isle line 1932.
                                return v1465;
                            }
                        }
                        let v1466 = C::zero_value(ctx, v1447.0);
                        if let Some(v1467) = v1466 {
                            let v1450 = &C::icmp_zero_cond_not_eq(ctx, v1446);
                            if let Some(v1451) = v1450 {
                                let v1468 = C::put_in_reg(ctx, v1447.1);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1469 = constructor_cmeq0(ctx, v1468, v380);
                                let v1470 = constructor_not(ctx, v1469, v380);
                                let v1471 = C::value_reg(ctx, v1470);
                                let v1472 = C::output(ctx, v1471);
                                let v1473 = Some(v1472);
                                // Rule at src\isa\aarch64\lower.isle line 1938.
                                return v1473;
                            }
                            let v1460 = &C::icmp_zero_cond(ctx, v1446);
                            if let Some(v1461) = v1460 {
                                let v1468 = C::put_in_reg(ctx, v1447.1);
                                let v380 = &constructor_vector_size(ctx, v3);
                                let v1474 = constructor_int_cmp_zero_swap(ctx, v1461, v1468, v380);
                                let v1475 = C::value_reg(ctx, v1474);
                                let v1476 = C::output(ctx, v1475);
                                let v1477 = Some(v1476);
                                // Rule at src\isa\aarch64\lower.isle line 1944.
                                return v1477;
                            }
                        }
                    }
                }
                let v1447 = C::unpack_value_array_2(ctx, v1445);
                let v1478 = C::value_type(ctx, v1447.0);
                let v1480 =
                    constructor_lower_icmp_into_reg(ctx, v1446, v1447.0, v1447.1, v1478, I8);
                let v1481 = C::output(ctx, v1480);
                let v1482 = Some(v1481);
                // Rule at src\isa\aarch64\lower.isle line 1950.
                return v1482;
            }
        }
        &InstructionData::Load {
            opcode: ref v1890,
            arg: v1891,
            flags: v1892,
            offset: v1893,
        } => {
            match v1890 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1895 = &constructor_amode(ctx, I8, v1891, v1894);
                                let v1896 = constructor_aarch64_uload8(ctx, v1895, v1892);
                                let v1897 = constructor_output_reg(ctx, v1896);
                                let v1898 = Some(v1897);
                                // Rule at src\isa\aarch64\lower.isle line 2317.
                                return v1898;
                            }
                            I16 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1899 = &constructor_amode(ctx, I16, v1891, v1894);
                                let v1900 = constructor_aarch64_uload16(ctx, v1899, v1892);
                                let v1901 = constructor_output_reg(ctx, v1900);
                                let v1902 = Some(v1901);
                                // Rule at src\isa\aarch64\lower.isle line 2320.
                                return v1902;
                            }
                            I32 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1903 = &constructor_amode(ctx, I32, v1891, v1894);
                                let v1904 = constructor_aarch64_uload32(ctx, v1903, v1892);
                                let v1905 = constructor_output_reg(ctx, v1904);
                                let v1906 = Some(v1905);
                                // Rule at src\isa\aarch64\lower.isle line 2323.
                                return v1906;
                            }
                            I64 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1907 = &constructor_amode(ctx, I64, v1891, v1894);
                                let v1908 = constructor_aarch64_uload64(ctx, v1907, v1892);
                                let v1909 = constructor_output_reg(ctx, v1908);
                                let v1910 = Some(v1909);
                                // Rule at src\isa\aarch64\lower.isle line 2326.
                                return v1910;
                            }
                            I128 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1919 = &constructor_pair_amode(ctx, v1891, v1894);
                                let v1920 = constructor_aarch64_loadp64(ctx, v1919, v1892);
                                let v1921 = C::output(ctx, v1920);
                                let v1922 = Some(v1921);
                                // Rule at src\isa\aarch64\lower.isle line 2338.
                                return v1922;
                            }
                            R64 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1907 = &constructor_amode(ctx, I64, v1891, v1894);
                                let v1908 = constructor_aarch64_uload64(ctx, v1907, v1892);
                                let v1909 = constructor_output_reg(ctx, v1908);
                                let v1910 = Some(v1909);
                                // Rule at src\isa\aarch64\lower.isle line 2329.
                                return v1910;
                            }
                            F32 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1911 = &constructor_amode(ctx, F32, v1891, v1894);
                                let v1912 = constructor_aarch64_fpuload32(ctx, v1911, v1892);
                                let v1913 = constructor_output_reg(ctx, v1912);
                                let v1914 = Some(v1913);
                                // Rule at src\isa\aarch64\lower.isle line 2332.
                                return v1914;
                            }
                            F64 => {
                                let v1894 = C::offset32_to_i32(ctx, v1893);
                                let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                                let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                                let v1917 = constructor_output_reg(ctx, v1916);
                                let v1918 = Some(v1917);
                                // Rule at src\isa\aarch64\lower.isle line 2335.
                                return v1918;
                            }
                            _ => {}
                        }
                        let v1923 = C::ty_vec64(ctx, v3);
                        if let Some(v1924) = v1923 {
                            let v1894 = C::offset32_to_i32(ctx, v1893);
                            let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                            let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                            let v1917 = constructor_output_reg(ctx, v1916);
                            let v1918 = Some(v1917);
                            // Rule at src\isa\aarch64\lower.isle line 2341.
                            return v1918;
                        }
                        let v1930 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v1931) = v1930 {
                            let v1894 = C::offset32_to_i32(ctx, v1893);
                            let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                            let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                            let v1917 = constructor_output_reg(ctx, v1916);
                            let v1918 = Some(v1917);
                            // Rule at src\isa\aarch64\lower.isle line 2349.
                            return v1918;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v1894 = C::offset32_to_i32(ctx, v1893);
                            let v1926 = &constructor_amode(ctx, I8X16, v1891, v1894);
                            let v1927 = constructor_aarch64_fpuload128(ctx, v1926, v1892);
                            let v1928 = constructor_output_reg(ctx, v1927);
                            let v1929 = Some(v1928);
                            // Rule at src\isa\aarch64\lower.isle line 2345.
                            return v1929;
                        }
                        let v1932 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v1933) = v1932 {
                            let v1894 = C::offset32_to_i32(ctx, v1893);
                            let v1926 = &constructor_amode(ctx, I8X16, v1891, v1894);
                            let v1927 = constructor_aarch64_fpuload128(ctx, v1926, v1892);
                            let v1928 = constructor_output_reg(ctx, v1927);
                            let v1929 = Some(v1928);
                            // Rule at src\isa\aarch64\lower.isle line 2353.
                            return v1929;
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1895 = &constructor_amode(ctx, I8, v1891, v1894);
                    let v1896 = constructor_aarch64_uload8(ctx, v1895, v1892);
                    let v1897 = constructor_output_reg(ctx, v1896);
                    let v1898 = Some(v1897);
                    // Rule at src\isa\aarch64\lower.isle line 2358.
                    return v1898;
                }
                &Opcode::Sload8 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1895 = &constructor_amode(ctx, I8, v1891, v1894);
                    let v1934 = constructor_aarch64_sload8(ctx, v1895, v1892);
                    let v1935 = constructor_output_reg(ctx, v1934);
                    let v1936 = Some(v1935);
                    // Rule at src\isa\aarch64\lower.isle line 2361.
                    return v1936;
                }
                &Opcode::Uload16 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1899 = &constructor_amode(ctx, I16, v1891, v1894);
                    let v1900 = constructor_aarch64_uload16(ctx, v1899, v1892);
                    let v1901 = constructor_output_reg(ctx, v1900);
                    let v1902 = Some(v1901);
                    // Rule at src\isa\aarch64\lower.isle line 2364.
                    return v1902;
                }
                &Opcode::Sload16 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1899 = &constructor_amode(ctx, I16, v1891, v1894);
                    let v1937 = constructor_aarch64_sload16(ctx, v1899, v1892);
                    let v1938 = constructor_output_reg(ctx, v1937);
                    let v1939 = Some(v1938);
                    // Rule at src\isa\aarch64\lower.isle line 2367.
                    return v1939;
                }
                &Opcode::Uload32 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1903 = &constructor_amode(ctx, I32, v1891, v1894);
                    let v1904 = constructor_aarch64_uload32(ctx, v1903, v1892);
                    let v1905 = constructor_output_reg(ctx, v1904);
                    let v1906 = Some(v1905);
                    // Rule at src\isa\aarch64\lower.isle line 2370.
                    return v1906;
                }
                &Opcode::Sload32 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1903 = &constructor_amode(ctx, I32, v1891, v1894);
                    let v1940 = constructor_aarch64_sload32(ctx, v1903, v1892);
                    let v1941 = constructor_output_reg(ctx, v1940);
                    let v1942 = Some(v1941);
                    // Rule at src\isa\aarch64\lower.isle line 2373.
                    return v1942;
                }
                &Opcode::Uload8x8 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                    let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                    let v1947 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1916,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1948 = constructor_output_reg(ctx, v1947);
                    let v1949 = Some(v1948);
                    // Rule at src\isa\aarch64\lower.isle line 2383.
                    return v1949;
                }
                &Opcode::Sload8x8 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                    let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                    let v1944 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1916,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1945 = constructor_output_reg(ctx, v1944);
                    let v1946 = Some(v1945);
                    // Rule at src\isa\aarch64\lower.isle line 2377.
                    return v1946;
                }
                &Opcode::Uload16x4 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                    let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                    let v1953 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1916,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1954 = constructor_output_reg(ctx, v1953);
                    let v1955 = Some(v1954);
                    // Rule at src\isa\aarch64\lower.isle line 2395.
                    return v1955;
                }
                &Opcode::Sload16x4 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                    let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                    let v1950 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1916,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1951 = constructor_output_reg(ctx, v1950);
                    let v1952 = Some(v1951);
                    // Rule at src\isa\aarch64\lower.isle line 2389.
                    return v1952;
                }
                &Opcode::Uload32x2 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                    let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                    let v1959 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1916,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1960 = constructor_output_reg(ctx, v1959);
                    let v1961 = Some(v1960);
                    // Rule at src\isa\aarch64\lower.isle line 2407.
                    return v1961;
                }
                &Opcode::Sload32x2 => {
                    let v1894 = C::offset32_to_i32(ctx, v1893);
                    let v1915 = &constructor_amode(ctx, F64, v1891, v1894);
                    let v1916 = constructor_aarch64_fpuload64(ctx, v1915, v1892);
                    let v1956 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1916,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1957 = constructor_output_reg(ctx, v1956);
                    let v1958 = Some(v1957);
                    // Rule at src\isa\aarch64\lower.isle line 2401.
                    return v1958;
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1617,
            arg: v1618,
            flags: v1619,
        } => {
            match v1617 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2023 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v2024) = v2023 {
                            let v2025 = C::value_type(ctx, v1618);
                            let v2026 = C::ty_float_or_vec(ctx, v2025);
                            if let Some(v2027) = v2026 {
                                let v2028 = constructor_output_value(ctx, v1618);
                                let v2029 = Some(v2028);
                                // Rule at src\isa\aarch64\lower.isle line 2494.
                                return v2029;
                            }
                            let v2030 = C::ty_int_ref_scalar_64(ctx, v2025);
                            if let Some(v2031) = v2030 {
                                let v1620 = C::put_in_reg(ctx, v1618);
                                let v2032 = &constructor_scalar_size(ctx, v2025);
                                let v2033 = constructor_mov_to_fpu(ctx, v1620, v2032);
                                let v2034 = constructor_output_reg(ctx, v2033);
                                let v2035 = Some(v2034);
                                // Rule at src\isa\aarch64\lower.isle line 2498.
                                return v2035;
                            }
                        }
                        let v1372 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1373) = v1372 {
                            let v2025 = C::value_type(ctx, v1618);
                            let v2036 = C::fits_in_64(ctx, v2025);
                            if let Some(v2037) = v2036 {
                                let v2038 = C::ty_float_or_vec(ctx, v2037);
                                if let Some(v2039) = v2038 {
                                    let v1620 = C::put_in_reg(ctx, v1618);
                                    let v2040 = &constructor_scalar_size(ctx, v3);
                                    let v2041 = constructor_mov_from_vec(ctx, v1620, 0x0, v2040);
                                    let v2042 = constructor_output_reg(ctx, v2041);
                                    let v2043 = Some(v2042);
                                    // Rule at src\isa\aarch64\lower.isle line 2503.
                                    return v2043;
                                }
                            }
                            let v2030 = C::ty_int_ref_scalar_64(ctx, v2025);
                            if let Some(v2031) = v2030 {
                                let v2044 = constructor_is_ref_type(ctx, v2025);
                                match v2044 {
                                    true => {
                                        let v2045 = constructor_is_ref_type(ctx, v3);
                                        if v2045 == false {
                                            let v1620 = C::put_in_reg(ctx, v1618);
                                            let v2046 = constructor_copy_reg(ctx, v3, v1620);
                                            let v2047 = constructor_output_reg(ctx, v2046);
                                            let v2048 = Some(v2047);
                                            // Rule at src\isa\aarch64\lower.isle line 2510.
                                            return v2048;
                                        }
                                    }
                                    false => {
                                        let v2045 = constructor_is_ref_type(ctx, v3);
                                        if v2045 == true {
                                            let v1620 = C::put_in_reg(ctx, v1618);
                                            let v2049 = constructor_copy_reg(ctx, v2025, v1620);
                                            let v2050 = constructor_output_reg(ctx, v2049);
                                            let v2051 = Some(v2050);
                                            // Rule at src\isa\aarch64\lower.isle line 2516.
                                            return v2051;
                                        }
                                    }
                                    _ => {}
                                }
                                let v2028 = constructor_output_value(ctx, v1618);
                                let v2029 = Some(v2028);
                                // Rule at src\isa\aarch64\lower.isle line 2524.
                                return v2029;
                            }
                        }
                        if v3 == I128 {
                            let v2025 = C::value_type(ctx, v1618);
                            if v2025 == I128 {
                                let v2028 = constructor_output_value(ctx, v1618);
                                let v2029 = Some(v2028);
                                // Rule at src\isa\aarch64\lower.isle line 2528.
                                return v2029;
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1615 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1616) = v1615 {
                            let v1620 = C::put_in_reg(ctx, v1618);
                            let v1621 = constructor_load_acquire(ctx, v1616, v1619, v1620);
                            let v1622 = constructor_output_reg(ctx, v1621);
                            let v1623 = Some(v1622);
                            // Rule at src\isa\aarch64\lower.isle line 2076.
                            return v1623;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1881,
            args: v1882,
        } => {
            if let &Opcode::Return = v1881 {
                let v1883 = C::value_list_slice(ctx, v1882);
                let v1884 = constructor_lower_return(ctx, v1883);
                let v1885 = Some(v1884);
                // Rule at src\isa\aarch64\lower.isle line 2304.
                return v1885;
            }
        }
        &InstructionData::NullAry { opcode: ref v12 } => {
            match v12 {
                &Opcode::Debugtrap => {
                    let v1827 = &constructor_brk(ctx);
                    let v1828 = constructor_side_effect(ctx, v1827);
                    let v1829 = Some(v1828);
                    // Rule at src\isa\aarch64\lower.isle line 2269.
                    return v1829;
                }
                &Opcode::GetPinnedReg => {
                    let v2016 = C::preg_pinned(ctx);
                    let v2017 = constructor_mov_from_preg(ctx, v2016);
                    let v2018 = constructor_output_reg(ctx, v2017);
                    let v2019 = Some(v2018);
                    // Rule at src\isa\aarch64\lower.isle line 2485.
                    return v2019;
                }
                &Opcode::GetFramePointer => {
                    let v1852 = constructor_aarch64_fp(ctx);
                    let v1853 = constructor_output_reg(ctx, v1852);
                    let v1854 = Some(v1853);
                    // Rule at src\isa\aarch64\lower.isle line 2284.
                    return v1854;
                }
                &Opcode::GetStackPointer => {
                    let v1855 = constructor_aarch64_sp(ctx);
                    let v1856 = constructor_output_reg(ctx, v1855);
                    let v1857 = Some(v1856);
                    // Rule at src\isa\aarch64\lower.isle line 2287.
                    return v1857;
                }
                &Opcode::GetReturnAddress => {
                    let v1858 = constructor_aarch64_link(ctx);
                    let v1859 = constructor_output_reg(ctx, v1858);
                    let v1860 = Some(v1859);
                    // Rule at src\isa\aarch64\lower.isle line 2290.
                    return v1860;
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v14 = constructor_imm(ctx, v3, &ImmExtend::Zero, 0x0);
                        let v15 = constructor_output_reg(ctx, v14);
                        let v16 = Some(v15);
                        // Rule at src\isa\aarch64\lower.isle line 24.
                        return v16;
                    }
                }
                &Opcode::Nop => {
                    let v29 = C::invalid_reg(ctx);
                    let v30 = constructor_output_reg(ctx, v29);
                    let v31 = Some(v30);
                    // Rule at src\isa\aarch64\lower.isle line 39.
                    return v31;
                }
                &Opcode::Fence => {
                    let v1813 = &constructor_aarch64_fence(ctx);
                    let v1814 = constructor_side_effect(ctx, v1813);
                    let v1815 = Some(v1814);
                    // Rule at src\isa\aarch64\lower.isle line 2252.
                    return v1815;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v156,
            args: ref v157,
            imm: v158,
        } => {
            if let &Opcode::Shuffle = v156 {
                let v162 = C::shuffle_dup8_from_imm(ctx, v158);
                if let Some(v163) = v162 {
                    let v159 = C::unpack_value_array_2(ctx, v157);
                    let v164 = C::put_in_reg(ctx, v159.0);
                    let v166 = constructor_vec_dup_from_fpu(ctx, v164, &VectorSize::Size8x16, v163);
                    let v167 = constructor_output_reg(ctx, v166);
                    let v168 = Some(v167);
                    // Rule at src\isa\aarch64\lower.isle line 127.
                    return v168;
                }
                let v169 = C::shuffle_dup16_from_imm(ctx, v158);
                if let Some(v170) = v169 {
                    let v159 = C::unpack_value_array_2(ctx, v157);
                    let v164 = C::put_in_reg(ctx, v159.0);
                    let v172 = constructor_vec_dup_from_fpu(ctx, v164, &VectorSize::Size16x8, v170);
                    let v173 = constructor_output_reg(ctx, v172);
                    let v174 = Some(v173);
                    // Rule at src\isa\aarch64\lower.isle line 129.
                    return v174;
                }
                let v175 = C::shuffle_dup32_from_imm(ctx, v158);
                if let Some(v176) = v175 {
                    let v159 = C::unpack_value_array_2(ctx, v157);
                    let v164 = C::put_in_reg(ctx, v159.0);
                    let v178 = constructor_vec_dup_from_fpu(ctx, v164, &VectorSize::Size32x4, v176);
                    let v179 = constructor_output_reg(ctx, v178);
                    let v180 = Some(v179);
                    // Rule at src\isa\aarch64\lower.isle line 131.
                    return v180;
                }
                let v181 = C::shuffle_dup64_from_imm(ctx, v158);
                if let Some(v182) = v181 {
                    let v159 = C::unpack_value_array_2(ctx, v157);
                    let v164 = C::put_in_reg(ctx, v159.0);
                    let v184 = constructor_vec_dup_from_fpu(ctx, v164, &VectorSize::Size64x2, v182);
                    let v185 = constructor_output_reg(ctx, v184);
                    let v186 = Some(v185);
                    // Rule at src\isa\aarch64\lower.isle line 133.
                    return v186;
                }
                let v187 = C::vec_extract_imm4_from_immediate(ctx, v158);
                if let Some(v188) = v187 {
                    let v159 = C::unpack_value_array_2(ctx, v157);
                    let v164 = C::put_in_reg(ctx, v159.0);
                    let v189 = C::put_in_reg(ctx, v159.1);
                    let v190 = constructor_vec_extract(ctx, v164, v189, v188);
                    let v191 = constructor_output_reg(ctx, v190);
                    let v192 = Some(v191);
                    // Rule at src\isa\aarch64\lower.isle line 152.
                    return v192;
                }
                let v193 = C::u128_from_immediate(ctx, v158);
                if let Some(v194) = v193 {
                    match v194 {
                        0x8090A0B0C0D0E0F0001020304050607 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v264 = constructor_rev64(ctx, v164, &VectorSize::Size8x16);
                            let v265 = constructor_output_reg(ctx, v264);
                            let v266 = Some(v265);
                            // Rule at src\isa\aarch64\lower.isle line 228.
                            return v266;
                        }
                        0x9080B0A0D0C0F0E0100030205040706 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v267 = constructor_rev64(ctx, v164, &VectorSize::Size16x8);
                            let v268 = constructor_output_reg(ctx, v267);
                            let v269 = Some(v268);
                            // Rule at src\isa\aarch64\lower.isle line 230.
                            return v269;
                        }
                        0xB0A09080F0E0D0C0302010007060504 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v270 = constructor_rev64(ctx, v164, &VectorSize::Size32x4);
                            let v271 = constructor_output_reg(ctx, v270);
                            let v272 = Some(v271);
                            // Rule at src\isa\aarch64\lower.isle line 232.
                            return v272;
                        }
                        0xC0D0E0F08090A0B0405060700010203 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v258 = constructor_rev32(ctx, v164, &VectorSize::Size8x16);
                            let v259 = constructor_output_reg(ctx, v258);
                            let v260 = Some(v259);
                            // Rule at src\isa\aarch64\lower.isle line 224.
                            return v260;
                        }
                        0xD0C0F0E09080B0A0504070601000302 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v261 = constructor_rev32(ctx, v164, &VectorSize::Size16x8);
                            let v262 = constructor_output_reg(ctx, v261);
                            let v263 = Some(v262);
                            // Rule at src\isa\aarch64\lower.isle line 226.
                            return v263;
                        }
                        0xE0F0C0D0A0B08090607040502030001 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v255 = constructor_rev16(ctx, v164, &VectorSize::Size8x16);
                            let v256 = constructor_output_reg(ctx, v255);
                            let v257 = Some(v256);
                            // Rule at src\isa\aarch64\lower.isle line 222.
                            return v257;
                        }
                        0x17071606150514041303120211011000 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v219 = constructor_vec_zip1(ctx, v164, v189, &VectorSize::Size8x16);
                            let v220 = constructor_output_reg(ctx, v219);
                            let v221 = Some(v220);
                            // Rule at src\isa\aarch64\lower.isle line 184.
                            return v221;
                        }
                        0x17160706151405041312030211100100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v225 = constructor_vec_zip1(ctx, v164, v189, &VectorSize::Size16x8);
                            let v226 = constructor_output_reg(ctx, v225);
                            let v227 = Some(v226);
                            // Rule at src\isa\aarch64\lower.isle line 188.
                            return v227;
                        }
                        0x17161514070605041312111003020100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v231 = constructor_vec_zip1(ctx, v164, v189, &VectorSize::Size32x4);
                            let v232 = constructor_output_reg(ctx, v231);
                            let v233 = Some(v232);
                            // Rule at src\isa\aarch64\lower.isle line 192.
                            return v233;
                        }
                        0x17161514131211100706050403020100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v213 = constructor_vec_uzp1(ctx, v164, v189, &VectorSize::Size64x2);
                            let v214 = constructor_output_reg(ctx, v213);
                            let v215 = Some(v214);
                            // Rule at src\isa\aarch64\lower.isle line 177.
                            return v215;
                        }
                        0x1B1A19180B0A09081312111003020100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v249 = constructor_vec_trn1(ctx, v164, v189, &VectorSize::Size32x4);
                            let v250 = constructor_output_reg(ctx, v249);
                            let v251 = Some(v250);
                            // Rule at src\isa\aarch64\lower.isle line 210.
                            return v251;
                        }
                        0x1B1A1918131211100B0A090803020100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v207 = constructor_vec_uzp1(ctx, v164, v189, &VectorSize::Size32x4);
                            let v208 = constructor_output_reg(ctx, v207);
                            let v209 = Some(v208);
                            // Rule at src\isa\aarch64\lower.isle line 173.
                            return v209;
                        }
                        0x1D1C0D0C191809081514050411100100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v243 = constructor_vec_trn1(ctx, v164, v189, &VectorSize::Size16x8);
                            let v244 = constructor_output_reg(ctx, v243);
                            let v245 = Some(v244);
                            // Rule at src\isa\aarch64\lower.isle line 206.
                            return v245;
                        }
                        0x1D1C1918151411100D0C090805040100 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v201 = constructor_vec_uzp1(ctx, v164, v189, &VectorSize::Size16x8);
                            let v202 = constructor_output_reg(ctx, v201);
                            let v203 = Some(v202);
                            // Rule at src\isa\aarch64\lower.isle line 169.
                            return v203;
                        }
                        0x1E0E1C0C1A0A18081606140412021000 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v237 = constructor_vec_trn1(ctx, v164, v189, &VectorSize::Size8x16);
                            let v238 = constructor_output_reg(ctx, v237);
                            let v239 = Some(v238);
                            // Rule at src\isa\aarch64\lower.isle line 202.
                            return v239;
                        }
                        0x1E1C1A18161412100E0C0A0806040200 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v195 = constructor_vec_uzp1(ctx, v164, v189, &VectorSize::Size8x16);
                            let v196 = constructor_output_reg(ctx, v195);
                            let v197 = Some(v196);
                            // Rule at src\isa\aarch64\lower.isle line 165.
                            return v197;
                        }
                        0x1F0F1D0D1B0B19091707150513031101 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v240 = constructor_vec_trn2(ctx, v164, v189, &VectorSize::Size8x16);
                            let v241 = constructor_output_reg(ctx, v240);
                            let v242 = Some(v241);
                            // Rule at src\isa\aarch64\lower.isle line 204.
                            return v242;
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v222 = constructor_vec_zip2(ctx, v164, v189, &VectorSize::Size8x16);
                            let v223 = constructor_output_reg(ctx, v222);
                            let v224 = Some(v223);
                            // Rule at src\isa\aarch64\lower.isle line 186.
                            return v224;
                        }
                        0x1F1D1B19171513110F0D0B0907050301 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v198 = constructor_vec_uzp2(ctx, v164, v189, &VectorSize::Size8x16);
                            let v199 = constructor_output_reg(ctx, v198);
                            let v200 = Some(v199);
                            // Rule at src\isa\aarch64\lower.isle line 167.
                            return v200;
                        }
                        0x1F1E0F0E1B1A0B0A1716070613120302 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v246 = constructor_vec_trn2(ctx, v164, v189, &VectorSize::Size16x8);
                            let v247 = constructor_output_reg(ctx, v246);
                            let v248 = Some(v247);
                            // Rule at src\isa\aarch64\lower.isle line 208.
                            return v248;
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v228 = constructor_vec_zip2(ctx, v164, v189, &VectorSize::Size16x8);
                            let v229 = constructor_output_reg(ctx, v228);
                            let v230 = Some(v229);
                            // Rule at src\isa\aarch64\lower.isle line 190.
                            return v230;
                        }
                        0x1F1E1B1A171613120F0E0B0A07060302 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v204 = constructor_vec_uzp2(ctx, v164, v189, &VectorSize::Size16x8);
                            let v205 = constructor_output_reg(ctx, v204);
                            let v206 = Some(v205);
                            // Rule at src\isa\aarch64\lower.isle line 171.
                            return v206;
                        }
                        0x1F1E1D1C0F0E0D0C1716151407060504 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v252 = constructor_vec_trn2(ctx, v164, v189, &VectorSize::Size32x4);
                            let v253 = constructor_output_reg(ctx, v252);
                            let v254 = Some(v253);
                            // Rule at src\isa\aarch64\lower.isle line 212.
                            return v254;
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v234 = constructor_vec_zip2(ctx, v164, v189, &VectorSize::Size32x4);
                            let v235 = constructor_output_reg(ctx, v234);
                            let v236 = Some(v235);
                            // Rule at src\isa\aarch64\lower.isle line 194.
                            return v236;
                        }
                        0x1F1E1D1C171615140F0E0D0C07060504 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v210 = constructor_vec_uzp2(ctx, v164, v189, &VectorSize::Size32x4);
                            let v211 = constructor_output_reg(ctx, v210);
                            let v212 = Some(v211);
                            // Rule at src\isa\aarch64\lower.isle line 175.
                            return v212;
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v159 = C::unpack_value_array_2(ctx, v157);
                            let v164 = C::put_in_reg(ctx, v159.0);
                            let v189 = C::put_in_reg(ctx, v159.1);
                            let v216 = constructor_vec_uzp2(ctx, v164, v189, &VectorSize::Size64x2);
                            let v217 = constructor_output_reg(ctx, v216);
                            let v218 = Some(v217);
                            // Rule at src\isa\aarch64\lower.isle line 179.
                            return v218;
                        }
                        _ => {}
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v273 = constructor_constant_f128(ctx, v194);
                        let v159 = C::unpack_value_array_2(ctx, v157);
                        let v274 = C::put_in_reg(ctx, v159.0);
                        let v275 = C::put_in_reg(ctx, v159.1);
                        let v3 = C::value_type(ctx, v2);
                        let v276 = constructor_vec_tbl2(ctx, v274, v275, v273, v3);
                        let v277 = constructor_output_reg(ctx, v276);
                        let v278 = Some(v277);
                        // Rule at src\isa\aarch64\lower.isle line 235.
                        return v278;
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2090,
            stack_slot: v2091,
            offset: v2092,
        } => {
            if let &Opcode::StackAddr = v2090 {
                let v2093 = constructor_compute_stack_addr(ctx, v2091, v2092);
                let v2094 = constructor_output_reg(ctx, v2093);
                let v2095 = Some(v2094);
                // Rule at src\isa\aarch64\lower.isle line 2561.
                return v2095;
            }
        }
        &InstructionData::Store {
            opcode: ref v1962,
            args: ref v1963,
            flags: v1964,
            offset: v1965,
        } => {
            match v1962 {
                &Opcode::Store => {
                    let v1966 = C::unpack_value_array_2(ctx, v1963);
                    let v1969 = C::value_type(ctx, v1966.0);
                    match v1969 {
                        I8 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1971 = &constructor_amode(ctx, I8, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1973 = &constructor_aarch64_store8(ctx, v1971, v1964, v1972);
                            let v1974 = constructor_side_effect(ctx, v1973);
                            let v1975 = Some(v1974);
                            // Rule at src\isa\aarch64\lower.isle line 2416.
                            return v1975;
                        }
                        I16 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1976 = &constructor_amode(ctx, I16, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1977 = &constructor_aarch64_store16(ctx, v1976, v1964, v1972);
                            let v1978 = constructor_side_effect(ctx, v1977);
                            let v1979 = Some(v1978);
                            // Rule at src\isa\aarch64\lower.isle line 2420.
                            return v1979;
                        }
                        I32 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1980 = &constructor_amode(ctx, I32, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1981 = &constructor_aarch64_store32(ctx, v1980, v1964, v1972);
                            let v1982 = constructor_side_effect(ctx, v1981);
                            let v1983 = Some(v1982);
                            // Rule at src\isa\aarch64\lower.isle line 2424.
                            return v1983;
                        }
                        I64 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1984 = &constructor_amode(ctx, I64, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1985 = &constructor_aarch64_store64(ctx, v1984, v1964, v1972);
                            let v1986 = constructor_side_effect(ctx, v1985);
                            let v1987 = Some(v1986);
                            // Rule at src\isa\aarch64\lower.isle line 2428.
                            return v1987;
                        }
                        I128 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1996 = &constructor_pair_amode(ctx, v1966.1, v1970);
                            let v1997 = C::put_in_regs(ctx, v1966.0);
                            let v1998 = C::value_regs_get(ctx, v1997, 0x0);
                            let v1999 = C::put_in_regs(ctx, v1966.0);
                            let v2000 = C::value_regs_get(ctx, v1999, 0x1);
                            let v2001 =
                                &constructor_aarch64_storep64(ctx, v1996, v1964, v1998, v2000);
                            let v2002 = constructor_side_effect(ctx, v2001);
                            let v2003 = Some(v2002);
                            // Rule at src\isa\aarch64\lower.isle line 2459.
                            return v2003;
                        }
                        R64 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1984 = &constructor_amode(ctx, I64, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1985 = &constructor_aarch64_store64(ctx, v1984, v1964, v1972);
                            let v1986 = constructor_side_effect(ctx, v1985);
                            let v1987 = Some(v1986);
                            // Rule at src\isa\aarch64\lower.isle line 2432.
                            return v1987;
                        }
                        F32 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1988 = &constructor_amode(ctx, F32, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1989 = &constructor_aarch64_fpustore32(ctx, v1988, v1964, v1972);
                            let v1990 = constructor_side_effect(ctx, v1989);
                            let v1991 = Some(v1990);
                            // Rule at src\isa\aarch64\lower.isle line 2450.
                            return v1991;
                        }
                        F64 => {
                            let v1970 = C::offset32_to_i32(ctx, v1965);
                            let v1992 = &constructor_amode(ctx, F64, v1966.1, v1970);
                            let v1972 = C::put_in_reg(ctx, v1966.0);
                            let v1993 = &constructor_aarch64_fpustore64(ctx, v1992, v1964, v1972);
                            let v1994 = constructor_side_effect(ctx, v1993);
                            let v1995 = Some(v1994);
                            // Rule at src\isa\aarch64\lower.isle line 2454.
                            return v1995;
                        }
                        _ => {}
                    }
                    let v2004 = C::ty_vec64(ctx, v1969);
                    if let Some(v2005) = v2004 {
                        let v1970 = C::offset32_to_i32(ctx, v1965);
                        let v1992 = &constructor_amode(ctx, F64, v1966.1, v1970);
                        let v1972 = C::put_in_reg(ctx, v1966.0);
                        let v1993 = &constructor_aarch64_fpustore64(ctx, v1992, v1964, v1972);
                        let v1994 = constructor_side_effect(ctx, v1993);
                        let v1995 = Some(v1994);
                        // Rule at src\isa\aarch64\lower.isle line 2466.
                        return v1995;
                    }
                    let v2012 = C::ty_dyn_vec64(ctx, v1969);
                    if let Some(v2013) = v2012 {
                        let v1970 = C::offset32_to_i32(ctx, v1965);
                        let v1992 = &constructor_amode(ctx, F64, v1966.1, v1970);
                        let v1972 = C::put_in_reg(ctx, v1966.0);
                        let v1993 = &constructor_aarch64_fpustore64(ctx, v1992, v1964, v1972);
                        let v1994 = constructor_side_effect(ctx, v1993);
                        let v1995 = Some(v1994);
                        // Rule at src\isa\aarch64\lower.isle line 2474.
                        return v1995;
                    }
                    let v2006 = C::ty_vec128(ctx, v1969);
                    if let Some(v2007) = v2006 {
                        let v1970 = C::offset32_to_i32(ctx, v1965);
                        let v2008 = &constructor_amode(ctx, I8X16, v1966.1, v1970);
                        let v1972 = C::put_in_reg(ctx, v1966.0);
                        let v2009 = &constructor_aarch64_fpustore128(ctx, v2008, v1964, v1972);
                        let v2010 = constructor_side_effect(ctx, v2009);
                        let v2011 = Some(v2010);
                        // Rule at src\isa\aarch64\lower.isle line 2470.
                        return v2011;
                    }
                    let v2014 = C::ty_dyn_vec128(ctx, v1969);
                    if let Some(v2015) = v2014 {
                        let v1970 = C::offset32_to_i32(ctx, v1965);
                        let v2008 = &constructor_amode(ctx, I8X16, v1966.1, v1970);
                        let v1972 = C::put_in_reg(ctx, v1966.0);
                        let v2009 = &constructor_aarch64_fpustore128(ctx, v2008, v1964, v1972);
                        let v2010 = constructor_side_effect(ctx, v2009);
                        let v2011 = Some(v2010);
                        // Rule at src\isa\aarch64\lower.isle line 2478.
                        return v2011;
                    }
                }
                &Opcode::Istore8 => {
                    let v1966 = C::unpack_value_array_2(ctx, v1963);
                    let v1970 = C::offset32_to_i32(ctx, v1965);
                    let v1971 = &constructor_amode(ctx, I8, v1966.1, v1970);
                    let v1972 = C::put_in_reg(ctx, v1966.0);
                    let v1973 = &constructor_aarch64_store8(ctx, v1971, v1964, v1972);
                    let v1974 = constructor_side_effect(ctx, v1973);
                    let v1975 = Some(v1974);
                    // Rule at src\isa\aarch64\lower.isle line 2437.
                    return v1975;
                }
                &Opcode::Istore16 => {
                    let v1966 = C::unpack_value_array_2(ctx, v1963);
                    let v1970 = C::offset32_to_i32(ctx, v1965);
                    let v1976 = &constructor_amode(ctx, I16, v1966.1, v1970);
                    let v1972 = C::put_in_reg(ctx, v1966.0);
                    let v1977 = &constructor_aarch64_store16(ctx, v1976, v1964, v1972);
                    let v1978 = constructor_side_effect(ctx, v1977);
                    let v1979 = Some(v1978);
                    // Rule at src\isa\aarch64\lower.isle line 2441.
                    return v1979;
                }
                &Opcode::Istore32 => {
                    let v1966 = C::unpack_value_array_2(ctx, v1963);
                    let v1970 = C::offset32_to_i32(ctx, v1965);
                    let v1980 = &constructor_amode(ctx, I32, v1966.1, v1970);
                    let v1972 = C::put_in_reg(ctx, v1966.0);
                    let v1981 = &constructor_aarch64_store32(ctx, v1980, v1964, v1972);
                    let v1982 = constructor_side_effect(ctx, v1981);
                    let v1983 = Some(v1982);
                    // Rule at src\isa\aarch64\lower.isle line 2445.
                    return v1983;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1624,
            args: ref v1625,
            flags: v1626,
        } => {
            if let &Opcode::AtomicStore = v1624 {
                let v1627 = C::unpack_value_array_2(ctx, v1625);
                let v1630 = C::value_type(ctx, v1627.0);
                let v1631 = C::valid_atomic_transaction(ctx, v1630);
                if let Some(v1632) = v1631 {
                    let v1633 = C::put_in_reg(ctx, v1627.0);
                    let v1634 = C::put_in_reg(ctx, v1627.1);
                    let v1635 = &constructor_store_release(ctx, v1632, v1626, v1633, v1634);
                    let v1636 = constructor_side_effect(ctx, v1635);
                    let v1637 = Some(v1636);
                    // Rule at src\isa\aarch64\lower.isle line 2081.
                    return v1637;
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v561,
            args: ref v562,
        } => {
            match v561 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v563 = C::unpack_value_array_3(ctx, v562);
                        let v1488 = C::maybe_uextend(ctx, v563.0);
                        if let Some(v1489) = v1488 {
                            let v1490 = C::def_inst(ctx, v1489);
                            if let Some(v1491) = v1490 {
                                let v1492 = &C::inst_data(ctx, v1491);
                                match v1492 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1507,
                                        args: ref v1508,
                                        cond: ref v1509,
                                    } => {
                                        if let &Opcode::Fcmp = v1507 {
                                            let v1514 = &C::fp_cond_code(ctx, v1509);
                                            let v1510 = C::unpack_value_array_2(ctx, v1508);
                                            let v1513 = C::value_type(ctx, v1510.0);
                                            let v1515 = &constructor_scalar_size(ctx, v1513);
                                            let v1516 = C::put_in_reg(ctx, v1510.0);
                                            let v1517 = C::put_in_reg(ctx, v1510.1);
                                            let v1518 =
                                                &constructor_fpu_cmp(ctx, v1515, v1516, v1517);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1519 = constructor_lower_select(
                                                ctx, v1518, v1514, v3, v563.1, v563.2,
                                            );
                                            let v1520 = C::output(ctx, v1519);
                                            let v1521 = Some(v1520);
                                            // Rule at src\isa\aarch64\lower.isle line 1973.
                                            return v1521;
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1493,
                                        args: ref v1494,
                                        cond: ref v1495,
                                    } => {
                                        if let &Opcode::Icmp = v1493 {
                                            let v1496 = C::unpack_value_array_2(ctx, v1494);
                                            let v1499 = C::value_type(ctx, v1496.0);
                                            let v1500 = &constructor_lower_icmp_into_flags(
                                                ctx, v1495, v1496.0, v1496.1, v1499,
                                            );
                                            let v1501 = &constructor_flags_and_cc_flags(ctx, v1500);
                                            let v1502 = &constructor_flags_and_cc_cc(ctx, v1500);
                                            let v1503 = &C::cond_code(ctx, v1502);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1504 = constructor_lower_select(
                                                ctx, v1501, v1503, v3, v563.1, v563.2,
                                            );
                                            let v1505 = C::output(ctx, v1504);
                                            let v1506 = Some(v1505);
                                            // Rule at src\isa\aarch64\lower.isle line 1960.
                                            return v1506;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1522 = C::value_type(ctx, v563.0);
                        if v1522 == I8 {
                            let v1383 = C::put_in_reg(ctx, v563.0);
                            let v1524 = C::u64_into_imm_logic(ctx, I32, 0xFF);
                            let v1525 = &constructor_tst_imm(ctx, I32, v1383, v1524);
                            let v3 = C::value_type(ctx, v2);
                            let v1526 =
                                constructor_lower_select(ctx, v1525, &Cond::Ne, v3, v563.1, v563.2);
                            let v1527 = C::output(ctx, v1526);
                            let v1528 = Some(v1527);
                            // Rule at src\isa\aarch64\lower.isle line 1982.
                            return v1528;
                        }
                        let v1529 = C::fits_in_32(ctx, v1522);
                        if let Some(v1530) = v1529 {
                            let v1531 = constructor_put_in_reg_zext32(ctx, v563.0);
                            let v1532 = C::zero_reg(ctx);
                            let v1533 = &constructor_cmp(ctx, &OperandSize::Size32, v1531, v1532);
                            let v3 = C::value_type(ctx, v2);
                            let v1534 =
                                constructor_lower_select(ctx, v1533, &Cond::Ne, v3, v563.1, v563.2);
                            let v1535 = C::output(ctx, v1534);
                            let v1536 = Some(v1535);
                            // Rule at src\isa\aarch64\lower.isle line 1988.
                            return v1536;
                        }
                        let v1537 = C::fits_in_64(ctx, v1522);
                        if let Some(v1538) = v1537 {
                            let v1539 = constructor_put_in_reg_zext64(ctx, v563.0);
                            let v1532 = C::zero_reg(ctx);
                            let v1540 = &constructor_cmp(ctx, &OperandSize::Size64, v1539, v1532);
                            let v3 = C::value_type(ctx, v2);
                            let v1541 =
                                constructor_lower_select(ctx, v1540, &Cond::Ne, v3, v563.1, v563.2);
                            let v1542 = C::output(ctx, v1541);
                            let v1543 = Some(v1542);
                            // Rule at src\isa\aarch64\lower.isle line 1994.
                            return v1543;
                        }
                        if v1522 == I128 {
                            let v1544 = C::put_in_regs(ctx, v563.0);
                            let v1545 = C::value_regs_get(ctx, v1544, 0x0);
                            let v1546 = C::value_regs_get(ctx, v1544, 0x1);
                            let v1547 = constructor_orr(ctx, I64, v1545, v1546);
                            let v1134 = C::zero_reg(ctx);
                            let v1548 = &constructor_cmp(ctx, &OperandSize::Size64, v1547, v1134);
                            let v3 = C::value_type(ctx, v2);
                            let v1549 =
                                constructor_lower_select(ctx, v1548, &Cond::Ne, v3, v563.1, v563.2);
                            let v1550 = C::output(ctx, v1549);
                            let v1551 = Some(v1550);
                            // Rule at src\isa\aarch64\lower.isle line 2000.
                            return v1551;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v563 = C::unpack_value_array_3(ctx, v562);
                        let v1488 = C::maybe_uextend(ctx, v563.0);
                        if let Some(v1489) = v1488 {
                            let v1490 = C::def_inst(ctx, v1489);
                            if let Some(v1491) = v1490 {
                                let v1492 = &C::inst_data(ctx, v1491);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1493,
                                    args: ref v1494,
                                    cond: ref v1495,
                                } = v1492
                                {
                                    if let &Opcode::Icmp = v1493 {
                                        let v1496 = C::unpack_value_array_2(ctx, v1494);
                                        let v1499 = C::value_type(ctx, v1496.0);
                                        let v1500 = &constructor_lower_icmp_into_flags(
                                            ctx, v1495, v1496.0, v1496.1, v1499,
                                        );
                                        let v1501 = &constructor_flags_and_cc_flags(ctx, v1500);
                                        let v1502 = &constructor_flags_and_cc_cc(ctx, v1500);
                                        let v1503 = &C::cond_code(ctx, v1502);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1504 = constructor_lower_select(
                                            ctx, v1501, v1503, v3, v563.1, v563.2,
                                        );
                                        let v1552 = &constructor_csdb(ctx);
                                        let v1553 = constructor_side_effect(ctx, v1552);
                                        let v1554 = C::output(ctx, v1504);
                                        let v1555 = Some(v1554);
                                        // Rule at src\isa\aarch64\lower.isle line 2011.
                                        return v1555;
                                    }
                                }
                            }
                        }
                        let v1522 = C::value_type(ctx, v563.0);
                        let v1537 = C::fits_in_64(ctx, v1522);
                        if let Some(v1538) = v1537 {
                            let v1539 = constructor_put_in_reg_zext64(ctx, v563.0);
                            let v1532 = C::zero_reg(ctx);
                            let v1540 = &constructor_cmp(ctx, &OperandSize::Size64, v1539, v1532);
                            let v3 = C::value_type(ctx, v2);
                            let v1541 =
                                constructor_lower_select(ctx, v1540, &Cond::Ne, v3, v563.1, v563.2);
                            let v1542 = C::output(ctx, v1541);
                            let v1543 = Some(v1542);
                            // Rule at src\isa\aarch64\lower.isle line 2025.
                            return v1543;
                        }
                        if v1522 == I128 {
                            let v1544 = C::put_in_regs(ctx, v563.0);
                            let v1545 = C::value_regs_get(ctx, v1544, 0x0);
                            let v1546 = C::value_regs_get(ctx, v1544, 0x1);
                            let v1547 = constructor_orr(ctx, I64, v1545, v1546);
                            let v1134 = C::zero_reg(ctx);
                            let v1548 = &constructor_cmp(ctx, &OperandSize::Size64, v1547, v1134);
                            let v3 = C::value_type(ctx, v2);
                            let v1549 =
                                constructor_lower_select(ctx, v1548, &Cond::Ne, v3, v563.1, v563.2);
                            let v1550 = C::output(ctx, v1549);
                            let v1551 = Some(v1550);
                            // Rule at src\isa\aarch64\lower.isle line 2031.
                            return v1551;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v563 = C::unpack_value_array_3(ctx, v562);
                            let v1383 = C::put_in_reg(ctx, v563.0);
                            let v1384 = C::put_in_reg(ctx, v563.1);
                            let v1385 = C::put_in_reg(ctx, v563.2);
                            let v1386 = constructor_bsl(ctx, v715, v1383, v1384, v1385);
                            let v1387 = constructor_output_reg(ctx, v1386);
                            let v1388 = Some(v1387);
                            // Rule at src\isa\aarch64\lower.isle line 1877.
                            return v1388;
                        }
                        let v1372 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1373) = v1372 {
                            let v563 = C::unpack_value_array_3(ctx, v562);
                            let v1374 = C::put_in_reg(ctx, v563.1);
                            let v1375 = C::put_in_reg(ctx, v563.0);
                            let v1376 = constructor_and_reg(ctx, v3, v1374, v1375);
                            let v1377 = C::put_in_reg(ctx, v563.2);
                            let v1378 = C::put_in_reg(ctx, v563.0);
                            let v1379 = constructor_bic(ctx, v3, v1377, v1378);
                            let v1380 = constructor_orr(ctx, v3, v1376, v1379);
                            let v1381 = constructor_output_reg(ctx, v1380);
                            let v1382 = Some(v1381);
                            // Rule at src\isa\aarch64\lower.isle line 1871.
                            return v1382;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v577 = &constructor_vector_size(ctx, v3);
                            let v563 = C::unpack_value_array_3(ctx, v562);
                            let v578 = constructor_lower_fmla(
                                ctx,
                                &VecALUModOp::Fmla,
                                v563.0,
                                v563.1,
                                v563.2,
                                v577,
                            );
                            let v579 = constructor_output_reg(ctx, v578);
                            let v580 = Some(v579);
                            // Rule at src\isa\aarch64\lower.isle line 539.
                            return v580;
                        }
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v563 = C::unpack_value_array_3(ctx, v562);
                            let v567 = &constructor_is_fneg(ctx, v563.0);
                            let v569 = constructor_is_fneg_neg(ctx, v567);
                            let v568 = &constructor_is_fneg(ctx, v563.1);
                            let v570 = constructor_is_fneg_neg(ctx, v568);
                            let v571 = C::u64_xor(ctx, v569, v570);
                            let v572 = constructor_get_fneg_value(ctx, v567);
                            let v573 = constructor_get_fneg_value(ctx, v568);
                            let v574 =
                                constructor_fmadd_series(ctx, v434, v571, v572, v573, v563.2);
                            let v575 = Some(v574);
                            // Rule at src\isa\aarch64\lower.isle line 532.
                            return v575;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2068,
            args: ref v2069,
            imm: v2070,
        } => {
            if let &Opcode::Insertlane = v2068 {
                let v2071 = C::unpack_value_array_2(ctx, v2069);
                let v2075 = C::value_type(ctx, v2071.1);
                let v2076 = C::ty_int(ctx, v2075);
                if let Some(v2077) = v2076 {
                    let v2079 = C::put_in_reg(ctx, v2071.0);
                    let v2080 = C::put_in_reg(ctx, v2071.1);
                    let v2074 = C::value_type(ctx, v2071.0);
                    let v2081 = &constructor_vector_size(ctx, v2074);
                    let v2078 = C::u8_from_uimm8(ctx, v2070);
                    let v2082 = constructor_mov_to_vec(ctx, v2079, v2080, v2078, v2081);
                    let v2083 = constructor_output_reg(ctx, v2082);
                    let v2084 = Some(v2083);
                    // Rule at src\isa\aarch64\lower.isle line 2549.
                    return v2084;
                }
                let v2085 = C::ty_scalar_float(ctx, v2075);
                if let Some(v2086) = v2085 {
                    let v2079 = C::put_in_reg(ctx, v2071.0);
                    let v2080 = C::put_in_reg(ctx, v2071.1);
                    let v2074 = C::value_type(ctx, v2071.0);
                    let v2081 = &constructor_vector_size(ctx, v2074);
                    let v2078 = C::u8_from_uimm8(ctx, v2070);
                    let v2087 = constructor_mov_vec_elem(ctx, v2079, v2080, v2078, 0x0, v2081);
                    let v2088 = constructor_output_reg(ctx, v2087);
                    let v2089 = Some(v2088);
                    // Rule at src\isa\aarch64\lower.isle line 2554.
                    return v2089;
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1483,
            code: ref v1484,
        } => {
            if let &Opcode::Trap = v1483 {
                let v1485 = &constructor_udf(ctx, v1484);
                let v1486 = constructor_side_effect(ctx, v1485);
                let v1487 = Some(v1486);
                // Rule at src\isa\aarch64\lower.isle line 1955.
                return v1487;
            }
        }
        &InstructionData::Unary {
            opcode: ref v282,
            arg: v283,
        } => {
            match v282 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v913 = C::def_inst(ctx, v283);
                        if let Some(v914) = v913 {
                            let v915 = &C::inst_data(ctx, v914);
                            match v915 {
                                &InstructionData::Load {
                                    opcode: ref v947,
                                    arg: v948,
                                    flags: v949,
                                    offset: v950,
                                } => {
                                    if let &Opcode::Load = v947 {
                                        let v929 = C::is_sinkable_inst(ctx, v283);
                                        if let Some(v930) = v929 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1610 = C::lane_type(ctx, v3);
                                            let v1611 =
                                                constructor_sink_load_into_addr(ctx, v1610, v930);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v1612 = constructor_ld1r(ctx, v1611, v380, v949);
                                            let v1613 = constructor_output_reg(ctx, v1612);
                                            let v1614 = Some(v1613);
                                            // Rule at src\isa\aarch64\lower.isle line 2070.
                                            return v1614;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1599,
                                    arg: v1600,
                                } => {
                                    if let &Opcode::Ireduce = v1599 {
                                        let v1601 = C::def_inst(ctx, v1600);
                                        if let Some(v1602) = v1601 {
                                            let v1603 = &C::inst_data(ctx, v1602);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1604,
                                                imm: v1605,
                                            } = v1603
                                            {
                                                if let &Opcode::Iconst = v1604 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v577 = &constructor_vector_size(ctx, v3);
                                                    let v1606 = C::u64_from_imm64(ctx, v1605);
                                                    let v1607 =
                                                        constructor_splat_const(ctx, v1606, v577);
                                                    let v1608 = constructor_output_reg(ctx, v1607);
                                                    let v1609 = Some(v1608);
                                                    // Rule at src\isa\aarch64\lower.isle line 2067.
                                                    return v1609;
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1580,
                                    imm: v1581,
                                } => {
                                    if let &Opcode::F32const = v1580 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v577 = &constructor_vector_size(ctx, v3);
                                        let v1582 = C::u32_from_ieee32(ctx, v1581);
                                        let v1583 = C::u32_as_u64(ctx, v1582);
                                        let v1584 = constructor_splat_const(ctx, v1583, v577);
                                        let v1585 = constructor_output_reg(ctx, v1584);
                                        let v1586 = Some(v1585);
                                        // Rule at src\isa\aarch64\lower.isle line 2058.
                                        return v1586;
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1587,
                                    imm: v1588,
                                } => {
                                    if let &Opcode::F64const = v1587 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v577 = &constructor_vector_size(ctx, v3);
                                        let v1589 = C::u64_from_ieee64(ctx, v1588);
                                        let v1590 = constructor_splat_const(ctx, v1589, v577);
                                        let v1591 = constructor_output_reg(ctx, v1590);
                                        let v1592 = Some(v1591);
                                        // Rule at src\isa\aarch64\lower.isle line 2061.
                                        return v1592;
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1593,
                                    imm: v1594,
                                } => {
                                    if let &Opcode::Iconst = v1593 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v577 = &constructor_vector_size(ctx, v3);
                                        let v1595 = C::u64_from_imm64(ctx, v1594);
                                        let v1596 = constructor_splat_const(ctx, v1595, v577);
                                        let v1597 = constructor_output_reg(ctx, v1596);
                                        let v1598 = Some(v1597);
                                        // Rule at src\isa\aarch64\lower.isle line 2064.
                                        return v1598;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v284 = C::value_type(ctx, v283);
                        let v1570 = C::ty_int_ref_scalar_64(ctx, v284);
                        if let Some(v1571) = v1570 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v3 = C::value_type(ctx, v2);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v1572 = constructor_vec_dup(ctx, v295, v380);
                            let v1573 = constructor_output_reg(ctx, v1572);
                            let v1574 = Some(v1573);
                            // Rule at src\isa\aarch64\lower.isle line 2051.
                            return v1574;
                        }
                        let v1575 = C::ty_scalar_float(ctx, v284);
                        if let Some(v1576) = v1575 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v3 = C::value_type(ctx, v2);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v1577 = constructor_vec_dup_from_fpu(ctx, v295, v380, 0x0);
                            let v1578 = constructor_output_reg(ctx, v1577);
                            let v1579 = Some(v1578);
                            // Rule at src\isa\aarch64\lower.isle line 2055.
                            return v1579;
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v295 = C::put_in_reg(ctx, v283);
                    let v2020 = &constructor_write_pinned_reg(ctx, v295);
                    let v2021 = constructor_side_effect(ctx, v2020);
                    let v2022 = Some(v2021);
                    // Rule at src\isa\aarch64\lower.isle line 2488.
                    return v2022;
                }
                &Opcode::VanyTrue => {
                    let v295 = C::put_in_reg(ctx, v283);
                    let v284 = C::value_type(ctx, v283);
                    let v355 = &constructor_vanytrue(ctx, v295, v284);
                    let v356 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v357 = constructor_with_flags(ctx, v355, v356);
                    let v358 = C::output(ctx, v357);
                    let v359 = Some(v358);
                    // Rule at src\isa\aarch64\lower.isle line 315.
                    return v359;
                }
                &Opcode::VallTrue => {
                    let v284 = C::value_type(ctx, v283);
                    let v313 = C::multi_lane(ctx, v284);
                    if let Some(v314) = v313 {
                        match v314.0 {
                            0x20 => {
                                if v314.1 == 0x2 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v326 = constructor_mov_from_vec(
                                        ctx,
                                        v295,
                                        0x0,
                                        &ScalarSize::Size64,
                                    );
                                    let v328 = C::zero_reg(ctx);
                                    let v330 = &constructor_cmp_rr_shift(
                                        ctx,
                                        &OperandSize::Size64,
                                        v328,
                                        v326,
                                        0x20,
                                    );
                                    let v332 = C::u8_into_uimm5(ctx, 0x0);
                                    let v335 = C::nzcv(ctx, false, true, false, false);
                                    let v337 = &constructor_ccmp_imm(
                                        ctx,
                                        &OperandSize::Size32,
                                        v326,
                                        v332,
                                        v335,
                                        &Cond::Ne,
                                    );
                                    let v338 = constructor_with_flags(ctx, v330, v337);
                                    let v339 = C::output(ctx, v338);
                                    let v340 = Some(v339);
                                    // Rule at src\isa\aarch64\lower.isle line 289.
                                    return v340;
                                }
                            }
                            0x40 => {
                                if v314.1 == 0x2 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v317 = constructor_cmeq0(ctx, v295, &VectorSize::Size64x2);
                                    let v318 =
                                        constructor_addp(ctx, v317, v317, &VectorSize::Size64x2);
                                    let v319 =
                                        &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v318, v318);
                                    let v321 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v322 = constructor_with_flags(ctx, v319, v321);
                                    let v323 = C::output(ctx, v322);
                                    let v324 = Some(v323);
                                    // Rule at src\isa\aarch64\lower.isle line 283.
                                    return v324;
                                }
                            }
                            _ => {}
                        }
                    }
                    let v341 = C::lane_fits_in_32(ctx, v284);
                    if let Some(v342) = v341 {
                        let v343 = C::not_vec32x2(ctx, v342);
                        if let Some(v344) = v343 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v346 = &constructor_vector_size(ctx, v342);
                            let v347 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v295, v346);
                            let v348 =
                                constructor_mov_from_vec(ctx, v347, 0x0, &ScalarSize::Size64);
                            let v349 = C::u8_into_imm12(ctx, 0x0);
                            let v350 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v348, v349);
                            let v351 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v352 = constructor_with_flags(ctx, v350, v351);
                            let v353 = C::output(ctx, v352);
                            let v354 = Some(v353);
                            // Rule at src\isa\aarch64\lower.isle line 306.
                            return v354;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v284 = C::value_type(ctx, v283);
                    match v284 {
                        I8X16 => {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v2097 =
                                constructor_sshr_vec_imm(ctx, v295, 0x7, &VectorSize::Size8x16);
                            let v2099 =
                                constructor_constant_f128(ctx, 0x80402010080402018040201008040201);
                            let v2100 =
                                constructor_and_vec(ctx, v2097, v2099, &VectorSize::Size8x16);
                            let v2102 = constructor_vec_extract(ctx, v2100, v2100, 0x8);
                            let v2103 = constructor_zip1(ctx, v2100, v2102, &VectorSize::Size8x16);
                            let v2104 = constructor_addv(ctx, v2103, &VectorSize::Size16x8);
                            let v2105 =
                                constructor_mov_from_vec(ctx, v2104, 0x0, &ScalarSize::Size16);
                            let v2106 = constructor_output_reg(ctx, v2105);
                            let v2107 = Some(v2106);
                            // Rule at src\isa\aarch64\lower.isle line 2575.
                            return v2107;
                        }
                        I16X8 => {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v2109 =
                                constructor_sshr_vec_imm(ctx, v295, 0xF, &VectorSize::Size16x8);
                            let v2111 =
                                constructor_constant_f128(ctx, 0x800040002000100008000400020001);
                            let v2112 =
                                constructor_and_vec(ctx, v2109, v2111, &VectorSize::Size16x8);
                            let v2113 = constructor_addv(ctx, v2112, &VectorSize::Size16x8);
                            let v2114 =
                                constructor_mov_from_vec(ctx, v2113, 0x0, &ScalarSize::Size16);
                            let v2115 = constructor_output_reg(ctx, v2114);
                            let v2116 = Some(v2115);
                            // Rule at src\isa\aarch64\lower.isle line 2599.
                            return v2116;
                        }
                        I32X4 => {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v2118 =
                                constructor_sshr_vec_imm(ctx, v295, 0x1F, &VectorSize::Size32x4);
                            let v2120 = constructor_constant_f128(ctx, 0x8000000040000000200000001);
                            let v2121 =
                                constructor_and_vec(ctx, v2118, v2120, &VectorSize::Size32x4);
                            let v2122 = constructor_addv(ctx, v2121, &VectorSize::Size32x4);
                            let v2123 =
                                constructor_mov_from_vec(ctx, v2122, 0x0, &ScalarSize::Size32);
                            let v2124 = constructor_output_reg(ctx, v2123);
                            let v2125 = Some(v2124);
                            // Rule at src\isa\aarch64\lower.isle line 2612.
                            return v2125;
                        }
                        I64X2 => {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v2126 =
                                constructor_mov_from_vec(ctx, v295, 0x1, &ScalarSize::Size64);
                            let v2127 = C::put_in_reg(ctx, v283);
                            let v2128 =
                                constructor_mov_from_vec(ctx, v2127, 0x0, &ScalarSize::Size64);
                            let v975 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v2129 = constructor_lsr_imm(ctx, I64, v2126, v975);
                            let v1303 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v2130 = constructor_lsr_imm(ctx, I64, v2128, v1303);
                            let v2131 = C::lshl_from_u64(ctx, I64, 0x1);
                            let v2132 = v2131?;
                            let v2133 = constructor_add_shift(ctx, I64, v2130, v2129, v2132);
                            let v2134 = constructor_output_reg(ctx, v2133);
                            let v2135 = Some(v2134);
                            // Rule at src\isa\aarch64\lower.isle line 2625.
                            return v2135;
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v734 = constructor_value_regs_zero(ctx);
                            let v735 = C::put_in_regs(ctx, v283);
                            let v736 = constructor_sub_i128(ctx, v734, v735);
                            let v737 = C::output(ctx, v736);
                            let v738 = Some(v737);
                            // Rule at src\isa\aarch64\lower.isle line 770.
                            return v738;
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v729 = C::zero_reg(ctx);
                            let v730 = C::put_in_reg(ctx, v283);
                            let v731 = constructor_sub(ctx, v33, v729, v730);
                            let v732 = constructor_output_reg(ctx, v731);
                            let v733 = Some(v732);
                            // Rule at src\isa\aarch64\lower.isle line 766.
                            return v733;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v739 = &constructor_vector_size(ctx, v715);
                            let v740 = constructor_neg(ctx, v295, v739);
                            let v741 = constructor_output_reg(ctx, v740);
                            let v742 = Some(v741);
                            // Rule at src\isa\aarch64\lower.isle line 774.
                            return v742;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v384 = constructor_abs(ctx, &OperandSize::Size64, v295);
                            let v385 = constructor_output_reg(ctx, v384);
                            let v386 = Some(v385);
                            // Rule at src\isa\aarch64\lower.isle line 345.
                            return v386;
                        }
                        let v387 = C::fits_in_32(ctx, v3);
                        if let Some(v388) = v387 {
                            let v389 = constructor_put_in_reg_sext32(ctx, v283);
                            let v390 = constructor_abs(ctx, &OperandSize::Size32, v389);
                            let v391 = constructor_output_reg(ctx, v390);
                            let v392 = Some(v391);
                            // Rule at src\isa\aarch64\lower.isle line 348.
                            return v392;
                        }
                        if v3 == I128 {
                            let v285 = C::put_in_regs(ctx, v283);
                            let v286 = C::value_regs_get(ctx, v285, 0x0);
                            let v393 = C::value_regs_get(ctx, v285, 0x1);
                            let v395 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v396 = constructor_asr_imm(ctx, I64, v393, v395);
                            let v397 = constructor_eor(ctx, I64, v393, v396);
                            let v398 = constructor_eor(ctx, I64, v286, v396);
                            let v399 = &constructor_sub_with_flags_paired(ctx, I64, v398, v396);
                            let v400 = &constructor_sbc_paired(ctx, I64, v397, v396);
                            let v401 = constructor_with_flags(ctx, v399, v400);
                            let v402 = C::output(ctx, v401);
                            let v403 = Some(v402);
                            // Rule at src\isa\aarch64\lower.isle line 358.
                            return v403;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v381 = constructor_vec_abs(ctx, v295, v380);
                            let v382 = constructor_output_reg(ctx, v381);
                            let v383 = Some(v382);
                            // Rule at src\isa\aarch64\lower.isle line 342.
                            return v383;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v913 = C::def_inst(ctx, v283);
                        if let Some(v914) = v913 {
                            let v915 = &C::inst_data(ctx, v914);
                            if let &InstructionData::Binary {
                                opcode: ref v992,
                                args: ref v993,
                            } = v915
                            {
                                match v992 {
                                    &Opcode::Bxor => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v994 = C::unpack_value_array_2(ctx, v993);
                                            let v1022 = constructor_i128_alu_bitop(
                                                ctx,
                                                &ALUOp::EorNot,
                                                I64,
                                                v994.0,
                                                v994.1,
                                            );
                                            let v1023 = C::output(ctx, v1022);
                                            let v1024 = Some(v1023);
                                            // Rule at src\isa\aarch64\lower.isle line 1264.
                                            return v1024;
                                        }
                                        let v32 = C::fits_in_64(ctx, v3);
                                        if let Some(v33) = v32 {
                                            let v994 = C::unpack_value_array_2(ctx, v993);
                                            let v1019 = constructor_alu_rs_imm_logic(
                                                ctx,
                                                &ALUOp::EorNot,
                                                v33,
                                                v994.0,
                                                v994.1,
                                            );
                                            let v1020 = constructor_output_reg(ctx, v1019);
                                            let v1021 = Some(v1020);
                                            // Rule at src\isa\aarch64\lower.isle line 1262.
                                            return v1021;
                                        }
                                    }
                                    &Opcode::Ishl => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v32 = C::fits_in_64(ctx, v3);
                                        if let Some(v33) = v32 {
                                            let v994 = C::unpack_value_array_2(ctx, v993);
                                            let v997 = C::def_inst(ctx, v994.1);
                                            if let Some(v998) = v997 {
                                                let v999 = &C::inst_data(ctx, v998);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v1000,
                                                    imm: v1001,
                                                } = v999
                                                {
                                                    if let &Opcode::Iconst = v1000 {
                                                        let v1002 =
                                                            C::lshl_from_imm64(ctx, v33, v1001);
                                                        if let Some(v1003) = v1002 {
                                                            let v729 = C::zero_reg(ctx);
                                                            let v1004 = C::put_in_reg(ctx, v994.0);
                                                            let v1005 = constructor_orr_not_shift(
                                                                ctx, v33, v729, v1004, v1003,
                                                            );
                                                            let v1006 =
                                                                constructor_output_reg(ctx, v1005);
                                                            let v1007 = Some(v1006);
                                                            // Rule at src\isa\aarch64\lower.isle line 1243.
                                                            return v1007;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v285 = C::put_in_regs(ctx, v283);
                            let v286 = C::value_regs_get(ctx, v285, 0x0);
                            let v393 = C::value_regs_get(ctx, v285, 0x1);
                            let v1008 = C::zero_reg(ctx);
                            let v1009 = constructor_orr_not(ctx, I64, v1008, v286);
                            let v1010 = C::zero_reg(ctx);
                            let v1011 = constructor_orr_not(ctx, I64, v1010, v393);
                            let v1012 = C::value_regs(ctx, v1009, v1011);
                            let v1013 = C::output(ctx, v1012);
                            let v1014 = Some(v1013);
                            // Rule at src\isa\aarch64\lower.isle line 1249.
                            return v1014;
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v729 = C::zero_reg(ctx);
                            let v730 = C::put_in_reg(ctx, v283);
                            let v989 = constructor_orr_not(ctx, v33, v729, v730);
                            let v990 = constructor_output_reg(ctx, v989);
                            let v991 = Some(v990);
                            // Rule at src\isa\aarch64\lower.isle line 1238.
                            return v991;
                        }
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v739 = &constructor_vector_size(ctx, v715);
                            let v1015 = constructor_not(ctx, v295, v739);
                            let v1016 = constructor_output_reg(ctx, v1015);
                            let v1017 = Some(v1016);
                            // Rule at src\isa\aarch64\lower.isle line 1258.
                            return v1017;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1241 = constructor_rbit(ctx, I32, v295);
                                let v1243 = C::imm_shift_from_u8(ctx, 0x18);
                                let v1244 = constructor_lsr_imm(ctx, I32, v1241, v1243);
                                let v1245 = constructor_output_reg(ctx, v1244);
                                let v1246 = Some(v1245);
                                // Rule at src\isa\aarch64\lower.isle line 1693.
                                return v1246;
                            }
                            I16 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1241 = constructor_rbit(ctx, I32, v295);
                                let v1248 = C::imm_shift_from_u8(ctx, 0x10);
                                let v1249 = constructor_lsr_imm(ctx, I32, v1241, v1248);
                                let v1250 = constructor_output_reg(ctx, v1249);
                                let v1251 = Some(v1250);
                                // Rule at src\isa\aarch64\lower.isle line 1699.
                                return v1251;
                            }
                            I128 => {
                                let v285 = C::put_in_regs(ctx, v283);
                                let v286 = C::value_regs_get(ctx, v285, 0x0);
                                let v1252 = constructor_rbit(ctx, I64, v286);
                                let v288 = C::value_regs_get(ctx, v285, 0x1);
                                let v1253 = constructor_rbit(ctx, I64, v288);
                                let v1254 = C::value_regs(ctx, v1253, v1252);
                                let v1255 = C::output(ctx, v1254);
                                let v1256 = Some(v1255);
                                // Rule at src\isa\aarch64\lower.isle line 1702.
                                return v1256;
                            }
                            _ => {}
                        }
                        let v295 = C::put_in_reg(ctx, v283);
                        let v1257 = constructor_rbit(ctx, v3, v295);
                        let v1258 = constructor_output_reg(ctx, v1257);
                        let v1259 = Some(v1258);
                        // Rule at src\isa\aarch64\lower.isle line 1708.
                        return v1259;
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v309 = constructor_put_in_reg_zext32(ctx, v283);
                                let v1260 = constructor_a64_clz(ctx, I32, v309);
                                let v1261 = C::u8_into_imm12(ctx, 0x18);
                                let v1262 = constructor_sub_imm(ctx, I32, v1260, v1261);
                                let v1263 = constructor_output_reg(ctx, v1262);
                                let v1264 = Some(v1263);
                                // Rule at src\isa\aarch64\lower.isle line 1714.
                                return v1264;
                            }
                            I16 => {
                                let v309 = constructor_put_in_reg_zext32(ctx, v283);
                                let v1260 = constructor_a64_clz(ctx, I32, v309);
                                let v1265 = C::u8_into_imm12(ctx, 0x10);
                                let v1266 = constructor_sub_imm(ctx, I32, v1260, v1265);
                                let v1267 = constructor_output_reg(ctx, v1266);
                                let v1268 = Some(v1267);
                                // Rule at src\isa\aarch64\lower.isle line 1717.
                                return v1268;
                            }
                            I128 => {
                                let v285 = C::put_in_regs(ctx, v283);
                                let v1269 = constructor_lower_clz128(ctx, v285);
                                let v1270 = C::output(ctx, v1269);
                                let v1271 = Some(v1270);
                                // Rule at src\isa\aarch64\lower.isle line 1720.
                                return v1271;
                            }
                            _ => {}
                        }
                        let v295 = C::put_in_reg(ctx, v283);
                        let v1272 = constructor_a64_clz(ctx, v3, v295);
                        let v1273 = constructor_output_reg(ctx, v1272);
                        let v1274 = Some(v1273);
                        // Rule at src\isa\aarch64\lower.isle line 1723.
                        return v1274;
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v389 = constructor_put_in_reg_sext32(ctx, v283);
                                let v1293 = constructor_a64_cls(ctx, I32, v389);
                                let v1261 = C::u8_into_imm12(ctx, 0x18);
                                let v1294 = constructor_sub_imm(ctx, I32, v1293, v1261);
                                let v1295 = constructor_output_reg(ctx, v1294);
                                let v1296 = Some(v1295);
                                // Rule at src\isa\aarch64\lower.isle line 1761.
                                return v1296;
                            }
                            I16 => {
                                let v389 = constructor_put_in_reg_sext32(ctx, v283);
                                let v1293 = constructor_a64_cls(ctx, I32, v389);
                                let v1265 = C::u8_into_imm12(ctx, 0x10);
                                let v1297 = constructor_sub_imm(ctx, I32, v1293, v1265);
                                let v1298 = constructor_output_reg(ctx, v1297);
                                let v1299 = Some(v1298);
                                // Rule at src\isa\aarch64\lower.isle line 1764.
                                return v1299;
                            }
                            I128 => {
                                let v285 = C::put_in_regs(ctx, v283);
                                let v286 = C::value_regs_get(ctx, v285, 0x0);
                                let v393 = C::value_regs_get(ctx, v285, 0x1);
                                let v1300 = constructor_a64_cls(ctx, I64, v286);
                                let v1301 = constructor_a64_cls(ctx, I64, v393);
                                let v1302 = constructor_eon(ctx, I64, v393, v286);
                                let v1303 = C::imm_shift_from_u8(ctx, 0x3F);
                                let v1304 = constructor_lsr_imm(ctx, I64, v1302, v1303);
                                let v1305 = constructor_madd(ctx, I64, v1300, v1304, v1304);
                                let v1306 = C::u8_into_imm12(ctx, 0x3F);
                                let v1307 = &constructor_cmp64_imm(ctx, v1301, v1306);
                                let v1308 = C::zero_reg(ctx);
                                let v1309 = &constructor_csel(ctx, &Cond::Eq, v1305, v1308);
                                let v1310 = constructor_with_flags_reg(ctx, v1307, v1309);
                                let v1311 = constructor_add(ctx, I64, v1310, v1301);
                                let v1312 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1313 = C::value_regs(ctx, v1311, v1312);
                                let v1314 = C::output(ctx, v1313);
                                let v1315 = Some(v1314);
                                // Rule at src\isa\aarch64\lower.isle line 1776.
                                return v1315;
                            }
                            _ => {}
                        }
                        let v295 = C::put_in_reg(ctx, v283);
                        let v1316 = constructor_a64_cls(ctx, v3, v295);
                        let v1317 = constructor_output_reg(ctx, v1316);
                        let v1318 = Some(v1317);
                        // Rule at src\isa\aarch64\lower.isle line 1790.
                        return v1318;
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1241 = constructor_rbit(ctx, I32, v295);
                                let v1276 = C::u64_into_imm_logic(ctx, I32, 0x800000);
                                let v1277 = constructor_orr_imm(ctx, I32, v1241, v1276);
                                let v1278 = constructor_a64_clz(ctx, I32, v1277);
                                let v1279 = constructor_output_reg(ctx, v1278);
                                let v1280 = Some(v1279);
                                // Rule at src\isa\aarch64\lower.isle line 1744.
                                return v1280;
                            }
                            I16 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1241 = constructor_rbit(ctx, I32, v295);
                                let v1282 = C::u64_into_imm_logic(ctx, I32, 0x8000);
                                let v1283 = constructor_orr_imm(ctx, I32, v1241, v1282);
                                let v1284 = constructor_a64_clz(ctx, I32, v1283);
                                let v1285 = constructor_output_reg(ctx, v1284);
                                let v1286 = Some(v1285);
                                // Rule at src\isa\aarch64\lower.isle line 1747.
                                return v1286;
                            }
                            I128 => {
                                let v285 = C::put_in_regs(ctx, v283);
                                let v286 = C::value_regs_get(ctx, v285, 0x0);
                                let v1252 = constructor_rbit(ctx, I64, v286);
                                let v288 = C::value_regs_get(ctx, v285, 0x1);
                                let v1253 = constructor_rbit(ctx, I64, v288);
                                let v1254 = C::value_regs(ctx, v1253, v1252);
                                let v1287 = constructor_lower_clz128(ctx, v1254);
                                let v1288 = C::output(ctx, v1287);
                                let v1289 = Some(v1288);
                                // Rule at src\isa\aarch64\lower.isle line 1750.
                                return v1289;
                            }
                            _ => {}
                        }
                        let v295 = C::put_in_reg(ctx, v283);
                        let v1257 = constructor_rbit(ctx, v3, v295);
                        let v1290 = constructor_a64_clz(ctx, v3, v1257);
                        let v1291 = constructor_output_reg(ctx, v1290);
                        let v1292 = Some(v1291);
                        // Rule at src\isa\aarch64\lower.isle line 1756.
                        return v1292;
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1320 = constructor_a64_rev16(ctx, I16, v295);
                                let v1321 = constructor_output_reg(ctx, v1320);
                                let v1322 = Some(v1321);
                                // Rule at src\isa\aarch64\lower.isle line 1795.
                                return v1322;
                            }
                            I32 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1323 = constructor_a64_rev32(ctx, I32, v295);
                                let v1324 = constructor_output_reg(ctx, v1323);
                                let v1325 = Some(v1324);
                                // Rule at src\isa\aarch64\lower.isle line 1798.
                                return v1325;
                            }
                            I64 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1326 = constructor_a64_rev64(ctx, I64, v295);
                                let v1327 = constructor_output_reg(ctx, v1326);
                                let v1328 = Some(v1327);
                                // Rule at src\isa\aarch64\lower.isle line 1801.
                                return v1328;
                            }
                            I128 => {
                                let v285 = C::put_in_regs(ctx, v283);
                                let v1329 = C::value_regs_get(ctx, v285, 0x1);
                                let v1330 = constructor_a64_rev64(ctx, I64, v1329);
                                let v1331 = C::put_in_regs(ctx, v283);
                                let v1332 = C::value_regs_get(ctx, v1331, 0x0);
                                let v1333 = constructor_a64_rev64(ctx, I64, v1332);
                                let v1334 = C::value_regs(ctx, v1330, v1333);
                                let v1335 = C::output(ctx, v1334);
                                let v1336 = Some(v1335);
                                // Rule at src\isa\aarch64\lower.isle line 1804.
                                return v1336;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1340 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size32);
                                let v1342 = constructor_vec_cnt(ctx, v1340, &VectorSize::Size8x8);
                                let v1344 =
                                    constructor_mov_from_vec(ctx, v1342, 0x0, &ScalarSize::Size8);
                                let v1345 = constructor_output_reg(ctx, v1344);
                                let v1346 = Some(v1345);
                                // Rule at src\isa\aarch64\lower.isle line 1834.
                                return v1346;
                            }
                            I16 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1340 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size32);
                                let v1342 = constructor_vec_cnt(ctx, v1340, &VectorSize::Size8x8);
                                let v1347 =
                                    constructor_addp(ctx, v1342, v1342, &VectorSize::Size8x8);
                                let v1348 =
                                    constructor_mov_from_vec(ctx, v1347, 0x0, &ScalarSize::Size8);
                                let v1349 = constructor_output_reg(ctx, v1348);
                                let v1350 = Some(v1349);
                                // Rule at src\isa\aarch64\lower.isle line 1840.
                                return v1350;
                            }
                            I32 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1340 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size32);
                                let v1342 = constructor_vec_cnt(ctx, v1340, &VectorSize::Size8x8);
                                let v1351 = constructor_addv(ctx, v1342, &VectorSize::Size8x8);
                                let v1352 =
                                    constructor_mov_from_vec(ctx, v1351, 0x0, &ScalarSize::Size8);
                                let v1353 = constructor_output_reg(ctx, v1352);
                                let v1354 = Some(v1353);
                                // Rule at src\isa\aarch64\lower.isle line 1846.
                                return v1354;
                            }
                            I64 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v304 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size64);
                                let v1355 = constructor_vec_cnt(ctx, v304, &VectorSize::Size8x8);
                                let v1356 = constructor_addv(ctx, v1355, &VectorSize::Size8x8);
                                let v1357 =
                                    constructor_mov_from_vec(ctx, v1356, 0x0, &ScalarSize::Size8);
                                let v1358 = constructor_output_reg(ctx, v1357);
                                let v1359 = Some(v1358);
                                // Rule at src\isa\aarch64\lower.isle line 1852.
                                return v1359;
                            }
                            I128 => {
                                let v285 = C::put_in_regs(ctx, v283);
                                let v286 = C::value_regs_get(ctx, v285, 0x0);
                                let v1360 = constructor_mov_to_fpu(ctx, v286, &ScalarSize::Size64);
                                let v288 = C::value_regs_get(ctx, v285, 0x1);
                                let v1361 = constructor_mov_to_vec(
                                    ctx,
                                    v1360,
                                    v288,
                                    0x1,
                                    &VectorSize::Size64x2,
                                );
                                let v1362 = constructor_vec_cnt(ctx, v1361, &VectorSize::Size8x16);
                                let v1363 = constructor_addv(ctx, v1362, &VectorSize::Size8x16);
                                let v1364 =
                                    constructor_mov_from_vec(ctx, v1363, 0x0, &ScalarSize::Size8);
                                let v1365 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1366 = C::value_regs(ctx, v1364, v1365);
                                let v1367 = C::output(ctx, v1366);
                                let v1368 = Some(v1367);
                                // Rule at src\isa\aarch64\lower.isle line 1858.
                                return v1368;
                            }
                            I8X16 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v1369 = constructor_vec_cnt(ctx, v295, &VectorSize::Size8x16);
                                let v1370 = constructor_output_reg(ctx, v1369);
                                let v1371 = Some(v1370);
                                // Rule at src\isa\aarch64\lower.isle line 1866.
                                return v1371;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v485 = &constructor_scalar_size(ctx, v434);
                            let v486 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v295, v485);
                            let v487 = constructor_output_reg(ctx, v486);
                            let v488 = Some(v487);
                            // Rule at src\isa\aarch64\lower.isle line 441.
                            return v488;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v481 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v295, v380);
                            let v482 = constructor_output_reg(ctx, v481);
                            let v483 = Some(v482);
                            // Rule at src\isa\aarch64\lower.isle line 438.
                            return v483;
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v485 = &constructor_scalar_size(ctx, v434);
                            let v494 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v295, v485);
                            let v495 = constructor_output_reg(ctx, v494);
                            let v496 = Some(v495);
                            // Rule at src\isa\aarch64\lower.isle line 449.
                            return v496;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v490 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v295, v380);
                            let v491 = constructor_output_reg(ctx, v490);
                            let v492 = Some(v491);
                            // Rule at src\isa\aarch64\lower.isle line 446.
                            return v492;
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v433 = C::ty_scalar_float(ctx, v3);
                        if let Some(v434) = v433 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v485 = &constructor_scalar_size(ctx, v434);
                            let v502 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v295, v485);
                            let v503 = constructor_output_reg(ctx, v502);
                            let v504 = Some(v503);
                            // Rule at src\isa\aarch64\lower.isle line 457.
                            return v504;
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v498 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v295, v380);
                            let v499 = constructor_output_reg(ctx, v498);
                            let v500 = Some(v499);
                            // Rule at src\isa\aarch64\lower.isle line 454.
                            return v500;
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v518 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v295);
                                let v519 = constructor_output_reg(ctx, v518);
                                let v520 = Some(v519);
                                // Rule at src\isa\aarch64\lower.isle line 475.
                                return v520;
                            }
                            F64 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v522 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v295);
                                let v523 = constructor_output_reg(ctx, v522);
                                let v524 = Some(v523);
                                // Rule at src\isa\aarch64\lower.isle line 478.
                                return v524;
                            }
                            _ => {}
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v514 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v295, v380);
                            let v515 = constructor_output_reg(ctx, v514);
                            let v516 = Some(v515);
                            // Rule at src\isa\aarch64\lower.isle line 472.
                            return v516;
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v530 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v295);
                                let v531 = constructor_output_reg(ctx, v530);
                                let v532 = Some(v531);
                                // Rule at src\isa\aarch64\lower.isle line 486.
                                return v532;
                            }
                            F64 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v534 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v295);
                                let v535 = constructor_output_reg(ctx, v534);
                                let v536 = Some(v535);
                                // Rule at src\isa\aarch64\lower.isle line 489.
                                return v536;
                            }
                            _ => {}
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v526 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v295, v380);
                            let v527 = constructor_output_reg(ctx, v526);
                            let v528 = Some(v527);
                            // Rule at src\isa\aarch64\lower.isle line 483.
                            return v528;
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v542 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v295);
                                let v543 = constructor_output_reg(ctx, v542);
                                let v544 = Some(v543);
                                // Rule at src\isa\aarch64\lower.isle line 497.
                                return v544;
                            }
                            F64 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v546 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v295);
                                let v547 = constructor_output_reg(ctx, v546);
                                let v548 = Some(v547);
                                // Rule at src\isa\aarch64\lower.isle line 500.
                                return v548;
                            }
                            _ => {}
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v538 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v295, v380);
                            let v539 = constructor_output_reg(ctx, v538);
                            let v540 = Some(v539);
                            // Rule at src\isa\aarch64\lower.isle line 494.
                            return v540;
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v554 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v295);
                                let v555 = constructor_output_reg(ctx, v554);
                                let v556 = Some(v555);
                                // Rule at src\isa\aarch64\lower.isle line 508.
                                return v556;
                            }
                            F64 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v558 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v295);
                                let v559 = constructor_output_reg(ctx, v558);
                                let v560 = Some(v559);
                                // Rule at src\isa\aarch64\lower.isle line 511.
                                return v560;
                            }
                            _ => {}
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v380 = &constructor_vector_size(ctx, v3);
                            let v550 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v295, v380);
                            let v551 = constructor_output_reg(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src\isa\aarch64\lower.isle line 505.
                            return v552;
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v284 = C::value_type(ctx, v283);
                    let v1816 = &constructor_operand_size(ctx, v284);
                    let v730 = C::put_in_reg(ctx, v283);
                    let v1817 = C::u8_into_imm12(ctx, 0x0);
                    let v1818 = &constructor_cmp_imm(ctx, v1816, v730, v1817);
                    let v321 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1819 = constructor_with_flags(ctx, v1818, v321);
                    let v1820 = C::output(ctx, v1819);
                    let v1821 = Some(v1820);
                    // Rule at src\isa\aarch64\lower.isle line 2257.
                    return v1821;
                }
                &Opcode::IsInvalid => {
                    let v284 = C::value_type(ctx, v283);
                    let v1816 = &constructor_operand_size(ctx, v284);
                    let v730 = C::put_in_reg(ctx, v283);
                    let v1822 = C::u8_into_imm12(ctx, 0x1);
                    let v1823 = &constructor_cmn_imm(ctx, v1816, v730, v1822);
                    let v321 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1824 = constructor_with_flags(ctx, v1823, v321);
                    let v1825 = C::output(ctx, v1824);
                    let v1826 = Some(v1825);
                    // Rule at src\isa\aarch64\lower.isle line 2263.
                    return v1826;
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v297 = constructor_fpu_extend(ctx, v295, &ScalarSize::Size32);
                                let v298 = constructor_output_reg(ctx, v297);
                                let v299 = Some(v298);
                                // Rule at src\isa\aarch64\lower.isle line 260.
                                return v299;
                            }
                            F64X2 => {
                                let v295 = C::put_in_reg(ctx, v283);
                                let v301 = constructor_fpu_extend(ctx, v295, &ScalarSize::Size64);
                                let v302 = constructor_output_reg(ctx, v301);
                                let v303 = Some(v302);
                                // Rule at src\isa\aarch64\lower.isle line 263.
                                return v303;
                            }
                            _ => {}
                        }
                    }
                    let v284 = C::value_type(ctx, v283);
                    if v284 == I64 {
                        let v295 = C::put_in_reg(ctx, v283);
                        let v304 = constructor_mov_to_fpu(ctx, v295, &ScalarSize::Size64);
                        let v305 = constructor_output_reg(ctx, v304);
                        let v306 = Some(v305);
                        // Rule at src\isa\aarch64\lower.isle line 266.
                        return v306;
                    }
                    let v307 = C::int_fits_in_32(ctx, v284);
                    if let Some(v308) = v307 {
                        let v309 = constructor_put_in_reg_zext32(ctx, v283);
                        let v310 = constructor_mov_to_fpu(ctx, v309, &ScalarSize::Size32);
                        let v311 = constructor_output_reg(ctx, v310);
                        let v312 = Some(v311);
                        // Rule at src\isa\aarch64\lower.isle line 269.
                        return v312;
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v285 = C::put_in_regs(ctx, v283);
                        let v3 = C::value_type(ctx, v2);
                        let v284 = C::value_type(ctx, v283);
                        let v1337 = constructor_lower_bmask(ctx, v3, v284, v285);
                        let v1338 = C::output(ctx, v1337);
                        let v1339 = Some(v1338);
                        // Rule at src\isa\aarch64\lower.isle line 1812.
                        return v1339;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1372 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1373) = v1372 {
                            let v285 = C::put_in_regs(ctx, v283);
                            let v286 = C::value_regs_get(ctx, v285, 0x0);
                            let v1389 = constructor_output_reg(ctx, v286);
                            let v1390 = Some(v1389);
                            // Rule at src\isa\aarch64\lower.isle line 1885.
                            return v1390;
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v295 = C::put_in_reg(ctx, v283);
                        let v3 = C::value_type(ctx, v2);
                        let v1789 = &constructor_lane_size(ctx, v3);
                        let v1790 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v295, false, v1789);
                        let v1791 = constructor_output_reg(ctx, v1790);
                        let v1792 = Some(v1791);
                        // Rule at src\isa\aarch64\lower.isle line 2222.
                        return v1792;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v1793 = &constructor_lane_size(ctx, v715);
                            let v1794 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v295, true, v1793);
                            let v1795 = constructor_output_reg(ctx, v1794);
                            let v1796 = Some(v1795);
                            // Rule at src\isa\aarch64\lower.isle line 2227.
                            return v1796;
                        }
                        let v1565 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1566) = v1565 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v1798 = constructor_fpu_move_from_vec(
                                ctx,
                                v295,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1799 = &constructor_lane_size(ctx, v3);
                            let v1800 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Sxtl,
                                v1798,
                                false,
                                v1799,
                            );
                            let v1801 = constructor_output_reg(ctx, v1800);
                            let v1802 = Some(v1801);
                            // Rule at src\isa\aarch64\lower.isle line 2230.
                            return v1802;
                        }
                        let v295 = C::put_in_reg(ctx, v283);
                        let v1789 = &constructor_lane_size(ctx, v3);
                        let v2336 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v295, true, v1789);
                        let v2337 = constructor_output_reg(ctx, v2336);
                        let v2338 = Some(v2337);
                        // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 92.
                        return v2338;
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v295 = C::put_in_reg(ctx, v283);
                        let v3 = C::value_type(ctx, v2);
                        let v1789 = &constructor_lane_size(ctx, v3);
                        let v1804 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v295, false, v1789);
                        let v1805 = constructor_output_reg(ctx, v1804);
                        let v1806 = Some(v1805);
                        // Rule at src\isa\aarch64\lower.isle line 2237.
                        return v1806;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::ty_vec128(ctx, v3);
                        if let Some(v715) = v714 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v1793 = &constructor_lane_size(ctx, v715);
                            let v1807 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v295, true, v1793);
                            let v1808 = constructor_output_reg(ctx, v1807);
                            let v1809 = Some(v1808);
                            // Rule at src\isa\aarch64\lower.isle line 2242.
                            return v1809;
                        }
                        let v1565 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1566) = v1565 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v1798 = constructor_fpu_move_from_vec(
                                ctx,
                                v295,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1799 = &constructor_lane_size(ctx, v3);
                            let v1810 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Uxtl,
                                v1798,
                                false,
                                v1799,
                            );
                            let v1811 = constructor_output_reg(ctx, v1810);
                            let v1812 = Some(v1811);
                            // Rule at src\isa\aarch64\lower.isle line 2245.
                            return v1812;
                        }
                        let v295 = C::put_in_reg(ctx, v283);
                        let v1789 = &constructor_lane_size(ctx, v3);
                        let v2339 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v295, true, v1789);
                        let v2340 = constructor_output_reg(ctx, v2339);
                        let v2341 = Some(v2340);
                        // Rule at src\isa\aarch64\lower_dynamic_neon.isle line 97.
                        return v2341;
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v913 = C::def_inst(ctx, v283);
                        if let Some(v914) = v913 {
                            let v915 = &C::inst_data(ctx, v914);
                            match v915 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v916,
                                    arg: v917,
                                    imm: v918,
                                } => {
                                    if let &Opcode::Extractlane = v916 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v32 = C::fits_in_64(ctx, v3);
                                        if let Some(v33) = v32 {
                                            let v921 = C::put_in_reg(ctx, v917);
                                            let v919 = C::value_type(ctx, v917);
                                            let v922 = &constructor_lane_size(ctx, v919);
                                            let v920 = C::u8_from_uimm8(ctx, v918);
                                            let v923 =
                                                constructor_mov_from_vec(ctx, v921, v920, v922);
                                            let v924 = constructor_output_reg(ctx, v923);
                                            let v925 = Some(v924);
                                            // Rule at src\isa\aarch64\lower.isle line 1137.
                                            return v925;
                                        }
                                        if v3 == I128 {
                                            let v921 = C::put_in_reg(ctx, v917);
                                            let v919 = C::value_type(ctx, v917);
                                            let v922 = &constructor_lane_size(ctx, v919);
                                            let v920 = C::u8_from_uimm8(ctx, v918);
                                            let v923 =
                                                constructor_mov_from_vec(ctx, v921, v920, v922);
                                            let v940 =
                                                constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                            let v941 = C::value_regs(ctx, v923, v940);
                                            let v942 = C::output(ctx, v941);
                                            let v943 = Some(v942);
                                            // Rule at src\isa\aarch64\lower.isle line 1156.
                                            return v943;
                                        }
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref v947,
                                    arg: v948,
                                    flags: v949,
                                    offset: v950,
                                } => {
                                    if let &Opcode::Load = v947 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v32 = C::fits_in_64(ctx, v3);
                                        if let Some(v33) = v32 {
                                            let v929 = C::is_sinkable_inst(ctx, v283);
                                            if let Some(v930) = v929 {
                                                let v944 = C::first_result(ctx, v914);
                                                if let Some(v945) = v944 {
                                                    let v951 = C::sink_inst(ctx, v930);
                                                    let v946 = C::value_type(ctx, v945);
                                                    let v952 = C::offset32_to_i32(ctx, v950);
                                                    let v953 =
                                                        &constructor_amode(ctx, v946, v948, v952);
                                                    let v954 = constructor_aarch64_uload(
                                                        ctx, v946, v953, v949,
                                                    );
                                                    let v955 = constructor_output_reg(ctx, v954);
                                                    let v956 = Some(v955);
                                                    // Rule at src\isa\aarch64\lower.isle line 1162.
                                                    return v956;
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v926,
                                    arg: v927,
                                    flags: v928,
                                } => {
                                    if let &Opcode::AtomicLoad = v926 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v32 = C::fits_in_64(ctx, v3);
                                        if let Some(v33) = v32 {
                                            let v929 = C::is_sinkable_inst(ctx, v283);
                                            if let Some(v930) = v929 {
                                                let v931 = constructor_sink_atomic_load(ctx, v930);
                                                let v284 = C::value_type(ctx, v283);
                                                let v932 =
                                                    constructor_load_acquire(ctx, v284, v928, v931);
                                                let v933 = constructor_output_reg(ctx, v932);
                                                let v934 = Some(v933);
                                                // Rule at src\isa\aarch64\lower.isle line 1144.
                                                return v934;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v935 = constructor_put_in_reg_zext64(ctx, v283);
                            let v936 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                            let v937 = C::value_regs(ctx, v935, v936);
                            let v938 = C::output(ctx, v937);
                            let v939 = Some(v938);
                            // Rule at src\isa\aarch64\lower.isle line 1151.
                            return v939;
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v284 = C::value_type(ctx, v283);
                            let v908 = C::ty_bits(ctx, v284);
                            let v909 = C::ty_bits(ctx, v33);
                            let v910 = constructor_extend(ctx, v295, false, v908, v909);
                            let v911 = constructor_output_reg(ctx, v910);
                            let v912 = Some(v911);
                            // Rule at src\isa\aarch64\lower.isle line 1132.
                            return v912;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v913 = C::def_inst(ctx, v283);
                        if let Some(v914) = v913 {
                            let v915 = &C::inst_data(ctx, v914);
                            match v915 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v916,
                                    arg: v917,
                                    imm: v918,
                                } => {
                                    if let &Opcode::Extractlane = v916 {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v919 = C::value_type(ctx, v917);
                                            let v971 = C::not_i64x2(ctx, v919);
                                            if let Some(v972) = v971 {
                                                let v921 = C::put_in_reg(ctx, v917);
                                                let v960 = &constructor_vector_size(ctx, v919);
                                                let v973 = &constructor_size_from_ty(ctx, I64);
                                                let v920 = C::u8_from_uimm8(ctx, v918);
                                                let v974 = constructor_mov_from_vec_signed(
                                                    ctx, v921, v920, v960, v973,
                                                );
                                                let v975 = C::imm_shift_from_u8(ctx, 0x3F);
                                                let v976 =
                                                    constructor_asr_imm(ctx, I64, v974, v975);
                                                let v977 = C::value_regs(ctx, v974, v976);
                                                let v978 = C::output(ctx, v977);
                                                let v979 = Some(v978);
                                                // Rule at src\isa\aarch64\lower.isle line 1200.
                                                return v979;
                                            }
                                            if v919 == I64X2 {
                                                let v921 = C::put_in_reg(ctx, v917);
                                                let v920 = C::u8_from_uimm8(ctx, v918);
                                                let v980 = constructor_mov_from_vec(
                                                    ctx,
                                                    v921,
                                                    v920,
                                                    &ScalarSize::Size64,
                                                );
                                                let v981 = C::imm_shift_from_u8(ctx, 0x3F);
                                                let v982 =
                                                    constructor_asr_imm(ctx, I64, v980, v981);
                                                let v983 = C::value_regs(ctx, v980, v982);
                                                let v984 = C::output(ctx, v983);
                                                let v985 = Some(v984);
                                                // Rule at src\isa\aarch64\lower.isle line 1211.
                                                return v985;
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Load {
                                    opcode: ref v947,
                                    arg: v948,
                                    flags: v949,
                                    offset: v950,
                                } => {
                                    if let &Opcode::Load = v947 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v32 = C::fits_in_64(ctx, v3);
                                        if let Some(v33) = v32 {
                                            let v929 = C::is_sinkable_inst(ctx, v283);
                                            if let Some(v930) = v929 {
                                                let v944 = C::first_result(ctx, v914);
                                                if let Some(v945) = v944 {
                                                    let v951 = C::sink_inst(ctx, v930);
                                                    let v946 = C::value_type(ctx, v945);
                                                    let v952 = C::offset32_to_i32(ctx, v950);
                                                    let v953 =
                                                        &constructor_amode(ctx, v946, v948, v952);
                                                    let v986 = constructor_aarch64_sload(
                                                        ctx, v946, v953, v949,
                                                    );
                                                    let v987 = constructor_output_reg(ctx, v986);
                                                    let v988 = Some(v987);
                                                    // Rule at src\isa\aarch64\lower.isle line 1221.
                                                    return v988;
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v965 = constructor_put_in_reg_sext64(ctx, v283);
                            let v966 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v967 = constructor_asr_imm(ctx, I64, v965, v966);
                            let v968 = C::value_regs(ctx, v965, v967);
                            let v969 = C::output(ctx, v968);
                            let v970 = Some(v969);
                            // Rule at src\isa\aarch64\lower.isle line 1190.
                            return v970;
                        }
                        let v32 = C::fits_in_64(ctx, v3);
                        if let Some(v33) = v32 {
                            if let Some(v914) = v913 {
                                let v915 = &C::inst_data(ctx, v914);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v916,
                                    arg: v917,
                                    imm: v918,
                                } = v915
                                {
                                    if let &Opcode::Extractlane = v916 {
                                        let v921 = C::put_in_reg(ctx, v917);
                                        let v919 = C::value_type(ctx, v917);
                                        let v960 = &constructor_vector_size(ctx, v919);
                                        let v961 = &constructor_size_from_ty(ctx, v33);
                                        let v920 = C::u8_from_uimm8(ctx, v918);
                                        let v962 = constructor_mov_from_vec_signed(
                                            ctx, v921, v920, v960, v961,
                                        );
                                        let v963 = constructor_output_reg(ctx, v962);
                                        let v964 = Some(v963);
                                        // Rule at src\isa\aarch64\lower.isle line 1181.
                                        return v964;
                                    }
                                }
                            }
                            let v295 = C::put_in_reg(ctx, v283);
                            let v284 = C::value_type(ctx, v283);
                            let v908 = C::ty_bits(ctx, v284);
                            let v909 = C::ty_bits(ctx, v33);
                            let v957 = constructor_extend(ctx, v295, true, v908, v909);
                            let v958 = constructor_output_reg(ctx, v957);
                            let v959 = Some(v958);
                            // Rule at src\isa\aarch64\lower.isle line 1176.
                            return v959;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v506 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt32To64,
                                v295,
                                &ScalarSize::Size32,
                            );
                            let v507 = constructor_output_reg(ctx, v506);
                            let v508 = Some(v507);
                            // Rule at src\isa\aarch64\lower.isle line 462.
                            return v508;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v295 = C::put_in_reg(ctx, v283);
                            let v510 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt64To32,
                                v295,
                                &ScalarSize::Size64,
                            );
                            let v511 = constructor_output_reg(ctx, v510);
                            let v512 = Some(v511);
                            // Rule at src\isa\aarch64\lower.isle line 467.
                            return v512;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v295 = C::put_in_reg(ctx, v283);
                    let v1747 = constructor_fcvtn(ctx, v295, &ScalarSize::Size32);
                    let v1748 = constructor_output_reg(ctx, v1747);
                    let v1749 = Some(v1748);
                    // Rule at src\isa\aarch64\lower.isle line 2171.
                    return v1749;
                }
                &Opcode::FvpromoteLow => {
                    let v295 = C::put_in_reg(ctx, v283);
                    let v2250 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v295, false);
                    let v2251 = constructor_output_reg(ctx, v2250);
                    let v2252 = Some(v2251);
                    // Rule at src\isa\aarch64\lower.isle line 2896.
                    return v2252;
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v284 = C::value_type(ctx, v283);
                        match v284 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v590 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v295,
                                        false,
                                        F32,
                                        I64,
                                    );
                                    let v591 = constructor_output_reg(ctx, v590);
                                    let v592 = Some(v591);
                                    // Rule at src\isa\aarch64\lower.isle line 602.
                                    return v592;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v586 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v295,
                                        false,
                                        F32,
                                        v388,
                                    );
                                    let v587 = constructor_output_reg(ctx, v586);
                                    let v588 = Some(v587);
                                    // Rule at src\isa\aarch64\lower.isle line 599.
                                    return v588;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v599 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v295,
                                        false,
                                        F64,
                                        I64,
                                    );
                                    let v600 = constructor_output_reg(ctx, v599);
                                    let v601 = Some(v600);
                                    // Rule at src\isa\aarch64\lower.isle line 608.
                                    return v601;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v595 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v295,
                                        false,
                                        F64,
                                        v388,
                                    );
                                    let v596 = constructor_output_reg(ctx, v595);
                                    let v597 = Some(v596);
                                    // Rule at src\isa\aarch64\lower.isle line 605.
                                    return v597;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v284 = C::value_type(ctx, v283);
                        match v284 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v607 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v295,
                                        true,
                                        F32,
                                        I64,
                                    );
                                    let v608 = constructor_output_reg(ctx, v607);
                                    let v609 = Some(v608);
                                    // Rule at src\isa\aarch64\lower.isle line 616.
                                    return v609;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v603 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v295,
                                        true,
                                        F32,
                                        v388,
                                    );
                                    let v604 = constructor_output_reg(ctx, v603);
                                    let v605 = Some(v604);
                                    // Rule at src\isa\aarch64\lower.isle line 613.
                                    return v605;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v615 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v295,
                                        true,
                                        F64,
                                        I64,
                                    );
                                    let v616 = constructor_output_reg(ctx, v615);
                                    let v617 = Some(v616);
                                    // Rule at src\isa\aarch64\lower.isle line 622.
                                    return v617;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v611 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v295,
                                        true,
                                        F64,
                                        v388,
                                    );
                                    let v612 = constructor_output_reg(ctx, v611);
                                    let v613 = Some(v612);
                                    // Rule at src\isa\aarch64\lower.isle line 619.
                                    return v613;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v284 = C::value_type(ctx, v283);
                        match v284 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v667 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v295,
                                        false,
                                        I64,
                                    );
                                    let v668 = constructor_output_reg(ctx, v667);
                                    let v669 = Some(v668);
                                    // Rule at src\isa\aarch64\lower.isle line 676.
                                    return v669;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v664 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v295,
                                        false,
                                        v388,
                                    );
                                    let v665 = constructor_output_reg(ctx, v664);
                                    let v666 = Some(v665);
                                    // Rule at src\isa\aarch64\lower.isle line 673.
                                    return v666;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v673 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v295,
                                        false,
                                        I64,
                                    );
                                    let v674 = constructor_output_reg(ctx, v673);
                                    let v675 = Some(v674);
                                    // Rule at src\isa\aarch64\lower.isle line 682.
                                    return v675;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v670 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v295,
                                        false,
                                        v388,
                                    );
                                    let v671 = constructor_output_reg(ctx, v670);
                                    let v672 = Some(v671);
                                    // Rule at src\isa\aarch64\lower.isle line 679.
                                    return v672;
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            match v135.0 {
                                0x20 => {
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x20 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v661 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v295,
                                                v380,
                                            );
                                            let v662 = constructor_output_reg(ctx, v661);
                                            let v663 = Some(v662);
                                            // Rule at src\isa\aarch64\lower.isle line 667.
                                            return v663;
                                        }
                                    }
                                }
                                0x40 => {
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x40 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v661 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v295,
                                                v380,
                                            );
                                            let v662 = constructor_output_reg(ctx, v661);
                                            let v663 = Some(v662);
                                            // Rule at src\isa\aarch64\lower.isle line 670.
                                            return v663;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v284 = C::value_type(ctx, v283);
                        match v284 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v683 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v295,
                                        true,
                                        I64,
                                    );
                                    let v684 = constructor_output_reg(ctx, v683);
                                    let v685 = Some(v684);
                                    // Rule at src\isa\aarch64\lower.isle line 696.
                                    return v685;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v680 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v295,
                                        true,
                                        v388,
                                    );
                                    let v681 = constructor_output_reg(ctx, v680);
                                    let v682 = Some(v681);
                                    // Rule at src\isa\aarch64\lower.isle line 693.
                                    return v682;
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v689 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v295,
                                        true,
                                        I64,
                                    );
                                    let v690 = constructor_output_reg(ctx, v689);
                                    let v691 = Some(v690);
                                    // Rule at src\isa\aarch64\lower.isle line 702.
                                    return v691;
                                }
                                let v387 = C::fits_in_32(ctx, v3);
                                if let Some(v388) = v387 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v686 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v295,
                                        true,
                                        v388,
                                    );
                                    let v687 = constructor_output_reg(ctx, v686);
                                    let v688 = Some(v687);
                                    // Rule at src\isa\aarch64\lower.isle line 699.
                                    return v688;
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            match v135.0 {
                                0x20 => {
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x20 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v677 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v295,
                                                v380,
                                            );
                                            let v678 = constructor_output_reg(ctx, v677);
                                            let v679 = Some(v678);
                                            // Rule at src\isa\aarch64\lower.isle line 687.
                                            return v679;
                                        }
                                    }
                                }
                                0x40 => {
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x40 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v677 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v295,
                                                v380,
                                            );
                                            let v678 = constructor_output_reg(ctx, v677);
                                            let v679 = Some(v678);
                                            // Rule at src\isa\aarch64\lower.isle line 690.
                                            return v679;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v284 = C::value_type(ctx, v283);
                                if v284 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v633 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v295);
                                    let v634 = constructor_output_reg(ctx, v633);
                                    let v635 = Some(v634);
                                    // Rule at src\isa\aarch64\lower.isle line 639.
                                    return v635;
                                }
                                let v622 = C::fits_in_32(ctx, v284);
                                if let Some(v623) = v622 {
                                    let v309 = constructor_put_in_reg_zext32(ctx, v283);
                                    let v625 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v309);
                                    let v626 = constructor_output_reg(ctx, v625);
                                    let v627 = Some(v626);
                                    // Rule at src\isa\aarch64\lower.isle line 633.
                                    return v627;
                                }
                            }
                            F64 => {
                                let v284 = C::value_type(ctx, v283);
                                if v284 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v637 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v295);
                                    let v638 = constructor_output_reg(ctx, v637);
                                    let v639 = Some(v638);
                                    // Rule at src\isa\aarch64\lower.isle line 642.
                                    return v639;
                                }
                                let v622 = C::fits_in_32(ctx, v284);
                                if let Some(v623) = v622 {
                                    let v309 = constructor_put_in_reg_zext32(ctx, v283);
                                    let v629 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v309);
                                    let v630 = constructor_output_reg(ctx, v629);
                                    let v631 = Some(v630);
                                    // Rule at src\isa\aarch64\lower.isle line 636.
                                    return v631;
                                }
                            }
                            _ => {}
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            match v135.0 {
                                0x20 => {
                                    let v284 = C::value_type(ctx, v283);
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x20 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v619 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v295,
                                                v380,
                                            );
                                            let v620 = constructor_output_reg(ctx, v619);
                                            let v621 = Some(v620);
                                            // Rule at src\isa\aarch64\lower.isle line 627.
                                            return v621;
                                        }
                                    }
                                }
                                0x40 => {
                                    let v284 = C::value_type(ctx, v283);
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x40 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v619 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v295,
                                                v380,
                                            );
                                            let v620 = constructor_output_reg(ctx, v619);
                                            let v621 = Some(v620);
                                            // Rule at src\isa\aarch64\lower.isle line 630.
                                            return v621;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v284 = C::value_type(ctx, v283);
                                if v284 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v653 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v295);
                                    let v654 = constructor_output_reg(ctx, v653);
                                    let v655 = Some(v654);
                                    // Rule at src\isa\aarch64\lower.isle line 659.
                                    return v655;
                                }
                                let v622 = C::fits_in_32(ctx, v284);
                                if let Some(v623) = v622 {
                                    let v389 = constructor_put_in_reg_sext32(ctx, v283);
                                    let v645 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v389);
                                    let v646 = constructor_output_reg(ctx, v645);
                                    let v647 = Some(v646);
                                    // Rule at src\isa\aarch64\lower.isle line 653.
                                    return v647;
                                }
                            }
                            F64 => {
                                let v284 = C::value_type(ctx, v283);
                                if v284 == I64 {
                                    let v295 = C::put_in_reg(ctx, v283);
                                    let v657 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v295);
                                    let v658 = constructor_output_reg(ctx, v657);
                                    let v659 = Some(v658);
                                    // Rule at src\isa\aarch64\lower.isle line 662.
                                    return v659;
                                }
                                let v622 = C::fits_in_32(ctx, v284);
                                if let Some(v623) = v622 {
                                    let v389 = constructor_put_in_reg_sext32(ctx, v283);
                                    let v649 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v389);
                                    let v650 = constructor_output_reg(ctx, v649);
                                    let v651 = Some(v650);
                                    // Rule at src\isa\aarch64\lower.isle line 656.
                                    return v651;
                                }
                            }
                            _ => {}
                        }
                        let v134 = C::multi_lane(ctx, v3);
                        if let Some(v135) = v134 {
                            match v135.0 {
                                0x20 => {
                                    let v284 = C::value_type(ctx, v283);
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x20 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v641 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v295,
                                                v380,
                                            );
                                            let v642 = constructor_output_reg(ctx, v641);
                                            let v643 = Some(v642);
                                            // Rule at src\isa\aarch64\lower.isle line 647.
                                            return v643;
                                        }
                                    }
                                }
                                0x40 => {
                                    let v284 = C::value_type(ctx, v283);
                                    let v313 = C::multi_lane(ctx, v284);
                                    if let Some(v314) = v313 {
                                        if v314.0 == 0x40 {
                                            let v295 = C::put_in_reg(ctx, v283);
                                            let v380 = &constructor_vector_size(ctx, v3);
                                            let v641 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v295,
                                                v380,
                                            );
                                            let v642 = constructor_output_reg(ctx, v641);
                                            let v643 = Some(v642);
                                            // Rule at src\isa\aarch64\lower.isle line 650.
                                            return v643;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v284 = C::value_type(ctx, v283);
                    if v284 == I128 {
                        let v285 = C::put_in_regs(ctx, v283);
                        let v286 = C::value_regs_get(ctx, v285, 0x0);
                        let v287 = C::value_reg(ctx, v286);
                        let v288 = C::value_regs_get(ctx, v285, 0x1);
                        let v289 = C::value_reg(ctx, v288);
                        let v290 = C::output_pair(ctx, v287, v289);
                        let v291 = Some(v290);
                        // Rule at src\isa\aarch64\lower.isle line 246.
                        return v291;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1556,
            constant_handle: v1557,
        } => {
            if let &Opcode::Vconst = v1556 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1563 = C::u64_from_constant(ctx, v1557);
                    if let Some(v1564) = v1563 {
                        let v3 = C::value_type(ctx, v2);
                        let v1565 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1566) = v1565 {
                            let v1567 = constructor_constant_f64(ctx, v1564);
                            let v1568 = constructor_output_reg(ctx, v1567);
                            let v1569 = Some(v1568);
                            // Rule at src\isa\aarch64\lower.isle line 2045.
                            return v1569;
                        }
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v714 = C::ty_vec128(ctx, v3);
                    if let Some(v715) = v714 {
                        let v1558 = C::u128_from_constant(ctx, v1557);
                        if let Some(v1559) = v1558 {
                            let v1560 = constructor_constant_f128(ctx, v1559);
                            let v1561 = constructor_output_reg(ctx, v1560);
                            let v1562 = Some(v1561);
                            // Rule at src\isa\aarch64\lower.isle line 2042.
                            return v1562;
                        }
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1841,
            global_value: v1842,
        } => {
            match v1841 {
                &Opcode::SymbolValue => {
                    let v1843 = C::symbol_value_data(ctx, v1842);
                    if let Some(v1844) = v1843 {
                        let v1848 = C::box_external_name(ctx, v1844.0);
                        let v1849 = constructor_load_ext_name(ctx, v1848, v1844.2);
                        let v1850 = constructor_output_reg(ctx, v1849);
                        let v1851 = Some(v1850);
                        // Rule at src\isa\aarch64\lower.isle line 2279.
                        return v1851;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1843 = C::symbol_value_data(ctx, v1842);
                        if let Some(v1844) = v1843 {
                            let v3 = C::value_type(ctx, v2);
                            let v2242 = &C::tls_model(ctx, v3);
                            match v2242 {
                                &TlsModel::ElfGd => {
                                    let v2243 = constructor_elf_tls_get_addr(ctx, v1844.0);
                                    let v2244 = constructor_output_reg(ctx, v2243);
                                    let v2245 = Some(v2244);
                                    // Rule at src\isa\aarch64\lower.isle line 2888.
                                    return v2245;
                                }
                                &TlsModel::Macho => {
                                    let v2246 = constructor_macho_tls_get_addr(ctx, v1844.0);
                                    let v2247 = constructor_output_reg(ctx, v2246);
                                    let v2248 = Some(v2247);
                                    // Rule at src\isa\aarch64\lower.isle line 2891.
                                    return v2248;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v17,
            imm: v18,
        } => {
            if let &Opcode::F32const = v17 {
                let v19 = C::u32_from_ieee32(ctx, v18);
                let v20 = constructor_constant_f32(ctx, v19);
                let v21 = constructor_output_reg(ctx, v20);
                let v22 = Some(v21);
                // Rule at src\isa\aarch64\lower.isle line 29.
                return v22;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v23,
            imm: v24,
        } => {
            if let &Opcode::F64const = v23 {
                let v25 = C::u64_from_ieee64(ctx, v24);
                let v26 = constructor_constant_f64(ctx, v25);
                let v27 = constructor_output_reg(ctx, v26);
                let v28 = Some(v27);
                // Rule at src\isa\aarch64\lower.isle line 34.
                return v28;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    let v11 = Some(v10);
                    // Rule at src\isa\aarch64\lower.isle line 19.
                    return v11;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v147,
            arg: v148,
            table: v149,
        } => {
            if let &Opcode::BrTable = v147 {
                let v150 = C::jump_table_targets(ctx, arg1);
                if let Some(v151) = v150 {
                    let v154 = C::jump_table_size(ctx, &v151.1);
                    let v155 = C::targets_jt_space(ctx, &v151.1);
                    let v156 = &constructor_emit_island(ctx, v155);
                    let v157 = constructor_side_effect(ctx, v156);
                    let v158 = constructor_put_in_reg_zext32(ctx, v148);
                    let v159 = C::u32_as_u64(ctx, v154);
                    let v160 = constructor_br_table_impl(ctx, v159, v158, v151.0, &v151.1);
                    let v161 = Some(v160);
                    // Rule at src\isa\aarch64\lower.isle line 2964.
                    return v161;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v2,
            arg: v3,
            blocks: ref v4,
        } => {
            if let &Opcode::Brif = v2 {
                let v21 = C::two_targets(ctx, arg1);
                if let Some(v22) = v21 {
                    let v81 = C::def_inst(ctx, v3);
                    if let Some(v82) = v81 {
                        let v83 = &C::inst_data(ctx, v82);
                        match v83 {
                            &InstructionData::Binary {
                                opcode: ref v84,
                                args: ref v85,
                            } => {
                                if let &Opcode::Band = v84 {
                                    let v86 = C::unpack_value_array_2(ctx, v85);
                                    let v90 = C::def_inst(ctx, v86.1);
                                    if let Some(v91) = v90 {
                                        let v92 = &C::inst_data(ctx, v91);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v93,
                                            imm: v94,
                                        } = v92
                                        {
                                            if let &Opcode::Iconst = v93 {
                                                let v89 = C::value_type(ctx, v86.0);
                                                let v95 = C::u64_from_imm64(ctx, v94);
                                                let v96 =
                                                    C::test_and_compare_bit_const(ctx, v89, v95);
                                                if let Some(v97) = v96 {
                                                    let v98 = C::branch_target(ctx, v22.0);
                                                    let v99 = C::branch_target(ctx, v22.1);
                                                    let v100 = C::put_in_reg(ctx, v86.0);
                                                    let v101 =
                                                        &constructor_tbnz(ctx, v98, v99, v100, v97);
                                                    let v102 =
                                                        constructor_emit_side_effect(ctx, v101);
                                                    let v103 = Some(v102);
                                                    // Rule at src\isa\aarch64\lower.isle line 2938.
                                                    return v103;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v104,
                                args: ref v105,
                                cond: ref v106,
                            } => {
                                if let &Opcode::Icmp = v104 {
                                    if let &IntCC::Equal = v106 {
                                        let v107 = C::unpack_value_array_2(ctx, v105);
                                        let v110 = C::def_inst(ctx, v107.0);
                                        if let Some(v111) = v110 {
                                            let v112 = &C::inst_data(ctx, v111);
                                            if let &InstructionData::Binary {
                                                opcode: ref v113,
                                                args: ref v114,
                                            } = v112
                                            {
                                                if let &Opcode::Band = v113 {
                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                    let v118 = C::value_type(ctx, v115.0);
                                                    let v119 = C::fits_in_64(ctx, v118);
                                                    if let Some(v120) = v119 {
                                                        let v121 = C::def_inst(ctx, v115.1);
                                                        if let Some(v122) = v121 {
                                                            let v123 = &C::inst_data(ctx, v122);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v124,
                                                                imm: v125,
                                                            } = v123
                                                            {
                                                                if let &Opcode::Iconst = v124 {
                                                                    let v127 =
                                                                        C::def_inst(ctx, v107.1);
                                                                    if let Some(v128) = v127 {
                                                                        let v129 = &C::inst_data(
                                                                            ctx, v128,
                                                                        );
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v130,
                                                                            imm: v131,
                                                                        } = v129 {
                                                                            if let &Opcode::Iconst = v130 {
                                                                                let v132 = C::u64_from_imm64(ctx, v131);
                                                                                if v132 == 0x0 {
                                                                                    let v126 = C::u64_from_imm64(ctx, v125);
                                                                                    let v133 = C::test_and_compare_bit_const(ctx, v120, v126);
                                                                                    if let Some(v134) = v133 {
                                                                                        let v98 = C::branch_target(ctx, v22.0);
                                                                                        let v99 = C::branch_target(ctx, v22.1);
                                                                                        let v135 = C::put_in_reg(ctx, v115.0);
                                                                                        let v136 = &constructor_tbz(ctx, v98, v99, v135, v134);
                                                                                        let v137 = constructor_emit_side_effect(ctx, v136);
                                                                                        let v138 = Some(v137);
                                                                                        // Rule at src\isa\aarch64\lower.isle line 2944.
                                                                                        return v138;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v5 = C::maybe_uextend(ctx, v3);
                    if let Some(v6) = v5 {
                        let v7 = C::def_inst(ctx, v6);
                        if let Some(v8) = v7 {
                            let v9 = &C::inst_data(ctx, v8);
                            match v9 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v36,
                                    args: ref v37,
                                    cond: ref v38,
                                } => {
                                    if let &Opcode::Fcmp = v36 {
                                        let v39 = C::unpack_value_array_2(ctx, v37);
                                        let v42 = C::value_type(ctx, v39.0);
                                        let v43 = C::ty_scalar_float(ctx, v42);
                                        if let Some(v44) = v43 {
                                            let v45 = &C::fp_cond_code(ctx, v38);
                                            let v46 = &constructor_scalar_size(ctx, v44);
                                            let v47 = C::put_in_reg(ctx, v39.0);
                                            let v48 = C::put_in_reg(ctx, v39.1);
                                            let v49 = &constructor_fpu_cmp(ctx, v46, v47, v48);
                                            let v50 = C::branch_target(ctx, v22.0);
                                            let v51 = C::branch_target(ctx, v22.1);
                                            let v52 = C::cond_br_cond(ctx, v45);
                                            let v53 = &constructor_cond_br(ctx, v50, v51, v52);
                                            let v54 =
                                                &constructor_with_flags_side_effect(ctx, v49, v53);
                                            let v55 = constructor_emit_side_effect(ctx, v54);
                                            let v56 = Some(v55);
                                            // Rule at src\isa\aarch64\lower.isle line 2912.
                                            return v56;
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v10,
                                    args: ref v11,
                                    cond: ref v12,
                                } => {
                                    if let &Opcode::Icmp = v10 {
                                        let v13 = C::unpack_value_array_2(ctx, v11);
                                        let v16 = C::value_type(ctx, v13.0);
                                        let v25 = &constructor_lower_icmp_into_flags(
                                            ctx, v12, v13.0, v13.1, v16,
                                        );
                                        let v26 = &constructor_flags_and_cc_cc(ctx, v25);
                                        let v27 = &C::cond_code(ctx, v26);
                                        let v28 = &constructor_flags_and_cc_flags(ctx, v25);
                                        let v29 = C::branch_target(ctx, v22.0);
                                        let v30 = C::branch_target(ctx, v22.1);
                                        let v31 = C::cond_br_cond(ctx, v27);
                                        let v32 = &constructor_cond_br(ctx, v29, v30, v31);
                                        let v33 =
                                            &constructor_with_flags_side_effect(ctx, v28, v32);
                                        let v34 = constructor_emit_side_effect(ctx, v33);
                                        let v35 = Some(v34);
                                        // Rule at src\isa\aarch64\lower.isle line 2902.
                                        return v35;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v57 = C::value_type(ctx, v3);
                    if v57 == I128 {
                        let v58 = &constructor_flags_to_producesflags(ctx, v3);
                        let v59 = C::put_in_regs(ctx, v3);
                        let v61 = C::value_regs_get(ctx, v59, 0x0);
                        let v63 = C::value_regs_get(ctx, v59, 0x1);
                        let v65 = constructor_orr(ctx, I64, v61, v63);
                        let v50 = C::branch_target(ctx, v22.0);
                        let v51 = C::branch_target(ctx, v22.1);
                        let v66 = C::cond_br_not_zero(ctx, v65);
                        let v67 = &constructor_cond_br(ctx, v50, v51, v66);
                        let v68 = &constructor_with_flags_side_effect(ctx, v58, v67);
                        let v69 = constructor_emit_side_effect(ctx, v68);
                        let v70 = Some(v69);
                        // Rule at src\isa\aarch64\lower.isle line 2920.
                        return v70;
                    }
                    let v71 = C::ty_int_ref_scalar_64(ctx, v57);
                    if let Some(v72) = v71 {
                        let v58 = &constructor_flags_to_producesflags(ctx, v3);
                        let v73 = constructor_put_in_reg_zext64(ctx, v3);
                        let v74 = C::branch_target(ctx, v22.0);
                        let v75 = C::branch_target(ctx, v22.1);
                        let v76 = C::cond_br_not_zero(ctx, v73);
                        let v77 = &constructor_cond_br(ctx, v74, v75, v76);
                        let v78 = &constructor_with_flags_side_effect(ctx, v58, v77);
                        let v79 = constructor_emit_side_effect(ctx, v78);
                        let v80 = Some(v79);
                        // Rule at src\isa\aarch64\lower.isle line 2929.
                        return v80;
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v139,
            destination: v140,
        } => {
            if let &Opcode::Jump = v139 {
                let v141 = C::single_target(ctx, arg1);
                if let Some(v142) = v141 {
                    let v143 = C::branch_target(ctx, v142);
                    let v144 = &constructor_aarch64_jump(ctx, v143);
                    let v145 = constructor_emit_side_effect(ctx, v144);
                    let v146 = Some(v145);
                    // Rule at src\isa\aarch64\lower.isle line 2957.
                    return v146;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term is_fneg.
pub fn constructor_is_fneg<C: Context>(ctx: &mut C, arg0: Value) -> IsFneg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Unary {
            opcode: ref v4,
            arg: v5,
        } = v3
        {
            if let &Opcode::Fneg = v4 {
                let v7 = IsFneg::Result {
                    negate: 0x1,
                    value: v5,
                };
                // Rule at src\isa\aarch64\lower.isle line 519.
                return v7;
            }
        }
    }
    let v9 = IsFneg::Result {
        negate: 0x0,
        value: arg0,
    };
    // Rule at src\isa\aarch64\lower.isle line 520.
    return v9;
}

// Generated as internal constructor for term is_fneg_neg.
pub fn constructor_is_fneg_neg<C: Context>(ctx: &mut C, arg0: &IsFneg) -> u64 {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src\isa\aarch64\lower.isle line 523.
        return v1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_fneg_neg", "src\\isa\\aarch64\\lower.isle line 522"
    )
}

// Generated as internal constructor for term get_fneg_value.
pub fn constructor_get_fneg_value<C: Context>(ctx: &mut C, arg0: &IsFneg) -> Value {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src\isa\aarch64\lower.isle line 526.
        return v2;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_fneg_value", "src\\isa\\aarch64\\lower.isle line 525"
    )
}

// Generated as internal constructor for term fmadd_series.
pub fn constructor_fmadd_series<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: Value,
    arg3: Value,
    arg4: Value,
) -> InstOutput {
    let v1 = C::ty_scalar_float(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            0x0 => {
                let v8 = &constructor_scalar_size(ctx, v2);
                let v9 = C::put_in_reg(ctx, arg2);
                let v10 = C::put_in_reg(ctx, arg3);
                let v11 = C::put_in_reg(ctx, arg4);
                let v12 = constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v8, v9, v10, v11);
                let v13 = constructor_output_reg(ctx, v12);
                // Rule at src\isa\aarch64\lower.isle line 529.
                return v13;
            }
            0x1 => {
                let v8 = &constructor_scalar_size(ctx, v2);
                let v9 = C::put_in_reg(ctx, arg2);
                let v10 = C::put_in_reg(ctx, arg3);
                let v11 = C::put_in_reg(ctx, arg4);
                let v15 = constructor_fpu_rrrr(ctx, &FPUOp3::MSub, v8, v9, v10, v11);
                let v16 = constructor_output_reg(ctx, v15);
                // Rule at src\isa\aarch64\lower.isle line 530.
                return v16;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fmadd_series", "src\\isa\\aarch64\\lower.isle line 528"
    )
}

// Generated as internal constructor for term lower_fmla.
pub fn constructor_lower_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Value,
    arg2: Value,
    arg3: Value,
    arg4: &VectorSize,
) -> Reg {
    let v18 = C::def_inst(ctx, arg2);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v87 = constructor_lower_fmla(ctx, v85, arg1, v22, arg3, arg4);
                // Rule at src\isa\aarch64\lower.isle line 585.
                return v87;
            }
        }
    }
    let v9 = C::def_inst(ctx, arg1);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Fneg = v12 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v86 = constructor_lower_fmla(ctx, v85, v13, arg2, arg3, arg4);
                // Rule at src\isa\aarch64\lower.isle line 583.
                return v86;
            }
        }
    }
    match arg4 {
        &VectorSize::Size32x4 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v60 = C::shuffle32_from_imm(ctx, v56);
                                    if let Some(v61) = v60 {
                                        let v66 = C::u8_as_u64(ctx, v61.0);
                                        let v67 = C::u64_lt(ctx, v66, 0x4);
                                        if v67 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v61.0 == v61.1 {
                                                    if v61.0 == v61.2 {
                                                        if v61.0 == v61.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v6 = C::put_in_reg(ctx, arg1);
                                                            let v68 = C::put_in_reg(ctx, v57.0);
                                                            let v69 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v6, v68, arg4, v61.0,
                                                            );
                                                            // Rule at src\isa\aarch64\lower.isle line 567.
                                                            return v69;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v37 = C::shuffle32_from_imm(ctx, v33);
                                    if let Some(v38) = v37 {
                                        let v43 = C::u8_as_u64(ctx, v38.0);
                                        let v45 = C::u64_lt(ctx, v43, 0x4);
                                        if v45 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v38.0 == v38.1 {
                                                    if v38.0 == v38.2 {
                                                        if v38.0 == v38.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v14 = C::put_in_reg(ctx, arg2);
                                                            let v46 = C::put_in_reg(ctx, v34.0);
                                                            let v47 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v14, v46, arg4,
                                                                v38.0,
                                                            );
                                                            // Rule at src\isa\aarch64\lower.isle line 564.
                                                            return v47;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &VectorSize::Size64x2 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v78 = C::shuffle64_from_imm(ctx, v56);
                                    if let Some(v79) = v78 {
                                        let v82 = C::u8_as_u64(ctx, v79.0);
                                        let v83 = C::u64_lt(ctx, v82, 0x2);
                                        if v83 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v79.0 == v79.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v6 = C::put_in_reg(ctx, arg1);
                                                    let v68 = C::put_in_reg(ctx, v57.0);
                                                    let v84 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v6, v68, arg4, v79.0,
                                                    );
                                                    // Rule at src\isa\aarch64\lower.isle line 573.
                                                    return v84;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v70 = C::shuffle64_from_imm(ctx, v33);
                                    if let Some(v71) = v70 {
                                        let v74 = C::u8_as_u64(ctx, v71.0);
                                        let v76 = C::u64_lt(ctx, v74, 0x2);
                                        if v76 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v71.0 == v71.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v14 = C::put_in_reg(ctx, arg2);
                                                    let v46 = C::put_in_reg(ctx, v34.0);
                                                    let v77 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v14, v46, arg4, v71.0,
                                                    );
                                                    // Rule at src\isa\aarch64\lower.isle line 570.
                                                    return v77;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Splat = v21 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v6 = C::put_in_reg(ctx, arg1);
                let v23 = C::put_in_reg(ctx, v22);
                let v24 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v23, arg4, 0x0);
                // Rule at src\isa\aarch64\lower.isle line 554.
                return v24;
            }
        }
    }
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Splat = v12 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v14 = C::put_in_reg(ctx, arg2);
                let v15 = C::put_in_reg(ctx, v13);
                let v17 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v15, arg4, 0x0);
                // Rule at src\isa\aarch64\lower.isle line 552.
                return v17;
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = C::put_in_reg(ctx, arg1);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_vec_rrr_mod(ctx, arg0, v5, v6, v7, arg4);
    // Rule at src\isa\aarch64\lower.isle line 547.
    return v8;
}

// Generated as internal constructor for term neg_fmla.
pub fn constructor_neg_fmla<C: Context>(ctx: &mut C, arg0: &VecALUModOp) -> VecALUModOp {
    match arg0 {
        &VecALUModOp::Fmla => {
            // Rule at src\isa\aarch64\lower.isle line 589.
            return VecALUModOp::Fmls;
        }
        &VecALUModOp::Fmls => {
            // Rule at src\isa\aarch64\lower.isle line 590.
            return VecALUModOp::Fmla;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg_fmla", "src\\isa\\aarch64\\lower.isle line 588"
    )
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Zero, v10);
                    // Rule at src\isa\aarch64\lower.isle line 997.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_zext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src\isa\aarch64\lower.isle line 992.
    return v2;
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Sign, v10);
                    // Rule at src\isa\aarch64\lower.isle line 1040.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_sext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src\isa\aarch64\lower.isle line 1035.
    return v2;
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src\isa\aarch64\lower.isle line 1087.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src\isa\aarch64\lower.isle line 1079.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src\\isa\\aarch64\\lower.isle line 1078"
    )
}

// Generated as internal constructor for term aarch64_uload.
pub fn constructor_aarch64_uload<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AMode,
    arg2: MemFlags,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_aarch64_uload8(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1168.
            return v3;
        }
        I16 => {
            let v4 = constructor_aarch64_uload16(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1169.
            return v4;
        }
        I32 => {
            let v5 = constructor_aarch64_uload32(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1170.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_uload", "src\\isa\\aarch64\\lower.isle line 1167"
    )
}

// Generated as internal constructor for term aarch64_sload.
pub fn constructor_aarch64_sload<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AMode,
    arg2: MemFlags,
) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_aarch64_sload8(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1227.
            return v3;
        }
        I16 => {
            let v4 = constructor_aarch64_sload16(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1228.
            return v4;
        }
        I32 => {
            let v5 = constructor_aarch64_sload32(ctx, arg1, arg2);
            // Rule at src\isa\aarch64\lower.isle line 1229.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_sload", "src\\isa\\aarch64\\lower.isle line 1226"
    )
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src\isa\aarch64\lower.isle line 1361.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18
        {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src\isa\aarch64\lower.isle line 1424.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src\isa\aarch64\lower.isle line 1415.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src\isa\aarch64\lower.isle line 1416.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src\isa\aarch64\lower.isle line 1406.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_shift", "src\\isa\\aarch64\\lower.isle line 1395"
    )
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src\isa\aarch64\lower.isle line 1468.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3F);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src\isa\aarch64\lower.isle line 1527.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src\isa\aarch64\lower.isle line 1646.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src\isa\aarch64\lower.isle line 1667.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src\isa\aarch64\lower.isle line 1732.
    return v15;
}

// Generated as internal constructor for term put_in_reg_ext32.
pub fn constructor_put_in_reg_ext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ArgumentExtension,
) -> Reg {
    match arg1 {
        &ArgumentExtension::Uext => {
            let v3 = constructor_put_in_reg_zext32(ctx, arg0);
            // Rule at src\isa\aarch64\lower.isle line 2648.
            return v3;
        }
        &ArgumentExtension::Sext => {
            let v2 = constructor_put_in_reg_sext32(ctx, arg0);
            // Rule at src\isa\aarch64\lower.isle line 2646.
            return v2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_ext32", "src\\isa\\aarch64\\lower.isle line 2645"
    )
}

// Generated as internal constructor for term overflow_op_small.
pub fn constructor_overflow_op_small<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ArgumentExtension,
    arg4: &ALUOp,
) -> InstOutput {
    let v5 = &constructor_lower_extend_op(ctx, arg0, arg3);
    let v6 = constructor_put_in_reg_ext32(ctx, arg1, arg3);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_alu_rrr_extend(ctx, arg4, arg0, v6, v7, v5);
    let v10 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v8, v8, v5);
    let v12 = &constructor_cset(ctx, &Cond::Ne);
    let v13 = constructor_with_flags_reg(ctx, v10, v12);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v13);
    let v16 = C::output_pair(ctx, v14, v15);
    // Rule at src\isa\aarch64\lower.isle line 2654.
    return v16;
}

// Generated as internal constructor for term overflow_op_normal.
pub fn constructor_overflow_op_normal<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::put_in_reg(ctx, arg2);
    let v7 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v5, v6, arg3);
    let v8 = &constructor_cset_paired(ctx, arg4);
    let v9 = constructor_with_flags(ctx, v7, v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    let v12 = C::value_reg(ctx, v11);
    let v14 = C::value_regs_get(ctx, v9, 0x1);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::output_pair(ctx, v12, v15);
    // Rule at src\isa\aarch64\lower.isle line 2683.
    return v16;
}

// Generated as internal constructor for term overflow_op_128.
pub fn constructor_overflow_op_128<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &ALUOp,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg0);
    let v7 = C::value_regs_get(ctx, v5, 0x0);
    let v9 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg1);
    let v11 = C::value_regs_get(ctx, v10, 0x0);
    let v12 = C::value_regs_get(ctx, v10, 0x1);
    let v14 = &constructor_alu_rrr_with_flags_paired(ctx, I64, v7, v11, arg2);
    let v15 = &constructor_alu_rrr_with_flags_chained(ctx, I64, v9, v12, arg3);
    let v16 = &constructor_cset_paired(ctx, arg4);
    let v17 = &constructor_with_flags_chained(ctx, v14, v15, v16);
    let v18 = constructor_multi_reg_to_pair_and_single(ctx, v17);
    // Rule at src\isa\aarch64\lower.isle line 2694.
    return v18;
}
