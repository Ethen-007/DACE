// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\x64\inst.isle
// - src\isa\x64\lower.isle
// - D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn sum_extend_fits_in_32_bits(
        &mut self,
        arg0: Type,
        arg1: Imm64,
        arg2: Offset32,
    ) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: i32) -> Amode;
    fn zero_offset(&mut self) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn gpr_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<Gpr>;
    fn imm8_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<u8>;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_imm(&mut self, arg0: &XmmMem) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_aligned(&mut self, arg0: &XmmMem) -> XmmMemAligned;
    fn xmm_mem_imm_to_xmm_mem_aligned_imm(&mut self, arg0: &XmmMemImm) -> XmmMemAlignedImm;
    fn temp_writable_gpr(&mut self) -> WritableGpr;
    fn temp_writable_xmm(&mut self) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn xmi_imm(&mut self, arg0: u32) -> XmmMemImm;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn use_avx512vl(&mut self) -> bool;
    fn use_avx512dq(&mut self) -> bool;
    fn use_avx512f(&mut self) -> bool;
    fn use_avx512bitalg(&mut self) -> bool;
    fn use_avx512vbmi(&mut self) -> bool;
    fn use_lzcnt(&mut self) -> bool;
    fn use_bmi1(&mut self) -> bool;
    fn use_bmi2(&mut self) -> bool;
    fn use_popcnt(&mut self) -> bool;
    fn use_fma(&mut self) -> bool;
    fn use_ssse3(&mut self) -> bool;
    fn use_sse41(&mut self) -> bool;
    fn use_sse42(&mut self) -> bool;
    fn use_avx(&mut self) -> bool;
    fn use_avx2(&mut self) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u8;
    fn shift_amount_masked(&mut self, arg0: Type, arg1: Imm64) -> u8;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sinkable_load_exact(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> SyntheticAmode;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn atomic_rmw_op_to_mach_atomic_rmw_op(&mut self, arg0: &AtomicRmwOp) -> MachAtomicRmwOp;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(
        &mut self,
        arg0: &VecMask,
    ) -> Option<(VCodeConstant, VCodeConstant)>;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self) -> PReg;
    fn preg_rsp(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_2(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn insert_i8x16_lane_hole(&mut self, arg0: u8) -> VCodeConstant;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn pblendw_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn palignr_imm_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_rev_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src\prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 354.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 396.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 415.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 423.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\x64\inst.isle line 8.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmiR {
        size: OperandSize,
        op: AluRmiROpcode,
        src1: Gpr,
        src2: GprMemImm,
        dst: WritableGpr,
    },
    AluRM {
        size: OperandSize,
        op: AluRmiROpcode,
        src1_dst: SyntheticAmode,
        src2: Gpr,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    AluConstOp {
        op: AluRmiROpcode,
        size: OperandSize,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRVex {
        size: OperandSize,
        op: UnaryRmRVexOpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRImmVex {
        size: OperandSize,
        op: UnaryRmRImmVexOpcode,
        src: GprMem,
        dst: WritableGpr,
        imm: u8,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    Div8 {
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend: Gpr,
        dst: WritableGpr,
    },
    Mul {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    Mul8 {
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMul {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMulImm {
        size: OperandSize,
        src1: GprMem,
        src2: i32,
        dst: WritableGpr,
    },
    CheckedSRemSeq {
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    CheckedSRemSeq8 {
        dividend: Gpr,
        divisor: Gpr,
        dst: WritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
        size: OperandSize,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm32: i32,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemAlignedImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src1: Gpr,
        src2: GprMemImm,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: Xmm,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmRmRUnaligned {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmiRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    XmmRmRImmVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmVexPinsr {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmRVex3 {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlendVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmRVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmMovRMVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGprImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmmVex {
        op: AvxOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    XmmToGprVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmCmpRmRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmEvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmUnaryRmRUnaligned {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMemAligned,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImm {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmToGprImm {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtIntToFloat {
        op: SseOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtIntToFloatVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        dest: ExternalName,
        info: BoxCallInfo,
    },
    CallUnknown {
        dest: RegMem,
        info: BoxCallInfo,
    },
    ReturnCallKnown {
        callee: ExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallUnknown {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        stack_bytes_to_pop: u32,
    },
    JmpKnown {
        dst: MachLabel,
    },
    JmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
        distance: RelocDistance,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: MachAtomicRmwOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
}

/// Internal type DivSignedness: defined at src\isa\x64\inst.isle line 735.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum DivSignedness {
    Signed,
    Unsigned,
}

/// Internal type AluRmROpcode: defined at src\isa\x64\inst.isle line 771.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluRmROpcode {
    Andn,
    Sarx,
    Shrx,
    Shlx,
    Bzhi,
}

/// Internal type UnaryRmRVexOpcode: defined at src\isa\x64\inst.isle line 785.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRVexOpcode {
    Blsi,
    Blsmsk,
    Blsr,
}

/// Internal type UnaryRmRImmVexOpcode: defined at src\isa\x64\inst.isle line 790.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRImmVexOpcode {
    Rorx,
}

/// Internal type Amode: defined at src\isa\x64\inst.isle line 1037.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: i32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: i32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type AvxOpcode: defined at src\isa\x64\inst.isle line 1223.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AvxOpcode {
    Vfmadd213ss,
    Vfmadd213sd,
    Vfmadd213ps,
    Vfmadd213pd,
    Vfmadd132ss,
    Vfmadd132sd,
    Vfmadd132ps,
    Vfmadd132pd,
    Vfnmadd213ss,
    Vfnmadd213sd,
    Vfnmadd213ps,
    Vfnmadd213pd,
    Vfnmadd132ss,
    Vfnmadd132sd,
    Vfnmadd132ps,
    Vfnmadd132pd,
    Vfmsub213ss,
    Vfmsub213sd,
    Vfmsub213ps,
    Vfmsub213pd,
    Vfmsub132ss,
    Vfmsub132sd,
    Vfmsub132ps,
    Vfmsub132pd,
    Vfnmsub213ss,
    Vfnmsub213sd,
    Vfnmsub213ps,
    Vfnmsub213pd,
    Vfnmsub132ss,
    Vfnmsub132sd,
    Vfnmsub132ps,
    Vfnmsub132pd,
    Vcmpps,
    Vcmppd,
    Vpsrlw,
    Vpsrld,
    Vpsrlq,
    Vpaddb,
    Vpaddw,
    Vpaddd,
    Vpaddq,
    Vpaddsb,
    Vpaddsw,
    Vpaddusb,
    Vpaddusw,
    Vpsubb,
    Vpsubw,
    Vpsubd,
    Vpsubq,
    Vpsubsb,
    Vpsubsw,
    Vpsubusb,
    Vpsubusw,
    Vpavgb,
    Vpavgw,
    Vpand,
    Vandps,
    Vandpd,
    Vpor,
    Vorps,
    Vorpd,
    Vpxor,
    Vxorps,
    Vxorpd,
    Vpmullw,
    Vpmulld,
    Vpmulhw,
    Vpmulhd,
    Vpmulhrsw,
    Vpmulhuw,
    Vpmuldq,
    Vpmuludq,
    Vpunpckhwd,
    Vpunpcklwd,
    Vunpcklps,
    Vunpcklpd,
    Vunpckhps,
    Vandnps,
    Vandnpd,
    Vpandn,
    Vaddps,
    Vaddpd,
    Vsubps,
    Vsubpd,
    Vmulps,
    Vmulpd,
    Vdivps,
    Vdivpd,
    Vpcmpeqb,
    Vpcmpeqw,
    Vpcmpeqd,
    Vpcmpeqq,
    Vpcmpgtb,
    Vpcmpgtw,
    Vpcmpgtd,
    Vpcmpgtq,
    Vminps,
    Vminpd,
    Vmaxps,
    Vmaxpd,
    Vblendvpd,
    Vblendvps,
    Vpblendvb,
    Vmovlhps,
    Vpmaxsb,
    Vpmaxsw,
    Vpmaxsd,
    Vpminsb,
    Vpminsw,
    Vpminsd,
    Vpmaxub,
    Vpmaxuw,
    Vpmaxud,
    Vpminub,
    Vpminuw,
    Vpminud,
    Vpunpcklbw,
    Vpunpckhbw,
    Vpacksswb,
    Vpackssdw,
    Vpackuswb,
    Vpackusdw,
    Vpalignr,
    Vpinsrb,
    Vpinsrw,
    Vpinsrd,
    Vpinsrq,
    Vpmaddwd,
    Vpmaddubsw,
    Vinsertps,
    Vpshufb,
    Vshufps,
    Vpsllw,
    Vpslld,
    Vpsllq,
    Vpsraw,
    Vpsrad,
    Vpmovsxbw,
    Vpmovzxbw,
    Vpmovsxwd,
    Vpmovzxwd,
    Vpmovsxdq,
    Vpmovzxdq,
    Vaddss,
    Vaddsd,
    Vmulss,
    Vmulsd,
    Vsubss,
    Vsubsd,
    Vdivss,
    Vdivsd,
    Vpabsb,
    Vpabsw,
    Vpabsd,
    Vminss,
    Vminsd,
    Vmaxss,
    Vmaxsd,
    Vsqrtps,
    Vsqrtpd,
    Vroundps,
    Vroundpd,
    Vcvtdq2pd,
    Vcvtdq2ps,
    Vcvtpd2ps,
    Vcvtps2pd,
    Vcvttpd2dq,
    Vcvttps2dq,
    Vphaddw,
    Vphaddd,
    Vpunpckhdq,
    Vpunpckldq,
    Vpunpckhqdq,
    Vpunpcklqdq,
    Vpshuflw,
    Vpshufhw,
    Vpshufd,
    Vmovss,
    Vmovsd,
    Vmovups,
    Vmovupd,
    Vmovdqu,
    Vpextrb,
    Vpextrw,
    Vpextrd,
    Vpextrq,
    Vpblendw,
    Vmovddup,
    Vpbroadcastb,
    Vpbroadcastw,
    Vpbroadcastd,
    Vbroadcastss,
    Vmovd,
    Vmovq,
    Vmovmskps,
    Vmovmskpd,
    Vpmovmskb,
    Vcvtsi2ss,
    Vcvtsi2sd,
    Vcvtss2sd,
    Vcvtsd2ss,
    Vsqrtss,
    Vsqrtsd,
    Vroundss,
    Vroundsd,
    Vucomiss,
    Vucomisd,
    Vptest,
}

/// Internal type Avx512Opcode: defined at src\isa\x64\inst.isle line 1434.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Avx512Opcode {
    Vcvtudq2ps,
    Vpabsq,
    Vpermi2b,
    Vpmullq,
    Vpopcntb,
    Vpsraq,
    VpsraqImm,
}

/// Internal type RegisterClass: defined at src\isa\x64\inst.isle line 1722.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr { single_register: bool },
    Xmm,
}

/// Internal type ExtendKind: defined at src\isa\x64\inst.isle line 2172.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type IcmpCondResult: defined at src\isa\x64\inst.isle line 4818.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition { producer: ProducesFlags, cc: CC },
}

/// Internal type FcmpCondResult: defined at src\isa\x64\inst.isle line 4910.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src\prelude.isle line 408.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        R32 => {
            // Rule at src\prelude.isle line 415.
            return true;
        }
        R64 => {
            // Rule at src\prelude.isle line 416.
            return true;
        }
        _ => {}
    }
    // Rule at src\prelude.isle line 417.
    return false;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src\prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src\prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src\\prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src\\prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 364.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 366.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 369.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src\\prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 377.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 382.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 384.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 386.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src\\prelude_lower.isle line 381"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 411.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src\\prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 441.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 442.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src\\prelude_lower.isle line 440"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src\prelude_lower.isle line 447.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src\prelude_lower.isle line 449.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src\\prelude_lower.isle line 446"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 462.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 456.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src\\prelude_lower.isle line 455"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 493.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 499.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 511.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 527.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 534.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 547.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 487.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 479.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src\\prelude_lower.isle line 477"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src\prelude_lower.isle line 565.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 572.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src\prelude_lower.isle line 583.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 588.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 593.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 598.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 603.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src\\prelude_lower.isle line 581"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 612.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 620.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src\prelude_lower.isle line 629.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src\prelude_lower.isle line 637.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src\prelude_lower.isle line 646.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 706.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 714.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src\prelude_lower.isle line 723.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 731.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 740.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 659.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 667.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src\prelude_lower.isle line 676.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 684.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 693.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 753.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 761.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 770.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 778.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 787.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 799.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 807.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 824.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 816.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 832.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 841.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src\\prelude_lower.isle line 609"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1045.
    return v2;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(ctx: &mut C, arg0: &OperandSize) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src\isa\x64\inst.isle line 757.
            return 0x8;
        }
        &OperandSize::Size16 => {
            // Rule at src\isa\x64\inst.isle line 758.
            return 0x10;
        }
        &OperandSize::Size32 => {
            // Rule at src\isa\x64\inst.isle line 759.
            return 0x20;
        }
        &OperandSize::Size64 => {
            // Rule at src\isa\x64\inst.isle line 760.
            return 0x40;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size_bits", "src\\isa\\x64\\inst.isle line 756"
    )
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(ctx: &mut C, arg0: &RegMem) -> RegMemImm {
    match arg0 {
        &RegMem::Reg { reg: v1 } => {
            let v2 = RegMemImm::Reg { reg: v1 };
            // Rule at src\isa\x64\inst.isle line 1011.
            return v2;
        }
        &RegMem::Mem { addr: ref v3 } => {
            let v4 = RegMemImm::Mem { addr: v3.clone() };
            // Rule at src\isa\x64\inst.isle line 1013.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "reg_mem_to_reg_mem_imm", "src\\isa\\x64\\inst.isle line 1010"
    )
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v12 = &constructor_to_amode_add(ctx, arg0, v9.0, v9.1, arg2);
                // Rule at src\isa\x64\inst.isle line 1099.
                return v12.clone();
            }
        }
    }
    let v3 = &constructor_amode_imm_reg(ctx, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 1097.
    return v3.clone();
}

// Generated as internal constructor for term to_amode_add.
pub fn constructor_to_amode_add<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v38 = C::def_inst(ctx, arg2);
    if let Some(v39) = v38 {
        let v40 = &C::inst_data(ctx, v39);
        if let &InstructionData::Binary {
            opcode: ref v41,
            args: ref v42,
        } = v40
        {
            if let &Opcode::Iadd = v41 {
                let v43 = C::unpack_value_array_2(ctx, v42);
                let v52 = C::i32_from_iconst(ctx, v43.0);
                if let Some(v53) = v52 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v54 = C::s32_add_fallible(ctx, v7, v53);
                    if let Some(v55) = v54 {
                        let v56 = C::i32_to_offset32(ctx, v55);
                        let v57 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, v43.1, v56);
                        // Rule at src\isa\x64\inst.isle line 1132.
                        return v57.clone();
                    }
                }
                let v46 = C::i32_from_iconst(ctx, v43.1);
                if let Some(v47) = v46 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v48 = C::s32_add_fallible(ctx, v7, v47);
                    if let Some(v49) = v48 {
                        let v50 = C::i32_to_offset32(ctx, v49);
                        let v51 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, v43.0, v50);
                        // Rule at src\isa\x64\inst.isle line 1129.
                        return v51.clone();
                    }
                }
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Binary {
            opcode: ref v21,
            args: ref v22,
        } = v20
        {
            if let &Opcode::Iadd = v21 {
                let v23 = C::unpack_value_array_2(ctx, v22);
                let v32 = C::i32_from_iconst(ctx, v23.0);
                if let Some(v33) = v32 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v34 = C::s32_add_fallible(ctx, v7, v33);
                    if let Some(v35) = v34 {
                        let v36 = C::i32_to_offset32(ctx, v35);
                        let v37 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v23.1, arg2, v36);
                        // Rule at src\isa\x64\inst.isle line 1126.
                        return v37.clone();
                    }
                }
                let v26 = C::i32_from_iconst(ctx, v23.1);
                if let Some(v27) = v26 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v28 = C::s32_add_fallible(ctx, v7, v27);
                    if let Some(v29) = v28 {
                        let v30 = C::i32_to_offset32(ctx, v29);
                        let v31 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v23.0, arg2, v30);
                        // Rule at src\isa\x64\inst.isle line 1123.
                        return v31.clone();
                    }
                }
            }
        }
    }
    let v12 = C::i32_from_iconst(ctx, arg1);
    if let Some(v13) = v12 {
        let v7 = C::offset32_to_i32(ctx, arg3);
        let v14 = C::s32_add_fallible(ctx, v7, v13);
        if let Some(v15) = v14 {
            let v16 = C::i32_to_offset32(ctx, v15);
            let v17 = &constructor_amode_imm_reg(ctx, arg0, arg2, v16);
            // Rule at src\isa\x64\inst.isle line 1120.
            return v17.clone();
        }
    }
    let v5 = C::i32_from_iconst(ctx, arg2);
    if let Some(v6) = v5 {
        let v7 = C::offset32_to_i32(ctx, arg3);
        let v8 = C::s32_add_fallible(ctx, v7, v6);
        if let Some(v9) = v8 {
            let v10 = C::i32_to_offset32(ctx, v9);
            let v11 = &constructor_amode_imm_reg(ctx, arg0, arg1, v10);
            // Rule at src\isa\x64\inst.isle line 1117.
            return v11.clone();
        }
    }
    let v4 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    // Rule at src\isa\x64\inst.isle line 1115.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg.
pub fn constructor_amode_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v6 = C::def_inst(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = &C::inst_data(ctx, v7);
        if let &InstructionData::Binary {
            opcode: ref v9,
            args: ref v10,
        } = v8
        {
            if let &Opcode::Iadd = v9 {
                let v11 = C::unpack_value_array_2(ctx, v10);
                let v14 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v11.0, v11.1, arg2);
                // Rule at src\isa\x64\inst.isle line 1142.
                return v14.clone();
            }
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::offset32_to_i32(ctx, arg2);
    let v5 = Amode::ImmReg {
        simm32: v3,
        base: v4,
        flags: arg0,
    };
    // Rule at src\isa\x64\inst.isle line 1140.
    return v5;
}

// Generated as internal constructor for term amode_imm_reg_reg_shift.
pub fn constructor_amode_imm_reg_reg_shift<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v30 = C::def_inst(ctx, arg1);
    if let Some(v31) = v30 {
        let v32 = &C::inst_data(ctx, v31);
        if let &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } = v32
        {
            if let &Opcode::Ishl = v33 {
                let v35 = C::unpack_value_array_2(ctx, v34);
                let v38 = C::def_inst(ctx, v35.1);
                if let Some(v39) = v38 {
                    let v40 = &C::inst_data(ctx, v39);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v41,
                        imm: v42,
                    } = v40
                    {
                        if let &Opcode::Iconst = v41 {
                            let v43 = C::uimm8(ctx, v42);
                            if let Some(v44) = v43 {
                                let v45 = C::u8_as_u32(ctx, v44);
                                let v46 = C::u32_lteq(ctx, v45, 0x3);
                                if let Some(v47) = v46 {
                                    let v48 = constructor_put_in_gpr(ctx, arg2);
                                    let v49 = constructor_put_in_gpr(ctx, v35.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v50 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v48,
                                        index: v49,
                                        shift: v44,
                                        flags: arg0,
                                    };
                                    // Rule at src\isa\x64\inst.isle line 1151.
                                    return v50;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v9 = C::def_inst(ctx, arg2);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Binary {
            opcode: ref v12,
            args: ref v13,
        } = v11
        {
            if let &Opcode::Ishl = v12 {
                let v14 = C::unpack_value_array_2(ctx, v13);
                let v17 = C::def_inst(ctx, v14.1);
                if let Some(v18) = v17 {
                    let v19 = &C::inst_data(ctx, v18);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v20,
                        imm: v21,
                    } = v19
                    {
                        if let &Opcode::Iconst = v20 {
                            let v22 = C::uimm8(ctx, v21);
                            if let Some(v23) = v22 {
                                let v24 = C::u8_as_u32(ctx, v23);
                                let v26 = C::u32_lteq(ctx, v24, 0x3);
                                if let Some(v27) = v26 {
                                    let v5 = constructor_put_in_gpr(ctx, arg1);
                                    let v28 = constructor_put_in_gpr(ctx, v14.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v29 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v5,
                                        index: v28,
                                        shift: v23,
                                        flags: arg0,
                                    };
                                    // Rule at src\isa\x64\inst.isle line 1148.
                                    return v29;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v4 = C::offset32_to_i32(ctx, arg3);
    let v8 = Amode::ImmRegRegShift {
        simm32: v4,
        base: v5,
        index: v6,
        shift: 0x0,
        flags: arg0,
    };
    // Rule at src\isa\x64\inst.isle line 1146.
    return v8;
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3
        {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src\isa\x64\inst.isle line 1187.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = C::u8_as_u32(ctx, v15);
        let v17 = RegMemImm::Imm { simm32: v16 };
        let v18 = &C::gpr_mem_imm_new(ctx, &v17);
        let v19 = constructor_x64_and(ctx, I64, v14, v18);
        let v20 = &C::gpr_to_imm8_gpr(ctx, v19);
        // Rule at src\isa\x64\inst.isle line 1189.
        return v20.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0);
    let v21 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src\isa\x64\inst.isle line 1191.
    return v21.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Reg) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1627.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::type_register_class(ctx, v1);
    if let Some(v3) = v2 {
        match v3 {
            &RegisterClass::Gpr {
                single_register: v4,
            } => {
                let v5 = C::put_in_reg(ctx, arg0);
                let v6 = C::gpr_new(ctx, v5);
                // Rule at src\isa\x64\inst.isle line 1637.
                return v6;
            }
            &RegisterClass::Xmm => {
                let v5 = C::put_in_reg(ctx, arg0);
                let v8 = C::xmm_new(ctx, v5);
                let v7 = C::ty_bits(ctx, v1);
                let v9 = constructor_bitcast_xmm_to_gpr(ctx, v7, v8);
                // Rule at src\isa\x64\inst.isle line 1644.
                return v9;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_gpr", "src\\isa\\x64\\inst.isle line 1634"
    )
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(ctx: &mut C, arg0: Value) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1653.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Value) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1660.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(ctx: &mut C, arg0: Value) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1667.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1684.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src\isa\x64\inst.isle line 1689.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(ctx: &mut C, arg0: Xmm) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1694.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 1701.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1714.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &constructor_sink_load_to_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1845.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> XmmMem {
    let v1 = &constructor_sink_load_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1849.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem.
pub fn constructor_sink_load_to_reg_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> RegMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    // Rule at src\isa\x64\inst.isle line 1853.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem.
pub fn constructor_sink_load_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> GprMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    let v3 = &C::reg_mem_to_gpr_mem(ctx, &v2);
    // Rule at src\isa\x64\inst.isle line 1856.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem_imm.
pub fn constructor_sink_load_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMemImm::Mem { addr: v1.clone() };
    // Rule at src\isa\x64\inst.isle line 1859.
    return v2;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue { dst: v0 };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 1871.
    return v3;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
    arg1: i64,
    arg2: RelocDistance,
) -> Reg {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::writable_gpr_to_reg(ctx, v3);
    let v5 = C::box_external_name(ctx, arg0);
    let v6 = MInst::LoadExtName {
        dst: v4,
        name: v5,
        offset: arg1,
        distance: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 1878.
    return v8;
}

// Generated as internal constructor for term mov64_mr.
pub fn constructor_mov64_mr<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::Mov64MR {
        src: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 1885.
    return v4;
}

// Generated as internal constructor for term alu_rmi_r.
pub fn constructor_alu_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 1892.
    return v8;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: &GprMem,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 1900.
    return v8;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 1908.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_unaligned.
pub fn constructor_xmm_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmRUnaligned {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 1915.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 1922.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_blend_vex.
pub fn constructor_xmm_rmr_blend_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlendVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 1929.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_vex.
pub fn constructor_xmm_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 1936.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_vex.
pub fn constructor_xmm_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 1943.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src\isa\x64\inst.isle line 1950.
    return v9;
}

// Generated as internal constructor for term xmm_vex_pinsr.
pub fn constructor_xmm_vex_pinsr<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmVexPinsr {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 1962.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 1969.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 1976.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_unaligned.
pub fn constructor_xmm_unary_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRUnaligned {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 1983.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 1990.
    return v5;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 1997.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_evex.
pub fn constructor_xmm_unary_rm_r_imm_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmEvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2007.
    return v6;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAlignedImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2014.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm.
pub fn constructor_xmm_to_gpr_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImm {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2024.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm_vex.
pub fn constructor_xmm_to_gpr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImmVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2031.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2038.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm_vex.
pub fn constructor_gpr_to_xmm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2045.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2052.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_vex.
pub fn constructor_xmm_to_gpr_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2059.
    return v6;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2066.
    return v8;
}

// Generated as internal constructor for term xmm_rmir_vex.
pub fn constructor_xmm_rmir_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2074.
    return v6;
}

// Generated as internal constructor for term xmm_rmr_imm_vex.
pub fn constructor_xmm_rmr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRImmVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2081.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex3.
pub fn constructor_xmm_rmr_vex3<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex3 {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2088.
    return v7;
}

// Generated as internal constructor for term unary_rm_r.
pub fn constructor_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmROpcode,
    arg1: Gpr,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v5 = MInst::UnaryRmR {
        size: arg2.clone(),
        op: arg0.clone(),
        src: v4.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2095.
    return v7;
}

// Generated as internal constructor for term unary_rm_r_vex.
pub fn constructor_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::UnaryRmRVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2102.
    return v6;
}

// Generated as internal constructor for term unary_rm_r_imm_vex.
pub fn constructor_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRImmVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
    arg3: u8,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::UnaryRmRImmVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2109.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float.
pub fn constructor_cvt_int_to_float<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloat {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2115.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float_vex.
pub fn constructor_cvt_int_to_float_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloatVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2121.
    return v7;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2127.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src\isa\x64\inst.isle line 2136.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src\isa\x64\inst.isle line 2148.
    return v12;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg { src: arg0, dst: v1 };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2160.
    return v4;
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src\isa\x64\inst.isle line 2184.
        return v4;
    }
    if v1 == I32 {
        if arg1 == I64 {
            if let &ExtendKind::Zero = arg2 {
                let v5 = constructor_value32_zeros_upper32(ctx, arg0);
                if v5 == true {
                    let v6 = C::put_in_reg(ctx, arg0);
                    let v10 = C::add_range_fact(ctx, v6, 0x40, 0x0, 0xFFFFFFFF);
                    let v11 = C::gpr_new(ctx, v10);
                    // Rule at src\isa\x64\inst.isle line 2192.
                    return v11;
                }
            }
        }
    }
    let v12 = &C::sinkable_load_exact(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_sink_load_to_gpr_mem(ctx, v13);
        let v15 = constructor_extend_to_gpr_types(ctx, v14, v1, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 2198.
        return v15;
    }
    let v16 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v17 = constructor_extend_to_gpr_types(ctx, v16, v1, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2202.
    return v17;
}

// Generated as internal constructor for term extend_to_gpr_types.
pub fn constructor_extend_to_gpr_types<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
    arg1: Type,
    arg2: Type,
    arg3: &ExtendKind,
) -> Gpr {
    let v5 = &C::operand_size_of_type_32_64(ctx, arg2);
    let v6 = constructor_operand_size_bits(ctx, v5);
    let v4 = C::ty_bits_u16(ctx, arg1);
    let v7 = &C::ext_mode(ctx, v4, v6);
    let v8 = constructor_extend(ctx, arg3, arg2, v7, arg0);
    // Rule at src\isa\x64\inst.isle line 2207.
    return v8;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 2226.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 2222.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "extend", "src\\isa\\x64\\inst.isle line 2219"
    )
}

// Generated as internal constructor for term value32_zeros_upper32.
pub fn constructor_value32_zeros_upper32<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Binary {
                opcode: ref v4,
                args: ref v5,
            } => {
                match v4 {
                    &Opcode::Iadd => {
                        // Rule at src\isa\x64\inst.isle line 2233.
                        return true;
                    }
                    &Opcode::Isub => {
                        // Rule at src\isa\x64\inst.isle line 2234.
                        return true;
                    }
                    &Opcode::Imul => {
                        // Rule at src\isa\x64\inst.isle line 2235.
                        return true;
                    }
                    &Opcode::Band => {
                        // Rule at src\isa\x64\inst.isle line 2236.
                        return true;
                    }
                    &Opcode::Bor => {
                        // Rule at src\isa\x64\inst.isle line 2237.
                        return true;
                    }
                    &Opcode::Bxor => {
                        // Rule at src\isa\x64\inst.isle line 2238.
                        return true;
                    }
                    &Opcode::Ishl => {
                        // Rule at src\isa\x64\inst.isle line 2239.
                        return true;
                    }
                    &Opcode::Ushr => {
                        // Rule at src\isa\x64\inst.isle line 2240.
                        return true;
                    }
                    _ => {}
                }
            }
            &InstructionData::Load {
                opcode: ref v10,
                arg: v11,
                flags: v12,
                offset: v13,
            } => {
                if let &Opcode::Uload32 = v10 {
                    // Rule at src\isa\x64\inst.isle line 2241.
                    return true;
                }
            }
            _ => {}
        }
    }
    // Rule at src\isa\x64\inst.isle line 2242.
    return false;
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src\isa\x64\inst.isle line 2248.
                    return I8X16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src\isa\x64\inst.isle line 2249.
                    return I16X8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src\isa\x64\inst.isle line 2250.
                    return I32X4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src\isa\x64\inst.isle line 2251.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_int_type", "src\\isa\\x64\\inst.isle line 2247"
    )
}

// Generated as internal constructor for term x64_xor_vector.
pub fn constructor_x64_xor_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F16 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2255.
            return v3;
        }
        F32 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2256.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2257.
            return v4;
        }
        F128 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2258.
            return v3;
        }
        F32X4 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2259.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2260.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pxor(ctx, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 2261.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_xor_vector", "src\\isa\\x64\\inst.isle line 2254"
    )
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(ctx: &mut C) -> Xmm {
    let v0 = constructor_xmm_uninit_value(ctx);
    let v1 = &C::xmm_to_xmm_mem(ctx, v0);
    let v2 = constructor_x64_pcmpeqd(ctx, v0, v1);
    // Rule at src\isa\x64\inst.isle line 2273.
    return v2;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg { reg: v4 } => {
            let v5 = &C::reg_to_gpr_mem(ctx, v4);
            let v6 = constructor_x64_movd_to_xmm(ctx, v5);
            let v7 = &C::xmm_to_xmm_mem_imm(ctx, v6);
            // Rule at src\isa\x64\inst.isle line 2281.
            return v7.clone();
        }
        &RegMemImm::Mem { addr: ref v1 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src\isa\x64\inst.isle line 2279.
            return v2.clone();
        }
        &RegMemImm::Imm { simm32: v3 } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src\isa\x64\inst.isle line 2280.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mov_rmi_to_xmm", "src\\isa\\x64\\inst.isle line 2278"
    )
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = constructor_mov64_mr(ctx, arg1);
            // Rule at src\isa\x64\inst.isle line 2300.
            return v11;
        }
        F32 => {
            let v12 = constructor_x64_movss_load(ctx, arg1);
            let v13 = C::xmm_to_reg(ctx, v12);
            // Rule at src\isa\x64\inst.isle line 2303.
            return v13;
        }
        F64 => {
            let v14 = constructor_x64_movsd_load(ctx, arg1);
            let v15 = C::xmm_to_reg(ctx, v14);
            // Rule at src\isa\x64\inst.isle line 2306.
            return v15;
        }
        F128 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v17 = constructor_x64_movdqu_load(ctx, v16);
            let v18 = C::xmm_to_reg(ctx, v17);
            // Rule at src\isa\x64\inst.isle line 2309.
            return v18;
        }
        F32X4 => {
            let v19 = constructor_x64_movups_load(ctx, arg1);
            let v20 = C::xmm_to_reg(ctx, v19);
            // Rule at src\isa\x64\inst.isle line 2312.
            return v20;
        }
        F64X2 => {
            let v21 = constructor_x64_movupd_load(ctx, arg1);
            let v22 = C::xmm_to_reg(ctx, v21);
            // Rule at src\isa\x64\inst.isle line 2315.
            return v22;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src\isa\x64\inst.isle line 2296.
            return v10;
        }
    }
    let v23 = C::multi_lane(ctx, arg0);
    if let Some(v24) = v23 {
        let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v17 = constructor_x64_movdqu_load(ctx, v16);
        let v18 = C::xmm_to_reg(ctx, v17);
        // Rule at src\isa\x64\inst.isle line 2318.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_load", "src\\isa\\x64\\inst.isle line 2294"
    )
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(ctx: &mut C, arg0: &Amode) -> Reg {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = constructor_mov64_mr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 2322.
    return v2;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2326.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2332.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovss, v2);
        // Rule at src\isa\x64\inst.isle line 2340.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, v2);
    // Rule at src\isa\x64\inst.isle line 2338.
    return v3;
}

// Generated as internal constructor for term x64_movss_store.
pub fn constructor_x64_movss_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovss, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2347.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2345.
    return v3.clone();
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovsd, v2);
        // Rule at src\isa\x64\inst.isle line 2354.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, v2);
    // Rule at src\isa\x64\inst.isle line 2352.
    return v3;
}

// Generated as internal constructor for term x64_movsd_store.
pub fn constructor_x64_movsd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovsd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2361.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2359.
    return v3.clone();
}

// Generated as internal constructor for term x64_movups_load.
pub fn constructor_x64_movups_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovups, v2);
        // Rule at src\isa\x64\inst.isle line 2368.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, v2);
    // Rule at src\isa\x64\inst.isle line 2366.
    return v3;
}

// Generated as internal constructor for term x64_movups_store.
pub fn constructor_x64_movups_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovups, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2375.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movups, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2373.
    return v3.clone();
}

// Generated as internal constructor for term x64_movupd_load.
pub fn constructor_x64_movupd_load<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovupd, v2);
        // Rule at src\isa\x64\inst.isle line 2382.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, v2);
    // Rule at src\isa\x64\inst.isle line 2380.
    return v3;
}

// Generated as internal constructor for term x64_movupd_store.
pub fn constructor_x64_movupd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovupd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2389.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movupd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2387.
    return v3.clone();
}

// Generated as internal constructor for term x64_movd_to_gpr.
pub fn constructor_x64_movd_to_gpr<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src\isa\x64\inst.isle line 2397.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 2395.
    return v3;
}

// Generated as internal constructor for term x64_movd_to_xmm.
pub fn constructor_x64_movd_to_xmm<C: Context>(ctx: &mut C, arg0: &GprMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src\isa\x64\inst.isle line 2405.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 2403.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_xmm.
pub fn constructor_x64_movq_to_xmm<C: Context>(ctx: &mut C, arg0: &GprMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src\isa\x64\inst.isle line 2413.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src\isa\x64\inst.isle line 2411.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_gpr.
pub fn constructor_x64_movq_to_gpr<C: Context>(ctx: &mut C, arg0: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src\isa\x64\inst.isle line 2421.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src\isa\x64\inst.isle line 2419.
    return v3;
}

// Generated as internal constructor for term x64_movdqu_load.
pub fn constructor_x64_movdqu_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovdqu, arg0);
        // Rule at src\isa\x64\inst.isle line 2428.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src\isa\x64\inst.isle line 2426.
    return v2;
}

// Generated as internal constructor for term x64_movdqu_store.
pub fn constructor_x64_movdqu_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovdqu, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2435.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movdqu, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2433.
    return v3.clone();
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxbw, arg0);
        // Rule at src\isa\x64\inst.isle line 2442.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src\isa\x64\inst.isle line 2440.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxbw, arg0);
        // Rule at src\isa\x64\inst.isle line 2449.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src\isa\x64\inst.isle line 2447.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxwd, arg0);
        // Rule at src\isa\x64\inst.isle line 2456.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src\isa\x64\inst.isle line 2454.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxwd, arg0);
        // Rule at src\isa\x64\inst.isle line 2463.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src\isa\x64\inst.isle line 2461.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxdq, arg0);
        // Rule at src\isa\x64\inst.isle line 2470.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src\isa\x64\inst.isle line 2468.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxdq, arg0);
        // Rule at src\isa\x64\inst.isle line 2477.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src\isa\x64\inst.isle line 2475.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src\isa\x64\inst.isle line 2482.
    return v5;
}

// Generated as internal constructor for term x64_movimm_m.
pub fn constructor_x64_movimm_m<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: i32,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovImmM {
        size: v3.clone(),
        simm32: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src\isa\x64\inst.isle line 2487.
    return v5;
}

// Generated as internal constructor for term xmm_movrm.
pub fn constructor_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\x64\inst.isle line 2492.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm.
pub fn constructor_xmm_movrm_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImm {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src\isa\x64\inst.isle line 2496.
    return v5;
}

// Generated as internal constructor for term xmm_movrm_vex.
pub fn constructor_xmm_movrm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRMVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\x64\inst.isle line 2500.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm_vex.
pub fn constructor_xmm_movrm_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImmVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src\isa\x64\inst.isle line 2504.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2509.
    return v5;
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2520.
    return v4;
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Add,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 2528.
    return v8;
}

// Generated as internal constructor for term x64_alurmi_with_flags_paired.
pub fn constructor_x64_alurmi_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: v8,
            result: v9,
        };
        // Rule at src\isa\x64\inst.isle line 2539.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_with_flags_paired", "src\\isa\\x64\\inst.isle line 2538"
    )
}

// Generated as internal constructor for term x64_alurmi_flags_side_effect.
pub fn constructor_x64_alurmi_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = &C::raw_operand_size_of_type(ctx, v3);
        let v7 = C::temp_writable_gpr(ctx);
        let v8 = MInst::AluRmiR {
            size: v6.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v7,
        };
        let v9 = ProducesFlags::ProducesFlagsSideEffect { inst: v8 };
        // Rule at src\isa\x64\inst.isle line 2550.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_flags_side_effect", "src\\isa\\x64\\inst.isle line 2549"
    )
}

// Generated as internal constructor for term x64_alurmi_with_flags_chained.
pub fn constructor_x64_alurmi_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ConsumesAndProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ConsumesAndProducesFlags::ReturnsReg {
            inst: v8,
            result: v9,
        };
        // Rule at src\isa\x64\inst.isle line 2560.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_alurmi_with_flags_chained", "src\\isa\\x64\\inst.isle line 2559"
    )
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Adc,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 2572.
    return v8;
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2584.
    return v4;
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sub,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 2592.
    return v8;
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sbb,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 2604.
    return v8;
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src\isa\x64\inst.isle line 2617.
    return v11;
}

// Generated as internal constructor for term x64_mul8.
pub fn constructor_x64_mul8<C: Context>(ctx: &mut C, arg0: bool, arg1: Gpr, arg2: &GprMem) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2627.
    return v6;
}

// Generated as internal constructor for term x64_imul.
pub fn constructor_x64_imul<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMem) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMul {
        size: v4.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2634.
    return v7;
}

// Generated as internal constructor for term x64_imul_imm.
pub fn constructor_x64_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: i32,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMulImm {
        size: v4.clone(),
        src1: arg1.clone(),
        src2: arg2,
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 2642.
    return v7;
}

// Generated as internal constructor for term x64_mul8_with_flags_paired.
pub fn constructor_x64_mul8_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Gpr,
    arg2: &GprMem,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src\isa\x64\inst.isle line 2649.
    return v6;
}

// Generated as internal constructor for term x64_mul_lo_with_flags_paired.
pub fn constructor_x64_mul_lo_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ProducesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src\isa\x64\inst.isle line 2656.
    return v9;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2666.
    return v4;
}

// Generated as internal constructor for term x64_and_with_flags_paired.
pub fn constructor_x64_and_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::And,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src\isa\x64\inst.isle line 2673.
    return v7;
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2684.
    return v4;
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    let v4 = constructor_alu_rmi_r(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2692.
    return v4;
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMem) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2699.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src\isa\x64\inst.isle line 2706.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        I64 => {
            let v26 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v27) = v26 {
                let v5 = C::temp_writable_gpr(ctx);
                let v29 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v27,
                    dst: v5,
                };
                let v30 = C::emit(ctx, &v29);
                let v31 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src\isa\x64\inst.isle line 2741.
                return v31;
            }
        }
        F16 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v41 = constructor_xmm_zero(ctx, arg0);
                    let v42 = C::xmm_to_reg(ctx, v41);
                    // Rule at src\isa\x64\inst.isle line 2759.
                    return v42;
                }
                false => {
                    let v12 = constructor_imm(ctx, I16, arg1);
                    let v13 = C::gpr_new(ctx, v12);
                    let v14 = constructor_bitcast_gpr_to_xmm(ctx, 0x10, v13);
                    let v15 = C::xmm_to_reg(ctx, v14);
                    // Rule at src\isa\x64\inst.isle line 2728.
                    return v15;
                }
                _ => {}
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v41 = constructor_xmm_zero(ctx, arg0);
                    let v42 = C::xmm_to_reg(ctx, v41);
                    // Rule at src\isa\x64\inst.isle line 2762.
                    return v42;
                }
                false => {
                    let v17 = constructor_imm(ctx, I32, arg1);
                    let v18 = &C::reg_to_gpr_mem(ctx, v17);
                    let v19 = constructor_x64_movd_to_xmm(ctx, v18);
                    let v20 = C::xmm_to_reg(ctx, v19);
                    // Rule at src\isa\x64\inst.isle line 2732.
                    return v20;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                true => {
                    let v41 = constructor_xmm_zero(ctx, arg0);
                    let v42 = C::xmm_to_reg(ctx, v41);
                    // Rule at src\isa\x64\inst.isle line 2767.
                    return v42;
                }
                false => {
                    let v22 = constructor_imm(ctx, I64, arg1);
                    let v23 = &C::reg_to_gpr_mem(ctx, v22);
                    let v24 = constructor_x64_movq_to_xmm(ctx, v23);
                    let v25 = C::xmm_to_reg(ctx, v24);
                    // Rule at src\isa\x64\inst.isle line 2736.
                    return v25;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            true => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v33 = MInst::AluConstOp {
                    op: AluRmiROpcode::Xor,
                    size: v6.clone(),
                    dst: v5,
                };
                let v34 = C::emit(ctx, &v33);
                let v35 = C::writable_gpr_to_gpr(ctx, v5);
                let v36 = C::gpr_to_reg(ctx, v35);
                // Rule at src\isa\x64\inst.isle line 2747.
                return v36;
            }
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src\isa\x64\inst.isle line 2721.
                return v9;
            }
            _ => {}
        }
    }
    if arg1 == 0x0 {
        let v37 = C::multi_lane(ctx, arg0);
        if let Some(v38) = v37 {
            let v41 = constructor_xmm_zero(ctx, arg0);
            let v42 = C::xmm_to_reg(ctx, v41);
            // Rule at src\isa\x64\inst.isle line 2755.
            return v42;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src\\isa\\x64\\inst.isle line 2718"
    )
}

// Generated as internal constructor for term xmm_zero.
pub fn constructor_xmm_zero<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    let v1 = constructor_xmm_uninit_value(ctx);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    let v3 = constructor_x64_xor_vector(ctx, arg0, v1, v2);
    // Rule at src\isa\x64\inst.isle line 2772.
    return v3;
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 2778.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = C::ty_bits(ctx, v6);
                let v12 = C::u8_sub(ctx, v11, v8);
                let v13 = constructor_x64_rorx(ctx, v6, v10, v12);
                // Rule at src\isa\x64\inst.isle line 2790.
                return v13;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2788.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_rorx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 2798.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2796.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shlx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 2810.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2804.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shrx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 2819.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2816.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_sarx(ctx, v6, v10, v8);
                // Rule at src\isa\x64\inst.isle line 2828.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2825.
    return v4;
}

// Generated as internal constructor for term x64_bzhi.
pub fn constructor_x64_bzhi<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Bzhi, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 2837.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 2844.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src\isa\x64\inst.isle line 2852.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2861.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: u32,
) -> ProducesFlags {
    let v3 = RegMemImm::Imm { simm32: arg2 };
    let v4 = &C::gpr_mem_imm_new(ctx, &v3);
    let v5 = &constructor_x64_cmp(ctx, arg0, arg1, v4);
    // Rule at src\isa\x64\inst.isle line 2866.
    return v5.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg2);
    let v4 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: v3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    // Rule at src\isa\x64\inst.isle line 2871.
    return v5;
}

// Generated as internal constructor for term xmm_cmp_rm_r_vex.
pub fn constructor_xmm_cmp_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\x64\inst.isle line 2877.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v9 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomiss, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 2887.
                return v9.clone();
            }
            let v4 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2883.
            return v4.clone();
        }
        F64 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v11 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomisd, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 2890.
                return v11.clone();
            }
            let v6 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 2885.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_ucomis", "src\\isa\\x64\\inst.isle line 2882"
    )
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 2896.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> ProducesFlags {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vptest, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 2903.
        return v6.clone();
    }
    let v3 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 2901.
    return v3.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 2911.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Xmm,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2,
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src\isa\x64\inst.isle line 2919.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src\isa\x64\inst.isle line 2950.
                        return v28.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src\isa\x64\inst.isle line 2929.
                            return v25;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = constructor_put_in_xmm(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src\isa\x64\inst.isle line 2953.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_from_values", "src\\isa\\x64\\inst.isle line 2928"
    )
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src\isa\x64\inst.isle line 2960.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Xmm,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3,
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3,
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src\isa\x64\inst.isle line 2972.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src\isa\x64\inst.isle line 3005.
                        return v39.clone();
                    }
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src\isa\x64\inst.isle line 2986.
                            return v36;
                        }
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = constructor_put_in_xmm(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src\isa\x64\inst.isle line 3008.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmove_or_from_values", "src\\isa\\x64\\inst.isle line 2985"
    )
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src\isa\x64\inst.isle line 3013.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(ctx: &mut C, arg0: &CC) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src\isa\x64\inst.isle line 3022.
    return v4;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3032.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3030.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3040.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3038.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3048.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3046.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3056.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3054.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3064.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3062.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3072.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3070.
    return v4;
}

// Generated as internal constructor for term x64_phaddw.
pub fn constructor_x64_phaddw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3080.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3078.
    return v4;
}

// Generated as internal constructor for term x64_phaddd.
pub fn constructor_x64_phaddd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3088.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3086.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3096.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3094.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3104.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3102.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3112.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3110.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3120.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3118.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3128.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3126.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3136.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3134.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3144.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3142.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3152.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3150.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3160.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3158.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3168.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3166.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3176.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3174.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3184.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3182.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpand, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3192.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pand, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3190.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3200.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3198.
    return v4;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3208.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3206.
    return v4;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpor, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3216.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Por, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3214.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3224.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3222.
    return v4;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3232.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3230.
    return v4;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpxor, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3240.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pxor, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3238.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3248.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3246.
    return v4;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3256.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3254.
    return v4;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmullw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3264.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmullw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3262.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulld, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3272.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulld, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3270.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3280.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3278.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhrsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3288.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhrsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3286.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhuw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3296.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhuw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3294.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuldq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3304.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuldq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3302.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuludq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3312.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuludq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3310.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhwd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3320.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhwd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3318.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklwd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3328.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklwd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3326.
    return v4;
}

// Generated as internal constructor for term x64_punpckldq.
pub fn constructor_x64_punpckldq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckldq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3336.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckldq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3334.
    return v4;
}

// Generated as internal constructor for term x64_punpckhdq.
pub fn constructor_x64_punpckhdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhdq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3344.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhdq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3342.
    return v4;
}

// Generated as internal constructor for term x64_punpcklqdq.
pub fn constructor_x64_punpcklqdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklqdq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3352.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklqdq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3350.
    return v4;
}

// Generated as internal constructor for term x64_punpckhqdq.
pub fn constructor_x64_punpckhqdq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhqdq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3360.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhqdq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3358.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3368.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3366.
    return v4;
}

// Generated as internal constructor for term x64_unpcklpd.
pub fn constructor_x64_unpcklpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3376.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3374.
    return v4;
}

// Generated as internal constructor for term x64_unpckhps.
pub fn constructor_x64_unpckhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpckhps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3384.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpckhps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3382.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3392.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3390.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3400.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3398.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpandn, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3408.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pandn, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3406.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3416.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3414.
    return v3;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3424.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3422.
    return v3;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3432.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3430.
    return v4;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3440.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3438.
    return v4;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3448.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3446.
    return v3;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3456.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3454.
    return v3;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3464.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3462.
    return v4;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3472.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3470.
    return v4;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3480.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3478.
    return v3;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3488.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3486.
    return v3;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3496.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3494.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3504.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3502.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3512.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3510.
    return v3;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 3520.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 3518.
    return v3;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3528.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3526.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3536.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3534.
    return v4;
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvpd, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3544.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 3542.
    return v5;
}

// Generated as internal constructor for term x64_blendvps.
pub fn constructor_x64_blendvps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvps, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3552.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvps, arg0, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 3550.
    return v5;
}

// Generated as internal constructor for term x64_pblendvb.
pub fn constructor_x64_pblendvb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vpblendvb, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3560.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Pblendvb, arg0, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 3558.
    return v5;
}

// Generated as internal constructor for term x64_pblendw.
pub fn constructor_x64_pblendw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpblendw, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3568.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pblendw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3566.
    return v7;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovsd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3583.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3581.
    return v4;
}

// Generated as internal constructor for term x64_movss_regmove.
pub fn constructor_x64_movss_regmove<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Xmm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovss, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3590.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movss, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3588.
    return v4;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovlhps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3598.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Movlhps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3596.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3604.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3605.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3606.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxs", "src\\isa\\x64\\inst.isle line 3603"
    )
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3610.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3609.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3615.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3614.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3620.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3619.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3626.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3627.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3628.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmins", "src\\isa\\x64\\inst.isle line 3625"
    )
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3632.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3631.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3637.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3636.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3642.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3641.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3648.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3649.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3650.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pmaxu", "src\\isa\\x64\\inst.isle line 3647"
    )
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxub, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3654.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxub, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3653.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxuw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3659.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxuw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3658.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxud, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3664.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxud, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3663.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3670.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3671.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 3672.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pminu", "src\\isa\\x64\\inst.isle line 3669"
    )
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminub, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3676.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminub, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3675.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminuw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3681.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminuw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3680.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminud, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3686.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminud, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3685.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklbw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3694.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklbw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3692.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhbw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3702.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhbw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3700.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpacksswb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3710.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packsswb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3708.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackssdw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3718.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packssdw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3716.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackuswb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3726.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packuswb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3724.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackusdw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3734.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packusdw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3732.
    return v4;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpalignr, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3746.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3740.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 3752.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 3753.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_cmpp", "src\\isa\\x64\\inst.isle line 3751"
    )
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmpps, arg0, arg1, v11);
        // Rule at src\isa\x64\inst.isle line 3762.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3756.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmppd, arg0, arg1, v11);
        // Rule at src\isa\x64\inst.isle line 3779.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3773.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrb, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3794.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3788.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrw, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3806.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3800.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrd, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3818.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3812.
    return v7;
}

// Generated as internal constructor for term x64_pinsrq.
pub fn constructor_x64_pinsrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &GprMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrq, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3830.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size64);
    // Rule at src\isa\x64\inst.isle line 3824.
    return v7;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundss, arg0, v10);
        // Rule at src\isa\x64\inst.isle line 3855.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F32, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, v5, v6);
    // Rule at src\isa\x64\inst.isle line 3853.
    return v7;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundsd, arg0, v10);
        // Rule at src\isa\x64\inst.isle line 3865.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F64, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, v5, v6);
    // Rule at src\isa\x64\inst.isle line 3863.
    return v7;
}

// Generated as internal constructor for term put_xmm_mem_in_xmm.
pub fn constructor_put_xmm_mem_in_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: &XmmMem) -> Xmm {
    let v2 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    match v2 {
        &RegMem::Reg { reg: v3 } => {
            let v4 = C::xmm_new(ctx, v3);
            // Rule at src\isa\x64\inst.isle line 3874.
            return v4;
        }
        &RegMem::Mem { addr: ref v5 } => {
            let v7 = constructor_x64_load(ctx, arg0, v5, &ExtKind::None);
            let v8 = C::xmm_new(ctx, v7);
            // Rule at src\isa\x64\inst.isle line 3877.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_xmm_mem_in_xmm", "src\\isa\\x64\\inst.isle line 3873"
    )
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundps, arg0, v8);
        // Rule at src\isa\x64\inst.isle line 3885.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, v3, v4);
    // Rule at src\isa\x64\inst.isle line 3883.
    return v5;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundpd, arg0, v8);
        // Rule at src\isa\x64\inst.isle line 3893.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, v3, v4);
    // Rule at src\isa\x64\inst.isle line 3891.
    return v5;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddwd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3901.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddwd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3899.
    return v4;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddubsw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3908.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddubsw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3906.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vinsertps, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3920.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(
        ctx,
        &SseOpcode::Insertps,
        v4,
        v5,
        arg2,
        &OperandSize::Size32,
    );
    // Rule at src\isa\x64\inst.isle line 3914.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 3928.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufd, v3, arg1);
    // Rule at src\isa\x64\inst.isle line 3926.
    return v4;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpshufb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 3936.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pshufb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 3934.
    return v4;
}

// Generated as internal constructor for term x64_pshuflw.
pub fn constructor_x64_pshuflw<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshuflw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 3944.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshuflw, v3, arg1);
    // Rule at src\isa\x64\inst.isle line 3942.
    return v4;
}

// Generated as internal constructor for term x64_pshufhw.
pub fn constructor_x64_pshufhw<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufhw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 3952.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufhw, v3, arg1);
    // Rule at src\isa\x64\inst.isle line 3950.
    return v4;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem, arg2: u8) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vshufps, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 3964.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src\isa\x64\inst.isle line 3958.
    return v7;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsb, arg0);
        // Rule at src\isa\x64\inst.isle line 3972.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, v2);
    // Rule at src\isa\x64\inst.isle line 3970.
    return v3;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsw, arg0);
        // Rule at src\isa\x64\inst.isle line 3980.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, v2);
    // Rule at src\isa\x64\inst.isle line 3978.
    return v3;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsd, arg0);
        // Rule at src\isa\x64\inst.isle line 3988.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, v2);
    // Rule at src\isa\x64\inst.isle line 3986.
    return v3;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src\isa\x64\inst.isle line 3994.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src\isa\x64\inst.isle line 3999.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src\isa\x64\inst.isle line 4004.
    return v2;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4011.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: arg0,
        src2: arg1,
        src3: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src\isa\x64\inst.isle line 4020.
    return v7;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4033.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4031.
    return v4;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpslld, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4041.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4039.
    return v4;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllq, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4049.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4047.
    return v4;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4057.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4055.
    return v4;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrld, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4065.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4063.
    return v4;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlq, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4073.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4071.
    return v4;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsraw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4081.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4079.
    return v4;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMemImm) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrad, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4089.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4087.
    return v4;
}

// Generated as internal constructor for term x64_vpsraq.
pub fn constructor_x64_vpsraq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpsraq, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4095.
    return v3;
}

// Generated as internal constructor for term x64_vpsraq_imm.
pub fn constructor_x64_vpsraq_imm<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: u8) -> Xmm {
    let v3 = constructor_xmm_unary_rm_r_imm_evex(ctx, &Avx512Opcode::VpsraqImm, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4100.
    return v3;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4107.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrb, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4105.
    return v3;
}

// Generated as internal constructor for term x64_pextrb_store.
pub fn constructor_x64_pextrb_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4114.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrb, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4112.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4122.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrw, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4120.
    return v3;
}

// Generated as internal constructor for term x64_pextrw_store.
pub fn constructor_x64_pextrw_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4129.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrw, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4127.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4137.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4135.
    return v3;
}

// Generated as internal constructor for term x64_pextrd_store.
pub fn constructor_x64_pextrd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4144.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrd, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4142.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrq.
pub fn constructor_x64_pextrq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u8) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1);
        // Rule at src\isa\x64\inst.isle line 4152.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrq, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4150.
    return v3;
}

// Generated as internal constructor for term x64_pextrq_store.
pub fn constructor_x64_pextrq_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1, arg2);
        // Rule at src\isa\x64\inst.isle line 4159.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrq, arg0, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4157.
    return v4.clone();
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vpmovmskb, arg1, arg0);
        // Rule at src\isa\x64\inst.isle line 4167.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src\isa\x64\inst.isle line 4165.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskps, arg1, arg0);
        // Rule at src\isa\x64\inst.isle line 4175.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src\isa\x64\inst.isle line 4173.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Xmm) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskpd, arg1, arg0);
        // Rule at src\isa\x64\inst.isle line 4183.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src\isa\x64\inst.isle line 4181.
    return v3;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 4189.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 4197.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src\isa\x64\inst.isle line 4205.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(ctx: &mut C, arg0: Type, arg1: &SyntheticAmode) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::LoadEffectiveAddress {
        addr: arg1.clone(),
        dst: v2,
        size: v3.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 4212.
    return v6;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\x64\inst.isle line 4219.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Hlt };
    // Rule at src\isa\x64\inst.isle line 4224.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Lzcnt, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4229.
    return v4;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Tzcnt, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4234.
    return v4;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 4239.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src\isa\x64\inst.isle line 4248.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src\isa\x64\inst.isle line 4259.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: Gpr) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src\isa\x64\inst.isle line 4268.
    return v11;
}

// Generated as internal constructor for term x64_blsi.
pub fn constructor_x64_blsi<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsi, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4279.
    return v4;
}

// Generated as internal constructor for term x64_blsmsk.
pub fn constructor_x64_blsmsk<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsmsk, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4284.
    return v4;
}

// Generated as internal constructor for term x64_blsr.
pub fn constructor_x64_blsr<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsr, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4289.
    return v4;
}

// Generated as internal constructor for term x64_sarx.
pub fn constructor_x64_sarx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Sarx, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 4294.
    return v4;
}

// Generated as internal constructor for term x64_shrx.
pub fn constructor_x64_shrx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shrx, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 4299.
    return v4;
}

// Generated as internal constructor for term x64_shlx.
pub fn constructor_x64_shlx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: Gpr) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shlx, arg2, arg1);
    // Rule at src\isa\x64\inst.isle line 4304.
    return v4;
}

// Generated as internal constructor for term x64_rorx.
pub fn constructor_x64_rorx<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem, arg2: u8) -> Gpr {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = constructor_unary_rm_r_imm_vex(ctx, &UnaryRmRImmVexOpcode::Rorx, arg1, v4, arg2);
    // Rule at src\isa\x64\inst.isle line 4309.
    return v5;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Popcnt, arg1, v3);
    // Rule at src\isa\x64\inst.isle line 4317.
    return v4;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4324.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4322.
    return v3;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4332.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4330.
    return v3;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4340.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4338.
    return v4;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4348.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4346.
    return v4;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4356.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4354.
    return v3;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4364.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4362.
    return v3;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxps, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4372.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxps, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4370.
    return v4;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxpd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4380.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxpd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4378.
    return v4;
}

// Generated as internal constructor for term x64_vfmadd213.
pub fn constructor_x64_vfmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4386.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4387.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4388.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4389.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd213", "src\\isa\\x64\\inst.isle line 4385"
    )
}

// Generated as internal constructor for term x64_vfmadd132.
pub fn constructor_x64_vfmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4393.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4394.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4395.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4396.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmadd132", "src\\isa\\x64\\inst.isle line 4392"
    )
}

// Generated as internal constructor for term x64_vfnmadd213.
pub fn constructor_x64_vfnmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4400.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4401.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4402.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4403.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd213", "src\\isa\\x64\\inst.isle line 4399"
    )
}

// Generated as internal constructor for term x64_vfnmadd132.
pub fn constructor_x64_vfnmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4407.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4408.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4409.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4410.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmadd132", "src\\isa\\x64\\inst.isle line 4406"
    )
}

// Generated as internal constructor for term x64_vfmsub213.
pub fn constructor_x64_vfmsub213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4414.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4415.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4416.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4417.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmsub213", "src\\isa\\x64\\inst.isle line 4413"
    )
}

// Generated as internal constructor for term x64_vfmsub132.
pub fn constructor_x64_vfmsub132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4421.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4422.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4423.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4424.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfmsub132", "src\\isa\\x64\\inst.isle line 4420"
    )
}

// Generated as internal constructor for term x64_vfnmsub213.
pub fn constructor_x64_vfnmsub213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4428.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4429.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4430.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4431.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmsub213", "src\\isa\\x64\\inst.isle line 4427"
    )
}

// Generated as internal constructor for term x64_vfnmsub132.
pub fn constructor_x64_vfnmsub132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132ss, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4435.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132sd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4436.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132ps, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4437.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132pd, arg1, arg2, arg3);
            // Rule at src\isa\x64\inst.isle line 4438.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_vfnmsub132", "src\\isa\\x64\\inst.isle line 4434"
    )
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4454.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4453.
    return v3;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtsd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4463.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtsd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4462.
    return v3;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtps, arg0);
        // Rule at src\isa\x64\inst.isle line 4470.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtps, v2);
    // Rule at src\isa\x64\inst.isle line 4469.
    return v3;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtpd, arg0);
        // Rule at src\isa\x64\inst.isle line 4477.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtpd, v2);
    // Rule at src\isa\x64\inst.isle line 4476.
    return v3;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtss2sd, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4486.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtss2sd, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4485.
    return v3;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtsd2ss, arg0, v6);
        // Rule at src\isa\x64\inst.isle line 4495.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtsd2ss, arg0, arg1);
    // Rule at src\isa\x64\inst.isle line 4494.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2ps, arg0);
        // Rule at src\isa\x64\inst.isle line 4502.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2ps, v2);
    // Rule at src\isa\x64\inst.isle line 4501.
    return v3;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtps2pd, arg0);
        // Rule at src\isa\x64\inst.isle line 4509.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtps2pd, v2);
    // Rule at src\isa\x64\inst.isle line 4508.
    return v3;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtpd2ps, arg0);
        // Rule at src\isa\x64\inst.isle line 4516.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtpd2ps, v2);
    // Rule at src\isa\x64\inst.isle line 4515.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2pd, arg0);
        // Rule at src\isa\x64\inst.isle line 4523.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2pd, v2);
    // Rule at src\isa\x64\inst.isle line 4522.
    return v3;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2ss, arg1, arg2, v4);
        // Rule at src\isa\x64\inst.isle line 4531.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2ss, arg1, arg2, v4);
    // Rule at src\isa\x64\inst.isle line 4529.
    return v5;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2sd, arg1, arg2, v4);
        // Rule at src\isa\x64\inst.isle line 4539.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2sd, arg1, arg2, v4);
    // Rule at src\isa\x64\inst.isle line 4537.
    return v5;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttps2dq, arg0);
        // Rule at src\isa\x64\inst.isle line 4547.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, v2);
    // Rule at src\isa\x64\inst.isle line 4545.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttpd2dq, arg0);
        // Rule at src\isa\x64\inst.isle line 4555.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, v2);
    // Rule at src\isa\x64\inst.isle line 4553.
    return v3;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4561.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4562.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4563.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse41(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 4564.
                return v7;
            }
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            let v8 = &C::xmm_to_xmm_mem(ctx, v5);
            let v10 = constructor_x64_pshufd(ctx, v8, 0xB1);
            let v11 = &C::xmm_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_pand(ctx, v5, v11);
            // Rule at src\isa\x64\inst.isle line 4573.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpeq", "src\\isa\\x64\\inst.isle line 4560"
    )
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4580.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4579.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4585.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4584.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4590.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4589.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4595.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4594.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4601.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4602.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4603.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse42(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
                // Rule at src\isa\x64\inst.isle line 4607.
                return v7;
            }
            let v9 = C::emit_u128_le_const(ctx, 0x800000000000000080000000);
            let v10 = &constructor_const_to_xmm_mem(ctx, v9);
            let v11 = constructor_x64_movdqu_load(ctx, v10);
            let v12 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v13 = constructor_x64_pxor(ctx, v11, v12);
            let v14 = constructor_x64_pxor(ctx, v11, arg2);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_pcmpgtd(ctx, v13, v15);
            let v17 = &C::xmm_to_xmm_mem(ctx, v16);
            let v19 = constructor_x64_pshufd(ctx, v17, 0xA0);
            let v20 = &C::xmm_to_xmm_mem(ctx, v16);
            let v22 = constructor_x64_pshufd(ctx, v20, 0xF5);
            let v23 = &C::xmm_to_xmm_mem(ctx, v14);
            let v24 = constructor_x64_pcmpeqd(ctx, v13, v23);
            let v25 = &C::xmm_to_xmm_mem(ctx, v24);
            let v26 = constructor_x64_pshufd(ctx, v25, 0xF5);
            let v27 = &C::xmm_to_xmm_mem(ctx, v26);
            let v28 = constructor_x64_pand(ctx, v19, v27);
            let v29 = &C::xmm_to_xmm_mem(ctx, v22);
            let v30 = constructor_x64_por(ctx, v28, v29);
            // Rule at src\isa\x64\inst.isle line 4636.
            return v30;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_pcmpgt", "src\\isa\\x64\\inst.isle line 4600"
    )
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtb, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4652.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtb, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4651.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtw, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4657.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtw, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4656.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtd, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4662.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtd, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4661.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtq, arg0, v7);
        // Rule at src\isa\x64\inst.isle line 4667.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtq, arg0, v3);
    // Rule at src\isa\x64\inst.isle line 4666.
    return v4;
}

// Generated as internal constructor for term alu_rm.
pub fn constructor_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: &Amode,
    arg3: Gpr,
) -> SideEffectNoResult {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::amode_to_synthetic_amode(ctx, arg2);
    let v6 = MInst::AluRM {
        size: v4.clone(),
        op: arg1.clone(),
        src1_dst: v5.clone(),
        src2: arg3,
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    // Rule at src\isa\x64\inst.isle line 4673.
    return v7;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4678.
    return v4.clone();
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4682.
    return v4.clone();
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4686.
    return v4.clone();
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4690.
    return v4.clone();
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v4 = &constructor_alu_rm(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src\isa\x64\inst.isle line 4694.
    return v4.clone();
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: &TrapCode) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src\isa\x64\inst.isle line 4699.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\x64\inst.isle line 4704.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\x64\inst.isle line 4709.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src\isa\x64\inst.isle line 4713.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_icmp", "src\\isa\\x64\\inst.isle line 4712"
    )
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src\isa\x64\inst.isle line 4717.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src\isa\x64\inst.isle line 4719.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src\isa\x64\inst.isle line 4721.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_fcmp", "src\\isa\\x64\\inst.isle line 4716"
    )
}

// Generated as internal constructor for term x64_movddup.
pub fn constructor_x64_movddup<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovddup, arg0);
        // Rule at src\isa\x64\inst.isle line 4728.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movddup, arg0);
    // Rule at src\isa\x64\inst.isle line 4726.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastb.
pub fn constructor_x64_vpbroadcastb<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastb, arg0);
    // Rule at src\isa\x64\inst.isle line 4734.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastw.
pub fn constructor_x64_vpbroadcastw<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastw, arg0);
    // Rule at src\isa\x64\inst.isle line 4739.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastd.
pub fn constructor_x64_vpbroadcastd<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastd, arg0);
    // Rule at src\isa\x64\inst.isle line 4744.
    return v2;
}

// Generated as internal constructor for term x64_vbroadcastss.
pub fn constructor_x64_vbroadcastss<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vbroadcastss, arg0);
    // Rule at src\isa\x64\inst.isle line 4749.
    return v2;
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown { dst: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\x64\inst.isle line 4756.
    return v2;
}

// Generated as internal constructor for term jmp_if.
pub fn constructor_jmp_if<C: Context>(ctx: &mut C, arg0: &CC, arg1: MachLabel) -> ConsumesFlags {
    let v2 = MInst::JmpIf {
        cc: arg0.clone(),
        taken: arg1,
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src\isa\x64\inst.isle line 4760.
    return v3;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src\isa\x64\inst.isle line 4765.
    return v4;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src\isa\x64\inst.isle line 4770.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_icmp", "src\\isa\\x64\\inst.isle line 4769"
    )
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src\isa\x64\inst.isle line 4775.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &constructor_jmp_if(ctx, v10, arg2);
            let v12 = &C::cc_invert(ctx, v9);
            let v13 = &constructor_jmp_cond(ctx, v12, arg2, arg1);
            let v14 = &constructor_consumes_flags_concat(ctx, v11, v13);
            let v15 = &constructor_with_flags_side_effect(ctx, v7, v14);
            // Rule at src\isa\x64\inst.isle line 4777.
            return v15.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v16,
            cc1: ref v17,
            cc2: ref v18,
        } => {
            let v19 = &constructor_jmp_if(ctx, v17, arg1);
            let v20 = &constructor_jmp_cond(ctx, v18, arg1, arg2);
            let v21 = &constructor_consumes_flags_concat(ctx, v19, v20);
            let v22 = &constructor_with_flags_side_effect(ctx, v16, v21);
            // Rule at src\isa\x64\inst.isle line 4782.
            return v22.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "jmp_cond_fcmp", "src\\isa\\x64\\inst.isle line 4774"
    )
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = C::writable_gpr_to_reg(ctx, v5);
    let v9 = MInst::JmpTableSeq {
        idx: v6,
        tmp1: v7,
        tmp2: v8,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v10 = SideEffectNoResult::Inst { inst: v9 };
    // Rule at src\isa\x64\inst.isle line 4802.
    return v10;
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src\isa\x64\inst.isle line 4821.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src\isa\x64\inst.isle line 4824.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_icmp_cond_result", "src\\isa\\x64\\inst.isle line 4823"
    )
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src\isa\x64\inst.isle line 4829.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_bool", "src\\isa\\x64\\inst.isle line 4828"
    )
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6
            {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src\isa\x64\inst.isle line 4838.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src\isa\x64\inst.isle line 4842.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_icmp", "src\\isa\\x64\\inst.isle line 4833"
    )
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        let v44 = C::put_in_regs(ctx, arg1);
        let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0);
        let v47 = C::put_in_regs(ctx, arg1);
        let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1);
        let v50 = C::put_in_regs(ctx, arg2);
        let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0);
        let v52 = C::put_in_regs(ctx, arg2);
        let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1);
        let v54 = &C::intcc_to_cc(ctx, arg0);
        let v55 = &constructor_emit_cmp_i128(ctx, v54, v49, v46, v53, v51);
        // Rule at src\isa\x64\inst.isle line 4873.
        return v55.clone();
    }
    let v29 = C::def_inst(ctx, arg1);
    if let Some(v30) = v29 {
        let v31 = &C::inst_data(ctx, v30);
        if let &InstructionData::UnaryImm {
            opcode: ref v32,
            imm: v33,
        } = v31
        {
            if let &Opcode::Iconst = v32 {
                let v34 = C::u64_from_imm64(ctx, v33);
                if v34 == 0x0 {
                    let v35 = C::value_type(ctx, arg2);
                    let v36 = &C::raw_operand_size_of_type(ctx, v35);
                    let v37 = C::put_in_reg(ctx, arg2);
                    let v38 = C::gpr_new(ctx, v37);
                    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
                    let v40 = &constructor_x64_test(ctx, v36, v38, v39);
                    let v41 = &C::intcc_swap_args(ctx, arg0);
                    let v42 = &C::intcc_to_cc(ctx, v41);
                    let v43 = &constructor_icmp_cond_result(ctx, v40, v42);
                    // Rule at src\isa\x64\inst.isle line 4866.
                    return v43.clone();
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg2);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data(ctx, v18);
        if let &InstructionData::UnaryImm {
            opcode: ref v20,
            imm: v21,
        } = v19
        {
            if let &Opcode::Iconst = v20 {
                let v22 = C::u64_from_imm64(ctx, v21);
                if v22 == 0x0 {
                    let v4 = &C::raw_operand_size_of_type(ctx, v2);
                    let v23 = C::put_in_reg(ctx, arg1);
                    let v24 = C::gpr_new(ctx, v23);
                    let v25 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                    let v26 = &constructor_x64_test(ctx, v4, v24, v25);
                    let v27 = &C::intcc_to_cc(ctx, arg0);
                    let v28 = &constructor_icmp_cond_result(ctx, v26, v27);
                    // Rule at src\isa\x64\inst.isle line 4861.
                    return v28.clone();
                }
            }
        }
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v12, v11);
        let v14 = &C::intcc_swap_args(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src\isa\x64\inst.isle line 4856.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src\isa\x64\inst.isle line 4849.
    return v9.clone();
}

// Generated as internal constructor for term emit_cmp_i128.
pub fn constructor_emit_cmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
    arg4: Gpr,
) -> IcmpCondResult {
    match arg0 {
        &CC::BE => {
            let v12 = &constructor_emit_cmp_i128(ctx, &CC::NB, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4888.
            return v12.clone();
        }
        &CC::NBE => {
            let v10 = &constructor_emit_cmp_i128(ctx, &CC::B, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4886.
            return v10.clone();
        }
        &CC::LE => {
            let v8 = &constructor_emit_cmp_i128(ctx, &CC::NL, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4884.
            return v8.clone();
        }
        &CC::NLE => {
            let v6 = &constructor_emit_cmp_i128(ctx, &CC::L, arg3, arg4, arg1, arg2);
            // Rule at src\isa\x64\inst.isle line 4882.
            return v6.clone();
        }
        _ => {}
    }
    let v13 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v14) = v13 {
        let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
        let v17 = constructor_x64_xor(ctx, I64, arg2, v16);
        let v18 = C::gpr_to_reg(ctx, v17);
        let v19 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
        let v20 = constructor_x64_xor(ctx, I64, arg1, v19);
        let v21 = C::gpr_to_reg(ctx, v20);
        let v23 = C::gpr_new(ctx, v18);
        let v24 = &constructor_reg_to_gpr_mem_imm(ctx, v21);
        let v25 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Or, I64, v23, v24);
        let v26 = &constructor_icmp_cond_result(ctx, v25, v14);
        // Rule at src\isa\x64\inst.isle line 4893.
        return v26.clone();
    }
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
    let v28 = &constructor_x64_cmp(ctx, &OperandSize::Size64, arg2, v16);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
    let v31 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Sbb, I64, arg1, v30);
    let v32 = &constructor_produces_flags_concat(ctx, v28, v31);
    let v33 = &constructor_icmp_cond_result(ctx, v32, arg0);
    // Rule at src\isa\x64\inst.isle line 4903.
    return v33.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(ctx: &mut C, arg0: &FcmpCondResult) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src\isa\x64\inst.isle line 4924.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src\isa\x64\inst.isle line 4927.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src\isa\x64\inst.isle line 4936.
            return v33;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcmp_bool", "src\\isa\\x64\\inst.isle line 4922"
    )
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v11 = FcmpCondResult::AndCondition {
                    producer: v8.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src\isa\x64\inst.isle line 4963.
                return v11;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v20 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NBE,
                };
                // Rule at src\isa\x64\inst.isle line 4979.
                return v20;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v22 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NB,
                };
                // Rule at src\isa\x64\inst.isle line 4981.
                return v22;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v30 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NBE,
                };
                // Rule at src\isa\x64\inst.isle line 4991.
                return v30;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v31 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NB,
                };
                // Rule at src\isa\x64\inst.isle line 4994.
                return v31;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v14 = FcmpCondResult::OrCondition {
                    producer: v8.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src\isa\x64\inst.isle line 4966.
                return v14;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v15 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NP,
                };
                // Rule at src\isa\x64\inst.isle line 4971.
                return v15;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v17 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NZ,
                };
                // Rule at src\isa\x64\inst.isle line 4975.
                return v17;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v16 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::P,
                };
                // Rule at src\isa\x64\inst.isle line 4973.
                return v16;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v18 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::Z,
                };
                // Rule at src\isa\x64\inst.isle line 4977.
                return v18;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v32 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::B,
                };
                // Rule at src\isa\x64\inst.isle line 4997.
                return v32;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v33 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::BE,
                };
                // Rule at src\isa\x64\inst.isle line 5000.
                return v33;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v24 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::B,
                };
                // Rule at src\isa\x64\inst.isle line 4983.
                return v24;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v26 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::BE,
                };
                // Rule at src\isa\x64\inst.isle line 4985.
                return v26;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_fcmp", "src\\isa\\x64\\inst.isle line 4961"
    )
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\x64\inst.isle line 5013.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 5017.
    return v10;
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MachAtomicRmwOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 5023.
    return v11;
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: u8, arg1: Xmm) -> Gpr {
    match arg0 {
        0x10 => {
            let v3 = constructor_x64_pextrw(ctx, arg1, 0x0);
            // Rule at src\isa\x64\inst.isle line 5038.
            return v3;
        }
        0x20 => {
            let v4 = constructor_x64_movd_to_gpr(ctx, arg1);
            // Rule at src\isa\x64\inst.isle line 5040.
            return v4;
        }
        0x40 => {
            let v5 = constructor_x64_movq_to_gpr(ctx, arg1);
            // Rule at src\isa\x64\inst.isle line 5042.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_xmm_to_gpr", "src\\isa\\x64\\inst.isle line 5037"
    )
}

// Generated as internal constructor for term bitcast_xmm_to_gprs.
pub fn constructor_bitcast_xmm_to_gprs<C: Context>(ctx: &mut C, arg0: Xmm) -> ValueRegs {
    let v1 = constructor_x64_movq_to_gpr(ctx, arg0);
    let v2 = C::gpr_to_reg(ctx, v1);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v5 = constructor_x64_pshufd(ctx, v3, 0xEE);
    let v6 = constructor_x64_movq_to_gpr(ctx, v5);
    let v7 = C::gpr_to_reg(ctx, v6);
    let v8 = C::value_regs(ctx, v2, v7);
    // Rule at src\isa\x64\inst.isle line 5046.
    return v8;
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: u8, arg1: Gpr) -> Xmm {
    match arg0 {
        0x10 => {
            let v2 = constructor_xmm_uninit_value(ctx);
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v5 = constructor_x64_pinsrw(ctx, v2, v3, 0x0);
            // Rule at src\isa\x64\inst.isle line 5050.
            return v5;
        }
        0x20 => {
            let v6 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v7 = constructor_x64_movd_to_xmm(ctx, v6);
            // Rule at src\isa\x64\inst.isle line 5052.
            return v7;
        }
        0x40 => {
            let v6 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v8 = constructor_x64_movq_to_xmm(ctx, v6);
            // Rule at src\isa\x64\inst.isle line 5054.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitcast_gpr_to_xmm", "src\\isa\\x64\\inst.isle line 5049"
    )
}

// Generated as internal constructor for term bitcast_gprs_to_xmm.
pub fn constructor_bitcast_gprs_to_xmm<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Xmm {
    let v2 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v3 = &C::gpr_to_gpr_mem(ctx, v2);
    let v4 = constructor_x64_movq_to_xmm(ctx, v3);
    let v6 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_gpr_mem(ctx, v6);
    let v8 = constructor_x64_movq_to_xmm(ctx, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_punpcklqdq(ctx, v4, v9);
    // Rule at src\isa\x64\inst.isle line 5058.
    return v10;
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5064.
    return v6;
}

// Generated as internal constructor for term x64_checked_srem_seq.
pub fn constructor_x64_checked_srem_seq<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CheckedSRemSeq {
        size: arg0.clone(),
        dividend_lo: arg1,
        dividend_hi: arg2,
        divisor: arg3,
        dst_quotient: v4,
        dst_remainder: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
    let v10 = C::value_regs(ctx, v8, v9);
    // Rule at src\isa\x64\inst.isle line 5073.
    return v10;
}

// Generated as internal constructor for term x64_checked_srem_seq8.
pub fn constructor_x64_checked_srem_seq8<C: Context>(ctx: &mut C, arg0: Gpr, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CheckedSRemSeq8 {
        dividend: arg0,
        divisor: arg1,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5080.
    return v5;
}

// Generated as internal constructor for term x64_div8.
pub fn constructor_x64_div8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
    arg2: &DivSignedness,
    arg3: &TrapCode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::Div8 {
        sign: arg2.clone(),
        trap: arg3.clone(),
        divisor: arg1.clone(),
        dividend: arg0,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src\isa\x64\inst.isle line 5087.
    return v7;
}

// Generated as internal constructor for term x64_div.
pub fn constructor_x64_div<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_gpr(ctx);
    let v8 = MInst::Div {
        size: arg3.clone(),
        sign: arg4.clone(),
        trap: arg5.clone(),
        divisor: arg2.clone(),
        dividend_lo: arg0,
        dividend_hi: arg1,
        dst_quotient: v6,
        dst_remainder: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = constructor_writable_gpr_to_r_reg(ctx, v6);
    let v11 = constructor_writable_gpr_to_r_reg(ctx, v7);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src\isa\x64\inst.isle line 5097.
    return v12;
}

// Generated as internal constructor for term x64_div_quotient.
pub fn constructor_x64_div_quotient<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x0);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src\isa\x64\inst.isle line 5105.
    return v9;
}

// Generated as internal constructor for term x64_div_remainder.
pub fn constructor_x64_div_remainder<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x1);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src\isa\x64\inst.isle line 5110.
    return v9;
}

// Generated as internal constructor for term x64_sign_extend_data.
pub fn constructor_x64_sign_extend_data<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &OperandSize,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::SignExtendData {
        size: arg1.clone(),
        src: arg0,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5115.
    return v5;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(ctx: &mut C) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5123.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src\isa\x64\inst.isle line 5127.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5169.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5176.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5183.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5270.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(ctx: &mut C, arg0: Reg) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg { reg: v2 };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src\isa\x64\inst.isle line 5273.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableGpr) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5277.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(ctx: &mut C, arg0: WritableGpr) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5280.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5283.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5286.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(ctx: &mut C, arg0: WritableXmm) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5289.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5292.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5299.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5297.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5302.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5305.
    return v2.clone();
}

// Generated as internal constructor for term const_to_xmm_mem.
pub fn constructor_const_to_xmm_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> XmmMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5310.
    return v2.clone();
}

// Generated as internal constructor for term const_to_reg_mem.
pub fn constructor_const_to_reg_mem<C: Context>(ctx: &mut C, arg0: VCodeConstant) -> RegMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = RegMem::Mem { addr: v1.clone() };
    // Rule at src\isa\x64\inst.isle line 5312.
    return v2;
}

// Generated as internal constructor for term xmm_to_xmm_mem_aligned.
pub fn constructor_xmm_to_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Xmm) -> XmmMemAligned {
    let v1 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5315.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem_aligned.
pub fn constructor_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMemAligned {
    let v1 = &constructor_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5317.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem_aligned.
pub fn constructor_synthetic_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMemAligned {
    let v1 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5319.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm_mem_aligned.
pub fn constructor_put_in_xmm_mem_aligned<C: Context>(ctx: &mut C, arg0: Value) -> XmmMemAligned {
    let v1 = &C::put_in_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src\isa\x64\inst.isle line 5321.
    return v2.clone();
}

// Generated as internal constructor for term copy_gpr.
pub fn constructor_copy_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::MovRR {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src\isa\x64\inst.isle line 5330.
    return v6;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src\isa\x64\inst.isle line 5338.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 5351.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src\isa\x64\inst.isle line 5355.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v6 = &C::inst_data(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v2260,
            args: ref v2261,
            flags: v2262,
        } => {
            if let &Opcode::AtomicCas = v2260 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v2233 = C::ty_int(ctx, v3);
                        if let Some(v2234) = v2233 {
                            let v2263 = C::unpack_value_array_3(ctx, v2261);
                            let v2267 = constructor_put_in_gpr(ctx, v2263.1);
                            let v2268 = constructor_put_in_gpr(ctx, v2263.2);
                            let v2269 = C::zero_offset(ctx);
                            let v2270 = &constructor_to_amode(ctx, v2262, v2263.0, v2269);
                            let v2271 = &C::amode_to_synthetic_amode(ctx, v2270);
                            let v2272 = constructor_x64_cmpxchg(ctx, v5, v2267, v2268, v2271);
                            let v2273 = constructor_output_gpr(ctx, v2272);
                            let v2274 = Some(v2273);
                            // Rule at src\isa\x64\lower.isle line 3323.
                            return v2274;
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v2275,
            args: ref v2276,
            flags: v2277,
            op: ref v2278,
        } => {
            if let &Opcode::AtomicRmw = v2275 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v2233 = C::ty_int(ctx, v3);
                        if let Some(v2234) = v2233 {
                            let v2282 = &C::atomic_rmw_op_to_mach_atomic_rmw_op(ctx, v2278);
                            let v2235 = C::zero_offset(ctx);
                            let v2279 = C::unpack_value_array_2(ctx, v2276);
                            let v2283 = &constructor_to_amode(ctx, v2277, v2279.0, v2235);
                            let v2284 = &C::amode_to_synthetic_amode(ctx, v2283);
                            let v2285 = constructor_put_in_gpr(ctx, v2279.1);
                            let v2286 =
                                constructor_x64_atomic_rmw_seq(ctx, v5, v2282, v2284, v2285);
                            let v2287 = constructor_output_gpr(ctx, v2286);
                            let v2288 = Some(v2287);
                            // Rule at src\isa\x64\lower.isle line 3339.
                            return v2288;
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v61,
            args: ref v62,
        } => {
            match v61 {
                &Opcode::Swizzle => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                    let v3039 = C::emit_u128_le_const(ctx, 0x70707070707070707070707070707070);
                    let v3040 = &constructor_const_to_xmm_mem(ctx, v3039);
                    let v3041 = constructor_x64_paddusb(ctx, v1670, v3040);
                    let v450 = constructor_put_in_xmm(ctx, v63.0);
                    let v3042 = C::xmm_to_reg(ctx, v3041);
                    let v3043 = &constructor_xmm_to_reg_mem(ctx, v3042);
                    let v3044 = &C::xmm_mem_to_reg_mem(ctx, v3043);
                    let v3045 = constructor_lower_pshufb(ctx, v450, v3044);
                    let v3046 = constructor_output_xmm(ctx, v3045);
                    let v3047 = Some(v3046);
                    // Rule at src\isa\x64\lower.isle line 4505.
                    return v3047;
                }
                &Opcode::X86Pshufb => {
                    let v680 = C::use_ssse3(ctx);
                    if v680 == true {
                        let v63 = C::unpack_value_array_2(ctx, v62);
                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                        let v3048 = constructor_x64_pshufb(ctx, v97, v98);
                        let v3049 = constructor_output_xmm(ctx, v3048);
                        let v3050 = Some(v3049);
                        // Rule at src\isa\x64\lower.isle line 4511.
                        return v3050;
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1065 = C::ty_vec128(ctx, v3);
                        if let Some(v1066) = v1065 {
                            let v1070 = constructor_has_pmins(ctx, v1066);
                            if v1070 == true {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1071 = constructor_x64_pmins(ctx, v1066, v97, v98);
                                let v1072 = constructor_output_xmm(ctx, v1071);
                                let v1073 = Some(v1072);
                                // Rule at src\isa\x64\lower.isle line 1734.
                                return v1073;
                            }
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v588 = constructor_put_in_xmm(ctx, v63.1);
                            let v419 = &C::xmm_to_xmm_mem(ctx, v97);
                            let v1074 = constructor_x64_pcmpgt(ctx, v1066, v588, v419);
                            let v421 = &C::xmm_to_xmm_mem(ctx, v97);
                            let v1075 = constructor_x64_pand(ctx, v1074, v421);
                            let v593 = &C::xmm_to_xmm_mem(ctx, v588);
                            let v1076 = constructor_x64_pandn(ctx, v1074, v593);
                            let v1077 = &C::xmm_to_xmm_mem(ctx, v1076);
                            let v1078 = constructor_x64_por(ctx, v1075, v1077);
                            let v1079 = constructor_output_xmm(ctx, v1078);
                            let v1080 = Some(v1079);
                            // Rule at src\isa\x64\lower.isle line 1738.
                            return v1080;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v1058 = constructor_cmp_and_choose(ctx, v5, &CC::L, v63.0, v63.1);
                            let v1059 = C::output(ctx, v1058);
                            let v1060 = Some(v1059);
                            // Rule at src\isa\x64\lower.isle line 1684.
                            return v1060;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1065 = C::ty_vec128(ctx, v3);
                        if let Some(v1066) = v1065 {
                            let v1105 = constructor_has_pminu(ctx, v1066);
                            if v1105 == true {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1106 = constructor_x64_pminu(ctx, v1066, v97, v98);
                                let v1107 = constructor_output_xmm(ctx, v1106);
                                let v1108 = Some(v1107);
                                // Rule at src\isa\x64\lower.isle line 1786.
                                return v1108;
                            }
                        }
                        if v3 == I16X8 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v209 = constructor_x64_psubusw(ctx, v97, v98);
                            let v1109 = &C::xmm_to_xmm_mem(ctx, v209);
                            let v1110 = constructor_x64_psubw(ctx, v97, v1109);
                            let v1111 = constructor_output_xmm(ctx, v1110);
                            let v1112 = Some(v1111);
                            // Rule at src\isa\x64\lower.isle line 1792.
                            return v1112;
                        }
                        if let Some(v1066) = v1065 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v588 = constructor_put_in_xmm(ctx, v63.1);
                            let v1090 = constructor_flip_high_bit_mask(ctx, v1066);
                            let v1091 = &C::xmm_to_xmm_mem(ctx, v1090);
                            let v1092 = constructor_x64_pxor(ctx, v97, v1091);
                            let v1093 = &C::xmm_to_xmm_mem(ctx, v1090);
                            let v1094 = constructor_x64_pxor(ctx, v588, v1093);
                            let v1113 = &C::xmm_to_xmm_mem(ctx, v1092);
                            let v1114 = constructor_x64_pcmpgt(ctx, v1066, v1094, v1113);
                            let v1097 = &C::xmm_to_xmm_mem(ctx, v97);
                            let v1115 = constructor_x64_pand(ctx, v1114, v1097);
                            let v1099 = &C::xmm_to_xmm_mem(ctx, v588);
                            let v1116 = constructor_x64_pandn(ctx, v1114, v1099);
                            let v1117 = &C::xmm_to_xmm_mem(ctx, v1116);
                            let v1118 = constructor_x64_por(ctx, v1115, v1117);
                            let v1119 = constructor_output_xmm(ctx, v1118);
                            let v1120 = Some(v1119);
                            // Rule at src\isa\x64\lower.isle line 1797.
                            return v1120;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v1050 = constructor_cmp_and_choose(ctx, v5, &CC::B, v63.0, v63.1);
                            let v1051 = C::output(ctx, v1050);
                            let v1052 = Some(v1051);
                            // Rule at src\isa\x64\lower.isle line 1678.
                            return v1052;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1065 = C::ty_vec128(ctx, v3);
                        if let Some(v1066) = v1065 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v588 = constructor_put_in_xmm(ctx, v63.1);
                            let v1067 = constructor_lower_vec_smax(ctx, v1066, v97, v588);
                            let v1068 = constructor_output_xmm(ctx, v1067);
                            let v1069 = Some(v1068);
                            // Rule at src\isa\x64\lower.isle line 1714.
                            return v1069;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v1062 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v63.0, v63.1);
                            let v1063 = C::output(ctx, v1062);
                            let v1064 = Some(v1063);
                            // Rule at src\isa\x64\lower.isle line 1687.
                            return v1064;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1065 = C::ty_vec128(ctx, v3);
                        if let Some(v1066) = v1065 {
                            let v1081 = constructor_has_pmaxu(ctx, v1066);
                            if v1081 == true {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1082 = constructor_x64_pmaxu(ctx, v1066, v97, v98);
                                let v1083 = constructor_output_xmm(ctx, v1082);
                                let v1084 = Some(v1083);
                                // Rule at src\isa\x64\lower.isle line 1750.
                                return v1084;
                            }
                        }
                        if v3 == I16X8 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v588 = constructor_put_in_xmm(ctx, v63.1);
                            let v419 = &C::xmm_to_xmm_mem(ctx, v97);
                            let v1085 = constructor_x64_psubusw(ctx, v588, v419);
                            let v1086 = &C::xmm_to_xmm_mem(ctx, v1085);
                            let v1087 = constructor_x64_paddw(ctx, v97, v1086);
                            let v1088 = constructor_output_xmm(ctx, v1087);
                            let v1089 = Some(v1088);
                            // Rule at src\isa\x64\lower.isle line 1756.
                            return v1089;
                        }
                        if let Some(v1066) = v1065 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v588 = constructor_put_in_xmm(ctx, v63.1);
                            let v1090 = constructor_flip_high_bit_mask(ctx, v1066);
                            let v1091 = &C::xmm_to_xmm_mem(ctx, v1090);
                            let v1092 = constructor_x64_pxor(ctx, v97, v1091);
                            let v1093 = &C::xmm_to_xmm_mem(ctx, v1090);
                            let v1094 = constructor_x64_pxor(ctx, v588, v1093);
                            let v1095 = &C::xmm_to_xmm_mem(ctx, v1094);
                            let v1096 = constructor_x64_pcmpgt(ctx, v1066, v1092, v1095);
                            let v1097 = &C::xmm_to_xmm_mem(ctx, v97);
                            let v1098 = constructor_x64_pand(ctx, v1096, v1097);
                            let v1099 = &C::xmm_to_xmm_mem(ctx, v588);
                            let v1100 = constructor_x64_pandn(ctx, v1096, v1099);
                            let v1101 = &C::xmm_to_xmm_mem(ctx, v1100);
                            let v1102 = constructor_x64_por(ctx, v1098, v1101);
                            let v1103 = constructor_output_xmm(ctx, v1102);
                            let v1104 = Some(v1103);
                            // Rule at src\isa\x64\lower.isle line 1763.
                            return v1104;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v1054 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v63.0, v63.1);
                            let v1055 = C::output(ctx, v1054);
                            let v1056 = Some(v1055);
                            // Rule at src\isa\x64\lower.isle line 1681.
                            return v1056;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v535 = constructor_x64_pavgb(ctx, v97, v98);
                                        let v536 = constructor_output_xmm(ctx, v535);
                                        let v537 = Some(v536);
                                        // Rule at src\isa\x64\lower.isle line 971.
                                        return v537;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v538 = constructor_x64_pavgw(ctx, v97, v98);
                                        let v539 = constructor_output_xmm(ctx, v538);
                                        let v540 = Some(v539);
                                        // Rule at src\isa\x64\lower.isle line 975.
                                        return v540;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v174 = constructor_x64_paddusb(ctx, v97, v98);
                                        let v175 = constructor_output_xmm(ctx, v174);
                                        let v176 = Some(v175);
                                        // Rule at src\isa\x64\lower.isle line 209.
                                        return v176;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v177 = constructor_x64_paddusw(ctx, v97, v98);
                                        let v178 = constructor_output_xmm(ctx, v177);
                                        let v179 = Some(v178);
                                        // Rule at src\isa\x64\lower.isle line 213.
                                        return v179;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v168 = constructor_x64_paddsb(ctx, v97, v98);
                                        let v169 = constructor_output_xmm(ctx, v168);
                                        let v170 = Some(v169);
                                        // Rule at src\isa\x64\lower.isle line 199.
                                        return v170;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v171 = constructor_x64_paddsw(ctx, v97, v98);
                                        let v172 = constructor_output_xmm(ctx, v171);
                                        let v173 = Some(v172);
                                        // Rule at src\isa\x64\lower.isle line 203.
                                        return v173;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v206 = constructor_x64_psubusb(ctx, v97, v98);
                                        let v207 = constructor_output_xmm(ctx, v206);
                                        let v208 = Some(v207);
                                        // Rule at src\isa\x64\lower.isle line 270.
                                        return v208;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v209 = constructor_x64_psubusw(ctx, v97, v98);
                                        let v210 = constructor_output_xmm(ctx, v209);
                                        let v211 = Some(v210);
                                        // Rule at src\isa\x64\lower.isle line 274.
                                        return v211;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v200 = constructor_x64_psubsb(ctx, v97, v98);
                                        let v201 = constructor_output_xmm(ctx, v200);
                                        let v202 = Some(v201);
                                        // Rule at src\isa\x64\lower.isle line 260.
                                        return v202;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v203 = constructor_x64_psubsw(ctx, v97, v98);
                                        let v204 = constructor_output_xmm(ctx, v203);
                                        let v205 = Some(v204);
                                        // Rule at src\isa\x64\lower.isle line 264.
                                        return v205;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v113 = constructor_value_regs_get_gpr(ctx, v111, 0x0);
                            let v115 = constructor_value_regs_get_gpr(ctx, v111, 0x1);
                            let v116 = C::put_in_regs(ctx, v63.1);
                            let v117 = constructor_value_regs_get_gpr(ctx, v116, 0x0);
                            let v118 = constructor_value_regs_get_gpr(ctx, v116, 0x1);
                            let v119 = &C::gpr_to_gpr_mem_imm(ctx, v117);
                            let v120 = &constructor_x64_add_with_flags_paired(ctx, I64, v113, v119);
                            let v121 = &C::gpr_to_gpr_mem_imm(ctx, v118);
                            let v122 = &constructor_x64_adc_paired(ctx, I64, v115, v121);
                            let v123 = constructor_with_flags(ctx, v120, v122);
                            let v124 = C::output(ctx, v123);
                            let v125 = Some(v124);
                            // Rule at src\isa\x64\lower.isle line 101.
                            return v125;
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v99 = constructor_x64_paddb(ctx, v97, v98);
                                        let v100 = constructor_output_xmm(ctx, v99);
                                        let v101 = Some(v100);
                                        // Rule at src\isa\x64\lower.isle line 84.
                                        return v101;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v102 = constructor_x64_paddw(ctx, v97, v98);
                                        let v103 = constructor_output_xmm(ctx, v102);
                                        let v104 = Some(v103);
                                        // Rule at src\isa\x64\lower.isle line 88.
                                        return v104;
                                    }
                                }
                                0x20 => {
                                    if v94.1 == 0x4 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v105 = constructor_x64_paddd(ctx, v97, v98);
                                        let v106 = constructor_output_xmm(ctx, v105);
                                        let v107 = Some(v106);
                                        // Rule at src\isa\x64\lower.isle line 92.
                                        return v107;
                                    }
                                }
                                0x40 => {
                                    if v94.1 == 0x2 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v108 = constructor_x64_paddq(ctx, v97, v98);
                                        let v109 = constructor_output_xmm(ctx, v108);
                                        let v110 = Some(v109);
                                        // Rule at src\isa\x64\lower.isle line 96.
                                        return v110;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v86 = &C::sinkable_load(ctx, v63.0);
                            if let Some(v87) = v86 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v89 = &constructor_sink_load_to_gpr_mem_imm(ctx, v87);
                                let v90 = constructor_x64_add(ctx, v5, v88, v89);
                                let v91 = constructor_output_gpr(ctx, v90);
                                let v92 = Some(v91);
                                // Rule at src\isa\x64\lower.isle line 78.
                                return v92;
                            }
                            let v80 = &C::sinkable_load(ctx, v63.1);
                            if let Some(v81) = v80 {
                                let v66 = constructor_put_in_gpr(ctx, v63.0);
                                let v82 = &constructor_sink_load_to_gpr_mem_imm(ctx, v81);
                                let v83 = constructor_x64_add(ctx, v5, v66, v82);
                                let v84 = constructor_output_gpr(ctx, v83);
                                let v85 = Some(v84);
                                // Rule at src\isa\x64\lower.isle line 75.
                                return v85;
                            }
                        }
                        let v71 = C::ty_32_or_64(ctx, v3);
                        if let Some(v72) = v71 {
                            let v74 = C::zero_offset(ctx);
                            let v73 = C::mem_flags_trusted(ctx);
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v75 = &constructor_to_amode_add(ctx, v73, v63.0, v63.1, v74);
                            let v76 = &C::amode_to_synthetic_amode(ctx, v75);
                            let v77 = constructor_x64_lea(ctx, v72, v76);
                            let v78 = constructor_output_gpr(ctx, v77);
                            let v79 = Some(v78);
                            // Rule at src\isa\x64\lower.isle line 69.
                            return v79;
                        }
                        let v59 = C::fits_in_16(ctx, v3);
                        if let Some(v60) = v59 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                            let v68 = constructor_x64_add(ctx, v60, v66, v67);
                            let v69 = constructor_output_gpr(ctx, v68);
                            let v70 = Some(v69);
                            // Rule at src\isa\x64\lower.isle line 58.
                            return v70;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v113 = constructor_value_regs_get_gpr(ctx, v111, 0x0);
                            let v115 = constructor_value_regs_get_gpr(ctx, v111, 0x1);
                            let v116 = C::put_in_regs(ctx, v63.1);
                            let v117 = constructor_value_regs_get_gpr(ctx, v116, 0x0);
                            let v118 = constructor_value_regs_get_gpr(ctx, v116, 0x1);
                            let v119 = &C::gpr_to_gpr_mem_imm(ctx, v117);
                            let v195 = &constructor_x64_sub_with_flags_paired(ctx, I64, v113, v119);
                            let v121 = &C::gpr_to_gpr_mem_imm(ctx, v118);
                            let v196 = &constructor_x64_sbb_paired(ctx, I64, v115, v121);
                            let v197 = constructor_with_flags(ctx, v195, v196);
                            let v198 = C::output(ctx, v197);
                            let v199 = Some(v198);
                            // Rule at src\isa\x64\lower.isle line 245.
                            return v199;
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x8 => {
                                    if v94.1 == 0x10 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v183 = constructor_x64_psubb(ctx, v97, v98);
                                        let v184 = constructor_output_xmm(ctx, v183);
                                        let v185 = Some(v184);
                                        // Rule at src\isa\x64\lower.isle line 228.
                                        return v185;
                                    }
                                }
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v186 = constructor_x64_psubw(ctx, v97, v98);
                                        let v187 = constructor_output_xmm(ctx, v186);
                                        let v188 = Some(v187);
                                        // Rule at src\isa\x64\lower.isle line 232.
                                        return v188;
                                    }
                                }
                                0x20 => {
                                    if v94.1 == 0x4 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v189 = constructor_x64_psubd(ctx, v97, v98);
                                        let v190 = constructor_output_xmm(ctx, v189);
                                        let v191 = Some(v190);
                                        // Rule at src\isa\x64\lower.isle line 236.
                                        return v191;
                                    }
                                }
                                0x40 => {
                                    if v94.1 == 0x2 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v192 = constructor_x64_psubq(ctx, v97, v98);
                                        let v193 = constructor_output_xmm(ctx, v192);
                                        let v194 = Some(v193);
                                        // Rule at src\isa\x64\lower.isle line 240.
                                        return v194;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                            let v180 = constructor_x64_sub(ctx, v5, v66, v67);
                            let v181 = constructor_output_gpr(ctx, v180);
                            let v182 = Some(v181);
                            // Rule at src\isa\x64\lower.isle line 222.
                            return v182;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            if v94.0 == 0x40 {
                                if v94.1 == 0x2 {
                                    let v438 = C::use_avx512vl(ctx);
                                    if v438 == true {
                                        let v606 = C::use_avx512dq(ctx);
                                        if v606 == true {
                                            let v63 = C::unpack_value_array_2(ctx, v62);
                                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                            let v607 = constructor_x64_vpmullq(ctx, v97, v98);
                                            let v608 = constructor_output_xmm(ctx, v607);
                                            let v609 = Some(v608);
                                            // Rule at src\isa\x64\lower.isle line 1065.
                                            return v609;
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v113 = constructor_value_regs_get_gpr(ctx, v111, 0x0);
                            let v115 = constructor_value_regs_get_gpr(ctx, v111, 0x1);
                            let v116 = C::put_in_regs(ctx, v63.1);
                            let v117 = constructor_value_regs_get_gpr(ctx, v116, 0x0);
                            let v118 = constructor_value_regs_get_gpr(ctx, v116, 0x1);
                            let v566 = &C::gpr_to_gpr_mem(ctx, v118);
                            let v567 = constructor_x64_imul(ctx, I64, v113, v566);
                            let v568 = &C::gpr_to_gpr_mem(ctx, v117);
                            let v569 = constructor_x64_imul(ctx, I64, v115, v568);
                            let v570 = &C::gpr_to_gpr_mem_imm(ctx, v569);
                            let v571 = constructor_x64_add(ctx, I64, v567, v570);
                            let v572 = &C::gpr_to_gpr_mem(ctx, v117);
                            let v573 = constructor_x64_mul(ctx, I64, false, v113, v572);
                            let v574 = constructor_value_regs_get_gpr(ctx, v573, 0x0);
                            let v575 = constructor_value_regs_get_gpr(ctx, v573, 0x1);
                            let v576 = &C::gpr_to_gpr_mem_imm(ctx, v575);
                            let v577 = constructor_x64_add(ctx, I64, v571, v576);
                            let v578 = constructor_value_gprs(ctx, v574, v577);
                            let v579 = C::output(ctx, v578);
                            let v580 = Some(v579);
                            // Rule at src\isa\x64\lower.isle line 1015.
                            return v580;
                        }
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x10 => {
                                    if v94.1 == 0x8 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v581 = constructor_x64_pmullw(ctx, v97, v98);
                                        let v582 = constructor_output_xmm(ctx, v581);
                                        let v583 = Some(v582);
                                        // Rule at src\isa\x64\lower.isle line 1042.
                                        return v583;
                                    }
                                }
                                0x20 => {
                                    if v94.1 == 0x4 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v237 = C::def_inst(ctx, v63.1);
                                        if let Some(v238) = v237 {
                                            let v239 = &C::inst_data(ctx, v238);
                                            if let &InstructionData::Unary {
                                                opcode: ref v240,
                                                arg: v241,
                                            } = v239
                                            {
                                                match v240 {
                                                    &Opcode::SwidenLow => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::SwidenLow = v250 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    let v629 =
                                                                        C::multi_lane(ctx, v628);
                                                                    if let Some(v630) = v629 {
                                                                        if v630.0 == 0x10 {
                                                                            if v630.1 == 0x8 {
                                                                                let v633 =
                                                                                    C::value_type(
                                                                                        ctx, v241,
                                                                                    );
                                                                                let v634 =
                                                                                    C::multi_lane(
                                                                                        ctx, v633,
                                                                                    );
                                                                                if let Some(v635) =
                                                                                    v634
                                                                                {
                                                                                    if v635.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v635.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v252 = constructor_put_in_xmm(ctx, v251);
                                                                                            let v638 = constructor_put_in_xmm(ctx, v241);
                                                                                            let v639 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v640 = constructor_x64_pmullw(ctx, v252, v639);
                                                                                            let v641 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v642 = constructor_x64_pmulhw(ctx, v252, v641);
                                                                                            let v643 = &C::xmm_to_xmm_mem(ctx, v642);
                                                                                            let v656 = constructor_x64_punpcklwd(ctx, v640, v643);
                                                                                            let v657 = constructor_output_xmm(ctx, v656);
                                                                                            let v658 = Some(v657);
                                                                                            // Rule at src\isa\x64\lower.isle line 1135.
                                                                                            return v658;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::SwidenHigh = v250 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    let v629 =
                                                                        C::multi_lane(ctx, v628);
                                                                    if let Some(v630) = v629 {
                                                                        if v630.0 == 0x10 {
                                                                            if v630.1 == 0x8 {
                                                                                let v633 =
                                                                                    C::value_type(
                                                                                        ctx, v241,
                                                                                    );
                                                                                let v634 =
                                                                                    C::multi_lane(
                                                                                        ctx, v633,
                                                                                    );
                                                                                if let Some(v635) =
                                                                                    v634
                                                                                {
                                                                                    if v635.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v635.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v252 = constructor_put_in_xmm(ctx, v251);
                                                                                            let v638 = constructor_put_in_xmm(ctx, v241);
                                                                                            let v639 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v640 = constructor_x64_pmullw(ctx, v252, v639);
                                                                                            let v641 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v642 = constructor_x64_pmulhw(ctx, v252, v641);
                                                                                            let v643 = &C::xmm_to_xmm_mem(ctx, v642);
                                                                                            let v644 = constructor_x64_punpckhwd(ctx, v640, v643);
                                                                                            let v645 = constructor_output_xmm(ctx, v644);
                                                                                            let v646 = Some(v645);
                                                                                            // Rule at src\isa\x64\lower.isle line 1112.
                                                                                            return v646;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::UwidenLow = v250 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    let v629 =
                                                                        C::multi_lane(ctx, v628);
                                                                    if let Some(v630) = v629 {
                                                                        if v630.0 == 0x10 {
                                                                            if v630.1 == 0x8 {
                                                                                let v633 =
                                                                                    C::value_type(
                                                                                        ctx, v241,
                                                                                    );
                                                                                let v634 =
                                                                                    C::multi_lane(
                                                                                        ctx, v633,
                                                                                    );
                                                                                if let Some(v635) =
                                                                                    v634
                                                                                {
                                                                                    if v635.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v635.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v252 = constructor_put_in_xmm(ctx, v251);
                                                                                            let v638 = constructor_put_in_xmm(ctx, v241);
                                                                                            let v639 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v640 = constructor_x64_pmullw(ctx, v252, v639);
                                                                                            let v641 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v666 = constructor_x64_pmulhuw(ctx, v252, v641);
                                                                                            let v667 = &C::xmm_to_xmm_mem(ctx, v666);
                                                                                            let v674 = constructor_x64_punpcklwd(ctx, v640, v667);
                                                                                            let v675 = constructor_output_xmm(ctx, v674);
                                                                                            let v676 = Some(v675);
                                                                                            // Rule at src\isa\x64\lower.isle line 1180.
                                                                                            return v676;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::UwidenHigh = v250 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    let v629 =
                                                                        C::multi_lane(ctx, v628);
                                                                    if let Some(v630) = v629 {
                                                                        if v630.0 == 0x10 {
                                                                            if v630.1 == 0x8 {
                                                                                let v633 =
                                                                                    C::value_type(
                                                                                        ctx, v241,
                                                                                    );
                                                                                let v634 =
                                                                                    C::multi_lane(
                                                                                        ctx, v633,
                                                                                    );
                                                                                if let Some(v635) =
                                                                                    v634
                                                                                {
                                                                                    if v635.0
                                                                                        == 0x10
                                                                                    {
                                                                                        if v635.1
                                                                                            == 0x8
                                                                                        {
                                                                                            let v252 = constructor_put_in_xmm(ctx, v251);
                                                                                            let v638 = constructor_put_in_xmm(ctx, v241);
                                                                                            let v639 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v640 = constructor_x64_pmullw(ctx, v252, v639);
                                                                                            let v641 = &C::xmm_to_xmm_mem(ctx, v638);
                                                                                            let v666 = constructor_x64_pmulhuw(ctx, v252, v641);
                                                                                            let v667 = &C::xmm_to_xmm_mem(ctx, v666);
                                                                                            let v668 = constructor_x64_punpckhwd(ctx, v640, v667);
                                                                                            let v669 = constructor_output_xmm(ctx, v668);
                                                                                            let v670 = Some(v669);
                                                                                            // Rule at src\isa\x64\lower.isle line 1158.
                                                                                            return v670;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v584 = C::use_sse41(ctx);
                                        if v584 == true {
                                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                            let v585 = constructor_x64_pmulld(ctx, v97, v98);
                                            let v586 = constructor_output_xmm(ctx, v585);
                                            let v587 = Some(v586);
                                            // Rule at src\isa\x64\lower.isle line 1045.
                                            return v587;
                                        }
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v588 = constructor_put_in_xmm(ctx, v63.1);
                                        let v419 = &C::xmm_to_xmm_mem(ctx, v97);
                                        let v590 = constructor_x64_pshufd(ctx, v419, 0x31);
                                        let v591 = &C::xmm_to_xmm_mem(ctx, v588);
                                        let v592 = constructor_x64_pshufd(ctx, v591, 0x31);
                                        let v593 = &C::xmm_to_xmm_mem(ctx, v588);
                                        let v594 = constructor_x64_pmuludq(ctx, v97, v593);
                                        let v595 = &C::xmm_to_xmm_mem(ctx, v594);
                                        let v597 = constructor_x64_pshufd(ctx, v595, 0x8);
                                        let v598 = &C::xmm_to_xmm_mem(ctx, v592);
                                        let v599 = constructor_x64_pmuludq(ctx, v590, v598);
                                        let v600 = &C::xmm_to_xmm_mem(ctx, v599);
                                        let v601 = constructor_x64_pshufd(ctx, v600, 0x8);
                                        let v602 = &C::xmm_to_xmm_mem(ctx, v601);
                                        let v603 = constructor_x64_punpckldq(ctx, v597, v602);
                                        let v604 = constructor_output_xmm(ctx, v603);
                                        let v605 = Some(v604);
                                        // Rule at src\isa\x64\lower.isle line 1052.
                                        return v605;
                                    }
                                }
                                0x40 => {
                                    if v94.1 == 0x2 {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v237 = C::def_inst(ctx, v63.1);
                                        if let Some(v238) = v237 {
                                            let v239 = &C::inst_data(ctx, v238);
                                            if let &InstructionData::Unary {
                                                opcode: ref v240,
                                                arg: v241,
                                            } = v239
                                            {
                                                match v240 {
                                                    &Opcode::SwidenLow => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::SwidenLow = v250 {
                                                                    let v584 = C::use_sse41(ctx);
                                                                    if v584 == true {
                                                                        let v628 = C::value_type(
                                                                            ctx, v251,
                                                                        );
                                                                        let v629 = C::multi_lane(
                                                                            ctx, v628,
                                                                        );
                                                                        if let Some(v630) = v629 {
                                                                            if v630.0 == 0x20 {
                                                                                if v630.1 == 0x4 {
                                                                                    let v633 = C::value_type(ctx, v241);
                                                                                    let v634 = C::multi_lane(ctx, v633);
                                                                                    if let Some(
                                                                                        v635,
                                                                                    ) = v634
                                                                                    {
                                                                                        if v635.0
                                                                                            == 0x20
                                                                                        {
                                                                                            if v635.1 == 0x4 {
                                                                                                let v647 = &C::put_in_xmm_mem(ctx, v251);
                                                                                                let v660 = constructor_x64_pshufd(ctx, v647, 0x50);
                                                                                                let v650 = &C::put_in_xmm_mem(ctx, v241);
                                                                                                let v661 = constructor_x64_pshufd(ctx, v650, 0x50);
                                                                                                let v662 = &C::xmm_to_xmm_mem(ctx, v661);
                                                                                                let v663 = constructor_x64_pmuldq(ctx, v660, v662);
                                                                                                let v664 = constructor_output_xmm(ctx, v663);
                                                                                                let v665 = Some(v664);
                                                                                                // Rule at src\isa\x64\lower.isle line 1147.
                                                                                                return v665;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::SwidenHigh = v250 {
                                                                    let v584 = C::use_sse41(ctx);
                                                                    if v584 == true {
                                                                        let v628 = C::value_type(
                                                                            ctx, v251,
                                                                        );
                                                                        let v629 = C::multi_lane(
                                                                            ctx, v628,
                                                                        );
                                                                        if let Some(v630) = v629 {
                                                                            if v630.0 == 0x20 {
                                                                                if v630.1 == 0x4 {
                                                                                    let v633 = C::value_type(ctx, v241);
                                                                                    let v634 = C::multi_lane(ctx, v633);
                                                                                    if let Some(
                                                                                        v635,
                                                                                    ) = v634
                                                                                    {
                                                                                        if v635.0
                                                                                            == 0x20
                                                                                        {
                                                                                            if v635.1 == 0x4 {
                                                                                                let v647 = &C::put_in_xmm_mem(ctx, v251);
                                                                                                let v649 = constructor_x64_pshufd(ctx, v647, 0xFA);
                                                                                                let v650 = &C::put_in_xmm_mem(ctx, v241);
                                                                                                let v651 = constructor_x64_pshufd(ctx, v650, 0xFA);
                                                                                                let v652 = &C::xmm_to_xmm_mem(ctx, v651);
                                                                                                let v653 = constructor_x64_pmuldq(ctx, v649, v652);
                                                                                                let v654 = constructor_output_xmm(ctx, v653);
                                                                                                let v655 = Some(v654);
                                                                                                // Rule at src\isa\x64\lower.isle line 1124.
                                                                                                return v655;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::UwidenLow = v250 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    let v629 =
                                                                        C::multi_lane(ctx, v628);
                                                                    if let Some(v630) = v629 {
                                                                        if v630.0 == 0x20 {
                                                                            if v630.1 == 0x4 {
                                                                                let v633 =
                                                                                    C::value_type(
                                                                                        ctx, v241,
                                                                                    );
                                                                                let v634 =
                                                                                    C::multi_lane(
                                                                                        ctx, v633,
                                                                                    );
                                                                                if let Some(v635) =
                                                                                    v634
                                                                                {
                                                                                    if v635.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v635.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v647 = &C::put_in_xmm_mem(ctx, v251);
                                                                                            let v660 = constructor_x64_pshufd(ctx, v647, 0x50);
                                                                                            let v650 = &C::put_in_xmm_mem(ctx, v241);
                                                                                            let v661 = constructor_x64_pshufd(ctx, v650, 0x50);
                                                                                            let v662 = &C::xmm_to_xmm_mem(ctx, v661);
                                                                                            let v677 = constructor_x64_pmuludq(ctx, v660, v662);
                                                                                            let v678 = constructor_output_xmm(ctx, v677);
                                                                                            let v679 = Some(v678);
                                                                                            // Rule at src\isa\x64\lower.isle line 1192.
                                                                                            return v679;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v247 = C::def_inst(ctx, v63.0);
                                                        if let Some(v248) = v247 {
                                                            let v249 = &C::inst_data(ctx, v248);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v250,
                                                                arg: v251,
                                                            } = v249
                                                            {
                                                                if let &Opcode::UwidenHigh = v250 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    let v629 =
                                                                        C::multi_lane(ctx, v628);
                                                                    if let Some(v630) = v629 {
                                                                        if v630.0 == 0x20 {
                                                                            if v630.1 == 0x4 {
                                                                                let v633 =
                                                                                    C::value_type(
                                                                                        ctx, v241,
                                                                                    );
                                                                                let v634 =
                                                                                    C::multi_lane(
                                                                                        ctx, v633,
                                                                                    );
                                                                                if let Some(v635) =
                                                                                    v634
                                                                                {
                                                                                    if v635.0
                                                                                        == 0x20
                                                                                    {
                                                                                        if v635.1
                                                                                            == 0x4
                                                                                        {
                                                                                            let v647 = &C::put_in_xmm_mem(ctx, v251);
                                                                                            let v649 = constructor_x64_pshufd(ctx, v647, 0xFA);
                                                                                            let v650 = &C::put_in_xmm_mem(ctx, v241);
                                                                                            let v651 = constructor_x64_pshufd(ctx, v650, 0xFA);
                                                                                            let v652 = &C::xmm_to_xmm_mem(ctx, v651);
                                                                                            let v671 = constructor_x64_pmuludq(ctx, v649, v652);
                                                                                            let v672 = constructor_output_xmm(ctx, v671);
                                                                                            let v673 = Some(v672);
                                                                                            // Rule at src\isa\x64\lower.isle line 1170.
                                                                                            return v673;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v588 = constructor_put_in_xmm(ctx, v63.1);
                                        let v611 = &C::xmi_imm(ctx, 0x20);
                                        let v612 = constructor_x64_psrlq(ctx, v97, v611);
                                        let v591 = &C::xmm_to_xmm_mem(ctx, v588);
                                        let v613 = constructor_x64_pmuludq(ctx, v612, v591);
                                        let v614 = &C::xmi_imm(ctx, 0x20);
                                        let v615 = constructor_x64_psrlq(ctx, v588, v614);
                                        let v616 = &C::xmm_to_xmm_mem(ctx, v615);
                                        let v617 = constructor_x64_pmuludq(ctx, v97, v616);
                                        let v618 = &C::xmm_to_xmm_mem(ctx, v617);
                                        let v619 = constructor_x64_paddq(ctx, v613, v618);
                                        let v620 = &C::xmi_imm(ctx, 0x20);
                                        let v621 = constructor_x64_psllq(ctx, v619, v620);
                                        let v622 = &C::xmm_to_xmm_mem(ctx, v588);
                                        let v623 = constructor_x64_pmuludq(ctx, v97, v622);
                                        let v624 = &C::xmm_to_xmm_mem(ctx, v621);
                                        let v625 = constructor_x64_paddq(ctx, v623, v624);
                                        let v626 = constructor_output_xmm(ctx, v625);
                                        let v627 = Some(v626);
                                        // Rule at src\isa\x64\lower.isle line 1090.
                                        return v627;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v548 = C::ty_int_ref_16_to_64(ctx, v3);
                        if let Some(v549) = v548 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v561 = C::i32_from_iconst(ctx, v63.0);
                            if let Some(v562) = v561 {
                                let v274 = &constructor_put_in_gpr_mem(ctx, v63.1);
                                let v563 = constructor_x64_imul_imm(ctx, v549, v274, v562);
                                let v564 = constructor_output_gpr(ctx, v563);
                                let v565 = Some(v564);
                                // Rule at src\isa\x64\lower.isle line 997.
                                return v565;
                            }
                            let v556 = C::i32_from_iconst(ctx, v63.1);
                            if let Some(v557) = v556 {
                                let v268 = &constructor_put_in_gpr_mem(ctx, v63.0);
                                let v558 = constructor_x64_imul_imm(ctx, v549, v268, v557);
                                let v559 = constructor_output_gpr(ctx, v558);
                                let v560 = Some(v559);
                                // Rule at src\isa\x64\lower.isle line 995.
                                return v560;
                            }
                            let v86 = &C::sinkable_load(ctx, v63.0);
                            if let Some(v87) = v86 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v544 = &constructor_sink_load_to_gpr_mem(ctx, v87);
                                let v553 = constructor_x64_imul(ctx, v549, v88, v544);
                                let v554 = constructor_output_gpr(ctx, v553);
                                let v555 = Some(v554);
                                // Rule at src\isa\x64\lower.isle line 991.
                                return v555;
                            }
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                            let v550 = constructor_x64_imul(ctx, v549, v66, v152);
                            let v551 = constructor_output_gpr(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src\isa\x64\lower.isle line 989.
                            return v552;
                        }
                        if v3 == I8 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v86 = &C::sinkable_load(ctx, v63.0);
                            if let Some(v87) = v86 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v544 = &constructor_sink_load_to_gpr_mem(ctx, v87);
                                let v545 = constructor_x64_mul8(ctx, false, v88, v544);
                                let v546 = constructor_output_gpr(ctx, v545);
                                let v547 = Some(v546);
                                // Rule at src\isa\x64\lower.isle line 986.
                                return v547;
                            }
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                            let v541 = constructor_x64_mul8(ctx, false, v66, v152);
                            let v542 = constructor_output_gpr(ctx, v541);
                            let v543 = Some(v542);
                            // Rule at src\isa\x64\lower.isle line 985.
                            return v543;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    let v2880 = C::ty_int_ref_16_to_64(ctx, v2700);
                    if let Some(v2881) = v2880 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v2882 = constructor_x64_mul(ctx, v2881, false, v66, v152);
                        let v2883 = constructor_value_regs_get_gpr(ctx, v2882, 0x1);
                        let v2884 = constructor_output_gpr(ctx, v2883);
                        let v2885 = Some(v2884);
                        // Rule at src\isa\x64\lower.isle line 4319.
                        return v2885;
                    }
                    if v2700 == I8 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v541 = constructor_x64_mul8(ctx, false, v66, v152);
                        let v2876 = &C::imm8_to_imm8_gpr(ctx, 0x8);
                        let v2877 = constructor_x64_shr(ctx, I16, v541, v2876);
                        let v2878 = constructor_output_gpr(ctx, v2877);
                        let v2879 = Some(v2878);
                        // Rule at src\isa\x64\lower.isle line 4316.
                        return v2879;
                    }
                }
                &Opcode::Smulhi => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    let v2880 = C::ty_int_ref_16_to_64(ctx, v2700);
                    if let Some(v2881) = v2880 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v2890 = constructor_x64_mul(ctx, v2881, true, v66, v152);
                        let v2891 = constructor_value_regs_get_gpr(ctx, v2890, 0x1);
                        let v2892 = constructor_output_gpr(ctx, v2891);
                        let v2893 = Some(v2892);
                        // Rule at src\isa\x64\lower.isle line 4327.
                        return v2893;
                    }
                    if v2700 == I8 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v2886 = constructor_x64_mul8(ctx, true, v66, v152);
                        let v2876 = &C::imm8_to_imm8_gpr(ctx, 0x8);
                        let v2887 = constructor_x64_sar(ctx, I16, v2886, v2876);
                        let v2888 = constructor_output_gpr(ctx, v2887);
                        let v2889 = Some(v2888);
                        // Rule at src\isa\x64\lower.isle line 4324.
                        return v2889;
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    if v2700 == I16X8 {
                        let v680 = C::use_ssse3(ctx);
                        if v680 == true {
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v588 = constructor_put_in_xmm(ctx, v63.1);
                            let v3255 =
                                C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
                            let v3256 = &constructor_const_to_xmm_mem(ctx, v3255);
                            let v591 = &C::xmm_to_xmm_mem(ctx, v588);
                            let v3257 = constructor_x64_pmulhrsw(ctx, v97, v591);
                            let v3258 = constructor_x64_pcmpeqw(ctx, v3257, v3256);
                            let v3259 = &C::xmm_to_xmm_mem(ctx, v3258);
                            let v3260 = constructor_x64_pxor(ctx, v3257, v3259);
                            let v3261 = constructor_output_xmm(ctx, v3260);
                            let v3262 = Some(v3261);
                            // Rule at src\isa\x64\lower.isle line 4803.
                            return v3262;
                        }
                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                        let v588 = constructor_put_in_xmm(ctx, v63.1);
                        let v2560 = &C::xmm_to_xmm_mem(ctx, v588);
                        let v3263 = constructor_x64_pmullw(ctx, v97, v2560);
                        let v591 = &C::xmm_to_xmm_mem(ctx, v588);
                        let v3264 = constructor_x64_pmulhw(ctx, v97, v591);
                        let v3265 = &C::xmm_to_xmm_mem(ctx, v3264);
                        let v3266 = constructor_x64_punpcklwd(ctx, v3263, v3265);
                        let v3267 = &C::xmm_to_xmm_mem(ctx, v3264);
                        let v3268 = constructor_x64_punpckhwd(ctx, v3263, v3267);
                        let v3270 = C::emit_u128_le_const(ctx, 0x4000000040000000400000004000);
                        let v3271 = &constructor_const_to_xmm_mem(ctx, v3270);
                        let v3272 = constructor_x64_movdqu_load(ctx, v3271);
                        let v3273 = &C::xmm_to_xmm_mem(ctx, v3272);
                        let v3274 = constructor_x64_paddd(ctx, v3266, v3273);
                        let v3275 = &C::xmm_to_xmm_mem(ctx, v3272);
                        let v3276 = constructor_x64_paddd(ctx, v3268, v3275);
                        let v3278 = &C::xmi_imm(ctx, 0xF);
                        let v3279 = constructor_x64_psrad(ctx, v3274, v3278);
                        let v3280 = &C::xmi_imm(ctx, 0xF);
                        let v3281 = constructor_x64_psrad(ctx, v3276, v3280);
                        let v3282 = &C::xmm_to_xmm_mem(ctx, v3281);
                        let v3283 = constructor_x64_packssdw(ctx, v3279, v3282);
                        let v3284 = constructor_output_xmm(ctx, v3283);
                        let v3285 = Some(v3284);
                        // Rule at src\isa\x64\lower.isle line 4819.
                        return v3285;
                    }
                }
                &Opcode::X86Pmulhrsw => {
                    let v680 = C::use_ssse3(ctx);
                    if v680 == true {
                        let v63 = C::unpack_value_array_2(ctx, v62);
                        let v2700 = C::value_type(ctx, v63.0);
                        if v2700 == I16X8 {
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v3286 = constructor_x64_pmulhrsw(ctx, v97, v98);
                            let v3287 = constructor_output_xmm(ctx, v3286);
                            let v3288 = Some(v3287);
                            // Rule at src\isa\x64\lower.isle line 4845.
                            return v3288;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    if v2700 == I8 {
                        let v2810 = constructor_extend_to_gpr(ctx, v63.0, I32, &ExtendKind::Zero);
                        let v465 = constructor_put_in_gpr(ctx, v63.1);
                        let v2811 = &C::gpr_to_gpr_mem(ctx, v465);
                        let v2814 = constructor_x64_div8(
                            ctx,
                            v2810,
                            v2811,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2815 = constructor_output_gpr(ctx, v2814);
                        let v2816 = Some(v2815);
                        // Rule at src\isa\x64\lower.isle line 4195.
                        return v2816;
                    }
                    let v2817 = C::fits_in_64(ctx, v2700);
                    if let Some(v2818) = v2817 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v16 = constructor_imm(ctx, I64, 0x0);
                        let v2819 = C::gpr_new(ctx, v16);
                        let v2820 = constructor_put_in_gpr(ctx, v63.1);
                        let v2821 = &C::gpr_to_gpr_mem(ctx, v2820);
                        let v2822 = &C::raw_operand_size_of_type(ctx, v2818);
                        let v2823 = constructor_x64_div_quotient(
                            ctx,
                            v66,
                            v2819,
                            v2821,
                            v2822,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2824 = C::output(ctx, v2823);
                        let v2825 = Some(v2824);
                        // Rule at src\isa\x64\lower.isle line 4204.
                        return v2825;
                    }
                }
                &Opcode::Sdiv => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    if v2700 == I8 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v2827 = constructor_x64_sign_extend_data(ctx, v66, &OperandSize::Size8);
                        let v2828 = constructor_nonzero_sdiv_divisor(ctx, I8, v63.1);
                        let v2829 = &C::reg_to_gpr_mem(ctx, v2828);
                        let v2832 = constructor_x64_div8(
                            ctx,
                            v2827,
                            v2829,
                            &DivSignedness::Signed,
                            &TrapCode::IntegerOverflow,
                        );
                        let v2833 = constructor_output_gpr(ctx, v2832);
                        let v2834 = Some(v2833);
                        // Rule at src\isa\x64\lower.isle line 4214.
                        return v2834;
                    }
                    let v2817 = C::fits_in_64(ctx, v2700);
                    if let Some(v2818) = v2817 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v2835 = &C::raw_operand_size_of_type(ctx, v2818);
                        let v2836 = constructor_x64_sign_extend_data(ctx, v66, v2835);
                        let v2837 = constructor_nonzero_sdiv_divisor(ctx, v2818, v63.1);
                        let v2838 = &C::reg_to_gpr_mem(ctx, v2837);
                        let v2839 = constructor_x64_div_quotient(
                            ctx,
                            v66,
                            v2836,
                            v2838,
                            v2835,
                            &DivSignedness::Signed,
                            &TrapCode::IntegerOverflow,
                        );
                        let v2840 = C::output(ctx, v2839);
                        let v2841 = Some(v2840);
                        // Rule at src\isa\x64\lower.isle line 4220.
                        return v2841;
                    }
                }
                &Opcode::Urem => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    if v2700 == I8 {
                        let v2810 = constructor_extend_to_gpr(ctx, v63.0, I32, &ExtendKind::Zero);
                        let v465 = constructor_put_in_gpr(ctx, v63.1);
                        let v2811 = &C::gpr_to_gpr_mem(ctx, v465);
                        let v2814 = constructor_x64_div8(
                            ctx,
                            v2810,
                            v2811,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v1611 = Imm8Reg::Imm8 { imm: 0x8 };
                        let v2842 = &C::imm8_reg_to_imm8_gpr(ctx, &v1611);
                        let v2843 = constructor_x64_shr(ctx, I64, v2814, v2842);
                        let v2844 = constructor_output_gpr(ctx, v2843);
                        let v2845 = Some(v2844);
                        // Rule at src\isa\x64\lower.isle line 4253.
                        return v2845;
                    }
                    let v2817 = C::fits_in_64(ctx, v2700);
                    if let Some(v2818) = v2817 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v16 = constructor_imm(ctx, I64, 0x0);
                        let v2819 = C::gpr_new(ctx, v16);
                        let v2820 = constructor_put_in_gpr(ctx, v63.1);
                        let v2821 = &C::gpr_to_gpr_mem(ctx, v2820);
                        let v2822 = &C::raw_operand_size_of_type(ctx, v2818);
                        let v2846 = constructor_x64_div_remainder(
                            ctx,
                            v66,
                            v2819,
                            v2821,
                            v2822,
                            &DivSignedness::Unsigned,
                            &TrapCode::IntegerDivisionByZero,
                        );
                        let v2847 = C::output(ctx, v2846);
                        let v2848 = Some(v2847);
                        // Rule at src\isa\x64\lower.isle line 4262.
                        return v2848;
                    }
                }
                &Opcode::Srem => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v237 = C::def_inst(ctx, v63.1);
                    if let Some(v238) = v237 {
                        let v239 = &C::inst_data(ctx, v238);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v436,
                            imm: v437,
                        } = v239
                        {
                            if let &Opcode::Iconst = v436 {
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == I8 {
                                    let v2849 = C::safe_divisor_from_imm64(ctx, I8, v437);
                                    if let Some(v2850) = v2849 {
                                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                                        let v2827 = constructor_x64_sign_extend_data(
                                            ctx,
                                            v66,
                                            &OperandSize::Size8,
                                        );
                                        let v2851 = constructor_imm(ctx, I8, v2850);
                                        let v2852 = &C::reg_to_gpr_mem(ctx, v2851);
                                        let v2853 = constructor_x64_div8(
                                            ctx,
                                            v2827,
                                            v2852,
                                            &DivSignedness::Signed,
                                            &TrapCode::IntegerDivisionByZero,
                                        );
                                        let v1611 = Imm8Reg::Imm8 { imm: 0x8 };
                                        let v2854 = &C::imm8_reg_to_imm8_gpr(ctx, &v1611);
                                        let v2855 = constructor_x64_shr(ctx, I64, v2853, v2854);
                                        let v2856 = constructor_output_gpr(ctx, v2855);
                                        let v2857 = Some(v2856);
                                        // Rule at src\isa\x64\lower.isle line 4277.
                                        return v2857;
                                    }
                                }
                                let v2858 = C::safe_divisor_from_imm64(ctx, v2700, v437);
                                if let Some(v2859) = v2858 {
                                    let v66 = constructor_put_in_gpr(ctx, v63.0);
                                    let v2860 = &C::raw_operand_size_of_type(ctx, v2700);
                                    let v2861 = constructor_x64_sign_extend_data(ctx, v66, v2860);
                                    let v2862 = constructor_imm(ctx, v2700, v2859);
                                    let v2863 = &C::reg_to_gpr_mem(ctx, v2862);
                                    let v2864 = constructor_x64_div_remainder(
                                        ctx,
                                        v66,
                                        v2861,
                                        v2863,
                                        v2860,
                                        &DivSignedness::Signed,
                                        &TrapCode::IntegerDivisionByZero,
                                    );
                                    let v2865 = C::output(ctx, v2864);
                                    let v2866 = Some(v2865);
                                    // Rule at src\isa\x64\lower.isle line 4286.
                                    return v2866;
                                }
                            }
                        }
                    }
                    let v2700 = C::value_type(ctx, v63.0);
                    if v2700 == I8 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v2827 = constructor_x64_sign_extend_data(ctx, v66, &OperandSize::Size8);
                        let v2867 = constructor_put_in_gpr(ctx, v63.1);
                        let v2868 = constructor_x64_checked_srem_seq8(ctx, v2827, v2867);
                        let v1611 = Imm8Reg::Imm8 { imm: 0x8 };
                        let v2842 = &C::imm8_reg_to_imm8_gpr(ctx, &v1611);
                        let v2869 = constructor_x64_shr(ctx, I64, v2868, v2842);
                        let v2870 = constructor_output_gpr(ctx, v2869);
                        let v2871 = Some(v2870);
                        // Rule at src\isa\x64\lower.isle line 4299.
                        return v2871;
                    }
                    let v66 = constructor_put_in_gpr(ctx, v63.0);
                    let v2860 = &C::raw_operand_size_of_type(ctx, v2700);
                    let v2861 = constructor_x64_sign_extend_data(ctx, v66, v2860);
                    let v2820 = constructor_put_in_gpr(ctx, v63.1);
                    let v2872 = constructor_x64_checked_srem_seq(ctx, v2860, v66, v2861, v2820);
                    let v2873 = C::value_regs_get(ctx, v2872, 0x1);
                    let v2874 = constructor_output_reg(ctx, v2873);
                    let v2875 = Some(v2874);
                    // Rule at src\isa\x64\lower.isle line 4305.
                    return v2875;
                }
                &Opcode::UaddOverflow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v126 = C::value_type(ctx, v63.1);
                    let v127 = C::fits_in_64(ctx, v126);
                    if let Some(v128) = v127 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                        let v131 = constructor_construct_overflow_op_alu(
                            ctx,
                            v128,
                            &CC::B,
                            &AluRmiROpcode::Add,
                            v66,
                            v67,
                        );
                        let v132 = Some(v131);
                        // Rule at src\isa\x64\lower.isle line 150.
                        return v132;
                    }
                    if v126 == I128 {
                        let v134 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::B,
                            &AluRmiROpcode::Add,
                            &AluRmiROpcode::Adc,
                            v63.0,
                            v63.1,
                        );
                        let v135 = Some(v134);
                        // Rule at src\isa\x64\lower.isle line 154.
                        return v135;
                    }
                }
                &Opcode::SaddOverflow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v126 = C::value_type(ctx, v63.1);
                    let v127 = C::fits_in_64(ctx, v126);
                    if let Some(v128) = v127 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                        let v137 = constructor_construct_overflow_op_alu(
                            ctx,
                            v128,
                            &CC::O,
                            &AluRmiROpcode::Add,
                            v66,
                            v67,
                        );
                        let v138 = Some(v137);
                        // Rule at src\isa\x64\lower.isle line 159.
                        return v138;
                    }
                    if v126 == I128 {
                        let v139 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::O,
                            &AluRmiROpcode::Add,
                            &AluRmiROpcode::Adc,
                            v63.0,
                            v63.1,
                        );
                        let v140 = Some(v139);
                        // Rule at src\isa\x64\lower.isle line 162.
                        return v140;
                    }
                }
                &Opcode::UsubOverflow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v126 = C::value_type(ctx, v63.1);
                    let v127 = C::fits_in_64(ctx, v126);
                    if let Some(v128) = v127 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                        let v142 = constructor_construct_overflow_op_alu(
                            ctx,
                            v128,
                            &CC::B,
                            &AluRmiROpcode::Sub,
                            v66,
                            v67,
                        );
                        let v143 = Some(v142);
                        // Rule at src\isa\x64\lower.isle line 167.
                        return v143;
                    }
                    if v126 == I128 {
                        let v145 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::B,
                            &AluRmiROpcode::Sub,
                            &AluRmiROpcode::Sbb,
                            v63.0,
                            v63.1,
                        );
                        let v146 = Some(v145);
                        // Rule at src\isa\x64\lower.isle line 170.
                        return v146;
                    }
                }
                &Opcode::SsubOverflow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v126 = C::value_type(ctx, v63.1);
                    let v127 = C::fits_in_64(ctx, v126);
                    if let Some(v128) = v127 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                        let v147 = constructor_construct_overflow_op_alu(
                            ctx,
                            v128,
                            &CC::O,
                            &AluRmiROpcode::Sub,
                            v66,
                            v67,
                        );
                        let v148 = Some(v147);
                        // Rule at src\isa\x64\lower.isle line 175.
                        return v148;
                    }
                    if v126 == I128 {
                        let v149 = constructor_construct_overflow_op_alu_128(
                            ctx,
                            &CC::O,
                            &AluRmiROpcode::Sub,
                            &AluRmiROpcode::Sbb,
                            v63.0,
                            v63.1,
                        );
                        let v150 = Some(v149);
                        // Rule at src\isa\x64\lower.isle line 178.
                        return v150;
                    }
                }
                &Opcode::UmulOverflow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v126 = C::value_type(ctx, v63.1);
                    let v156 = C::ty_int_ref_16_to_64(ctx, v126);
                    if let Some(v157) = v156 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v158 =
                            &constructor_x64_mul_lo_with_flags_paired(ctx, v157, false, v66, v152);
                        let v159 = constructor_construct_overflow_op(ctx, &CC::O, v158);
                        let v160 = Some(v159);
                        // Rule at src\isa\x64\lower.isle line 186.
                        return v160;
                    }
                    if v126 == I8 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v153 = &constructor_x64_mul8_with_flags_paired(ctx, false, v66, v152);
                        let v154 = constructor_construct_overflow_op(ctx, &CC::O, v153);
                        let v155 = Some(v154);
                        // Rule at src\isa\x64\lower.isle line 183.
                        return v155;
                    }
                }
                &Opcode::SmulOverflow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v126 = C::value_type(ctx, v63.1);
                    let v156 = C::ty_int_ref_16_to_64(ctx, v126);
                    if let Some(v157) = v156 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v165 =
                            &constructor_x64_mul_lo_with_flags_paired(ctx, v157, true, v66, v152);
                        let v166 = constructor_construct_overflow_op(ctx, &CC::O, v165);
                        let v167 = Some(v166);
                        // Rule at src\isa\x64\lower.isle line 194.
                        return v167;
                    }
                    if v126 == I8 {
                        let v66 = constructor_put_in_gpr(ctx, v63.0);
                        let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                        let v162 = &constructor_x64_mul8_with_flags_paired(ctx, true, v66, v152);
                        let v163 = constructor_construct_overflow_op(ctx, &CC::O, v162);
                        let v164 = Some(v163);
                        // Rule at src\isa\x64\lower.isle line 191.
                        return v164;
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v71 = C::ty_32_or_64(ctx, v3);
                        if let Some(v72) = v71 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v266 = constructor_val_minus_one(ctx, v63.1);
                            if let Some(v267) = v266 {
                                let v285 = C::use_bmi2(ctx);
                                if v285 == true {
                                    let v286 = C::def_inst(ctx, v267);
                                    if let Some(v287) = v286 {
                                        let v288 = &C::inst_data(ctx, v287);
                                        if let &InstructionData::Binary {
                                            opcode: ref v289,
                                            args: ref v290,
                                        } = v288
                                        {
                                            if let &Opcode::Ishl = v289 {
                                                let v291 = C::unpack_value_array_2(ctx, v290);
                                                let v294 = C::def_inst(ctx, v291.0);
                                                if let Some(v295) = v294 {
                                                    let v296 = &C::inst_data(ctx, v295);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v297,
                                                        imm: v298,
                                                    } = v296
                                                    {
                                                        if let &Opcode::Iconst = v297 {
                                                            let v299 = C::u64_from_imm64(ctx, v298);
                                                            if v299 == 0x1 {
                                                                let v268 =
                                                                    &constructor_put_in_gpr_mem(
                                                                        ctx, v63.0,
                                                                    );
                                                                let v300 = constructor_put_in_gpr(
                                                                    ctx, v291.1,
                                                                );
                                                                let v301 = C::ty_bits(ctx, v72);
                                                                let v302 = C::u8_as_u32(ctx, v301);
                                                                let v304 =
                                                                    C::u32_sub(ctx, v302, 0x1);
                                                                let v305 =
                                                                    RegMemImm::Imm { simm32: v304 };
                                                                let v306 =
                                                                    &C::gpr_mem_imm_new(ctx, &v305);
                                                                let v307 = constructor_x64_and(
                                                                    ctx, v72, v300, v306,
                                                                );
                                                                let v308 = constructor_x64_bzhi(
                                                                    ctx, v72, v268, v307,
                                                                );
                                                                let v309 = constructor_output_gpr(
                                                                    ctx, v308,
                                                                );
                                                                let v310 = Some(v309);
                                                                // Rule at src\isa\x64\lower.isle line 397.
                                                                return v310;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v256 = C::use_bmi1(ctx);
                            if v256 == true {
                                let v237 = C::def_inst(ctx, v63.1);
                                if let Some(v238) = v237 {
                                    let v239 = &C::inst_data(ctx, v238);
                                    if let &InstructionData::Unary {
                                        opcode: ref v240,
                                        arg: v241,
                                    } = v239
                                    {
                                        if let &Opcode::Ineg = v240 {
                                            if v63.0 == v241 {
                                                let v268 = &constructor_put_in_gpr_mem(ctx, v63.0);
                                                let v282 = constructor_x64_blsi(ctx, v72, v268);
                                                let v283 = constructor_output_gpr(ctx, v282);
                                                let v284 = Some(v283);
                                                // Rule at src\isa\x64\lower.isle line 384.
                                                return v284;
                                            }
                                        }
                                    }
                                }
                                let v247 = C::def_inst(ctx, v63.0);
                                if let Some(v248) = v247 {
                                    let v249 = &C::inst_data(ctx, v248);
                                    if let &InstructionData::Unary {
                                        opcode: ref v250,
                                        arg: v251,
                                    } = v249
                                    {
                                        if let &Opcode::Ineg = v250 {
                                            if v63.1 == v251 {
                                                let v278 = &constructor_put_in_gpr_mem(ctx, v251);
                                                let v279 = constructor_x64_blsi(ctx, v72, v278);
                                                let v280 = constructor_output_gpr(ctx, v279);
                                                let v281 = Some(v280);
                                                // Rule at src\isa\x64\lower.isle line 381.
                                                return v281;
                                            }
                                        }
                                    }
                                }
                                let v272 = constructor_val_minus_one(ctx, v63.0);
                                if let Some(v273) = v272 {
                                    if v63.1 == v273 {
                                        let v274 = &constructor_put_in_gpr_mem(ctx, v63.1);
                                        let v275 = constructor_x64_blsr(ctx, v72, v274);
                                        let v276 = constructor_output_gpr(ctx, v275);
                                        let v277 = Some(v276);
                                        // Rule at src\isa\x64\lower.isle line 374.
                                        return v277;
                                    }
                                }
                                if let Some(v267) = v266 {
                                    if v63.0 == v267 {
                                        let v268 = &constructor_put_in_gpr_mem(ctx, v63.0);
                                        let v269 = constructor_x64_blsr(ctx, v72, v268);
                                        let v270 = constructor_output_gpr(ctx, v269);
                                        let v271 = Some(v270);
                                        // Rule at src\isa\x64\lower.isle line 370.
                                        return v271;
                                    }
                                }
                            }
                        }
                        let v212 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v213) = v212 {
                            let v256 = C::use_bmi1(ctx);
                            if v256 == true {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v247 = C::def_inst(ctx, v63.0);
                                if let Some(v248) = v247 {
                                    let v249 = &C::inst_data(ctx, v248);
                                    if let &InstructionData::Unary {
                                        opcode: ref v250,
                                        arg: v251,
                                    } = v249
                                    {
                                        if let &Opcode::Bnot = v250 {
                                            let v262 = constructor_put_in_gpr(ctx, v251);
                                            let v152 = &constructor_put_in_gpr_mem(ctx, v63.1);
                                            let v263 = constructor_x64_andn(ctx, v3, v262, v152);
                                            let v264 = constructor_output_gpr(ctx, v263);
                                            let v265 = Some(v264);
                                            // Rule at src\isa\x64\lower.isle line 358.
                                            return v265;
                                        }
                                    }
                                }
                                let v237 = C::def_inst(ctx, v63.1);
                                if let Some(v238) = v237 {
                                    let v239 = &C::inst_data(ctx, v238);
                                    if let &InstructionData::Unary {
                                        opcode: ref v240,
                                        arg: v241,
                                    } = v239
                                    {
                                        if let &Opcode::Bnot = v240 {
                                            let v257 = constructor_put_in_gpr(ctx, v241);
                                            let v258 = &constructor_put_in_gpr_mem(ctx, v63.0);
                                            let v259 = constructor_x64_andn(ctx, v3, v257, v258);
                                            let v260 = constructor_output_gpr(ctx, v259);
                                            let v261 = Some(v260);
                                            // Rule at src\isa\x64\lower.isle line 353.
                                            return v261;
                                        }
                                    }
                                }
                            }
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v247 = C::def_inst(ctx, v63.0);
                            if let Some(v248) = v247 {
                                let v249 = &C::inst_data(ctx, v248);
                                if let &InstructionData::Unary {
                                    opcode: ref v250,
                                    arg: v251,
                                } = v249
                                {
                                    if let &Opcode::Bnot = v250 {
                                        let v252 = constructor_put_in_xmm(ctx, v251);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v253 = constructor_sse_and_not(ctx, v3, v252, v98);
                                        let v254 = constructor_output_xmm(ctx, v253);
                                        let v255 = Some(v254);
                                        // Rule at src\isa\x64\lower.isle line 350.
                                        return v255;
                                    }
                                }
                            }
                            let v237 = C::def_inst(ctx, v63.1);
                            if let Some(v238) = v237 {
                                let v239 = &C::inst_data(ctx, v238);
                                if let &InstructionData::Unary {
                                    opcode: ref v240,
                                    arg: v241,
                                } = v239
                                {
                                    if let &Opcode::Bnot = v240 {
                                        let v242 = constructor_put_in_xmm(ctx, v241);
                                        let v243 = &C::put_in_xmm_mem(ctx, v63.0);
                                        let v244 = constructor_sse_and_not(ctx, v3, v242, v243);
                                        let v245 = constructor_output_xmm(ctx, v244);
                                        let v246 = Some(v245);
                                        // Rule at src\isa\x64\lower.isle line 348.
                                        return v246;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v233 = C::put_in_regs(ctx, v63.1);
                            let v234 = constructor_and_i128(ctx, v111, v233);
                            let v235 = C::output(ctx, v234);
                            let v236 = Some(v235);
                            // Rule at src\isa\x64\lower.isle line 329.
                            return v236;
                        }
                        if let Some(v94) = v93 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v230 = constructor_sse_and(ctx, v3, v97, v98);
                            let v231 = constructor_output_xmm(ctx, v230);
                            let v232 = Some(v231);
                            // Rule at src\isa\x64\lower.isle line 312.
                            return v232;
                        }
                        let v225 = C::ty_scalar_float(ctx, v3);
                        if let Some(v226) = v225 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v227 = constructor_sse_and(ctx, v226, v97, v98);
                            let v228 = constructor_output_xmm(ctx, v227);
                            let v229 = Some(v228);
                            // Rule at src\isa\x64\lower.isle line 300.
                            return v229;
                        }
                        if let Some(v213) = v212 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v220 = &C::simm32_from_value(ctx, v63.0);
                            if let Some(v221) = v220 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v222 = constructor_x64_and(ctx, v3, v88, v221);
                                let v223 = constructor_output_gpr(ctx, v222);
                                let v224 = Some(v223);
                                // Rule at src\isa\x64\lower.isle line 294.
                                return v224;
                            }
                            let v86 = &C::sinkable_load(ctx, v63.0);
                            if let Some(v87) = v86 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v89 = &constructor_sink_load_to_gpr_mem_imm(ctx, v87);
                                let v217 = constructor_x64_and(ctx, v3, v88, v89);
                                let v218 = constructor_output_gpr(ctx, v217);
                                let v219 = Some(v218);
                                // Rule at src\isa\x64\lower.isle line 290.
                                return v219;
                            }
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                            let v214 = constructor_x64_and(ctx, v3, v66, v67);
                            let v215 = constructor_output_gpr(ctx, v214);
                            let v216 = Some(v215);
                            // Rule at src\isa\x64\lower.isle line 283.
                            return v216;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v233 = C::put_in_regs(ctx, v63.1);
                            let v326 = constructor_or_i128(ctx, v111, v233);
                            let v327 = C::output(ctx, v326);
                            let v328 = Some(v327);
                            // Rule at src\isa\x64\lower.isle line 451.
                            return v328;
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v323 = constructor_sse_or(ctx, v3, v97, v98);
                            let v324 = constructor_output_xmm(ctx, v323);
                            let v325 = Some(v324);
                            // Rule at src\isa\x64\lower.isle line 436.
                            return v325;
                        }
                        let v225 = C::ty_scalar_float(ctx, v3);
                        if let Some(v226) = v225 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v320 = constructor_sse_or(ctx, v226, v97, v98);
                            let v321 = constructor_output_xmm(ctx, v320);
                            let v322 = Some(v321);
                            // Rule at src\isa\x64\lower.isle line 424.
                            return v322;
                        }
                        let v212 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v213) = v212 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v220 = &C::simm32_from_value(ctx, v63.0);
                            if let Some(v221) = v220 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v317 = constructor_x64_or(ctx, v3, v88, v221);
                                let v318 = constructor_output_gpr(ctx, v317);
                                let v319 = Some(v318);
                                // Rule at src\isa\x64\lower.isle line 418.
                                return v319;
                            }
                            let v86 = &C::sinkable_load(ctx, v63.0);
                            if let Some(v87) = v86 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v89 = &constructor_sink_load_to_gpr_mem_imm(ctx, v87);
                                let v314 = constructor_x64_or(ctx, v3, v88, v89);
                                let v315 = constructor_output_gpr(ctx, v314);
                                let v316 = Some(v315);
                                // Rule at src\isa\x64\lower.isle line 414.
                                return v316;
                            }
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                            let v311 = constructor_x64_or(ctx, v3, v66, v67);
                            let v312 = constructor_output_gpr(ctx, v311);
                            let v313 = Some(v312);
                            // Rule at src\isa\x64\lower.isle line 407.
                            return v313;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v71 = C::ty_32_or_64(ctx, v3);
                        if let Some(v72) = v71 {
                            let v256 = C::use_bmi1(ctx);
                            if v256 == true {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v272 = constructor_val_minus_one(ctx, v63.0);
                                if let Some(v273) = v272 {
                                    if v63.1 == v273 {
                                        let v274 = &constructor_put_in_gpr_mem(ctx, v63.1);
                                        let v352 = constructor_x64_blsmsk(ctx, v72, v274);
                                        let v353 = constructor_output_gpr(ctx, v352);
                                        let v354 = Some(v353);
                                        // Rule at src\isa\x64\lower.isle line 502.
                                        return v354;
                                    }
                                }
                                let v266 = constructor_val_minus_one(ctx, v63.1);
                                if let Some(v267) = v266 {
                                    if v63.0 == v267 {
                                        let v268 = &constructor_put_in_gpr_mem(ctx, v63.0);
                                        let v349 = constructor_x64_blsmsk(ctx, v72, v268);
                                        let v350 = constructor_output_gpr(ctx, v349);
                                        let v351 = Some(v350);
                                        // Rule at src\isa\x64\lower.isle line 498.
                                        return v351;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v113 = constructor_value_regs_get_gpr(ctx, v111, 0x0);
                            let v115 = constructor_value_regs_get_gpr(ctx, v111, 0x1);
                            let v116 = C::put_in_regs(ctx, v63.1);
                            let v117 = constructor_value_regs_get_gpr(ctx, v116, 0x0);
                            let v118 = constructor_value_regs_get_gpr(ctx, v116, 0x1);
                            let v119 = &C::gpr_to_gpr_mem_imm(ctx, v117);
                            let v344 = constructor_x64_xor(ctx, I64, v113, v119);
                            let v121 = &C::gpr_to_gpr_mem_imm(ctx, v118);
                            let v345 = constructor_x64_xor(ctx, I64, v115, v121);
                            let v346 = constructor_value_gprs(ctx, v344, v345);
                            let v347 = C::output(ctx, v346);
                            let v348 = Some(v347);
                            // Rule at src\isa\x64\lower.isle line 486.
                            return v348;
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v341 = constructor_x64_xor_vector(ctx, v3, v97, v98);
                            let v342 = constructor_output_xmm(ctx, v341);
                            let v343 = Some(v342);
                            // Rule at src\isa\x64\lower.isle line 481.
                            return v343;
                        }
                        let v225 = C::ty_scalar_float(ctx, v3);
                        if let Some(v226) = v225 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v97 = constructor_put_in_xmm(ctx, v63.0);
                            let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                            let v338 = constructor_x64_xor_vector(ctx, v226, v97, v98);
                            let v339 = constructor_output_xmm(ctx, v338);
                            let v340 = Some(v339);
                            // Rule at src\isa\x64\lower.isle line 476.
                            return v340;
                        }
                        let v212 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v213) = v212 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v220 = &C::simm32_from_value(ctx, v63.0);
                            if let Some(v221) = v220 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v335 = constructor_x64_xor(ctx, v3, v88, v221);
                                let v336 = constructor_output_gpr(ctx, v335);
                                let v337 = Some(v336);
                                // Rule at src\isa\x64\lower.isle line 470.
                                return v337;
                            }
                            let v86 = &C::sinkable_load(ctx, v63.0);
                            if let Some(v87) = v86 {
                                let v88 = constructor_put_in_gpr(ctx, v63.1);
                                let v89 = &constructor_sink_load_to_gpr_mem_imm(ctx, v87);
                                let v332 = constructor_x64_xor(ctx, v3, v88, v89);
                                let v333 = constructor_output_gpr(ctx, v332);
                                let v334 = Some(v333);
                                // Rule at src\isa\x64\lower.isle line 466.
                                return v334;
                            }
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v67 = &constructor_put_in_gpr_mem_imm(ctx, v63.1);
                            let v329 = constructor_x64_xor(ctx, v3, v66, v67);
                            let v330 = constructor_output_gpr(ctx, v329);
                            let v331 = Some(v330);
                            // Rule at src\isa\x64\lower.isle line 459.
                            return v331;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v475 = constructor_lo_gpr(ctx, v63.1);
                            let v476 = constructor_shl_i128(ctx, v111, v475);
                            let v478 = constructor_imm(ctx, I64, 0x80);
                            let v479 = C::gpr_new(ctx, v478);
                            let v480 = &C::gpr_to_gpr_mem_imm(ctx, v475);
                            let v481 = constructor_x64_sub(ctx, I64, v479, v480);
                            let v482 = constructor_shr_i128(ctx, v111, v481);
                            let v483 = constructor_or_i128(ctx, v476, v482);
                            let v484 = C::output(ctx, v483);
                            let v485 = Some(v484);
                            // Rule at src\isa\x64\lower.isle line 908.
                            return v485;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v355 = &constructor_put_masked_in_imm8_gpr(ctx, v63.1, v5);
                            let v472 = constructor_x64_rotl(ctx, v5, v66, v355);
                            let v473 = constructor_output_gpr(ctx, v472);
                            let v474 = Some(v473);
                            // Rule at src\isa\x64\lower.isle line 902.
                            return v474;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v111 = C::put_in_regs(ctx, v63.0);
                            let v475 = constructor_lo_gpr(ctx, v63.1);
                            let v489 = constructor_shr_i128(ctx, v111, v475);
                            let v478 = constructor_imm(ctx, I64, 0x80);
                            let v479 = C::gpr_new(ctx, v478);
                            let v480 = &C::gpr_to_gpr_mem_imm(ctx, v475);
                            let v481 = constructor_x64_sub(ctx, I64, v479, v480);
                            let v490 = constructor_shl_i128(ctx, v111, v481);
                            let v491 = constructor_or_i128(ctx, v489, v490);
                            let v492 = C::output(ctx, v491);
                            let v493 = Some(v492);
                            // Rule at src\isa\x64\lower.isle line 929.
                            return v493;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v355 = &constructor_put_masked_in_imm8_gpr(ctx, v63.1, v5);
                            let v486 = constructor_x64_rotr(ctx, v5, v66, v355);
                            let v487 = constructor_output_gpr(ctx, v486);
                            let v488 = Some(v487);
                            // Rule at src\isa\x64\lower.isle line 923.
                            return v488;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v359 = constructor_lo_gpr(ctx, v63.1);
                                let v360 = C::put_in_regs(ctx, v63.0);
                                let v361 = constructor_shl_i128(ctx, v360, v359);
                                let v362 = C::output(ctx, v361);
                                let v363 = Some(v362);
                                // Rule at src\isa\x64\lower.isle line 550.
                                return v363;
                            }
                            I8X16 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v364 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v365 = constructor_put_in_xmm(ctx, v63.0);
                                let v366 = &constructor_mov_rmi_to_xmm(ctx, v364);
                                let v367 = constructor_x64_psllw(ctx, v365, v366);
                                let v368 = &constructor_ishl_i8x16_mask(ctx, v364);
                                let v371 = constructor_x64_load(ctx, I8X16, v368, &ExtKind::None);
                                let v372 = RegMem::Reg { reg: v371 };
                                let v373 = &C::reg_mem_to_xmm_mem(ctx, &v372);
                                let v374 = constructor_sse_and(ctx, I8X16, v367, v373);
                                let v375 = constructor_output_xmm(ctx, v374);
                                let v376 = Some(v375);
                                // Rule at src\isa\x64\lower.isle line 562.
                                return v376;
                            }
                            I16X8 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v379 = constructor_x64_psllw(ctx, v97, v378);
                                let v380 = constructor_output_xmm(ctx, v379);
                                let v381 = Some(v380);
                                // Rule at src\isa\x64\lower.isle line 607.
                                return v381;
                            }
                            I32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v382 = constructor_x64_pslld(ctx, v97, v378);
                                let v383 = constructor_output_xmm(ctx, v382);
                                let v384 = Some(v383);
                                // Rule at src\isa\x64\lower.isle line 610.
                                return v384;
                            }
                            I64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v385 = constructor_x64_psllq(ctx, v97, v378);
                                let v386 = constructor_output_xmm(ctx, v385);
                                let v387 = Some(v386);
                                // Rule at src\isa\x64\lower.isle line 613.
                                return v387;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v66 = constructor_put_in_gpr(ctx, v63.0);
                            let v355 = &constructor_put_masked_in_imm8_gpr(ctx, v63.1, v5);
                            let v356 = constructor_x64_shl(ctx, v5, v66, v355);
                            let v357 = constructor_output_gpr(ctx, v356);
                            let v358 = Some(v357);
                            // Rule at src\isa\x64\lower.isle line 511.
                            return v358;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v359 = constructor_lo_gpr(ctx, v63.1);
                                let v360 = C::put_in_regs(ctx, v63.0);
                                let v393 = constructor_shr_i128(ctx, v360, v359);
                                let v394 = C::output(ctx, v393);
                                let v395 = Some(v394);
                                // Rule at src\isa\x64\lower.isle line 657.
                                return v395;
                            }
                            I8X16 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v364 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v365 = constructor_put_in_xmm(ctx, v63.0);
                                let v366 = &constructor_mov_rmi_to_xmm(ctx, v364);
                                let v396 = constructor_x64_psrlw(ctx, v365, v366);
                                let v397 = &constructor_ushr_i8x16_mask(ctx, v364);
                                let v398 = &constructor_synthetic_amode_to_xmm_mem(ctx, v397);
                                let v399 = constructor_sse_and(ctx, I8X16, v396, v398);
                                let v400 = constructor_output_xmm(ctx, v399);
                                let v401 = Some(v400);
                                // Rule at src\isa\x64\lower.isle line 667.
                                return v401;
                            }
                            I16X8 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v402 = constructor_x64_psrlw(ctx, v97, v378);
                                let v403 = constructor_output_xmm(ctx, v402);
                                let v404 = Some(v403);
                                // Rule at src\isa\x64\lower.isle line 713.
                                return v404;
                            }
                            I32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v405 = constructor_x64_psrld(ctx, v97, v378);
                                let v406 = constructor_output_xmm(ctx, v405);
                                let v407 = Some(v406);
                                // Rule at src\isa\x64\lower.isle line 716.
                                return v407;
                            }
                            I64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v408 = constructor_x64_psrlq(ctx, v97, v378);
                                let v409 = constructor_output_xmm(ctx, v408);
                                let v410 = Some(v409);
                                // Rule at src\isa\x64\lower.isle line 719.
                                return v410;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v389 = constructor_extend_to_gpr(ctx, v63.0, v5, &ExtendKind::Zero);
                            let v355 = &constructor_put_masked_in_imm8_gpr(ctx, v63.1, v5);
                            let v390 = constructor_x64_shr(ctx, v5, v389, v355);
                            let v391 = constructor_output_gpr(ctx, v390);
                            let v392 = Some(v391);
                            // Rule at src\isa\x64\lower.isle line 620.
                            return v392;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v359 = constructor_lo_gpr(ctx, v63.1);
                                let v360 = C::put_in_regs(ctx, v63.0);
                                let v416 = constructor_sar_i128(ctx, v360, v359);
                                let v417 = C::output(ctx, v416);
                                let v418 = Some(v417);
                                // Rule at src\isa\x64\lower.isle line 769.
                                return v418;
                            }
                            I8X16 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v419 = &C::xmm_to_xmm_mem(ctx, v97);
                                let v420 = constructor_x64_punpcklbw(ctx, v97, v419);
                                let v421 = &C::xmm_to_xmm_mem(ctx, v97);
                                let v422 = constructor_x64_punpckhbw(ctx, v97, v421);
                                let v126 = C::value_type(ctx, v63.1);
                                let v423 = &constructor_sshr_i8x16_bigger_shift(ctx, v126, v377);
                                let v424 = constructor_x64_psraw(ctx, v420, v423);
                                let v425 = constructor_x64_psraw(ctx, v422, v423);
                                let v426 = &C::xmm_to_xmm_mem(ctx, v425);
                                let v427 = constructor_x64_packsswb(ctx, v424, v426);
                                let v428 = constructor_output_xmm(ctx, v427);
                                let v429 = Some(v428);
                                // Rule at src\isa\x64\lower.isle line 790.
                                return v429;
                            }
                            I16X8 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v430 = constructor_x64_psraw(ctx, v97, v378);
                                let v431 = constructor_output_xmm(ctx, v430);
                                let v432 = Some(v431);
                                // Rule at src\isa\x64\lower.isle line 819.
                                return v432;
                            }
                            I32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v377 = &constructor_mask_xmm_shift(ctx, v3, v63.1);
                                let v378 = &constructor_mov_rmi_to_xmm(ctx, v377);
                                let v433 = constructor_x64_psrad(ctx, v97, v378);
                                let v434 = constructor_output_xmm(ctx, v433);
                                let v435 = Some(v434);
                                // Rule at src\isa\x64\lower.isle line 822.
                                return v435;
                            }
                            I64X2 => {
                                let v438 = C::use_avx512vl(ctx);
                                if v438 == true {
                                    let v439 = C::use_avx512f(ctx);
                                    if v439 == true {
                                        let v63 = C::unpack_value_array_2(ctx, v62);
                                        let v237 = C::def_inst(ctx, v63.1);
                                        if let Some(v238) = v237 {
                                            let v239 = &C::inst_data(ctx, v238);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v436,
                                                imm: v437,
                                            } = v239
                                            {
                                                if let &Opcode::Iconst = v436 {
                                                    let v440 = &C::put_in_xmm_mem(ctx, v63.0);
                                                    let v441 =
                                                        C::shift_amount_masked(ctx, v3, v437);
                                                    let v442 =
                                                        constructor_x64_vpsraq_imm(ctx, v440, v441);
                                                    let v443 = constructor_output_xmm(ctx, v442);
                                                    let v444 = Some(v443);
                                                    // Rule at src\isa\x64\lower.isle line 828.
                                                    return v444;
                                                }
                                            }
                                        }
                                        let v88 = constructor_put_in_gpr(ctx, v63.1);
                                        let v445 = C::shift_mask(ctx, v3);
                                        let v446 = C::u8_as_u32(ctx, v445);
                                        let v447 = RegMemImm::Imm { simm32: v446 };
                                        let v448 = &C::gpr_mem_imm_new(ctx, &v447);
                                        let v449 = constructor_x64_and(ctx, I64, v88, v448);
                                        let v450 = constructor_put_in_xmm(ctx, v63.0);
                                        let v451 = &C::gpr_to_gpr_mem(ctx, v449);
                                        let v452 = constructor_x64_movd_to_xmm(ctx, v451);
                                        let v453 = &C::xmm_to_xmm_mem(ctx, v452);
                                        let v454 = constructor_x64_vpsraq(ctx, v450, v453);
                                        let v455 = constructor_output_xmm(ctx, v454);
                                        let v456 = Some(v455);
                                        // Rule at src\isa\x64\lower.isle line 833.
                                        return v456;
                                    }
                                }
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v237 = C::def_inst(ctx, v63.1);
                                if let Some(v238) = v237 {
                                    let v239 = &C::inst_data(ctx, v238);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v436,
                                        imm: v437,
                                    } = v239
                                    {
                                        if let &Opcode::Iconst = v436 {
                                            let v457 = C::u64_from_imm64(ctx, v437);
                                            let v458 = C::u64_as_u32(ctx, v457);
                                            if let Some(v459) = v458 {
                                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                                let v461 = C::u32_and(ctx, v459, 0x3F);
                                                let v462 = constructor_lower_i64x2_sshr_imm(
                                                    ctx, v97, v461,
                                                );
                                                let v463 = constructor_output_xmm(ctx, v462);
                                                let v464 = Some(v463);
                                                // Rule at src\isa\x64\lower.isle line 839.
                                                return v464;
                                            }
                                        }
                                    }
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v465 = constructor_put_in_gpr(ctx, v63.1);
                                let v466 = RegMemImm::Imm { simm32: 0x3F };
                                let v467 = &C::gpr_mem_imm_new(ctx, &v466);
                                let v468 = constructor_x64_and(ctx, I64, v465, v467);
                                let v469 = constructor_lower_i64x2_sshr_gpr(ctx, v97, v468);
                                let v470 = constructor_output_xmm(ctx, v469);
                                let v471 = Some(v470);
                                // Rule at src\isa\x64\lower.isle line 842.
                                return v471;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v63 = C::unpack_value_array_2(ctx, v62);
                            let v412 = constructor_extend_to_gpr(ctx, v63.0, v5, &ExtendKind::Sign);
                            let v355 = &constructor_put_masked_in_imm8_gpr(ctx, v63.1, v5);
                            let v413 = constructor_x64_sar(ctx, v5, v412, v355);
                            let v414 = constructor_output_gpr(ctx, v413);
                            let v415 = Some(v414);
                            // Rule at src\isa\x64\lower.isle line 732.
                            return v415;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1687 = constructor_x64_addss(ctx, v1670, v1686);
                                    let v1688 = constructor_output_xmm(ctx, v1687);
                                    let v1689 = Some(v1688);
                                    // Rule at src\isa\x64\lower.isle line 2548.
                                    return v1689;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1674 = constructor_x64_addss(ctx, v97, v98);
                                let v1675 = constructor_output_xmm(ctx, v1674);
                                let v1676 = Some(v1675);
                                // Rule at src\isa\x64\lower.isle line 2537.
                                return v1676;
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1690 = constructor_x64_addsd(ctx, v1670, v1686);
                                    let v1691 = constructor_output_xmm(ctx, v1690);
                                    let v1692 = Some(v1691);
                                    // Rule at src\isa\x64\lower.isle line 2550.
                                    return v1692;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1677 = constructor_x64_addsd(ctx, v97, v98);
                                let v1678 = constructor_output_xmm(ctx, v1677);
                                let v1679 = Some(v1678);
                                // Rule at src\isa\x64\lower.isle line 2539.
                                return v1679;
                            }
                            F32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1693 = constructor_x64_addps(ctx, v1670, v1686);
                                    let v1694 = constructor_output_xmm(ctx, v1693);
                                    let v1695 = Some(v1694);
                                    // Rule at src\isa\x64\lower.isle line 2552.
                                    return v1695;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1680 = constructor_x64_addps(ctx, v97, v98);
                                let v1681 = constructor_output_xmm(ctx, v1680);
                                let v1682 = Some(v1681);
                                // Rule at src\isa\x64\lower.isle line 2541.
                                return v1682;
                            }
                            F64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1696 = constructor_x64_addpd(ctx, v1670, v1686);
                                    let v1697 = constructor_output_xmm(ctx, v1696);
                                    let v1698 = Some(v1697);
                                    // Rule at src\isa\x64\lower.isle line 2554.
                                    return v1698;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1683 = constructor_x64_addpd(ctx, v97, v98);
                                let v1684 = constructor_output_xmm(ctx, v1683);
                                let v1685 = Some(v1684);
                                // Rule at src\isa\x64\lower.isle line 2543.
                                return v1685;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1699 = constructor_x64_subss(ctx, v97, v98);
                                let v1700 = constructor_output_xmm(ctx, v1699);
                                let v1701 = Some(v1700);
                                // Rule at src\isa\x64\lower.isle line 2559.
                                return v1701;
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1702 = constructor_x64_subsd(ctx, v97, v98);
                                let v1703 = constructor_output_xmm(ctx, v1702);
                                let v1704 = Some(v1703);
                                // Rule at src\isa\x64\lower.isle line 2561.
                                return v1704;
                            }
                            F32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1705 = constructor_x64_subps(ctx, v97, v98);
                                let v1706 = constructor_output_xmm(ctx, v1705);
                                let v1707 = Some(v1706);
                                // Rule at src\isa\x64\lower.isle line 2563.
                                return v1707;
                            }
                            F64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1708 = constructor_x64_subpd(ctx, v97, v98);
                                let v1709 = constructor_output_xmm(ctx, v1708);
                                let v1710 = Some(v1709);
                                // Rule at src\isa\x64\lower.isle line 2565.
                                return v1710;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1723 = constructor_x64_mulss(ctx, v1670, v1686);
                                    let v1724 = constructor_output_xmm(ctx, v1723);
                                    let v1725 = Some(v1724);
                                    // Rule at src\isa\x64\lower.isle line 2581.
                                    return v1725;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1711 = constructor_x64_mulss(ctx, v97, v98);
                                let v1712 = constructor_output_xmm(ctx, v1711);
                                let v1713 = Some(v1712);
                                // Rule at src\isa\x64\lower.isle line 2570.
                                return v1713;
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1726 = constructor_x64_mulsd(ctx, v1670, v1686);
                                    let v1727 = constructor_output_xmm(ctx, v1726);
                                    let v1728 = Some(v1727);
                                    // Rule at src\isa\x64\lower.isle line 2583.
                                    return v1728;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1714 = constructor_x64_mulsd(ctx, v97, v98);
                                let v1715 = constructor_output_xmm(ctx, v1714);
                                let v1716 = Some(v1715);
                                // Rule at src\isa\x64\lower.isle line 2572.
                                return v1716;
                            }
                            F32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1729 = constructor_x64_mulps(ctx, v1670, v1686);
                                    let v1730 = constructor_output_xmm(ctx, v1729);
                                    let v1731 = Some(v1730);
                                    // Rule at src\isa\x64\lower.isle line 2585.
                                    return v1731;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1717 = constructor_x64_mulps(ctx, v97, v98);
                                let v1718 = constructor_output_xmm(ctx, v1717);
                                let v1719 = Some(v1718);
                                // Rule at src\isa\x64\lower.isle line 2574.
                                return v1719;
                            }
                            F64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v86 = &C::sinkable_load(ctx, v63.0);
                                if let Some(v87) = v86 {
                                    let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                    let v1686 = &constructor_sink_load_to_xmm_mem(ctx, v87);
                                    let v1732 = constructor_x64_mulpd(ctx, v1670, v1686);
                                    let v1733 = constructor_output_xmm(ctx, v1732);
                                    let v1734 = Some(v1733);
                                    // Rule at src\isa\x64\lower.isle line 2587.
                                    return v1734;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1720 = constructor_x64_mulpd(ctx, v97, v98);
                                let v1721 = constructor_output_xmm(ctx, v1720);
                                let v1722 = Some(v1721);
                                // Rule at src\isa\x64\lower.isle line 2576.
                                return v1722;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1735 = constructor_x64_divss(ctx, v97, v98);
                                let v1736 = constructor_output_xmm(ctx, v1735);
                                let v1737 = Some(v1736);
                                // Rule at src\isa\x64\lower.isle line 2592.
                                return v1737;
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1738 = constructor_x64_divsd(ctx, v97, v98);
                                let v1739 = constructor_output_xmm(ctx, v1738);
                                let v1740 = Some(v1739);
                                // Rule at src\isa\x64\lower.isle line 2594.
                                return v1740;
                            }
                            F32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1741 = constructor_x64_divps(ctx, v97, v98);
                                let v1742 = constructor_output_xmm(ctx, v1741);
                                let v1743 = Some(v1742);
                                // Rule at src\isa\x64\lower.isle line 2596.
                                return v1743;
                            }
                            F64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1744 = constructor_x64_divpd(ctx, v97, v98);
                                let v1745 = constructor_output_xmm(ctx, v1744);
                                let v1746 = Some(v1745);
                                // Rule at src\isa\x64\lower.isle line 2598.
                                return v1746;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == F32 {
                                    let v2769 = constructor_imm(ctx, F32, 0x80000000);
                                    let v2770 = C::xmm_new(ctx, v2769);
                                    let v2771 = &C::put_in_xmm_mem(ctx, v63.0);
                                    let v2772 = constructor_x64_andnps(ctx, v2770, v2771);
                                    let v2773 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2774 = constructor_x64_andps(ctx, v2770, v2773);
                                    let v2775 = &C::xmm_to_xmm_mem(ctx, v2774);
                                    let v2776 = constructor_x64_orps(ctx, v2772, v2775);
                                    let v2777 = constructor_output_xmm(ctx, v2776);
                                    let v2778 = Some(v2777);
                                    // Rule at src\isa\x64\lower.isle line 4095.
                                    return v2778;
                                }
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == F64 {
                                    let v2779 = constructor_imm(ctx, F64, 0x8000000000000000);
                                    let v2780 = C::xmm_new(ctx, v2779);
                                    let v2771 = &C::put_in_xmm_mem(ctx, v63.0);
                                    let v2781 = constructor_x64_andnpd(ctx, v2780, v2771);
                                    let v2773 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2782 = constructor_x64_andpd(ctx, v2780, v2773);
                                    let v2783 = &C::xmm_to_xmm_mem(ctx, v2782);
                                    let v2784 = constructor_x64_orpd(ctx, v2781, v2783);
                                    let v2785 = constructor_output_xmm(ctx, v2784);
                                    let v2786 = Some(v2785);
                                    // Rule at src\isa\x64\lower.isle line 4101.
                                    return v2786;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v588 = constructor_put_in_xmm(ctx, v63.1);
                                let v1777 = constructor_xmm_min_max_seq(ctx, F32, true, v97, v588);
                                let v1778 = constructor_output_xmm(ctx, v1777);
                                let v1779 = Some(v1778);
                                // Rule at src\isa\x64\lower.isle line 2629.
                                return v1779;
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v588 = constructor_put_in_xmm(ctx, v63.1);
                                let v1780 = constructor_xmm_min_max_seq(ctx, F64, true, v97, v588);
                                let v1781 = constructor_output_xmm(ctx, v1780);
                                let v1782 = Some(v1781);
                                // Rule at src\isa\x64\lower.isle line 2631.
                                return v1782;
                            }
                            F32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1783 = constructor_x64_minps(ctx, v97, v98);
                                let v1784 = constructor_put_in_xmm(ctx, v63.1);
                                let v1785 = &C::put_in_xmm_mem(ctx, v63.0);
                                let v1786 = constructor_x64_minps(ctx, v1784, v1785);
                                let v1787 = &C::xmm_to_xmm_mem(ctx, v1786);
                                let v1788 = constructor_x64_orps(ctx, v1783, v1787);
                                let v1789 = &C::xmm_to_xmm_mem(ctx, v1786);
                                let v1790 =
                                    constructor_x64_cmpps(ctx, v1788, v1789, &FcmpImm::Unordered);
                                let v1791 = &C::xmm_to_xmm_mem(ctx, v1790);
                                let v1792 = constructor_x64_orps(ctx, v1788, v1791);
                                let v1794 = &C::xmi_imm(ctx, 0xA);
                                let v1795 = constructor_x64_psrld(ctx, v1790, v1794);
                                let v1796 = &C::xmm_to_xmm_mem(ctx, v1792);
                                let v1797 = constructor_x64_andnps(ctx, v1795, v1796);
                                let v1798 = constructor_output_xmm(ctx, v1797);
                                let v1799 = Some(v1798);
                                // Rule at src\isa\x64\lower.isle line 2646.
                                return v1799;
                            }
                            F64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1800 = constructor_x64_minpd(ctx, v97, v98);
                                let v1784 = constructor_put_in_xmm(ctx, v63.1);
                                let v1785 = &C::put_in_xmm_mem(ctx, v63.0);
                                let v1801 = constructor_x64_minpd(ctx, v1784, v1785);
                                let v1802 = &C::xmm_to_xmm_mem(ctx, v1801);
                                let v1803 = constructor_x64_orpd(ctx, v1800, v1802);
                                let v1804 = &C::xmm_to_xmm_mem(ctx, v1801);
                                let v1805 =
                                    constructor_x64_cmppd(ctx, v1800, v1804, &FcmpImm::Unordered);
                                let v1806 = &C::xmm_to_xmm_mem(ctx, v1805);
                                let v1807 = constructor_x64_orpd(ctx, v1803, v1806);
                                let v1809 = &C::xmi_imm(ctx, 0xD);
                                let v1810 = constructor_x64_psrlq(ctx, v1805, v1809);
                                let v1811 = &C::xmm_to_xmm_mem(ctx, v1807);
                                let v1812 = constructor_x64_andnpd(ctx, v1810, v1811);
                                let v1813 = constructor_output_xmm(ctx, v1812);
                                let v1814 = Some(v1813);
                                // Rule at src\isa\x64\lower.isle line 2689.
                                return v1814;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v588 = constructor_put_in_xmm(ctx, v63.1);
                                let v1815 = constructor_xmm_min_max_seq(ctx, F32, false, v97, v588);
                                let v1816 = constructor_output_xmm(ctx, v1815);
                                let v1817 = Some(v1816);
                                // Rule at src\isa\x64\lower.isle line 2701.
                                return v1817;
                            }
                            F64 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v588 = constructor_put_in_xmm(ctx, v63.1);
                                let v1818 = constructor_xmm_min_max_seq(ctx, F64, false, v97, v588);
                                let v1819 = constructor_output_xmm(ctx, v1818);
                                let v1820 = Some(v1819);
                                // Rule at src\isa\x64\lower.isle line 2703.
                                return v1820;
                            }
                            F32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1821 = constructor_x64_maxps(ctx, v97, v98);
                                let v1784 = constructor_put_in_xmm(ctx, v63.1);
                                let v1785 = &C::put_in_xmm_mem(ctx, v63.0);
                                let v1822 = constructor_x64_maxps(ctx, v1784, v1785);
                                let v1823 = &C::xmm_to_xmm_mem(ctx, v1822);
                                let v1824 = constructor_x64_xorps(ctx, v1821, v1823);
                                let v1825 = &C::xmm_to_xmm_mem(ctx, v1824);
                                let v1826 = constructor_x64_orps(ctx, v1821, v1825);
                                let v1827 = &C::xmm_to_xmm_mem(ctx, v1824);
                                let v1828 = constructor_x64_subps(ctx, v1826, v1827);
                                let v1829 = &C::xmm_to_xmm_mem(ctx, v1826);
                                let v1830 =
                                    constructor_x64_cmpps(ctx, v1826, v1829, &FcmpImm::Unordered);
                                let v1831 = &C::xmi_imm(ctx, 0xA);
                                let v1832 = constructor_x64_psrld(ctx, v1830, v1831);
                                let v1833 = &C::xmm_to_xmm_mem(ctx, v1828);
                                let v1834 = constructor_x64_andnps(ctx, v1832, v1833);
                                let v1835 = constructor_output_xmm(ctx, v1834);
                                let v1836 = Some(v1835);
                                // Rule at src\isa\x64\lower.isle line 2709.
                                return v1836;
                            }
                            F64X2 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                let v1837 = constructor_x64_maxpd(ctx, v97, v98);
                                let v1784 = constructor_put_in_xmm(ctx, v63.1);
                                let v1785 = &C::put_in_xmm_mem(ctx, v63.0);
                                let v1838 = constructor_x64_maxpd(ctx, v1784, v1785);
                                let v1839 = &C::xmm_to_xmm_mem(ctx, v1838);
                                let v1840 = constructor_x64_xorpd(ctx, v1837, v1839);
                                let v1841 = &C::xmm_to_xmm_mem(ctx, v1840);
                                let v1842 = constructor_x64_orpd(ctx, v1837, v1841);
                                let v1843 = &C::xmm_to_xmm_mem(ctx, v1840);
                                let v1844 = constructor_x64_subpd(ctx, v1842, v1843);
                                let v1845 = &C::xmm_to_xmm_mem(ctx, v1842);
                                let v1846 =
                                    constructor_x64_cmppd(ctx, v1842, v1845, &FcmpImm::Unordered);
                                let v1847 = &C::xmi_imm(ctx, 0xD);
                                let v1848 = constructor_x64_psrlq(ctx, v1846, v1847);
                                let v1849 = &C::xmm_to_xmm_mem(ctx, v1844);
                                let v1850 = constructor_x64_andnpd(ctx, v1848, v1849);
                                let v1851 = constructor_output_xmm(ctx, v1850);
                                let v1852 = Some(v1851);
                                // Rule at src\isa\x64\lower.isle line 2752.
                                return v1852;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == I16X8 {
                                    let v97 = constructor_put_in_xmm(ctx, v63.0);
                                    let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2701 = constructor_x64_packsswb(ctx, v97, v98);
                                    let v2702 = constructor_output_xmm(ctx, v2701);
                                    let v2703 = Some(v2702);
                                    // Rule at src\isa\x64\lower.isle line 3965.
                                    return v2703;
                                }
                            }
                            I16X8 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == I32X4 {
                                    let v97 = constructor_put_in_xmm(ctx, v63.0);
                                    let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2704 = constructor_x64_packssdw(ctx, v97, v98);
                                    let v2705 = constructor_output_xmm(ctx, v2704);
                                    let v2706 = Some(v2705);
                                    // Rule at src\isa\x64\lower.isle line 3968.
                                    return v2706;
                                }
                            }
                            I32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v237 = C::def_inst(ctx, v63.1);
                                if let Some(v238) = v237 {
                                    let v239 = &C::inst_data(ctx, v238);
                                    if let &InstructionData::UnaryConst {
                                        opcode: ref v2710,
                                        constant_handle: v2711,
                                    } = v239
                                    {
                                        if let &Opcode::Vconst = v2710 {
                                            let v247 = C::def_inst(ctx, v63.0);
                                            if let Some(v248) = v247 {
                                                let v249 = &C::inst_data(ctx, v248);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v250,
                                                    arg: v251,
                                                } = v249
                                                {
                                                    match v250 {
                                                        &Opcode::FcvtToSintSat => {
                                                            let v2707 = C::first_result(ctx, v248);
                                                            if let Some(v2708) = v2707 {
                                                                let v2709 =
                                                                    C::value_type(ctx, v2708);
                                                                if v2709 == I64X2 {
                                                                    let v2712 =
                                                                        C::u128_from_constant(
                                                                            ctx, v2711,
                                                                        );
                                                                    if let Some(v2713) = v2712 {
                                                                        if v2713 == 0x0 {
                                                                            let v252 = constructor_put_in_xmm(ctx, v251);
                                                                            let v2714 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v252,
                                                                                );
                                                                            let v2715 = constructor_x64_cmppd(ctx, v252, v2714, &FcmpImm::Equal);
                                                                            let v2717 = C::emit_u128_le_const(ctx, 0x41DFFFFFFFC0000041DFFFFFFFC00000);
                                                                            let v2718 = &constructor_const_to_xmm_mem(ctx, v2717);
                                                                            let v2719 = constructor_x64_andps(ctx, v2715, v2718);
                                                                            let v2720 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v2719,
                                                                                );
                                                                            let v2721 = constructor_x64_minpd(ctx, v252, v2720);
                                                                            let v2722 =
                                                                                &C::xmm_to_xmm_mem(
                                                                                    ctx, v2721,
                                                                                );
                                                                            let v2723 = constructor_x64_cvttpd2dq(ctx, v2722);
                                                                            let v2724 = constructor_output_xmm(ctx, v2723);
                                                                            let v2725 = Some(v2724);
                                                                            // Rule at src\isa\x64\lower.isle line 3977.
                                                                            return v2725;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::X86Cvtt2dq => {
                                                            let v2707 = C::first_result(ctx, v248);
                                                            if let Some(v2708) = v2707 {
                                                                let v2709 =
                                                                    C::value_type(ctx, v2708);
                                                                if v2709 == I64X2 {
                                                                    let v2712 =
                                                                        C::u128_from_constant(
                                                                            ctx, v2711,
                                                                        );
                                                                    if let Some(v2713) = v2712 {
                                                                        if v2713 == 0x0 {
                                                                            let v647 =
                                                                                &C::put_in_xmm_mem(
                                                                                    ctx, v251,
                                                                                );
                                                                            let v2726 = constructor_x64_cvttpd2dq(ctx, v647);
                                                                            let v2727 = constructor_output_xmm(ctx, v2726);
                                                                            let v2728 = Some(v2727);
                                                                            // Rule at src\isa\x64\lower.isle line 4001.
                                                                            return v2728;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == I16X8 {
                                    let v97 = constructor_put_in_xmm(ctx, v63.0);
                                    let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2729 = constructor_x64_packuswb(ctx, v97, v98);
                                    let v2730 = constructor_output_xmm(ctx, v2729);
                                    let v2731 = Some(v2730);
                                    // Rule at src\isa\x64\lower.isle line 4007.
                                    return v2731;
                                }
                            }
                            I16X8 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2700 = C::value_type(ctx, v63.0);
                                if v2700 == I32X4 {
                                    let v584 = C::use_sse41(ctx);
                                    if v584 == true {
                                        let v97 = constructor_put_in_xmm(ctx, v63.0);
                                        let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                        let v2732 = constructor_x64_packusdw(ctx, v97, v98);
                                        let v2733 = constructor_output_xmm(ctx, v2732);
                                        let v2734 = Some(v2733);
                                        // Rule at src\isa\x64\lower.isle line 4010.
                                        return v2734;
                                    }
                                    let v97 = constructor_put_in_xmm(ctx, v63.0);
                                    let v2735 =
                                        constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v97);
                                    let v2736 = constructor_put_in_xmm(ctx, v63.1);
                                    let v2737 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(
                                        ctx, v2736,
                                    );
                                    let v2738 = &C::xmm_to_xmm_mem(ctx, v2737);
                                    let v2739 = constructor_x64_punpcklqdq(ctx, v2735, v2738);
                                    let v2740 = constructor_output_xmm(ctx, v2739);
                                    let v2741 = Some(v2740);
                                    // Rule at src\isa\x64\lower.isle line 4020.
                                    return v2741;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v237 = C::def_inst(ctx, v63.1);
                    if let Some(v238) = v237 {
                        let v239 = &C::inst_data(ctx, v238);
                        if let &InstructionData::UnaryConst {
                            opcode: ref v2710,
                            constant_handle: v2711,
                        } = v239
                        {
                            if let &Opcode::Vconst = v2710 {
                                let v247 = C::def_inst(ctx, v63.0);
                                if let Some(v248) = v247 {
                                    let v249 = &C::inst_data(ctx, v248);
                                    if let &InstructionData::Unary {
                                        opcode: ref v250,
                                        arg: v251,
                                    } = v249
                                    {
                                        if let &Opcode::FcvtToUintSat = v250 {
                                            let v628 = C::value_type(ctx, v251);
                                            if v628 == F64X2 {
                                                let v2712 = C::u128_from_constant(ctx, v2711);
                                                if let Some(v2713) = v2712 {
                                                    if v2713 == 0x0 {
                                                        let v252 =
                                                            constructor_put_in_xmm(ctx, v251);
                                                        let v2356 =
                                                            constructor_xmm_zero(ctx, F64X2);
                                                        let v3289 = &C::xmm_to_xmm_mem(ctx, v2356);
                                                        let v3290 =
                                                            constructor_x64_maxpd(ctx, v252, v3289);
                                                        let v3292 = C::emit_u128_le_const(
                                                            ctx,
                                                            0x41EFFFFFFFE0000041EFFFFFFFE00000,
                                                        );
                                                        let v3293 = &constructor_const_to_xmm_mem(
                                                            ctx, v3292,
                                                        );
                                                        let v3294 = constructor_x64_minpd(
                                                            ctx, v3290, v3293,
                                                        );
                                                        let v3295 = C::xmm_to_reg(ctx, v3294);
                                                        let v3296 =
                                                            &constructor_xmm_to_reg_mem(ctx, v3295);
                                                        let v3297 =
                                                            &C::xmm_mem_to_reg_mem(ctx, v3296);
                                                        let v3298 = constructor_x64_round(
                                                            ctx,
                                                            F64X2,
                                                            v3297,
                                                            &RoundImm::RoundZero,
                                                        );
                                                        let v3299 = C::emit_u128_le_const(
                                                            ctx,
                                                            0x43300000000000004330000000000000,
                                                        );
                                                        let v3300 = &constructor_const_to_xmm_mem(
                                                            ctx, v3299,
                                                        );
                                                        let v3301 = constructor_x64_addpd(
                                                            ctx, v3298, v3300,
                                                        );
                                                        let v3302 = &C::xmm_to_xmm_mem(ctx, v2356);
                                                        let v3303 = constructor_x64_shufps(
                                                            ctx, v3301, v3302, 0x88,
                                                        );
                                                        let v3304 =
                                                            constructor_output_xmm(ctx, v3303);
                                                        let v3305 = Some(v3304);
                                                        // Rule at src\isa\x64\lower.isle line 4863.
                                                        return v3305;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v2506 =
                                    C::emit_u128_le_const(ctx, 0xFF00FF00FF00FF00FF00FF00FF00FF);
                                let v2507 = &constructor_const_to_xmm_mem(ctx, v2506);
                                let v2508 = constructor_x64_movdqu_load(ctx, v2507);
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v2509 = constructor_put_in_xmm(ctx, v63.0);
                                let v2510 = &C::xmm_to_xmm_mem(ctx, v2508);
                                let v2511 = constructor_x64_pand(ctx, v2509, v2510);
                                let v2512 = constructor_put_in_xmm(ctx, v63.1);
                                let v2513 = &C::xmm_to_xmm_mem(ctx, v2508);
                                let v2514 = constructor_x64_pand(ctx, v2512, v2513);
                                let v2515 = &C::xmm_to_xmm_mem(ctx, v2514);
                                let v2516 = constructor_x64_packuswb(ctx, v2511, v2515);
                                let v2517 = constructor_put_in_xmm(ctx, v63.0);
                                let v2519 = &C::xmi_imm(ctx, 0x8);
                                let v2520 = constructor_x64_psrlw(ctx, v2517, v2519);
                                let v2521 = constructor_put_in_xmm(ctx, v63.1);
                                let v2522 = &C::xmi_imm(ctx, 0x8);
                                let v2523 = constructor_x64_psrlw(ctx, v2521, v2522);
                                let v2524 = &C::xmm_to_xmm_mem(ctx, v2523);
                                let v2525 = constructor_x64_packuswb(ctx, v2520, v2524);
                                let v2526 = &C::xmm_to_xmm_mem(ctx, v2525);
                                let v2527 = constructor_x64_paddb(ctx, v2516, v2526);
                                let v2528 = constructor_output_xmm(ctx, v2527);
                                let v2529 = Some(v2528);
                                // Rule at src\isa\x64\lower.isle line 3754.
                                return v2529;
                            }
                            I16X8 => {
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v63 = C::unpack_value_array_2(ctx, v62);
                                    let v237 = C::def_inst(ctx, v63.1);
                                    if let Some(v238) = v237 {
                                        let v239 = &C::inst_data(ctx, v238);
                                        if let &InstructionData::Unary {
                                            opcode: ref v240,
                                            arg: v241,
                                        } = v239
                                        {
                                            match v240 {
                                                &Opcode::SwidenHigh => {
                                                    let v247 = C::def_inst(ctx, v63.0);
                                                    if let Some(v248) = v247 {
                                                        let v249 = &C::inst_data(ctx, v248);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v250,
                                                            arg: v251,
                                                        } = v249
                                                        {
                                                            if let &Opcode::SwidenLow = v250 {
                                                                if v241 == v251 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    if v628 == I8X16 {
                                                                        let v2570 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101);
                                                                        let v2571 = constructor_x64_xmm_load_const(ctx, I8X16, v2570);
                                                                        let v2572 =
                                                                            &C::put_in_xmm_mem(
                                                                                ctx, v251,
                                                                            );
                                                                        let v2573 = constructor_x64_pmaddubsw(ctx, v2571, v2572);
                                                                        let v2574 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2573,
                                                                            );
                                                                        let v2575 = Some(v2574);
                                                                        // Rule at src\isa\x64\lower.isle line 3816.
                                                                        return v2575;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v247 = C::def_inst(ctx, v63.0);
                                                    if let Some(v248) = v247 {
                                                        let v249 = &C::inst_data(ctx, v248);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v250,
                                                            arg: v251,
                                                        } = v249
                                                        {
                                                            if let &Opcode::UwidenLow = v250 {
                                                                if v241 == v251 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    if v628 == I8X16 {
                                                                        let v2570 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101);
                                                                        let v2583 = &constructor_const_to_xmm_mem(ctx, v2570);
                                                                        let v2579 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v251,
                                                                            );
                                                                        let v2584 = constructor_x64_pmaddubsw(ctx, v2579, v2583);
                                                                        let v2585 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2584,
                                                                            );
                                                                        let v2586 = Some(v2585);
                                                                        // Rule at src\isa\x64\lower.isle line 3834.
                                                                        return v2586;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    let v97 = constructor_put_in_xmm(ctx, v63.0);
                                    let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2530 = constructor_x64_phaddw(ctx, v97, v98);
                                    let v2531 = constructor_output_xmm(ctx, v2530);
                                    let v2532 = Some(v2531);
                                    // Rule at src\isa\x64\lower.isle line 3770.
                                    return v2532;
                                }
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v588 = constructor_put_in_xmm(ctx, v63.1);
                                let v419 = &C::xmm_to_xmm_mem(ctx, v97);
                                let v2534 = constructor_x64_pshuflw(ctx, v419, 0xE8);
                                let v2535 = &C::xmm_to_xmm_mem(ctx, v2534);
                                let v2536 = constructor_x64_pshufhw(ctx, v2535, 0xE8);
                                let v2537 = &C::xmm_to_xmm_mem(ctx, v2536);
                                let v2538 = constructor_x64_pshufd(ctx, v2537, 0xE8);
                                let v2539 = &C::xmm_to_xmm_mem(ctx, v588);
                                let v2540 = constructor_x64_pshuflw(ctx, v2539, 0xE8);
                                let v2541 = &C::xmm_to_xmm_mem(ctx, v2540);
                                let v2542 = constructor_x64_pshufhw(ctx, v2541, 0xE8);
                                let v2543 = &C::xmm_to_xmm_mem(ctx, v2542);
                                let v2544 = constructor_x64_pshufd(ctx, v2543, 0xE8);
                                let v2545 = &C::xmm_to_xmm_mem(ctx, v2544);
                                let v2546 = constructor_x64_punpcklqdq(ctx, v2538, v2545);
                                let v2547 = &C::xmi_imm(ctx, 0x10);
                                let v2548 = constructor_x64_psrad(ctx, v97, v2547);
                                let v2549 = &C::xmi_imm(ctx, 0x10);
                                let v2550 = constructor_x64_psrad(ctx, v588, v2549);
                                let v2551 = &C::xmm_to_xmm_mem(ctx, v2550);
                                let v2552 = constructor_x64_packssdw(ctx, v2548, v2551);
                                let v2553 = &C::xmm_to_xmm_mem(ctx, v2552);
                                let v2554 = constructor_x64_paddw(ctx, v2546, v2553);
                                let v2555 = constructor_output_xmm(ctx, v2554);
                                let v2556 = Some(v2555);
                                // Rule at src\isa\x64\lower.isle line 3774.
                                return v2556;
                            }
                            I32X4 => {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v237 = C::def_inst(ctx, v63.1);
                                if let Some(v238) = v237 {
                                    let v239 = &C::inst_data(ctx, v238);
                                    match v239 {
                                        &InstructionData::Binary {
                                            opcode: ref v2615,
                                            args: ref v2616,
                                        } => {
                                            if let &Opcode::Imul = v2615 {
                                                let v247 = C::def_inst(ctx, v63.0);
                                                if let Some(v248) = v247 {
                                                    let v249 = &C::inst_data(ctx, v248);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v2600,
                                                        args: ref v2601,
                                                    } = v249
                                                    {
                                                        if let &Opcode::Imul = v2600 {
                                                            let v2602 =
                                                                C::unpack_value_array_2(ctx, v2601);
                                                            let v2605 = C::def_inst(ctx, v2602.0);
                                                            if let Some(v2606) = v2605 {
                                                                let v2607 =
                                                                    &C::inst_data(ctx, v2606);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v2608,
                                                                    arg: v2609,
                                                                } = v2607
                                                                {
                                                                    if let &Opcode::SwidenLow =
                                                                        v2608
                                                                    {
                                                                        let v2610 = C::def_inst(
                                                                            ctx, v2602.1,
                                                                        );
                                                                        if let Some(v2611) = v2610 {
                                                                            let v2612 =
                                                                                &C::inst_data(
                                                                                    ctx, v2611,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v2613,
                                                                                arg: v2614,
                                                                            } = v2612 {
                                                                                if let &Opcode::SwidenLow = v2613 {
                                                                                    let v2617 = C::unpack_value_array_2(ctx, v2616);
                                                                                    let v2620 = C::def_inst(ctx, v2617.0);
                                                                                    if let Some(v2621) = v2620 {
                                                                                        let v2622 = &C::inst_data(ctx, v2621);
                                                                                        if let &InstructionData::Unary {
                                                                                            opcode: ref v2623,
                                                                                            arg: v2624,
                                                                                        } = v2622 {
                                                                                            if let &Opcode::SwidenHigh = v2623 {
                                                                                                if v2609 == v2624 {
                                                                                                    let v2625 = C::def_inst(ctx, v2617.1);
                                                                                                    if let Some(v2626) = v2625 {
                                                                                                        let v2627 = &C::inst_data(ctx, v2626);
                                                                                                        if let &InstructionData::Unary {
                                                                                                            opcode: ref v2628,
                                                                                                            arg: v2629,
                                                                                                        } = v2627 {
                                                                                                            if let &Opcode::SwidenHigh = v2628 {
                                                                                                                if v2614 == v2629 {
                                                                                                                    let v2630 = constructor_put_in_xmm(ctx, v2609);
                                                                                                                    let v2631 = &C::put_in_xmm_mem(ctx, v2614);
                                                                                                                    let v2632 = constructor_x64_pmaddwd(ctx, v2630, v2631);
                                                                                                                    let v2633 = constructor_output_xmm(ctx, v2632);
                                                                                                                    let v2634 = Some(v2633);
                                                                                                                    // Rule at src\isa\x64\lower.isle line 3857.
                                                                                                                    return v2634;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v240,
                                            arg: v241,
                                        } => {
                                            match v240 {
                                                &Opcode::SwidenHigh => {
                                                    let v247 = C::def_inst(ctx, v63.0);
                                                    if let Some(v248) = v247 {
                                                        let v249 = &C::inst_data(ctx, v248);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v250,
                                                            arg: v251,
                                                        } = v249
                                                        {
                                                            if let &Opcode::SwidenLow = v250 {
                                                                if v241 == v251 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    if v628 == I16X8 {
                                                                        let v2577 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001);
                                                                        let v2578 = &constructor_const_to_xmm_mem(ctx, v2577);
                                                                        let v2579 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v251,
                                                                            );
                                                                        let v2580 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v2579, v2578,
                                                                            );
                                                                        let v2581 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2580,
                                                                            );
                                                                        let v2582 = Some(v2581);
                                                                        // Rule at src\isa\x64\lower.isle line 3826.
                                                                        return v2582;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v247 = C::def_inst(ctx, v63.0);
                                                    if let Some(v248) = v247 {
                                                        let v249 = &C::inst_data(ctx, v248);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v250,
                                                            arg: v251,
                                                        } = v249
                                                        {
                                                            if let &Opcode::UwidenLow = v250 {
                                                                if v241 == v251 {
                                                                    let v628 =
                                                                        C::value_type(ctx, v251);
                                                                    if v628 == I16X8 {
                                                                        let v2588 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
                                                                        let v2589 = &constructor_const_to_xmm_mem(ctx, v2588);
                                                                        let v2579 =
                                                                            constructor_put_in_xmm(
                                                                                ctx, v251,
                                                                            );
                                                                        let v2590 =
                                                                            constructor_x64_pxor(
                                                                                ctx, v2579, v2589,
                                                                            );
                                                                        let v2591 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001);
                                                                        let v2592 = &constructor_const_to_xmm_mem(ctx, v2591);
                                                                        let v2593 =
                                                                            constructor_x64_pmaddwd(
                                                                                ctx, v2590, v2592,
                                                                            );
                                                                        let v2595 = C::emit_u128_le_const(ctx, 0x10000000100000001000000010000);
                                                                        let v2596 = &constructor_const_to_xmm_mem(ctx, v2595);
                                                                        let v2597 =
                                                                            constructor_x64_paddd(
                                                                                ctx, v2593, v2596,
                                                                            );
                                                                        let v2598 =
                                                                            constructor_output_xmm(
                                                                                ctx, v2597,
                                                                            );
                                                                        let v2599 = Some(v2598);
                                                                        // Rule at src\isa\x64\lower.isle line 3843.
                                                                        return v2599;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v97 = constructor_put_in_xmm(ctx, v63.0);
                                    let v98 = &C::put_in_xmm_mem(ctx, v63.1);
                                    let v2557 = constructor_x64_phaddd(ctx, v97, v98);
                                    let v2558 = constructor_output_xmm(ctx, v2557);
                                    let v2559 = Some(v2558);
                                    // Rule at src\isa\x64\lower.isle line 3800.
                                    return v2559;
                                }
                                let v97 = constructor_put_in_xmm(ctx, v63.0);
                                let v588 = constructor_put_in_xmm(ctx, v63.1);
                                let v2560 = &C::xmm_to_xmm_mem(ctx, v588);
                                let v2562 = constructor_x64_shufps(ctx, v97, v2560, 0x88);
                                let v591 = &C::xmm_to_xmm_mem(ctx, v588);
                                let v2564 = constructor_x64_shufps(ctx, v97, v591, 0xDD);
                                let v2565 = &C::xmm_to_xmm_mem(ctx, v2564);
                                let v2566 = constructor_x64_paddd(ctx, v2562, v2565);
                                let v2567 = constructor_output_xmm(ctx, v2566);
                                let v2568 = Some(v2567);
                                // Rule at src\isa\x64\lower.isle line 3804.
                                return v2568;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::X86Pmaddubsw => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v680 = C::use_ssse3(ctx);
                            if v680 == true {
                                let v63 = C::unpack_value_array_2(ctx, v62);
                                let v1670 = constructor_put_in_xmm(ctx, v63.1);
                                let v243 = &C::put_in_xmm_mem(ctx, v63.0);
                                let v1671 = constructor_x64_pmaddubsw(ctx, v1670, v243);
                                let v1672 = constructor_output_xmm(ctx, v1671);
                                let v1673 = Some(v1672);
                                // Rule at src\isa\x64\lower.isle line 2531.
                                return v1673;
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v63 = C::unpack_value_array_2(ctx, v62);
                    let v2700 = C::value_type(ctx, v63.0);
                    if v2700 == I64 {
                        let v3234 = C::put_in_reg(ctx, v63.0);
                        let v3235 = C::put_in_reg(ctx, v63.1);
                        let v3236 = C::value_regs(ctx, v3234, v3235);
                        let v3237 = C::output(ctx, v3236);
                        let v3238 = Some(v3237);
                        // Rule at src\isa\x64\lower.isle line 4779.
                        return v3238;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v3051,
            arg: v3052,
            imm: v3053,
        } => {
            if let &Opcode::Extractlane = v3051 {
                if v3053 == 0x0 {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v225 = C::ty_scalar_float(ctx, v3);
                        if let Some(v226) = v225 {
                            let v3054 = constructor_output_value(ctx, v3052);
                            let v3055 = Some(v3054);
                            // Rule at src\isa\x64\lower.isle line 4534.
                            return v3055;
                        }
                    }
                }
                let v3056 = C::value_type(ctx, v3052);
                match v3056 {
                    I8X16 => {
                        let v584 = C::use_sse41(ctx);
                        if v584 == true {
                            let v3065 = constructor_put_in_xmm(ctx, v3052);
                            let v3057 = C::u8_from_uimm8(ctx, v3053);
                            let v3066 = constructor_x64_pextrb(ctx, v3065, v3057);
                            let v3067 = constructor_output_gpr(ctx, v3066);
                            let v3068 = Some(v3067);
                            // Rule at src\isa\x64\lower.isle line 4549.
                            return v3068;
                        }
                        let v3057 = C::u8_from_uimm8(ctx, v3053);
                        let v3069 = C::u8_and(ctx, v3057, 0x1);
                        match v3069 {
                            0x0 => {
                                let v3065 = constructor_put_in_xmm(ctx, v3052);
                                let v3070 = C::u8_shr(ctx, v3057, 0x1);
                                let v3071 = constructor_x64_pextrw(ctx, v3065, v3070);
                                let v3076 = constructor_output_gpr(ctx, v3071);
                                let v3077 = Some(v3076);
                                // Rule at src\isa\x64\lower.isle line 4560.
                                return v3077;
                            }
                            0x1 => {
                                let v3065 = constructor_put_in_xmm(ctx, v3052);
                                let v3070 = C::u8_shr(ctx, v3057, 0x1);
                                let v3071 = constructor_x64_pextrw(ctx, v3065, v3070);
                                let v1611 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v3072 = &C::imm8_reg_to_imm8_gpr(ctx, &v1611);
                                let v3073 = constructor_x64_shr(ctx, I16, v3071, v3072);
                                let v3074 = constructor_output_gpr(ctx, v3073);
                                let v3075 = Some(v3074);
                                // Rule at src\isa\x64\lower.isle line 4553.
                                return v3075;
                            }
                            _ => {}
                        }
                    }
                    I16X8 => {
                        let v3065 = constructor_put_in_xmm(ctx, v3052);
                        let v3057 = C::u8_from_uimm8(ctx, v3053);
                        let v3078 = constructor_x64_pextrw(ctx, v3065, v3057);
                        let v3079 = constructor_output_gpr(ctx, v3078);
                        let v3080 = Some(v3079);
                        // Rule at src\isa\x64\lower.isle line 4565.
                        return v3080;
                    }
                    I32X4 => {
                        let v584 = C::use_sse41(ctx);
                        if v584 == true {
                            let v3065 = constructor_put_in_xmm(ctx, v3052);
                            let v3057 = C::u8_from_uimm8(ctx, v3053);
                            let v3081 = constructor_x64_pextrd(ctx, v3065, v3057);
                            let v3082 = constructor_output_gpr(ctx, v3081);
                            let v3083 = Some(v3082);
                            // Rule at src\isa\x64\lower.isle line 4569.
                            return v3083;
                        }
                        if v3053 == 0x0 {
                            let v3065 = constructor_put_in_xmm(ctx, v3052);
                            let v3084 = constructor_x64_movd_to_gpr(ctx, v3065);
                            let v3085 = constructor_output_gpr(ctx, v3084);
                            let v3086 = Some(v3085);
                            // Rule at src\isa\x64\lower.isle line 4572.
                            return v3086;
                        }
                        let v3058 = &C::put_in_xmm_mem(ctx, v3052);
                        let v3057 = C::u8_from_uimm8(ctx, v3053);
                        let v3059 = constructor_x64_pshufd(ctx, v3058, v3057);
                        let v3087 = constructor_x64_movd_to_gpr(ctx, v3059);
                        let v3088 = constructor_output_gpr(ctx, v3087);
                        let v3089 = Some(v3088);
                        // Rule at src\isa\x64\lower.isle line 4574.
                        return v3089;
                    }
                    I64X2 => {
                        let v584 = C::use_sse41(ctx);
                        if v584 == true {
                            let v3065 = constructor_put_in_xmm(ctx, v3052);
                            let v3057 = C::u8_from_uimm8(ctx, v3053);
                            let v3090 = constructor_x64_pextrq(ctx, v3065, v3057);
                            let v3091 = constructor_output_gpr(ctx, v3090);
                            let v3092 = Some(v3091);
                            // Rule at src\isa\x64\lower.isle line 4578.
                            return v3092;
                        }
                        match v3053 {
                            0x0 => {
                                let v3065 = constructor_put_in_xmm(ctx, v3052);
                                let v3093 = constructor_x64_movq_to_gpr(ctx, v3065);
                                let v3094 = constructor_output_gpr(ctx, v3093);
                                let v3095 = Some(v3094);
                                // Rule at src\isa\x64\lower.isle line 4581.
                                return v3095;
                            }
                            0x1 => {
                                let v3058 = &C::put_in_xmm_mem(ctx, v3052);
                                let v3096 = constructor_x64_pshufd(ctx, v3058, 0xE);
                                let v3097 = constructor_x64_movq_to_gpr(ctx, v3096);
                                let v3098 = constructor_output_gpr(ctx, v3097);
                                let v3099 = Some(v3098);
                                // Rule at src\isa\x64\lower.isle line 4583.
                                return v3099;
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v3058 = &C::put_in_xmm_mem(ctx, v3052);
                        let v3057 = C::u8_from_uimm8(ctx, v3053);
                        let v3059 = constructor_x64_pshufd(ctx, v3058, v3057);
                        let v3060 = constructor_output_xmm(ctx, v3059);
                        let v3061 = Some(v3060);
                        // Rule at src\isa\x64\lower.isle line 4538.
                        return v3061;
                    }
                    F64X2 => {
                        if v3053 == 0x1 {
                            let v3058 = &C::put_in_xmm_mem(ctx, v3052);
                            let v3062 = constructor_x64_pshufd(ctx, v3058, 0xEE);
                            let v3063 = constructor_output_xmm(ctx, v3062);
                            let v3064 = Some(v3063);
                            // Rule at src\isa\x64\lower.isle line 4542.
                            return v3064;
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2289,
            args: v2290,
            func_ref: v2291,
        } => {
            match v2289 {
                &Opcode::Call => {
                    let v2293 = C::func_ref_data(ctx, v2291);
                    let v2292 = C::value_list_slice(ctx, v2290);
                    let v2297 = C::gen_call(ctx, v2293.0, v2293.1, v2293.2, v2292);
                    let v2298 = Some(v2297);
                    // Rule at src\isa\x64\lower.isle line 3345.
                    return v2298;
                }
                &Opcode::ReturnCall => {
                    let v2293 = C::func_ref_data(ctx, v2291);
                    let v2292 = C::value_list_slice(ctx, v2290);
                    let v2309 = C::gen_return_call(ctx, v2293.0, v2293.1, v2293.2, v2292);
                    let v2310 = Some(v2309);
                    // Rule at src\isa\x64\lower.isle line 3353.
                    return v2310;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2299,
            args: v2300,
            sig_ref: v2301,
        } => {
            match v2299 {
                &Opcode::CallIndirect => {
                    let v2302 = C::value_list_slice(ctx, v2300);
                    let v2303 = C::value_slice_unwrap(ctx, v2302);
                    if let Some(v2304) = v2303 {
                        let v2307 = C::gen_call_indirect(ctx, v2301, v2304.0, v2304.1);
                        let v2308 = Some(v2307);
                        // Rule at src\isa\x64\lower.isle line 3348.
                        return v2308;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2302 = C::value_list_slice(ctx, v2300);
                    let v2303 = C::value_slice_unwrap(ctx, v2302);
                    if let Some(v2304) = v2303 {
                        let v2311 = C::gen_return_call_indirect(ctx, v2301, v2304.0, v2304.1);
                        let v2312 = Some(v2311);
                        // Rule at src\isa\x64\lower.isle line 3356.
                        return v2312;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1322,
            args: ref v1323,
            cond: ref v1324,
        } => {
            if let &Opcode::Fcmp = v1322 {
                match v1324 {
                    &FloatCC::Equal => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1340 =
                                constructor_x64_cmpp(ctx, v1336, v1337, v1338, &FcmpImm::Equal);
                            let v1341 = constructor_output_xmm(ctx, v1340);
                            let v1342 = Some(v1341);
                            // Rule at src\isa\x64\lower.isle line 2045.
                            return v1342;
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1371 = constructor_put_in_xmm(ctx, v1325.1);
                            let v1372 = &C::put_in_xmm_mem(ctx, v1325.0);
                            let v1373 =
                                constructor_x64_cmpp(ctx, v1336, v1371, v1372, &FcmpImm::LessThan);
                            let v1374 = constructor_output_xmm(ctx, v1373);
                            let v1375 = Some(v1374);
                            // Rule at src\isa\x64\lower.isle line 2065.
                            return v1375;
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1371 = constructor_put_in_xmm(ctx, v1325.1);
                            let v1372 = &C::put_in_xmm_mem(ctx, v1325.0);
                            let v1376 = constructor_x64_cmpp(
                                ctx,
                                v1336,
                                v1371,
                                v1372,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v1377 = constructor_output_xmm(ctx, v1376);
                            let v1378 = Some(v1377);
                            // Rule at src\isa\x64\lower.isle line 2067.
                            return v1378;
                        }
                    }
                    &FloatCC::LessThan => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1348 =
                                constructor_x64_cmpp(ctx, v1336, v1337, v1338, &FcmpImm::LessThan);
                            let v1349 = constructor_output_xmm(ctx, v1348);
                            let v1350 = Some(v1349);
                            // Rule at src\isa\x64\lower.isle line 2049.
                            return v1350;
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1352 = constructor_x64_cmpp(
                                ctx,
                                v1336,
                                v1337,
                                v1338,
                                &FcmpImm::LessThanOrEqual,
                            );
                            let v1353 = constructor_output_xmm(ctx, v1352);
                            let v1354 = Some(v1353);
                            // Rule at src\isa\x64\lower.isle line 2051.
                            return v1354;
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1344 =
                                constructor_x64_cmpp(ctx, v1336, v1337, v1338, &FcmpImm::NotEqual);
                            let v1345 = constructor_output_xmm(ctx, v1344);
                            let v1346 = Some(v1345);
                            // Rule at src\isa\x64\lower.isle line 2047.
                            return v1346;
                        }
                    }
                    &FloatCC::Ordered => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1356 =
                                constructor_x64_cmpp(ctx, v1336, v1337, v1338, &FcmpImm::Ordered);
                            let v1357 = constructor_output_xmm(ctx, v1356);
                            let v1358 = Some(v1357);
                            // Rule at src\isa\x64\lower.isle line 2053.
                            return v1358;
                        }
                    }
                    &FloatCC::Unordered => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1360 =
                                constructor_x64_cmpp(ctx, v1336, v1337, v1338, &FcmpImm::Unordered);
                            let v1361 = constructor_output_xmm(ctx, v1360);
                            let v1362 = Some(v1361);
                            // Rule at src\isa\x64\lower.isle line 2055.
                            return v1362;
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1364 = constructor_x64_cmpp(
                                ctx,
                                v1336,
                                v1337,
                                v1338,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v1365 = constructor_output_xmm(ctx, v1364);
                            let v1366 = Some(v1365);
                            // Rule at src\isa\x64\lower.isle line 2057.
                            return v1366;
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1337 = constructor_put_in_xmm(ctx, v1325.0);
                            let v1338 = &C::put_in_xmm_mem(ctx, v1325.1);
                            let v1368 = constructor_x64_cmpp(
                                ctx,
                                v1336,
                                v1337,
                                v1338,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v1369 = constructor_output_xmm(ctx, v1368);
                            let v1370 = Some(v1369);
                            // Rule at src\isa\x64\lower.isle line 2059.
                            return v1370;
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1371 = constructor_put_in_xmm(ctx, v1325.1);
                            let v1372 = &C::put_in_xmm_mem(ctx, v1325.0);
                            let v1379 = constructor_x64_cmpp(
                                ctx,
                                v1336,
                                v1371,
                                v1372,
                                &FcmpImm::UnorderedOrGreaterThan,
                            );
                            let v1380 = constructor_output_xmm(ctx, v1379);
                            let v1381 = Some(v1380);
                            // Rule at src\isa\x64\lower.isle line 2069.
                            return v1381;
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v1325 = C::unpack_value_array_2(ctx, v1323);
                        let v1328 = C::value_type(ctx, v1325.0);
                        let v1335 = C::ty_vec128(ctx, v1328);
                        if let Some(v1336) = v1335 {
                            let v1371 = constructor_put_in_xmm(ctx, v1325.1);
                            let v1372 = &C::put_in_xmm_mem(ctx, v1325.0);
                            let v1382 = constructor_x64_cmpp(
                                ctx,
                                v1336,
                                v1371,
                                v1372,
                                &FcmpImm::UnorderedOrGreaterThanOrEqual,
                            );
                            let v1383 = constructor_output_xmm(ctx, v1382);
                            let v1384 = Some(v1383);
                            // Rule at src\isa\x64\lower.isle line 2071.
                            return v1384;
                        }
                    }
                    _ => {}
                }
                let v1325 = C::unpack_value_array_2(ctx, v1323);
                let v1328 = C::value_type(ctx, v1325.0);
                let v1329 = C::ty_scalar_float(ctx, v1328);
                if let Some(v1330) = v1329 {
                    let v1331 = &constructor_emit_fcmp(ctx, v1324, v1325.0, v1325.1);
                    let v1332 = constructor_lower_fcmp_bool(ctx, v1331);
                    let v1333 = C::output(ctx, v1332);
                    let v1334 = Some(v1333);
                    // Rule at src\isa\x64\lower.isle line 2038.
                    return v1334;
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v2206,
            func_ref: v2207,
        } => {
            if let &Opcode::FuncAddr = v2206 {
                let v2208 = C::func_ref_data(ctx, v2207);
                let v2213 = constructor_load_ext_name(ctx, v2208.1, 0x0, v2208.2);
                let v2214 = constructor_output_reg(ctx, v2213);
                let v2215 = Some(v2214);
                // Rule at src\isa\x64\lower.isle line 3287.
                return v2215;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1126,
            args: ref v1127,
            code: ref v1128,
        } => {
            if let &Opcode::UaddOverflowTrap = v1126 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1129 = C::unpack_value_array_2(ctx, v1127);
                        let v1147 = &C::sinkable_load(ctx, v1129.0);
                        if let Some(v1148) = v1147 {
                            let v1141 = constructor_put_in_gpr(ctx, v1129.1);
                            let v1149 = &constructor_sink_load_to_gpr_mem_imm(ctx, v1148);
                            let v1150 =
                                &constructor_x64_add_with_flags_paired(ctx, v5, v1141, v1149);
                            let v1135 = &constructor_trap_if(ctx, &CC::B, v1128);
                            let v1151 = constructor_with_flags(ctx, v1150, v1135);
                            let v1152 = C::output(ctx, v1151);
                            let v1153 = Some(v1152);
                            // Rule at src\isa\x64\lower.isle line 1831.
                            return v1153;
                        }
                        let v1139 = &C::simm32_from_value(ctx, v1129.0);
                        if let Some(v1140) = v1139 {
                            let v1141 = constructor_put_in_gpr(ctx, v1129.1);
                            let v1142 =
                                &constructor_x64_add_with_flags_paired(ctx, v5, v1141, v1140);
                            let v1143 = &constructor_trap_if(ctx, &CC::B, v1128);
                            let v1144 = constructor_with_flags(ctx, v1142, v1143);
                            let v1145 = C::output(ctx, v1144);
                            let v1146 = Some(v1145);
                            // Rule at src\isa\x64\lower.isle line 1825.
                            return v1146;
                        }
                        let v1132 = constructor_put_in_gpr(ctx, v1129.0);
                        let v1133 = &constructor_put_in_gpr_mem_imm(ctx, v1129.1);
                        let v1134 = &constructor_x64_add_with_flags_paired(ctx, v5, v1132, v1133);
                        let v1135 = &constructor_trap_if(ctx, &CC::B, v1128);
                        let v1136 = constructor_with_flags(ctx, v1134, v1135);
                        let v1137 = C::output(ctx, v1136);
                        let v1138 = Some(v1137);
                        // Rule at src\isa\x64\lower.isle line 1817.
                        return v1138;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1159,
            args: ref v1160,
            cond: ref v1161,
        } => {
            if let &Opcode::Icmp = v1159 {
                match v1161 {
                    &IntCC::Equal => {
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1224 = &C::put_in_xmm_mem(ctx, v1162.1);
                            let v1225 = constructor_x64_pcmpeq(ctx, v1222, v1223, v1224);
                            let v1226 = constructor_output_xmm(ctx, v1225);
                            let v1227 = Some(v1226);
                            // Rule at src\isa\x64\lower.isle line 1888.
                            return v1227;
                        }
                    }
                    &IntCC::NotEqual => {
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1224 = &C::put_in_xmm_mem(ctx, v1162.1);
                            let v1225 = constructor_x64_pcmpeq(ctx, v1222, v1223, v1224);
                            let v1228 = constructor_vector_all_ones(ctx);
                            let v1229 = &C::xmm_to_xmm_mem(ctx, v1228);
                            let v1230 = constructor_x64_pxor(ctx, v1225, v1229);
                            let v1231 = constructor_output_xmm(ctx, v1230);
                            let v1232 = Some(v1231);
                            // Rule at src\isa\x64\lower.isle line 1893.
                            return v1232;
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1162 = C::unpack_value_array_2(ctx, v1160);
                                let v1185 = C::def_inst(ctx, v1162.0);
                                if let Some(v1186) = v1185 {
                                    let v1187 = &C::inst_data(ctx, v1186);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1188,
                                        imm: v1189,
                                    } = v1187
                                    {
                                        if let &Opcode::Iconst = v1188 {
                                            let v1190 = C::u64_from_imm64(ctx, v1189);
                                            if v1190 == 0x0 {
                                                let v1191 = C::value_type(ctx, v1162.1);
                                                match v1191 {
                                                    I32 => {
                                                        let v1192 =
                                                            constructor_put_in_gpr(ctx, v1162.1);
                                                        let v1206 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v1207 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1206);
                                                        let v1211 = constructor_x64_shr(
                                                            ctx, I32, v1192, v1207,
                                                        );
                                                        let v1212 =
                                                            constructor_output_gpr(ctx, v1211);
                                                        let v1213 = Some(v1212);
                                                        // Rule at src\isa\x64\lower.isle line 1872.
                                                        return v1213;
                                                    }
                                                    I64 => {
                                                        let v1192 =
                                                            constructor_put_in_gpr(ctx, v1162.1);
                                                        let v1180 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v1181 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1180);
                                                        let v1193 = constructor_x64_shr(
                                                            ctx, I64, v1192, v1181,
                                                        );
                                                        let v1194 =
                                                            constructor_output_gpr(ctx, v1193);
                                                        let v1195 = Some(v1194);
                                                        // Rule at src\isa\x64\lower.isle line 1856.
                                                        return v1195;
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1224 = &C::put_in_xmm_mem(ctx, v1162.1);
                            let v1233 = constructor_x64_pcmpgt(ctx, v1222, v1223, v1224);
                            let v1234 = constructor_output_xmm(ctx, v1233);
                            let v1235 = Some(v1234);
                            // Rule at src\isa\x64\lower.isle line 1900.
                            return v1235;
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1162 = C::unpack_value_array_2(ctx, v1160);
                                let v1165 = C::value_type(ctx, v1162.0);
                                match v1165 {
                                    I32 => {
                                        let v1172 = C::def_inst(ctx, v1162.1);
                                        if let Some(v1173) = v1172 {
                                            let v1174 = &C::inst_data(ctx, v1173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1175,
                                                imm: v1176,
                                            } = v1174
                                            {
                                                if let &Opcode::Iconst = v1175 {
                                                    let v1177 = C::u64_from_imm64(ctx, v1176);
                                                    if v1177 == 0x0 {
                                                        let v1178 =
                                                            constructor_put_in_gpr(ctx, v1162.0);
                                                        let v1201 =
                                                            constructor_x64_not(ctx, I64, v1178);
                                                        let v1206 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v1214 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1206);
                                                        let v1218 = constructor_x64_shr(
                                                            ctx, I32, v1201, v1214,
                                                        );
                                                        let v1219 =
                                                            constructor_output_gpr(ctx, v1218);
                                                        let v1220 = Some(v1219);
                                                        // Rule at src\isa\x64\lower.isle line 1880.
                                                        return v1220;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v1172 = C::def_inst(ctx, v1162.1);
                                        if let Some(v1173) = v1172 {
                                            let v1174 = &C::inst_data(ctx, v1173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1175,
                                                imm: v1176,
                                            } = v1174
                                            {
                                                if let &Opcode::Iconst = v1175 {
                                                    let v1177 = C::u64_from_imm64(ctx, v1176);
                                                    if v1177 == 0x0 {
                                                        let v1178 =
                                                            constructor_put_in_gpr(ctx, v1162.0);
                                                        let v1201 =
                                                            constructor_x64_not(ctx, I64, v1178);
                                                        let v1180 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v1197 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1180);
                                                        let v1202 = constructor_x64_shr(
                                                            ctx, I64, v1201, v1197,
                                                        );
                                                        let v1203 =
                                                            constructor_output_gpr(ctx, v1202);
                                                        let v1204 = Some(v1203);
                                                        // Rule at src\isa\x64\lower.isle line 1864.
                                                        return v1204;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1273 = constructor_has_pmaxs(ctx, v1222);
                            if v1273 == true {
                                let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1274 = &C::put_in_xmm_mem(ctx, v1162.1);
                                let v1275 = constructor_x64_pmaxs(ctx, v1222, v1253, v1274);
                                let v1276 = &C::xmm_to_xmm_mem(ctx, v1275);
                                let v1277 = constructor_x64_pcmpeq(ctx, v1222, v1223, v1276);
                                let v1278 = constructor_output_xmm(ctx, v1277);
                                let v1279 = Some(v1278);
                                // Rule at src\isa\x64\lower.isle line 1950.
                                return v1279;
                            }
                            let v1236 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1237 = &C::put_in_xmm_mem(ctx, v1162.0);
                            let v1238 = constructor_x64_pcmpgt(ctx, v1222, v1236, v1237);
                            let v1228 = constructor_vector_all_ones(ctx);
                            let v1229 = &C::xmm_to_xmm_mem(ctx, v1228);
                            let v1280 = constructor_x64_pxor(ctx, v1238, v1229);
                            let v1281 = constructor_output_xmm(ctx, v1280);
                            let v1282 = Some(v1281);
                            // Rule at src\isa\x64\lower.isle line 1956.
                            return v1282;
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1162 = C::unpack_value_array_2(ctx, v1160);
                                let v1165 = C::value_type(ctx, v1162.0);
                                match v1165 {
                                    I32 => {
                                        let v1172 = C::def_inst(ctx, v1162.1);
                                        if let Some(v1173) = v1172 {
                                            let v1174 = &C::inst_data(ctx, v1173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1175,
                                                imm: v1176,
                                            } = v1174
                                            {
                                                if let &Opcode::Iconst = v1175 {
                                                    let v1177 = C::u64_from_imm64(ctx, v1176);
                                                    if v1177 == 0x0 {
                                                        let v1178 =
                                                            constructor_put_in_gpr(ctx, v1162.0);
                                                        let v1206 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v1207 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1206);
                                                        let v1208 = constructor_x64_shr(
                                                            ctx, I32, v1178, v1207,
                                                        );
                                                        let v1209 =
                                                            constructor_output_gpr(ctx, v1208);
                                                        let v1210 = Some(v1209);
                                                        // Rule at src\isa\x64\lower.isle line 1868.
                                                        return v1210;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v1172 = C::def_inst(ctx, v1162.1);
                                        if let Some(v1173) = v1172 {
                                            let v1174 = &C::inst_data(ctx, v1173);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1175,
                                                imm: v1176,
                                            } = v1174
                                            {
                                                if let &Opcode::Iconst = v1175 {
                                                    let v1177 = C::u64_from_imm64(ctx, v1176);
                                                    if v1177 == 0x0 {
                                                        let v1178 =
                                                            constructor_put_in_gpr(ctx, v1162.0);
                                                        let v1180 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v1181 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1180);
                                                        let v1182 = constructor_x64_shr(
                                                            ctx, I64, v1178, v1181,
                                                        );
                                                        let v1183 =
                                                            constructor_output_gpr(ctx, v1182);
                                                        let v1184 = Some(v1183);
                                                        // Rule at src\isa\x64\lower.isle line 1852.
                                                        return v1184;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1236 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1237 = &C::put_in_xmm_mem(ctx, v1162.0);
                            let v1238 = constructor_x64_pcmpgt(ctx, v1222, v1236, v1237);
                            let v1239 = constructor_output_xmm(ctx, v1238);
                            let v1240 = Some(v1239);
                            // Rule at src\isa\x64\lower.isle line 1905.
                            return v1240;
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1162 = C::unpack_value_array_2(ctx, v1160);
                                let v1185 = C::def_inst(ctx, v1162.0);
                                if let Some(v1186) = v1185 {
                                    let v1187 = &C::inst_data(ctx, v1186);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1188,
                                        imm: v1189,
                                    } = v1187
                                    {
                                        if let &Opcode::Iconst = v1188 {
                                            let v1190 = C::u64_from_imm64(ctx, v1189);
                                            if v1190 == 0x0 {
                                                let v1191 = C::value_type(ctx, v1162.1);
                                                match v1191 {
                                                    I32 => {
                                                        let v1192 =
                                                            constructor_put_in_gpr(ctx, v1162.1);
                                                        let v1196 =
                                                            constructor_x64_not(ctx, I64, v1192);
                                                        let v1206 = Imm8Reg::Imm8 { imm: 0x1F };
                                                        let v1214 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1206);
                                                        let v1215 = constructor_x64_shr(
                                                            ctx, I32, v1196, v1214,
                                                        );
                                                        let v1216 =
                                                            constructor_output_gpr(ctx, v1215);
                                                        let v1217 = Some(v1216);
                                                        // Rule at src\isa\x64\lower.isle line 1876.
                                                        return v1217;
                                                    }
                                                    I64 => {
                                                        let v1192 =
                                                            constructor_put_in_gpr(ctx, v1162.1);
                                                        let v1196 =
                                                            constructor_x64_not(ctx, I64, v1192);
                                                        let v1180 = Imm8Reg::Imm8 { imm: 0x3F };
                                                        let v1197 =
                                                            &C::imm8_reg_to_imm8_gpr(ctx, &v1180);
                                                        let v1198 = constructor_x64_shr(
                                                            ctx, I64, v1196, v1197,
                                                        );
                                                        let v1199 =
                                                            constructor_output_gpr(ctx, v1198);
                                                        let v1200 = Some(v1199);
                                                        // Rule at src\isa\x64\lower.isle line 1860.
                                                        return v1200;
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1283 = constructor_has_pmins(ctx, v1222);
                            if v1283 == true {
                                let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1274 = &C::put_in_xmm_mem(ctx, v1162.1);
                                let v1284 = constructor_x64_pmins(ctx, v1222, v1253, v1274);
                                let v1285 = &C::xmm_to_xmm_mem(ctx, v1284);
                                let v1286 = constructor_x64_pcmpeq(ctx, v1222, v1223, v1285);
                                let v1287 = constructor_output_xmm(ctx, v1286);
                                let v1288 = Some(v1287);
                                // Rule at src\isa\x64\lower.isle line 1962.
                                return v1288;
                            }
                            let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1224 = &C::put_in_xmm_mem(ctx, v1162.1);
                            let v1233 = constructor_x64_pcmpgt(ctx, v1222, v1223, v1224);
                            let v1228 = constructor_vector_all_ones(ctx);
                            let v1229 = &C::xmm_to_xmm_mem(ctx, v1228);
                            let v1289 = constructor_x64_pxor(ctx, v1233, v1229);
                            let v1290 = constructor_output_xmm(ctx, v1289);
                            let v1291 = Some(v1290);
                            // Rule at src\isa\x64\lower.isle line 1967.
                            return v1291;
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1241 = constructor_has_pmaxu(ctx, v1222);
                            if v1241 == true {
                                let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1242 = constructor_put_in_xmm(ctx, v1162.1);
                                let v1243 = &C::xmm_to_xmm_mem(ctx, v1242);
                                let v1244 = constructor_x64_pmaxu(ctx, v1222, v1223, v1243);
                                let v1245 = &C::xmm_to_xmm_mem(ctx, v1242);
                                let v1246 = constructor_x64_pcmpeq(ctx, v1222, v1244, v1245);
                                let v1247 = constructor_vector_all_ones(ctx);
                                let v1248 = &C::xmm_to_xmm_mem(ctx, v1247);
                                let v1249 = constructor_x64_pxor(ctx, v1246, v1248);
                                let v1250 = constructor_output_xmm(ctx, v1249);
                                let v1251 = Some(v1250);
                                // Rule at src\isa\x64\lower.isle line 1912.
                                return v1251;
                            }
                            let v1252 = constructor_flip_high_bit_mask(ctx, v1222);
                            let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1254 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1255 = constructor_x64_pxor(ctx, v1253, v1254);
                            let v1256 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1257 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1258 = constructor_x64_pxor(ctx, v1256, v1257);
                            let v1259 = &C::xmm_to_xmm_mem(ctx, v1258);
                            let v1260 = constructor_x64_pcmpgt(ctx, v1222, v1255, v1259);
                            let v1261 = constructor_output_xmm(ctx, v1260);
                            let v1262 = Some(v1261);
                            // Rule at src\isa\x64\lower.isle line 1922.
                            return v1262;
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1241 = constructor_has_pmaxu(ctx, v1222);
                            if v1241 == true {
                                let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1274 = &C::put_in_xmm_mem(ctx, v1162.1);
                                let v1292 = constructor_x64_pmaxu(ctx, v1222, v1253, v1274);
                                let v1293 = &C::xmm_to_xmm_mem(ctx, v1292);
                                let v1294 = constructor_x64_pcmpeq(ctx, v1222, v1223, v1293);
                                let v1295 = constructor_output_xmm(ctx, v1294);
                                let v1296 = Some(v1295);
                                // Rule at src\isa\x64\lower.isle line 1972.
                                return v1296;
                            }
                        }
                        if v1165 == I16X8 {
                            let v1236 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1237 = &C::put_in_xmm_mem(ctx, v1162.0);
                            let v1297 = constructor_x64_psubusw(ctx, v1236, v1237);
                            let v1298 = constructor_xmm_zero(ctx, I16X8);
                            let v1299 = &C::xmm_to_xmm_mem(ctx, v1298);
                            let v1300 = constructor_x64_pcmpeqw(ctx, v1297, v1299);
                            let v1301 = constructor_output_xmm(ctx, v1300);
                            let v1302 = Some(v1301);
                            // Rule at src\isa\x64\lower.isle line 1978.
                            return v1302;
                        }
                        if let Some(v1222) = v1221 {
                            let v1252 = constructor_flip_high_bit_mask(ctx, v1222);
                            let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1254 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1255 = constructor_x64_pxor(ctx, v1253, v1254);
                            let v1256 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1257 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1258 = constructor_x64_pxor(ctx, v1256, v1257);
                            let v1269 = &C::xmm_to_xmm_mem(ctx, v1255);
                            let v1270 = constructor_x64_pcmpgt(ctx, v1222, v1258, v1269);
                            let v1303 = constructor_vector_all_ones(ctx);
                            let v1304 = &C::xmm_to_xmm_mem(ctx, v1303);
                            let v1305 = constructor_x64_pxor(ctx, v1270, v1304);
                            let v1306 = constructor_output_xmm(ctx, v1305);
                            let v1307 = Some(v1306);
                            // Rule at src\isa\x64\lower.isle line 1984.
                            return v1307;
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1263 = constructor_has_pminu(ctx, v1222);
                            if v1263 == true {
                                let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1242 = constructor_put_in_xmm(ctx, v1162.1);
                                let v1243 = &C::xmm_to_xmm_mem(ctx, v1242);
                                let v1264 = constructor_x64_pminu(ctx, v1222, v1223, v1243);
                                let v1245 = &C::xmm_to_xmm_mem(ctx, v1242);
                                let v1265 = constructor_x64_pcmpeq(ctx, v1222, v1264, v1245);
                                let v1247 = constructor_vector_all_ones(ctx);
                                let v1248 = &C::xmm_to_xmm_mem(ctx, v1247);
                                let v1266 = constructor_x64_pxor(ctx, v1265, v1248);
                                let v1267 = constructor_output_xmm(ctx, v1266);
                                let v1268 = Some(v1267);
                                // Rule at src\isa\x64\lower.isle line 1930.
                                return v1268;
                            }
                            let v1252 = constructor_flip_high_bit_mask(ctx, v1222);
                            let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1254 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1255 = constructor_x64_pxor(ctx, v1253, v1254);
                            let v1256 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1257 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1258 = constructor_x64_pxor(ctx, v1256, v1257);
                            let v1269 = &C::xmm_to_xmm_mem(ctx, v1255);
                            let v1270 = constructor_x64_pcmpgt(ctx, v1222, v1258, v1269);
                            let v1271 = constructor_output_xmm(ctx, v1270);
                            let v1272 = Some(v1271);
                            // Rule at src\isa\x64\lower.isle line 1941.
                            return v1272;
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v1162 = C::unpack_value_array_2(ctx, v1160);
                        let v1165 = C::value_type(ctx, v1162.0);
                        let v1221 = C::ty_vec128(ctx, v1165);
                        if let Some(v1222) = v1221 {
                            let v1263 = constructor_has_pminu(ctx, v1222);
                            if v1263 == true {
                                let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                                let v1274 = &C::put_in_xmm_mem(ctx, v1162.1);
                                let v1308 = constructor_x64_pminu(ctx, v1222, v1253, v1274);
                                let v1309 = &C::xmm_to_xmm_mem(ctx, v1308);
                                let v1310 = constructor_x64_pcmpeq(ctx, v1222, v1223, v1309);
                                let v1311 = constructor_output_xmm(ctx, v1310);
                                let v1312 = Some(v1311);
                                // Rule at src\isa\x64\lower.isle line 1995.
                                return v1312;
                            }
                        }
                        if v1165 == I16X8 {
                            let v1223 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1224 = &C::put_in_xmm_mem(ctx, v1162.1);
                            let v1313 = constructor_x64_psubusw(ctx, v1223, v1224);
                            let v1314 = constructor_xmm_zero(ctx, I8X16);
                            let v1315 = &C::xmm_to_xmm_mem(ctx, v1314);
                            let v1316 = constructor_x64_pcmpeqw(ctx, v1313, v1315);
                            let v1317 = constructor_output_xmm(ctx, v1316);
                            let v1318 = Some(v1317);
                            // Rule at src\isa\x64\lower.isle line 2002.
                            return v1318;
                        }
                        if let Some(v1222) = v1221 {
                            let v1252 = constructor_flip_high_bit_mask(ctx, v1222);
                            let v1253 = constructor_put_in_xmm(ctx, v1162.0);
                            let v1254 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1255 = constructor_x64_pxor(ctx, v1253, v1254);
                            let v1256 = constructor_put_in_xmm(ctx, v1162.1);
                            let v1257 = &C::xmm_to_xmm_mem(ctx, v1252);
                            let v1258 = constructor_x64_pxor(ctx, v1256, v1257);
                            let v1259 = &C::xmm_to_xmm_mem(ctx, v1258);
                            let v1260 = constructor_x64_pcmpgt(ctx, v1222, v1255, v1259);
                            let v1303 = constructor_vector_all_ones(ctx);
                            let v1304 = &C::xmm_to_xmm_mem(ctx, v1303);
                            let v1319 = constructor_x64_pxor(ctx, v1260, v1304);
                            let v1320 = constructor_output_xmm(ctx, v1319);
                            let v1321 = Some(v1320);
                            // Rule at src\isa\x64\lower.isle line 2010.
                            return v1321;
                        }
                    }
                    _ => {}
                }
                let v1162 = C::unpack_value_array_2(ctx, v1160);
                let v1165 = C::value_type(ctx, v1162.0);
                if v1165 == I128 {
                    let v1168 = &constructor_emit_cmp(ctx, v1161, v1162.0, v1162.1);
                    let v1169 = constructor_lower_icmp_bool(ctx, v1168);
                    let v1170 = C::output(ctx, v1169);
                    let v1171 = Some(v1170);
                    // Rule at src\isa\x64\lower.isle line 1848.
                    return v1171;
                }
                let v1166 = C::fits_in_64(ctx, v1165);
                if let Some(v1167) = v1166 {
                    let v1168 = &constructor_emit_cmp(ctx, v1161, v1162.0, v1162.1);
                    let v1169 = constructor_lower_icmp_bool(ctx, v1168);
                    let v1170 = C::output(ctx, v1169);
                    let v1171 = Some(v1170);
                    // Rule at src\isa\x64\lower.isle line 1845.
                    return v1171;
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1938,
            arg: v1939,
            flags: v1940,
            offset: v1941,
        } => {
            match v1938 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F16 => {
                                let v1978 = constructor_xmm_uninit_value(ctx);
                                let v1945 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1946 = &constructor_amode_to_gpr_mem(ctx, v1945);
                                let v1980 = constructor_x64_pinsrw(ctx, v1978, v1946, 0x0);
                                let v1981 = constructor_output_xmm(ctx, v1980);
                                let v1982 = Some(v1981);
                                // Rule at src\isa\x64\lower.isle line 2942.
                                return v1982;
                            }
                            F32 => {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1983 = &C::amode_to_synthetic_amode(ctx, v1952);
                                let v1984 = constructor_x64_movss_load(ctx, v1983);
                                let v1985 = constructor_output_xmm(ctx, v1984);
                                let v1986 = Some(v1985);
                                // Rule at src\isa\x64\lower.isle line 2944.
                                return v1986;
                            }
                            F64 => {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1983 = &C::amode_to_synthetic_amode(ctx, v1952);
                                let v1987 = constructor_x64_movsd_load(ctx, v1983);
                                let v1988 = constructor_output_xmm(ctx, v1987);
                                let v1989 = Some(v1988);
                                // Rule at src\isa\x64\lower.isle line 2946.
                                return v1989;
                            }
                            F128 => {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v1991 = constructor_x64_movdqu_load(ctx, v1990);
                                let v1992 = constructor_output_xmm(ctx, v1991);
                                let v1993 = Some(v1992);
                                // Rule at src\isa\x64\lower.isle line 2948.
                                return v1993;
                            }
                            F32X4 => {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1983 = &C::amode_to_synthetic_amode(ctx, v1952);
                                let v1994 = constructor_x64_movups_load(ctx, v1983);
                                let v1995 = constructor_output_xmm(ctx, v1994);
                                let v1996 = Some(v1995);
                                // Rule at src\isa\x64\lower.isle line 2950.
                                return v1996;
                            }
                            F64X2 => {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1983 = &C::amode_to_synthetic_amode(ctx, v1952);
                                let v1997 = constructor_x64_movupd_load(ctx, v1983);
                                let v1998 = constructor_output_xmm(ctx, v1997);
                                let v1999 = Some(v1998);
                                // Rule at src\isa\x64\lower.isle line 2952.
                                return v1999;
                            }
                            _ => {}
                        }
                        let v1950 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v1951) = v1950 {
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1953 = constructor_x64_mov(ctx, v1952);
                            let v1954 = constructor_output_reg(ctx, v1953);
                            let v1955 = Some(v1954);
                            // Rule at src\isa\x64\lower.isle line 2920.
                            return v1955;
                        }
                        let v1065 = C::ty_vec128(ctx, v3);
                        if let Some(v1066) = v1065 {
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                            let v1991 = constructor_x64_movdqu_load(ctx, v1990);
                            let v1992 = constructor_output_xmm(ctx, v1991);
                            let v1993 = Some(v1992);
                            // Rule at src\isa\x64\lower.isle line 2954.
                            return v1993;
                        }
                        if v3 == I128 {
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v2001 = &C::amode_offset(ctx, v1952, 0x8);
                            let v2002 = constructor_x64_mov(ctx, v1952);
                            let v2003 = constructor_x64_mov(ctx, v2001);
                            let v2004 = C::value_regs(ctx, v2002, v2003);
                            let v2005 = C::output(ctx, v2004);
                            let v2006 = Some(v2005);
                            // Rule at src\isa\x64\lower.isle line 2958.
                            return v2006;
                        }
                        let v1647 = C::fits_in_32(ctx, v3);
                        if let Some(v1648) = v1647 {
                            let v1935 = &C::type_register_class(ctx, v3);
                            if let Some(v1936) = v1935 {
                                if let &RegisterClass::Gpr {
                                    single_register: v1937,
                                } = v1936
                                {
                                    let v1942 = C::ty_bits_u16(ctx, v1648);
                                    let v1944 = &C::ext_mode(ctx, v1942, 0x40);
                                    let v1945 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                    let v1946 = &constructor_amode_to_gpr_mem(ctx, v1945);
                                    let v1947 = constructor_x64_movzx(ctx, v1944, v1946);
                                    let v1948 = constructor_output_gpr(ctx, v1947);
                                    let v1949 = Some(v1948);
                                    // Rule at src\isa\x64\lower.isle line 2916.
                                    return v1949;
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            if let &RegisterClass::Gpr {
                                single_register: v1937,
                            } = v1936
                            {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                                let v1958 = constructor_x64_movzx(ctx, &ExtMode::BQ, v1957);
                                let v1959 = constructor_output_gpr(ctx, v1958);
                                let v1960 = Some(v1959);
                                // Rule at src\isa\x64\lower.isle line 2925.
                                return v1960;
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            if let &RegisterClass::Gpr {
                                single_register: v1937,
                            } = v1936
                            {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                                let v1961 = constructor_x64_movsx(ctx, &ExtMode::BQ, v1957);
                                let v1962 = constructor_output_gpr(ctx, v1961);
                                let v1963 = Some(v1962);
                                // Rule at src\isa\x64\lower.isle line 2927.
                                return v1963;
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            if let &RegisterClass::Gpr {
                                single_register: v1937,
                            } = v1936
                            {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                                let v1965 = constructor_x64_movzx(ctx, &ExtMode::WQ, v1957);
                                let v1966 = constructor_output_gpr(ctx, v1965);
                                let v1967 = Some(v1966);
                                // Rule at src\isa\x64\lower.isle line 2929.
                                return v1967;
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            if let &RegisterClass::Gpr {
                                single_register: v1937,
                            } = v1936
                            {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                                let v1968 = constructor_x64_movsx(ctx, &ExtMode::WQ, v1957);
                                let v1969 = constructor_output_gpr(ctx, v1968);
                                let v1970 = Some(v1969);
                                // Rule at src\isa\x64\lower.isle line 2931.
                                return v1970;
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            if let &RegisterClass::Gpr {
                                single_register: v1937,
                            } = v1936
                            {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                                let v1972 = constructor_x64_movzx(ctx, &ExtMode::LQ, v1957);
                                let v1973 = constructor_output_gpr(ctx, v1972);
                                let v1974 = Some(v1973);
                                // Rule at src\isa\x64\lower.isle line 2933.
                                return v1974;
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            if let &RegisterClass::Gpr {
                                single_register: v1937,
                            } = v1936
                            {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                                let v1975 = constructor_x64_movsx(ctx, &ExtMode::LQ, v1957);
                                let v1976 = constructor_output_gpr(ctx, v1975);
                                let v1977 = Some(v1976);
                                // Rule at src\isa\x64\lower.isle line 2935.
                                return v1977;
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v2010 = constructor_x64_pmovzxbw(ctx, v1990);
                                let v2011 = constructor_output_xmm(ctx, v2010);
                                let v2012 = Some(v2011);
                                // Rule at src\isa\x64\lower.isle line 2971.
                                return v2012;
                            }
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                            let v2025 = constructor_x64_movq_to_xmm(ctx, v1957);
                            let v2029 = constructor_lower_uwiden_low(ctx, I16X8, v2025);
                            let v2030 = constructor_output_xmm(ctx, v2029);
                            let v2031 = Some(v2030);
                            // Rule at src\isa\x64\lower.isle line 2989.
                            return v2031;
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v2007 = constructor_x64_pmovsxbw(ctx, v1990);
                                let v2008 = constructor_output_xmm(ctx, v2007);
                                let v2009 = Some(v2008);
                                // Rule at src\isa\x64\lower.isle line 2968.
                                return v2009;
                            }
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                            let v2025 = constructor_x64_movq_to_xmm(ctx, v1957);
                            let v2026 = constructor_lower_swiden_low(ctx, I16X8, v2025);
                            let v2027 = constructor_output_xmm(ctx, v2026);
                            let v2028 = Some(v2027);
                            // Rule at src\isa\x64\lower.isle line 2987.
                            return v2028;
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v2016 = constructor_x64_pmovzxwd(ctx, v1990);
                                let v2017 = constructor_output_xmm(ctx, v2016);
                                let v2018 = Some(v2017);
                                // Rule at src\isa\x64\lower.isle line 2977.
                                return v2018;
                            }
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                            let v2025 = constructor_x64_movq_to_xmm(ctx, v1957);
                            let v2035 = constructor_lower_uwiden_low(ctx, I32X4, v2025);
                            let v2036 = constructor_output_xmm(ctx, v2035);
                            let v2037 = Some(v2036);
                            // Rule at src\isa\x64\lower.isle line 2993.
                            return v2037;
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v2013 = constructor_x64_pmovsxwd(ctx, v1990);
                                let v2014 = constructor_output_xmm(ctx, v2013);
                                let v2015 = Some(v2014);
                                // Rule at src\isa\x64\lower.isle line 2974.
                                return v2015;
                            }
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                            let v2025 = constructor_x64_movq_to_xmm(ctx, v1957);
                            let v2032 = constructor_lower_swiden_low(ctx, I32X4, v2025);
                            let v2033 = constructor_output_xmm(ctx, v2032);
                            let v2034 = Some(v2033);
                            // Rule at src\isa\x64\lower.isle line 2991.
                            return v2034;
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v2022 = constructor_x64_pmovzxdq(ctx, v1990);
                                let v2023 = constructor_output_xmm(ctx, v2022);
                                let v2024 = Some(v2023);
                                // Rule at src\isa\x64\lower.isle line 2983.
                                return v2024;
                            }
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                            let v2025 = constructor_x64_movq_to_xmm(ctx, v1957);
                            let v2041 = constructor_lower_uwiden_low(ctx, I64X2, v2025);
                            let v2042 = constructor_output_xmm(ctx, v2041);
                            let v2043 = Some(v2042);
                            // Rule at src\isa\x64\lower.isle line 2997.
                            return v2043;
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                                let v1990 = &constructor_amode_to_xmm_mem(ctx, v1952);
                                let v2019 = constructor_x64_pmovsxdq(ctx, v1990);
                                let v2020 = constructor_output_xmm(ctx, v2019);
                                let v2021 = Some(v2020);
                                // Rule at src\isa\x64\lower.isle line 2980.
                                return v2021;
                            }
                            let v1952 = &constructor_to_amode(ctx, v1940, v1939, v1941);
                            let v1957 = &constructor_amode_to_gpr_mem(ctx, v1952);
                            let v2025 = constructor_x64_movq_to_xmm(ctx, v1957);
                            let v2038 = constructor_lower_swiden_low(ctx, I64X2, v2025);
                            let v2039 = constructor_output_xmm(ctx, v2038);
                            let v2040 = Some(v2039);
                            // Rule at src\isa\x64\lower.isle line 2995.
                            return v2040;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v2226,
            arg: v2227,
            flags: v2228,
        } => {
            match v2226 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1935 = &C::type_register_class(ctx, v3);
                        if let Some(v1936) = v1935 {
                            match v1936 {
                                &RegisterClass::Gpr {
                                    single_register: v1937,
                                } => {
                                    let v2742 = C::value_type(ctx, v2227);
                                    let v2743 = &C::type_register_class(ctx, v2742);
                                    if let Some(v2744) = v2743 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2750,
                                        } = v2744
                                        {
                                            let v2764 = constructor_is_ref_type(ctx, v2742);
                                            match v2764 {
                                                true => {
                                                    let v2765 = constructor_is_ref_type(ctx, v3);
                                                    if v2765 == false {
                                                        let v2751 =
                                                            constructor_put_in_gpr(ctx, v2227);
                                                        let v2766 =
                                                            constructor_copy_gpr(ctx, v3, v2751);
                                                        let v2767 =
                                                            constructor_output_gpr(ctx, v2766);
                                                        let v2768 = Some(v2767);
                                                        // Rule at src\isa\x64\lower.isle line 4077.
                                                        return v2768;
                                                    }
                                                }
                                                false => {
                                                    let v2765 = constructor_is_ref_type(ctx, v3);
                                                    if v2765 == true {
                                                        let v2751 =
                                                            constructor_put_in_gpr(ctx, v2227);
                                                        let v2766 =
                                                            constructor_copy_gpr(ctx, v3, v2751);
                                                        let v2767 =
                                                            constructor_output_gpr(ctx, v2766);
                                                        let v2768 = Some(v2767);
                                                        // Rule at src\isa\x64\lower.isle line 4082.
                                                        return v2768;
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v2762 = constructor_output_value(ctx, v2227);
                                            let v2763 = Some(v2762);
                                            // Rule at src\isa\x64\lower.isle line 4070.
                                            return v2763;
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v2742 = C::value_type(ctx, v2227);
                                    let v2743 = &C::type_register_class(ctx, v2742);
                                    if let Some(v2744) = v2743 {
                                        if let &RegisterClass::Xmm = v2744 {
                                            let v2762 = constructor_output_value(ctx, v2227);
                                            let v2763 = Some(v2762);
                                            // Rule at src\isa\x64\lower.isle line 4089.
                                            return v2763;
                                        }
                                    }
                                    if v2742 == I128 {
                                        let v2758 = C::put_in_regs(ctx, v2227);
                                        let v2759 = constructor_bitcast_gprs_to_xmm(ctx, v2758);
                                        let v2760 = constructor_output_xmm(ctx, v2759);
                                        let v2761 = Some(v2760);
                                        // Rule at src\isa\x64\lower.isle line 4066.
                                        return v2761;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v2742 = C::value_type(ctx, v2227);
                        let v2743 = &C::type_register_class(ctx, v2742);
                        if let Some(v2744) = v2743 {
                            match v2744 {
                                &RegisterClass::Gpr {
                                    single_register: v2750,
                                } => {
                                    if let Some(v1936) = v1935 {
                                        if let &RegisterClass::Xmm = v1936 {
                                            let v4 = C::fits_in_64(ctx, v3);
                                            if let Some(v5) = v4 {
                                                let v2751 = constructor_put_in_gpr(ctx, v2227);
                                                let v2745 = C::ty_bits(ctx, v5);
                                                let v2752 = constructor_bitcast_gpr_to_xmm(
                                                    ctx, v2745, v2751,
                                                );
                                                let v2753 = constructor_output_xmm(ctx, v2752);
                                                let v2754 = Some(v2753);
                                                // Rule at src\isa\x64\lower.isle line 4060.
                                                return v2754;
                                            }
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    if v3 == I128 {
                                        let v2746 = constructor_put_in_xmm(ctx, v2227);
                                        let v2755 = constructor_bitcast_xmm_to_gprs(ctx, v2746);
                                        let v2756 = C::output(ctx, v2755);
                                        let v2757 = Some(v2756);
                                        // Rule at src\isa\x64\lower.isle line 4063.
                                        return v2757;
                                    }
                                    if let Some(v1936) = v1935 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v1937,
                                        } = v1936
                                        {
                                            let v4 = C::fits_in_64(ctx, v3);
                                            if let Some(v5) = v4 {
                                                let v2746 = constructor_put_in_xmm(ctx, v2227);
                                                let v2745 = C::ty_bits(ctx, v5);
                                                let v2747 = constructor_bitcast_xmm_to_gpr(
                                                    ctx, v2745, v2746,
                                                );
                                                let v2748 = constructor_output_gpr(ctx, v2747);
                                                let v2749 = Some(v2748);
                                                // Rule at src\isa\x64\lower.isle line 4057.
                                                return v2749;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v74 = C::zero_offset(ctx);
                            let v2229 = &constructor_to_amode(ctx, v2228, v2227, v74);
                            let v2230 = constructor_x64_mov(ctx, v2229);
                            let v2231 = constructor_output_reg(ctx, v2230);
                            let v2232 = Some(v2231);
                            // Rule at src\isa\x64\lower.isle line 3304.
                            return v2232;
                        }
                        let v1647 = C::fits_in_32(ctx, v3);
                        if let Some(v1648) = v1647 {
                            let v2233 = C::ty_int(ctx, v3);
                            if let Some(v2234) = v2233 {
                                let v1942 = C::ty_bits_u16(ctx, v1648);
                                let v1944 = &C::ext_mode(ctx, v1942, 0x40);
                                let v2235 = C::zero_offset(ctx);
                                let v2236 = &constructor_to_amode(ctx, v2228, v2227, v2235);
                                let v2237 = &constructor_amode_to_gpr_mem(ctx, v2236);
                                let v2238 = constructor_x64_movzx(ctx, v1944, v2237);
                                let v2239 = constructor_output_gpr(ctx, v2238);
                                let v2240 = Some(v2239);
                                // Rule at src\isa\x64\lower.isle line 3306.
                                return v2240;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1154,
            args: v1155,
        } => {
            if let &Opcode::Return = v1154 {
                let v1156 = C::value_list_slice(ctx, v1155);
                let v1157 = constructor_lower_return(ctx, v1156);
                let v1158 = Some(v1157);
                // Rule at src\isa\x64\lower.isle line 1840.
                return v1158;
            }
        }
        &InstructionData::NullAry { opcode: ref v55 } => {
            match v55 {
                &Opcode::Debugtrap => {
                    let v1667 = &constructor_x64_hlt(ctx);
                    let v1668 = constructor_side_effect(ctx, v1667);
                    let v1669 = Some(v1668);
                    // Rule at src\isa\x64\lower.isle line 2526.
                    return v1669;
                }
                &Opcode::GetPinnedReg => {
                    let v2894 = constructor_read_pinned_gpr(ctx);
                    let v2895 = constructor_output_gpr(ctx, v2894);
                    let v2896 = Some(v2895);
                    // Rule at src\isa\x64\lower.isle line 4332.
                    return v2896;
                }
                &Opcode::GetFramePointer => {
                    let v2313 = constructor_x64_rbp(ctx);
                    let v2314 = constructor_output_reg(ctx, v2313);
                    let v2315 = Some(v2314);
                    // Rule at src\isa\x64\lower.isle line 3361.
                    return v2315;
                }
                &Opcode::GetStackPointer => {
                    let v2316 = constructor_x64_rsp(ctx);
                    let v2317 = constructor_output_reg(ctx, v2316);
                    let v2318 = Some(v2317);
                    // Rule at src\isa\x64\lower.isle line 3364.
                    return v2318;
                }
                &Opcode::GetReturnAddress => {
                    let v2313 = constructor_x64_rbp(ctx);
                    let v73 = C::mem_flags_trusted(ctx);
                    let v2319 = Amode::ImmReg {
                        simm32: 0x8,
                        base: v2313,
                        flags: v73,
                    };
                    let v2320 = &C::amode_to_synthetic_amode(ctx, &v2319);
                    let v2321 = constructor_x64_load(ctx, I64, v2320, &ExtKind::None);
                    let v2322 = constructor_output_reg(ctx, v2321);
                    let v2323 = Some(v2322);
                    // Rule at src\isa\x64\lower.isle line 3367.
                    return v2323;
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v56 = constructor_imm(ctx, v3, 0x0);
                        let v57 = constructor_output_reg(ctx, v56);
                        let v58 = Some(v57);
                        // Rule at src\isa\x64\lower.isle line 50.
                        return v58;
                    }
                }
                &Opcode::Nop => {
                    let v3306 = C::invalid_reg(ctx);
                    let v3307 = constructor_output_reg(ctx, v3306);
                    let v3308 = Some(v3307);
                    // Rule at src\isa\x64\lower.isle line 4891.
                    return v3308;
                }
                &Opcode::Fence => {
                    let v2203 = &constructor_x64_mfence(ctx);
                    let v2204 = constructor_side_effect(ctx, v2203);
                    let v2205 = Some(v2204);
                    // Rule at src\isa\x64\lower.isle line 3282.
                    return v2205;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2909,
            args: ref v2910,
            imm: v2911,
        } => {
            if let &Opcode::Shuffle = v2909 {
                let v584 = C::use_sse41(ctx);
                if v584 == true {
                    let v2915 = C::pblendw_imm(ctx, v2911);
                    if let Some(v2916) = v2915 {
                        let v2912 = C::unpack_value_array_2(ctx, v2910);
                        let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                        let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                        let v2919 = constructor_x64_pblendw(ctx, v2917, v2918, v2916);
                        let v2920 = constructor_output_xmm(ctx, v2919);
                        let v2921 = Some(v2920);
                        // Rule at src\isa\x64\lower.isle line 4356.
                        return v2921;
                    }
                }
                let v680 = C::use_ssse3(ctx);
                if v680 == true {
                    let v2922 = C::palignr_imm_from_immediate(ctx, v2911);
                    if let Some(v2923) = v2922 {
                        let v2912 = C::unpack_value_array_2(ctx, v2910);
                        let v2924 = constructor_put_in_xmm(ctx, v2912.1);
                        let v2925 = &C::put_in_xmm_mem(ctx, v2912.0);
                        let v2926 = constructor_x64_palignr(ctx, v2924, v2925, v2923);
                        let v2927 = constructor_output_xmm(ctx, v2926);
                        let v2928 = Some(v2927);
                        // Rule at src\isa\x64\lower.isle line 4367.
                        return v2928;
                    }
                }
                let v2929 = C::pshuflw_lhs_imm(ctx, v2911);
                if let Some(v2930) = v2929 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2931 = &C::put_in_xmm_mem(ctx, v2912.0);
                    let v2932 = constructor_x64_pshuflw(ctx, v2931, v2930);
                    let v2933 = constructor_output_xmm(ctx, v2932);
                    let v2934 = Some(v2933);
                    // Rule at src\isa\x64\lower.isle line 4379.
                    return v2934;
                }
                let v2935 = C::pshuflw_rhs_imm(ctx, v2911);
                if let Some(v2936) = v2935 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2937 = &C::put_in_xmm_mem(ctx, v2912.1);
                    let v2938 = constructor_x64_pshuflw(ctx, v2937, v2936);
                    let v2939 = constructor_output_xmm(ctx, v2938);
                    let v2940 = Some(v2939);
                    // Rule at src\isa\x64\lower.isle line 4381.
                    return v2940;
                }
                let v2941 = C::pshufhw_lhs_imm(ctx, v2911);
                if let Some(v2942) = v2941 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2931 = &C::put_in_xmm_mem(ctx, v2912.0);
                    let v2943 = constructor_x64_pshufhw(ctx, v2931, v2942);
                    let v2944 = constructor_output_xmm(ctx, v2943);
                    let v2945 = Some(v2944);
                    // Rule at src\isa\x64\lower.isle line 4383.
                    return v2945;
                }
                let v2946 = C::pshufhw_rhs_imm(ctx, v2911);
                if let Some(v2947) = v2946 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2937 = &C::put_in_xmm_mem(ctx, v2912.1);
                    let v2948 = constructor_x64_pshufhw(ctx, v2937, v2947);
                    let v2949 = constructor_output_xmm(ctx, v2948);
                    let v2950 = Some(v2949);
                    // Rule at src\isa\x64\lower.isle line 4385.
                    return v2950;
                }
                let v2951 = C::pshufd_lhs_imm(ctx, v2911);
                if let Some(v2952) = v2951 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2931 = &C::put_in_xmm_mem(ctx, v2912.0);
                    let v2953 = constructor_x64_pshufd(ctx, v2931, v2952);
                    let v2954 = constructor_output_xmm(ctx, v2953);
                    let v2955 = Some(v2954);
                    // Rule at src\isa\x64\lower.isle line 4402.
                    return v2955;
                }
                let v2956 = C::pshufd_rhs_imm(ctx, v2911);
                if let Some(v2957) = v2956 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2937 = &C::put_in_xmm_mem(ctx, v2912.1);
                    let v2958 = constructor_x64_pshufd(ctx, v2937, v2957);
                    let v2959 = constructor_output_xmm(ctx, v2958);
                    let v2960 = Some(v2959);
                    // Rule at src\isa\x64\lower.isle line 4404.
                    return v2960;
                }
                let v2961 = C::u128_from_immediate(ctx, v2911);
                if let Some(v2962) = v2961 {
                    match v2962 {
                        0x0 => {
                            if v680 == true {
                                let v2912 = C::unpack_value_array_2(ctx, v2910);
                                let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                                let v686 = constructor_xmm_zero(ctx, I8X16);
                                let v2690 = &C::xmm_to_xmm_mem(ctx, v686);
                                let v2987 = constructor_x64_pshufb(ctx, v2917, v2690);
                                let v2988 = constructor_output_xmm(ctx, v2987);
                                let v2989 = Some(v2988);
                                // Rule at src\isa\x64\lower.isle line 4441.
                                return v2989;
                            }
                        }
                        0x17071606150514041303120211011000 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2966 = constructor_x64_punpcklbw(ctx, v2917, v2918);
                            let v2967 = constructor_output_xmm(ctx, v2966);
                            let v2968 = Some(v2967);
                            // Rule at src\isa\x64\lower.isle line 4415.
                            return v2968;
                        }
                        0x17160706151405041312030211100100 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2972 = constructor_x64_punpcklwd(ctx, v2917, v2918);
                            let v2973 = constructor_output_xmm(ctx, v2972);
                            let v2974 = Some(v2973);
                            // Rule at src\isa\x64\lower.isle line 4421.
                            return v2974;
                        }
                        0x17161514070605041312111003020100 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2978 = constructor_x64_punpckldq(ctx, v2917, v2918);
                            let v2979 = constructor_output_xmm(ctx, v2978);
                            let v2980 = Some(v2979);
                            // Rule at src\isa\x64\lower.isle line 4427.
                            return v2980;
                        }
                        0x17161514131211100706050403020100 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2984 = constructor_x64_punpcklqdq(ctx, v2917, v2918);
                            let v2985 = constructor_output_xmm(ctx, v2984);
                            let v2986 = Some(v2985);
                            // Rule at src\isa\x64\lower.isle line 4433.
                            return v2986;
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2963 = constructor_x64_punpckhbw(ctx, v2917, v2918);
                            let v2964 = constructor_output_xmm(ctx, v2963);
                            let v2965 = Some(v2964);
                            // Rule at src\isa\x64\lower.isle line 4413.
                            return v2965;
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2969 = constructor_x64_punpckhwd(ctx, v2917, v2918);
                            let v2970 = constructor_output_xmm(ctx, v2969);
                            let v2971 = Some(v2970);
                            // Rule at src\isa\x64\lower.isle line 4419.
                            return v2971;
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2975 = constructor_x64_punpckhdq(ctx, v2917, v2918);
                            let v2976 = constructor_output_xmm(ctx, v2975);
                            let v2977 = Some(v2976);
                            // Rule at src\isa\x64\lower.isle line 4425.
                            return v2977;
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v2981 = constructor_x64_punpckhqdq(ctx, v2917, v2918);
                            let v2982 = constructor_output_xmm(ctx, v2981);
                            let v2983 = Some(v2982);
                            // Rule at src\isa\x64\lower.isle line 4431.
                            return v2983;
                        }
                        _ => {}
                    }
                }
                let v2990 = C::shufps_imm(ctx, v2911);
                if let Some(v2991) = v2990 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                    let v2918 = &C::put_in_xmm_mem(ctx, v2912.1);
                    let v2992 = constructor_x64_shufps(ctx, v2917, v2918, v2991);
                    let v2993 = constructor_output_xmm(ctx, v2992);
                    let v2994 = Some(v2993);
                    // Rule at src\isa\x64\lower.isle line 4455.
                    return v2994;
                }
                let v2995 = C::shufps_rev_imm(ctx, v2911);
                if let Some(v2996) = v2995 {
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2924 = constructor_put_in_xmm(ctx, v2912.1);
                    let v2925 = &C::put_in_xmm_mem(ctx, v2912.0);
                    let v2997 = constructor_x64_shufps(ctx, v2924, v2925, v2996);
                    let v2998 = constructor_output_xmm(ctx, v2997);
                    let v2999 = Some(v2998);
                    // Rule at src\isa\x64\lower.isle line 4457.
                    return v2999;
                }
                let v3000 = &C::vec_mask_from_immediate(ctx, v2911);
                if let Some(v3001) = v3000 {
                    if v680 == true {
                        let v2912 = C::unpack_value_array_2(ctx, v2910);
                        if v2912.0 == v2912.1 {
                            let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                            let v3002 = C::shuffle_0_31_mask(ctx, v3001);
                            let v3003 = &constructor_const_to_xmm_mem(ctx, v3002);
                            let v3004 = constructor_x64_pshufb(ctx, v2917, v3003);
                            let v3005 = constructor_output_xmm(ctx, v3004);
                            let v3006 = Some(v3005);
                            // Rule at src\isa\x64\lower.isle line 4470.
                            return v3006;
                        }
                    }
                    let v438 = C::use_avx512vl(ctx);
                    if v438 == true {
                        let v3011 = C::use_avx512vbmi(ctx);
                        if v3011 == true {
                            let v3007 = C::perm_from_mask_with_zeros(ctx, v3001);
                            if let Some(v3008) = v3007 {
                                let v3012 = constructor_x64_xmm_load_const(ctx, I8X16, v3008.0);
                                let v2912 = C::unpack_value_array_2(ctx, v2910);
                                let v3013 = constructor_put_in_xmm(ctx, v2912.0);
                                let v3014 = &C::put_in_xmm_mem(ctx, v2912.1);
                                let v3015 = constructor_x64_vpermi2b(ctx, v3012, v3013, v3014);
                                let v3016 = &constructor_const_to_xmm_mem(ctx, v3008.1);
                                let v3017 = constructor_x64_andps(ctx, v3015, v3016);
                                let v3018 = constructor_output_xmm(ctx, v3017);
                                let v3019 = Some(v3018);
                                // Rule at src\isa\x64\lower.isle line 4477.
                                return v3019;
                            }
                            let v3020 = C::perm_from_mask(ctx, v3001);
                            let v3021 = constructor_x64_xmm_load_const(ctx, I8X16, v3020);
                            let v2912 = C::unpack_value_array_2(ctx, v2910);
                            let v3022 = constructor_put_in_xmm(ctx, v2912.0);
                            let v3023 = &C::put_in_xmm_mem(ctx, v2912.1);
                            let v3024 = constructor_x64_vpermi2b(ctx, v3021, v3022, v3023);
                            let v3025 = constructor_output_xmm(ctx, v3024);
                            let v3026 = Some(v3025);
                            // Rule at src\isa\x64\lower.isle line 4484.
                            return v3026;
                        }
                    }
                    let v2912 = C::unpack_value_array_2(ctx, v2910);
                    let v2917 = constructor_put_in_xmm(ctx, v2912.0);
                    let v3027 = C::shuffle_0_15_mask(ctx, v3001);
                    let v3028 = &constructor_const_to_reg_mem(ctx, v3027);
                    let v3029 = constructor_lower_pshufb(ctx, v2917, v3028);
                    let v3030 = constructor_put_in_xmm(ctx, v2912.1);
                    let v3031 = C::shuffle_16_31_mask(ctx, v3001);
                    let v3032 = &constructor_const_to_reg_mem(ctx, v3031);
                    let v3033 = constructor_lower_pshufb(ctx, v3030, v3032);
                    let v3034 = &C::xmm_to_xmm_mem(ctx, v3033);
                    let v3035 = constructor_x64_por(ctx, v3029, v3034);
                    let v3036 = constructor_output_xmm(ctx, v3035);
                    let v3037 = Some(v3036);
                    // Rule at src\isa\x64\lower.isle line 4492.
                    return v3037;
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2804,
            stack_slot: v2805,
            offset: v2806,
        } => {
            if let &Opcode::StackAddr = v2804 {
                let v2807 = constructor_stack_addr_impl(ctx, v2805, v2806);
                let v2808 = constructor_output_gpr(ctx, v2807);
                let v2809 = Some(v2808);
                // Rule at src\isa\x64\lower.isle line 4181.
                return v2809;
            }
        }
        &InstructionData::Store {
            opcode: ref v2044,
            args: ref v2045,
            flags: v2046,
            offset: v2047,
        } => {
            match v2044 {
                &Opcode::Store => {
                    let v2048 = C::unpack_value_array_2(ctx, v2045);
                    let v2051 = C::value_type(ctx, v2048.0);
                    let v2071 = C::fits_in_64(ctx, v2051);
                    if let Some(v2072) = v2071 {
                        let v2073 = C::i32_from_iconst(ctx, v2048.0);
                        if let Some(v2074) = v2073 {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2075 = &constructor_x64_movimm_m(ctx, v2072, v2056, v2074);
                            let v2076 = constructor_side_effect(ctx, v2075);
                            let v2077 = Some(v2076);
                            // Rule at src\isa\x64\lower.isle line 3022.
                            return v2077;
                        }
                    }
                    let v2116 = C::def_inst(ctx, v2048.0);
                    if let Some(v2117) = v2116 {
                        let v2118 = C::first_result(ctx, v2117);
                        if let Some(v2119) = v2118 {
                            let v2121 = &C::inst_data(ctx, v2117);
                            match v2121 {
                                &InstructionData::Binary {
                                    opcode: ref v2147,
                                    args: ref v2148,
                                } => {
                                    match v2147 {
                                        &Opcode::Iadd => {
                                            let v2120 = C::value_type(ctx, v2119);
                                            let v2145 = C::ty_32_or_64(ctx, v2120);
                                            if let Some(v2146) = v2145 {
                                                let v2149 = C::unpack_value_array_2(ctx, v2148);
                                                let v2152 = &C::sinkable_load(ctx, v2149.0);
                                                if let Some(v2153) = v2152 {
                                                    let v2154 = C::def_inst(ctx, v2149.0);
                                                    if let Some(v2155) = v2154 {
                                                        let v2156 = &C::inst_data(ctx, v2155);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2157,
                                                            arg: v2158,
                                                            flags: v2159,
                                                            offset: v2160,
                                                        } = v2156
                                                        {
                                                            if let &Opcode::Load = v2157 {
                                                                if v2046 == v2159 {
                                                                    if v2047 == v2160 {
                                                                        if v2048.1 == v2158 {
                                                                            let v2161 = &constructor_sink_load_to_reg_mem_imm(ctx, v2153);
                                                                            let v2162 = &constructor_to_amode(ctx, v2159, v2158, v2160);
                                                                            let v2163 = constructor_put_in_gpr(ctx, v2149.1);
                                                                            let v2164 = &constructor_x64_add_mem(ctx, v2146, v2162, v2163);
                                                                            let v2165 = constructor_side_effect(ctx, v2164);
                                                                            let v2166 = Some(v2165);
                                                                            // Rule at src\isa\x64\lower.isle line 3155.
                                                                            return v2166;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2167 = &C::sinkable_load(ctx, v2149.1);
                                                if let Some(v2168) = v2167 {
                                                    let v2169 = C::def_inst(ctx, v2149.1);
                                                    if let Some(v2170) = v2169 {
                                                        let v2171 = &C::inst_data(ctx, v2170);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2172,
                                                            arg: v2173,
                                                            flags: v2174,
                                                            offset: v2175,
                                                        } = v2171
                                                        {
                                                            if let &Opcode::Load = v2172 {
                                                                if v2046 == v2174 {
                                                                    if v2047 == v2175 {
                                                                        if v2048.1 == v2173 {
                                                                            let v2176 = &constructor_sink_load_to_reg_mem_imm(ctx, v2168);
                                                                            let v2177 = &constructor_to_amode(ctx, v2174, v2173, v2175);
                                                                            let v2178 = constructor_put_in_gpr(ctx, v2149.0);
                                                                            let v2179 = &constructor_x64_add_mem(ctx, v2146, v2177, v2178);
                                                                            let v2180 = constructor_side_effect(ctx, v2179);
                                                                            let v2181 = Some(v2180);
                                                                            // Rule at src\isa\x64\lower.isle line 3169.
                                                                            return v2181;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v2120 = C::value_type(ctx, v2119);
                                            let v2145 = C::ty_32_or_64(ctx, v2120);
                                            if let Some(v2146) = v2145 {
                                                let v2149 = C::unpack_value_array_2(ctx, v2148);
                                                let v2152 = &C::sinkable_load(ctx, v2149.0);
                                                if let Some(v2153) = v2152 {
                                                    let v2154 = C::def_inst(ctx, v2149.0);
                                                    if let Some(v2155) = v2154 {
                                                        let v2156 = &C::inst_data(ctx, v2155);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2157,
                                                            arg: v2158,
                                                            flags: v2159,
                                                            offset: v2160,
                                                        } = v2156
                                                        {
                                                            if let &Opcode::Load = v2157 {
                                                                if v2046 == v2159 {
                                                                    if v2047 == v2160 {
                                                                        if v2048.1 == v2158 {
                                                                            let v2161 = &constructor_sink_load_to_reg_mem_imm(ctx, v2153);
                                                                            let v2162 = &constructor_to_amode(ctx, v2159, v2158, v2160);
                                                                            let v2163 = constructor_put_in_gpr(ctx, v2149.1);
                                                                            let v2182 = &constructor_x64_sub_mem(ctx, v2146, v2162, v2163);
                                                                            let v2183 = constructor_side_effect(ctx, v2182);
                                                                            let v2184 = Some(v2183);
                                                                            // Rule at src\isa\x64\lower.isle line 3183.
                                                                            return v2184;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v2120 = C::value_type(ctx, v2119);
                                            let v2145 = C::ty_32_or_64(ctx, v2120);
                                            if let Some(v2146) = v2145 {
                                                let v2149 = C::unpack_value_array_2(ctx, v2148);
                                                let v2152 = &C::sinkable_load(ctx, v2149.0);
                                                if let Some(v2153) = v2152 {
                                                    let v2154 = C::def_inst(ctx, v2149.0);
                                                    if let Some(v2155) = v2154 {
                                                        let v2156 = &C::inst_data(ctx, v2155);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2157,
                                                            arg: v2158,
                                                            flags: v2159,
                                                            offset: v2160,
                                                        } = v2156
                                                        {
                                                            if let &Opcode::Load = v2157 {
                                                                if v2046 == v2159 {
                                                                    if v2047 == v2160 {
                                                                        if v2048.1 == v2158 {
                                                                            let v2161 = &constructor_sink_load_to_reg_mem_imm(ctx, v2153);
                                                                            let v2162 = &constructor_to_amode(ctx, v2159, v2158, v2160);
                                                                            let v2163 = constructor_put_in_gpr(ctx, v2149.1);
                                                                            let v2185 = &constructor_x64_and_mem(ctx, v2146, v2162, v2163);
                                                                            let v2186 = constructor_side_effect(ctx, v2185);
                                                                            let v2187 = Some(v2186);
                                                                            // Rule at src\isa\x64\lower.isle line 3197.
                                                                            return v2187;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2167 = &C::sinkable_load(ctx, v2149.1);
                                                if let Some(v2168) = v2167 {
                                                    let v2169 = C::def_inst(ctx, v2149.1);
                                                    if let Some(v2170) = v2169 {
                                                        let v2171 = &C::inst_data(ctx, v2170);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2172,
                                                            arg: v2173,
                                                            flags: v2174,
                                                            offset: v2175,
                                                        } = v2171
                                                        {
                                                            if let &Opcode::Load = v2172 {
                                                                if v2046 == v2174 {
                                                                    if v2047 == v2175 {
                                                                        if v2048.1 == v2173 {
                                                                            let v2176 = &constructor_sink_load_to_reg_mem_imm(ctx, v2168);
                                                                            let v2177 = &constructor_to_amode(ctx, v2174, v2173, v2175);
                                                                            let v2178 = constructor_put_in_gpr(ctx, v2149.0);
                                                                            let v2188 = &constructor_x64_and_mem(ctx, v2146, v2177, v2178);
                                                                            let v2189 = constructor_side_effect(ctx, v2188);
                                                                            let v2190 = Some(v2189);
                                                                            // Rule at src\isa\x64\lower.isle line 3211.
                                                                            return v2190;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v2120 = C::value_type(ctx, v2119);
                                            let v2145 = C::ty_32_or_64(ctx, v2120);
                                            if let Some(v2146) = v2145 {
                                                let v2149 = C::unpack_value_array_2(ctx, v2148);
                                                let v2152 = &C::sinkable_load(ctx, v2149.0);
                                                if let Some(v2153) = v2152 {
                                                    let v2154 = C::def_inst(ctx, v2149.0);
                                                    if let Some(v2155) = v2154 {
                                                        let v2156 = &C::inst_data(ctx, v2155);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2157,
                                                            arg: v2158,
                                                            flags: v2159,
                                                            offset: v2160,
                                                        } = v2156
                                                        {
                                                            if let &Opcode::Load = v2157 {
                                                                if v2046 == v2159 {
                                                                    if v2047 == v2160 {
                                                                        if v2048.1 == v2158 {
                                                                            let v2161 = &constructor_sink_load_to_reg_mem_imm(ctx, v2153);
                                                                            let v2162 = &constructor_to_amode(ctx, v2159, v2158, v2160);
                                                                            let v2163 = constructor_put_in_gpr(ctx, v2149.1);
                                                                            let v2191 = &constructor_x64_or_mem(ctx, v2146, v2162, v2163);
                                                                            let v2192 = constructor_side_effect(ctx, v2191);
                                                                            let v2193 = Some(v2192);
                                                                            // Rule at src\isa\x64\lower.isle line 3225.
                                                                            return v2193;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2167 = &C::sinkable_load(ctx, v2149.1);
                                                if let Some(v2168) = v2167 {
                                                    let v2169 = C::def_inst(ctx, v2149.1);
                                                    if let Some(v2170) = v2169 {
                                                        let v2171 = &C::inst_data(ctx, v2170);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2172,
                                                            arg: v2173,
                                                            flags: v2174,
                                                            offset: v2175,
                                                        } = v2171
                                                        {
                                                            if let &Opcode::Load = v2172 {
                                                                if v2046 == v2174 {
                                                                    if v2047 == v2175 {
                                                                        if v2048.1 == v2173 {
                                                                            let v2176 = &constructor_sink_load_to_reg_mem_imm(ctx, v2168);
                                                                            let v2177 = &constructor_to_amode(ctx, v2174, v2173, v2175);
                                                                            let v2178 = constructor_put_in_gpr(ctx, v2149.0);
                                                                            let v2194 = &constructor_x64_or_mem(ctx, v2146, v2177, v2178);
                                                                            let v2195 = constructor_side_effect(ctx, v2194);
                                                                            let v2196 = Some(v2195);
                                                                            // Rule at src\isa\x64\lower.isle line 3239.
                                                                            return v2196;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v2120 = C::value_type(ctx, v2119);
                                            let v2145 = C::ty_32_or_64(ctx, v2120);
                                            if let Some(v2146) = v2145 {
                                                let v2149 = C::unpack_value_array_2(ctx, v2148);
                                                let v2152 = &C::sinkable_load(ctx, v2149.0);
                                                if let Some(v2153) = v2152 {
                                                    let v2154 = C::def_inst(ctx, v2149.0);
                                                    if let Some(v2155) = v2154 {
                                                        let v2156 = &C::inst_data(ctx, v2155);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2157,
                                                            arg: v2158,
                                                            flags: v2159,
                                                            offset: v2160,
                                                        } = v2156
                                                        {
                                                            if let &Opcode::Load = v2157 {
                                                                if v2046 == v2159 {
                                                                    if v2047 == v2160 {
                                                                        if v2048.1 == v2158 {
                                                                            let v2161 = &constructor_sink_load_to_reg_mem_imm(ctx, v2153);
                                                                            let v2162 = &constructor_to_amode(ctx, v2159, v2158, v2160);
                                                                            let v2163 = constructor_put_in_gpr(ctx, v2149.1);
                                                                            let v2197 = &constructor_x64_xor_mem(ctx, v2146, v2162, v2163);
                                                                            let v2198 = constructor_side_effect(ctx, v2197);
                                                                            let v2199 = Some(v2198);
                                                                            // Rule at src\isa\x64\lower.isle line 3253.
                                                                            return v2199;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2167 = &C::sinkable_load(ctx, v2149.1);
                                                if let Some(v2168) = v2167 {
                                                    let v2169 = C::def_inst(ctx, v2149.1);
                                                    if let Some(v2170) = v2169 {
                                                        let v2171 = &C::inst_data(ctx, v2170);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2172,
                                                            arg: v2173,
                                                            flags: v2174,
                                                            offset: v2175,
                                                        } = v2171
                                                        {
                                                            if let &Opcode::Load = v2172 {
                                                                if v2046 == v2174 {
                                                                    if v2047 == v2175 {
                                                                        if v2048.1 == v2173 {
                                                                            let v2176 = &constructor_sink_load_to_reg_mem_imm(ctx, v2168);
                                                                            let v2177 = &constructor_to_amode(ctx, v2174, v2173, v2175);
                                                                            let v2178 = constructor_put_in_gpr(ctx, v2149.0);
                                                                            let v2200 = &constructor_x64_xor_mem(ctx, v2146, v2177, v2178);
                                                                            let v2201 = constructor_side_effect(ctx, v2200);
                                                                            let v2202 = Some(v2201);
                                                                            // Rule at src\isa\x64\lower.isle line 3267.
                                                                            return v2202;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v2122,
                                    arg: v2123,
                                    imm: v2124,
                                } => {
                                    if let &Opcode::Extractlane = v2122 {
                                        let v2120 = C::value_type(ctx, v2119);
                                        match v2120 {
                                            I8 => {
                                                let v584 = C::use_sse41(ctx);
                                                if v584 == true {
                                                    let v2055 = &constructor_to_amode(
                                                        ctx, v2046, v2048.1, v2047,
                                                    );
                                                    let v2056 =
                                                        &C::amode_to_synthetic_amode(ctx, v2055);
                                                    let v2126 = constructor_put_in_xmm(ctx, v2123);
                                                    let v2125 = C::u8_from_uimm8(ctx, v2124);
                                                    let v2133 = &constructor_x64_pextrb_store(
                                                        ctx, v2056, v2126, v2125,
                                                    );
                                                    let v2134 = constructor_side_effect(ctx, v2133);
                                                    let v2135 = Some(v2134);
                                                    // Rule at src\isa\x64\lower.isle line 3123.
                                                    return v2135;
                                                }
                                            }
                                            I16 => {
                                                let v584 = C::use_sse41(ctx);
                                                if v584 == true {
                                                    let v2055 = &constructor_to_amode(
                                                        ctx, v2046, v2048.1, v2047,
                                                    );
                                                    let v2056 =
                                                        &C::amode_to_synthetic_amode(ctx, v2055);
                                                    let v2126 = constructor_put_in_xmm(ctx, v2123);
                                                    let v2125 = C::u8_from_uimm8(ctx, v2124);
                                                    let v2136 = &constructor_x64_pextrw_store(
                                                        ctx, v2056, v2126, v2125,
                                                    );
                                                    let v2137 = constructor_side_effect(ctx, v2136);
                                                    let v2138 = Some(v2137);
                                                    // Rule at src\isa\x64\lower.isle line 3130.
                                                    return v2138;
                                                }
                                            }
                                            I32 => {
                                                let v584 = C::use_sse41(ctx);
                                                if v584 == true {
                                                    let v2055 = &constructor_to_amode(
                                                        ctx, v2046, v2048.1, v2047,
                                                    );
                                                    let v2056 =
                                                        &C::amode_to_synthetic_amode(ctx, v2055);
                                                    let v2126 = constructor_put_in_xmm(ctx, v2123);
                                                    let v2125 = C::u8_from_uimm8(ctx, v2124);
                                                    let v2139 = &constructor_x64_pextrd_store(
                                                        ctx, v2056, v2126, v2125,
                                                    );
                                                    let v2140 = constructor_side_effect(ctx, v2139);
                                                    let v2141 = Some(v2140);
                                                    // Rule at src\isa\x64\lower.isle line 3137.
                                                    return v2141;
                                                }
                                            }
                                            I64 => {
                                                let v584 = C::use_sse41(ctx);
                                                if v584 == true {
                                                    let v2055 = &constructor_to_amode(
                                                        ctx, v2046, v2048.1, v2047,
                                                    );
                                                    let v2056 =
                                                        &C::amode_to_synthetic_amode(ctx, v2055);
                                                    let v2126 = constructor_put_in_xmm(ctx, v2123);
                                                    let v2125 = C::u8_from_uimm8(ctx, v2124);
                                                    let v2142 = &constructor_x64_pextrq_store(
                                                        ctx, v2056, v2126, v2125,
                                                    );
                                                    let v2143 = constructor_side_effect(ctx, v2142);
                                                    let v2144 = Some(v2143);
                                                    // Rule at src\isa\x64\lower.isle line 3144.
                                                    return v2144;
                                                }
                                            }
                                            F32 => {
                                                let v2125 = C::u8_from_uimm8(ctx, v2124);
                                                if v2125 == 0x0 {
                                                    let v2055 = &constructor_to_amode(
                                                        ctx, v2046, v2048.1, v2047,
                                                    );
                                                    let v2056 =
                                                        &C::amode_to_synthetic_amode(ctx, v2055);
                                                    let v2126 = constructor_put_in_xmm(ctx, v2123);
                                                    let v2127 = &constructor_x64_movss_store(
                                                        ctx, v2056, v2126,
                                                    );
                                                    let v2128 = constructor_side_effect(ctx, v2127);
                                                    let v2129 = Some(v2128);
                                                    // Rule at src\isa\x64\lower.isle line 3111.
                                                    return v2129;
                                                }
                                            }
                                            F64 => {
                                                let v2125 = C::u8_from_uimm8(ctx, v2124);
                                                if v2125 == 0x0 {
                                                    let v2055 = &constructor_to_amode(
                                                        ctx, v2046, v2048.1, v2047,
                                                    );
                                                    let v2056 =
                                                        &C::amode_to_synthetic_amode(ctx, v2055);
                                                    let v2126 = constructor_put_in_xmm(ctx, v2123);
                                                    let v2130 = &constructor_x64_movsd_store(
                                                        ctx, v2056, v2126,
                                                    );
                                                    let v2131 = constructor_side_effect(ctx, v2130);
                                                    let v2132 = Some(v2131);
                                                    // Rule at src\isa\x64\lower.isle line 3117.
                                                    return v2132;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    match v2051 {
                        I128 => {
                            let v2104 = C::put_in_regs(ctx, v2048.0);
                            let v2105 = constructor_value_regs_get_gpr(ctx, v2104, 0x0);
                            let v2106 = constructor_value_regs_get_gpr(ctx, v2104, 0x1);
                            let v2107 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2108 = &C::amode_offset(ctx, v2107, 0x8);
                            let v2109 = &C::amode_to_synthetic_amode(ctx, v2107);
                            let v2110 = &constructor_x64_movrm(ctx, I64, v2109, v2105);
                            let v2111 = &C::amode_to_synthetic_amode(ctx, v2108);
                            let v2112 = &constructor_x64_movrm(ctx, I64, v2111, v2106);
                            let v2113 = &constructor_side_effect_concat(ctx, v2110, v2112);
                            let v2114 = constructor_side_effect(ctx, v2113);
                            let v2115 = Some(v2114);
                            // Rule at src\isa\x64\lower.isle line 3092.
                            return v2115;
                        }
                        F16 => {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                                let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                                let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                                let v2084 = &constructor_x64_pextrw_store(ctx, v2056, v2079, 0x0);
                                let v2085 = constructor_side_effect(ctx, v2084);
                                let v2086 = Some(v2085);
                                // Rule at src\isa\x64\lower.isle line 3035.
                                return v2086;
                            }
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                            let v2080 = constructor_bitcast_xmm_to_gpr(ctx, 0x10, v2079);
                            let v2081 = &constructor_x64_movrm(ctx, I16, v2056, v2080);
                            let v2082 = constructor_side_effect(ctx, v2081);
                            let v2083 = Some(v2082);
                            // Rule at src\isa\x64\lower.isle line 3028.
                            return v2083;
                        }
                        F32 => {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                            let v2087 = &constructor_x64_movss_store(ctx, v2056, v2079);
                            let v2088 = constructor_side_effect(ctx, v2087);
                            let v2089 = Some(v2088);
                            // Rule at src\isa\x64\lower.isle line 3044.
                            return v2089;
                        }
                        F64 => {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                            let v2090 = &constructor_x64_movsd_store(ctx, v2056, v2079);
                            let v2091 = constructor_side_effect(ctx, v2090);
                            let v2092 = Some(v2091);
                            // Rule at src\isa\x64\lower.isle line 3052.
                            return v2092;
                        }
                        F128 => {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                            let v2093 = &constructor_x64_movdqu_store(ctx, v2056, v2079);
                            let v2094 = constructor_side_effect(ctx, v2093);
                            let v2095 = Some(v2094);
                            // Rule at src\isa\x64\lower.isle line 3060.
                            return v2095;
                        }
                        F32X4 => {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                            let v2096 = &constructor_x64_movups_store(ctx, v2056, v2079);
                            let v2097 = constructor_side_effect(ctx, v2096);
                            let v2098 = Some(v2097);
                            // Rule at src\isa\x64\lower.isle line 3068.
                            return v2098;
                        }
                        F64X2 => {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                            let v2099 = &constructor_x64_movupd_store(ctx, v2056, v2079);
                            let v2100 = constructor_side_effect(ctx, v2099);
                            let v2101 = Some(v2100);
                            // Rule at src\isa\x64\lower.isle line 3076.
                            return v2101;
                        }
                        _ => {}
                    }
                    let v2102 = C::ty_vec128_int(ctx, v2051);
                    if let Some(v2103) = v2102 {
                        let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                        let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                        let v2079 = constructor_put_in_xmm(ctx, v2048.0);
                        let v2093 = &constructor_x64_movdqu_store(ctx, v2056, v2079);
                        let v2094 = constructor_side_effect(ctx, v2093);
                        let v2095 = Some(v2094);
                        // Rule at src\isa\x64\lower.isle line 3084.
                        return v2095;
                    }
                    let v2052 = &C::type_register_class(ctx, v2051);
                    if let Some(v2053) = v2052 {
                        if let &RegisterClass::Gpr {
                            single_register: v2054,
                        } = v2053
                        {
                            let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                            let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                            let v2057 = constructor_put_in_gpr(ctx, v2048.0);
                            let v2058 = &constructor_x64_movrm(ctx, v2051, v2056, v2057);
                            let v2059 = constructor_side_effect(ctx, v2058);
                            let v2060 = Some(v2059);
                            // Rule at src\isa\x64\lower.isle line 3003.
                            return v2060;
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v2048 = C::unpack_value_array_2(ctx, v2045);
                    let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                    let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                    let v2057 = constructor_put_in_gpr(ctx, v2048.0);
                    let v2062 = &constructor_x64_movrm(ctx, I8, v2056, v2057);
                    let v2063 = constructor_side_effect(ctx, v2062);
                    let v2064 = Some(v2063);
                    // Rule at src\isa\x64\lower.isle line 3011.
                    return v2064;
                }
                &Opcode::Istore16 => {
                    let v2048 = C::unpack_value_array_2(ctx, v2045);
                    let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                    let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                    let v2057 = constructor_put_in_gpr(ctx, v2048.0);
                    let v2065 = &constructor_x64_movrm(ctx, I16, v2056, v2057);
                    let v2066 = constructor_side_effect(ctx, v2065);
                    let v2067 = Some(v2066);
                    // Rule at src\isa\x64\lower.isle line 3014.
                    return v2067;
                }
                &Opcode::Istore32 => {
                    let v2048 = C::unpack_value_array_2(ctx, v2045);
                    let v2055 = &constructor_to_amode(ctx, v2046, v2048.1, v2047);
                    let v2056 = &C::amode_to_synthetic_amode(ctx, v2055);
                    let v2057 = constructor_put_in_gpr(ctx, v2048.0);
                    let v2068 = &constructor_x64_movrm(ctx, I32, v2056, v2057);
                    let v2069 = constructor_side_effect(ctx, v2068);
                    let v2070 = Some(v2069);
                    // Rule at src\isa\x64\lower.isle line 3017.
                    return v2070;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v2241,
            args: ref v2242,
            flags: v2243,
        } => {
            if let &Opcode::AtomicStore = v2241 {
                let v2244 = C::unpack_value_array_2(ctx, v2242);
                let v2247 = C::value_type(ctx, v2244.0);
                let v2248 = C::fits_in_64(ctx, v2247);
                if let Some(v2249) = v2248 {
                    let v2250 = C::ty_int(ctx, v2247);
                    if let Some(v2251) = v2250 {
                        let v74 = C::zero_offset(ctx);
                        let v2252 = &constructor_to_amode(ctx, v2243, v2244.1, v74);
                        let v2253 = &C::amode_to_synthetic_amode(ctx, v2252);
                        let v2254 = constructor_put_in_gpr(ctx, v2244.0);
                        let v2255 = &constructor_x64_movrm(ctx, v2249, v2253, v2254);
                        let v2256 = &constructor_x64_mfence(ctx);
                        let v2257 = &constructor_side_effect_concat(ctx, v2255, v2256);
                        let v2258 = constructor_side_effect(ctx, v2257);
                        let v2259 = Some(v2258);
                        // Rule at src\isa\x64\lower.isle line 3314.
                        return v2259;
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v831,
            args: ref v832,
        } => {
            match v831 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v833 = C::unpack_value_array_3(ctx, v832);
                        let v1385 = C::maybe_uextend(ctx, v833.0);
                        if let Some(v1386) = v1385 {
                            let v1387 = C::def_inst(ctx, v1386);
                            if let Some(v1388) = v1387 {
                                let v1389 = &C::inst_data(ctx, v1388);
                                match v1389 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1390,
                                        args: ref v1391,
                                        cond: ref v1392,
                                    } => {
                                        if let &Opcode::Fcmp = v1390 {
                                            match v1392 {
                                                &FloatCC::Equal => {
                                                    let v1393 = C::unpack_value_array_2(ctx, v1391);
                                                    let v1400 = &constructor_emit_fcmp(
                                                        ctx,
                                                        &FloatCC::NotEqual,
                                                        v1393.0,
                                                        v1393.1,
                                                    );
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v1401 = constructor_lower_select_fcmp(
                                                        ctx, v3, v1400, v833.2, v833.1,
                                                    );
                                                    let v1402 = Some(v1401);
                                                    // Rule at src\isa\x64\lower.isle line 2091.
                                                    return v1402;
                                                }
                                                &FloatCC::LessThan => {
                                                    let v3 = C::value_type(ctx, v2);
                                                    match v3 {
                                                        F32 => {
                                                            let v1393 =
                                                                C::unpack_value_array_2(ctx, v1391);
                                                            if v833.1 == v1393.1 {
                                                                if v833.2 == v1393.0 {
                                                                    let v1440 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1393.1,
                                                                        );
                                                                    let v1441 = &C::put_in_xmm_mem(
                                                                        ctx, v1393.0,
                                                                    );
                                                                    let v1442 =
                                                                        constructor_x64_maxss(
                                                                            ctx, v1440, v1441,
                                                                        );
                                                                    let v1443 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1442,
                                                                        );
                                                                    let v1444 = Some(v1443);
                                                                    // Rule at src\isa\x64\lower.isle line 2133.
                                                                    return v1444;
                                                                }
                                                            }
                                                            if v833.1 == v1393.0 {
                                                                if v833.2 == v1393.1 {
                                                                    let v1432 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1393.0,
                                                                        );
                                                                    let v1433 = &C::put_in_xmm_mem(
                                                                        ctx, v1393.1,
                                                                    );
                                                                    let v1434 =
                                                                        constructor_x64_minss(
                                                                            ctx, v1432, v1433,
                                                                        );
                                                                    let v1435 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1434,
                                                                        );
                                                                    let v1436 = Some(v1435);
                                                                    // Rule at src\isa\x64\lower.isle line 2129.
                                                                    return v1436;
                                                                }
                                                            }
                                                        }
                                                        F64 => {
                                                            let v1393 =
                                                                C::unpack_value_array_2(ctx, v1391);
                                                            if v833.1 == v1393.1 {
                                                                if v833.2 == v1393.0 {
                                                                    let v1440 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1393.1,
                                                                        );
                                                                    let v1441 = &C::put_in_xmm_mem(
                                                                        ctx, v1393.0,
                                                                    );
                                                                    let v1445 =
                                                                        constructor_x64_maxsd(
                                                                            ctx, v1440, v1441,
                                                                        );
                                                                    let v1446 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1445,
                                                                        );
                                                                    let v1447 = Some(v1446);
                                                                    // Rule at src\isa\x64\lower.isle line 2135.
                                                                    return v1447;
                                                                }
                                                            }
                                                            if v833.1 == v1393.0 {
                                                                if v833.2 == v1393.1 {
                                                                    let v1432 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v1393.0,
                                                                        );
                                                                    let v1433 = &C::put_in_xmm_mem(
                                                                        ctx, v1393.1,
                                                                    );
                                                                    let v1437 =
                                                                        constructor_x64_minsd(
                                                                            ctx, v1432, v1433,
                                                                        );
                                                                    let v1438 =
                                                                        constructor_output_xmm(
                                                                            ctx, v1437,
                                                                        );
                                                                    let v1439 = Some(v1438);
                                                                    // Rule at src\isa\x64\lower.isle line 2131.
                                                                    return v1439;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v1393 = C::unpack_value_array_2(ctx, v1391);
                                            let v1396 = &constructor_emit_fcmp(
                                                ctx, v1392, v1393.0, v1393.1,
                                            );
                                            let v3 = C::value_type(ctx, v2);
                                            let v1397 = constructor_lower_select_fcmp(
                                                ctx, v3, v1396, v833.1, v833.2,
                                            );
                                            let v1398 = Some(v1397);
                                            // Rule at src\isa\x64\lower.isle line 2089.
                                            return v1398;
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1403,
                                        args: ref v1404,
                                        cond: ref v1405,
                                    } => {
                                        if let &Opcode::Icmp = v1403 {
                                            let v1406 = C::unpack_value_array_2(ctx, v1404);
                                            let v1409 = C::value_type(ctx, v1406.0);
                                            let v1410 = C::fits_in_64(ctx, v1409);
                                            if let Some(v1411) = v1410 {
                                                let v1412 = &constructor_emit_cmp(
                                                    ctx, v1405, v1406.0, v1406.1,
                                                );
                                                let v3 = C::value_type(ctx, v2);
                                                let v1413 = constructor_lower_select_icmp(
                                                    ctx, v3, v1412, v833.1, v833.2,
                                                );
                                                let v1414 = Some(v1413);
                                                // Rule at src\isa\x64\lower.isle line 2105.
                                                return v1414;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1415 = C::value_type(ctx, v833.0);
                        let v1416 = C::fits_in_64(ctx, v1415);
                        if let Some(v1417) = v1416 {
                            let v1418 = &C::raw_operand_size_of_type(ctx, v1417);
                            let v1419 = constructor_put_in_gpr(ctx, v833.0);
                            let v1420 = &C::gpr_to_gpr_mem_imm(ctx, v1419);
                            let v1421 = &constructor_x64_test(ctx, v1418, v1419, v1420);
                            let v3 = C::value_type(ctx, v2);
                            let v1423 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v833.1, v833.2);
                            let v1424 = constructor_with_flags(ctx, v1421, v1423);
                            let v1425 = C::output(ctx, v1424);
                            let v1426 = Some(v1425);
                            // Rule at src\isa\x64\lower.isle line 2111.
                            return v1426;
                        }
                        if v1415 == I128 {
                            let v886 = C::put_in_regs(ctx, v833.0);
                            let v1428 = &constructor_cmp_zero_i128(ctx, &CC::Z, v886);
                            let v1429 = constructor_select_icmp(ctx, v1428, v833.1, v833.2);
                            let v1430 = C::output(ctx, v1429);
                            let v1431 = Some(v1430);
                            // Rule at src\isa\x64\lower.isle line 2118.
                            return v1431;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v833 = C::unpack_value_array_3(ctx, v832);
                    let v855 = C::def_inst(ctx, v833.0);
                    if let Some(v856) = v855 {
                        let v857 = &C::inst_data(ctx, v856);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2324,
                            args: ref v2325,
                            cond: ref v2326,
                        } = v857
                        {
                            if let &Opcode::Icmp = v2324 {
                                let v2327 = C::unpack_value_array_2(ctx, v2325);
                                let v2330 = &constructor_emit_cmp(ctx, v2326, v2327.0, v2327.1);
                                let v2331 = constructor_select_icmp(ctx, v2330, v833.1, v833.2);
                                let v2332 = C::output(ctx, v2331);
                                let v2333 = Some(v2332);
                                // Rule at src\isa\x64\lower.isle line 3437.
                                return v2333;
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1415 = C::value_type(ctx, v833.0);
                        let v1416 = C::fits_in_64(ctx, v1415);
                        if let Some(v1417) = v1416 {
                            let v1418 = &C::raw_operand_size_of_type(ctx, v1417);
                            let v1419 = constructor_put_in_gpr(ctx, v833.0);
                            let v1420 = &C::gpr_to_gpr_mem_imm(ctx, v1419);
                            let v1421 = &constructor_x64_test(ctx, v1418, v1419, v1420);
                            let v3 = C::value_type(ctx, v2);
                            let v1423 =
                                &constructor_cmove_from_values(ctx, v3, &CC::NZ, v833.1, v833.2);
                            let v1424 = constructor_with_flags(ctx, v1421, v1423);
                            let v1425 = C::output(ctx, v1424);
                            let v1426 = Some(v1425);
                            // Rule at src\isa\x64\lower.isle line 3440.
                            return v1426;
                        }
                        if v1415 == I128 {
                            let v886 = C::put_in_regs(ctx, v833.0);
                            let v1428 = &constructor_cmp_zero_i128(ctx, &CC::Z, v886);
                            let v1429 = constructor_select_icmp(ctx, v1428, v833.1, v833.2);
                            let v1430 = C::output(ctx, v1429);
                            let v1431 = Some(v1430);
                            // Rule at src\isa\x64\lower.isle line 3445.
                            return v1431;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v225 = C::ty_scalar_float(ctx, v3);
                        if let Some(v226) = v225 {
                            let v833 = C::unpack_value_array_3(ctx, v832);
                            let v837 = constructor_put_in_xmm(ctx, v833.0);
                            let v850 = &C::put_in_xmm_mem(ctx, v833.1);
                            let v908 = constructor_sse_and(ctx, v226, v837, v850);
                            let v909 = constructor_put_in_xmm(ctx, v833.0);
                            let v910 = constructor_vector_all_ones(ctx);
                            let v911 = &C::xmm_to_xmm_mem(ctx, v910);
                            let v912 = constructor_x64_xor_vector(ctx, v226, v909, v911);
                            let v913 = &C::put_in_xmm_mem(ctx, v833.2);
                            let v914 = constructor_sse_and(ctx, v226, v912, v913);
                            let v915 = &C::xmm_to_xmm_mem(ctx, v914);
                            let v916 = constructor_sse_or(ctx, v226, v908, v915);
                            let v917 = constructor_output_xmm(ctx, v916);
                            let v918 = Some(v917);
                            // Rule at src\isa\x64\lower.isle line 1477.
                            return v918;
                        }
                        let v895 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v896) = v895 {
                            let v833 = C::unpack_value_array_3(ctx, v832);
                            let v897 = constructor_put_in_gpr(ctx, v833.0);
                            let v898 = &constructor_put_in_gpr_mem_imm(ctx, v833.1);
                            let v899 = constructor_x64_and(ctx, v896, v897, v898);
                            let v900 = constructor_put_in_gpr(ctx, v833.0);
                            let v901 = constructor_x64_not(ctx, v896, v900);
                            let v902 = &constructor_put_in_gpr_mem_imm(ctx, v833.2);
                            let v903 = constructor_x64_and(ctx, v896, v901, v902);
                            let v904 = &C::gpr_to_gpr_mem_imm(ctx, v903);
                            let v905 = constructor_x64_or(ctx, v896, v899, v904);
                            let v906 = constructor_output_gpr(ctx, v905);
                            let v907 = Some(v906);
                            // Rule at src\isa\x64\lower.isle line 1472.
                            return v907;
                        }
                        match v3 {
                            I128 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v886 = C::put_in_regs(ctx, v833.0);
                                let v887 = C::put_in_regs(ctx, v833.1);
                                let v888 = constructor_and_i128(ctx, v886, v887);
                                let v889 = constructor_i128_not(ctx, v833.0);
                                let v890 = C::put_in_regs(ctx, v833.2);
                                let v891 = constructor_and_i128(ctx, v889, v890);
                                let v892 = constructor_or_i128(ctx, v888, v891);
                                let v893 = C::output(ctx, v892);
                                let v894 = Some(v893);
                                // Rule at src\isa\x64\lower.isle line 1467.
                                return v894;
                            }
                            F32X4 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v855 = C::def_inst(ctx, v833.0);
                                if let Some(v856) = v855 {
                                    let v857 = &C::inst_data(ctx, v856);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v858,
                                        arg: v859,
                                        flags: v860,
                                    } = v857
                                    {
                                        if let &Opcode::Bitcast = v858 {
                                            let v861 = C::def_inst(ctx, v859);
                                            if let Some(v862) = v861 {
                                                let v863 = &C::inst_data(ctx, v862);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v864,
                                                    args: ref v865,
                                                    cond: ref v866,
                                                } = v863
                                                {
                                                    if let &Opcode::Fcmp = v864 {
                                                        if let &FloatCC::LessThan = v866 {
                                                            let v867 =
                                                                C::unpack_value_array_2(ctx, v865);
                                                            if v833.1 == v867.1 {
                                                                if v833.2 == v867.0 {
                                                                    let v878 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v867.1,
                                                                        );
                                                                    let v879 = &C::put_in_xmm_mem(
                                                                        ctx, v867.0,
                                                                    );
                                                                    let v880 =
                                                                        constructor_x64_maxps(
                                                                            ctx, v878, v879,
                                                                        );
                                                                    let v881 =
                                                                        constructor_output_xmm(
                                                                            ctx, v880,
                                                                        );
                                                                    let v882 = Some(v881);
                                                                    // Rule at src\isa\x64\lower.isle line 1460.
                                                                    return v882;
                                                                }
                                                            }
                                                            if v833.1 == v867.0 {
                                                                if v833.2 == v867.1 {
                                                                    let v870 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v867.0,
                                                                        );
                                                                    let v871 = &C::put_in_xmm_mem(
                                                                        ctx, v867.1,
                                                                    );
                                                                    let v872 =
                                                                        constructor_x64_minps(
                                                                            ctx, v870, v871,
                                                                        );
                                                                    let v873 =
                                                                        constructor_output_xmm(
                                                                            ctx, v872,
                                                                        );
                                                                    let v874 = Some(v873);
                                                                    // Rule at src\isa\x64\lower.isle line 1455.
                                                                    return v874;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64X2 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v855 = C::def_inst(ctx, v833.0);
                                if let Some(v856) = v855 {
                                    let v857 = &C::inst_data(ctx, v856);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v858,
                                        arg: v859,
                                        flags: v860,
                                    } = v857
                                    {
                                        if let &Opcode::Bitcast = v858 {
                                            let v861 = C::def_inst(ctx, v859);
                                            if let Some(v862) = v861 {
                                                let v863 = &C::inst_data(ctx, v862);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v864,
                                                    args: ref v865,
                                                    cond: ref v866,
                                                } = v863
                                                {
                                                    if let &Opcode::Fcmp = v864 {
                                                        if let &FloatCC::LessThan = v866 {
                                                            let v867 =
                                                                C::unpack_value_array_2(ctx, v865);
                                                            if v833.1 == v867.1 {
                                                                if v833.2 == v867.0 {
                                                                    let v878 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v867.1,
                                                                        );
                                                                    let v879 = &C::put_in_xmm_mem(
                                                                        ctx, v867.0,
                                                                    );
                                                                    let v883 =
                                                                        constructor_x64_maxpd(
                                                                            ctx, v878, v879,
                                                                        );
                                                                    let v884 =
                                                                        constructor_output_xmm(
                                                                            ctx, v883,
                                                                        );
                                                                    let v885 = Some(v884);
                                                                    // Rule at src\isa\x64\lower.isle line 1462.
                                                                    return v885;
                                                                }
                                                            }
                                                            if v833.1 == v867.0 {
                                                                if v833.2 == v867.1 {
                                                                    let v870 =
                                                                        constructor_put_in_xmm(
                                                                            ctx, v867.0,
                                                                        );
                                                                    let v871 = &C::put_in_xmm_mem(
                                                                        ctx, v867.1,
                                                                    );
                                                                    let v875 =
                                                                        constructor_x64_minpd(
                                                                            ctx, v870, v871,
                                                                        );
                                                                    let v876 =
                                                                        constructor_output_xmm(
                                                                            ctx, v875,
                                                                        );
                                                                    let v877 = Some(v876);
                                                                    // Rule at src\isa\x64\lower.isle line 1457.
                                                                    return v877;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            let v584 = C::use_sse41(ctx);
                            if v584 == true {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v847 = constructor_all_ones_or_all_zeros(ctx, v833.0);
                                if let Some(v848) = v847 {
                                    let v849 = constructor_put_in_xmm(ctx, v833.2);
                                    let v850 = &C::put_in_xmm_mem(ctx, v833.1);
                                    let v851 = constructor_put_in_xmm(ctx, v833.0);
                                    let v852 = constructor_x64_pblendvb(ctx, v849, v850, v851);
                                    let v853 = constructor_output_xmm(ctx, v852);
                                    let v854 = Some(v853);
                                    // Rule at src\isa\x64\lower.isle line 1433.
                                    return v854;
                                }
                            }
                            let v833 = C::unpack_value_array_3(ctx, v832);
                            let v837 = constructor_put_in_xmm(ctx, v833.0);
                            let v838 = constructor_put_in_xmm(ctx, v833.1);
                            let v839 = &C::xmm_to_xmm_mem(ctx, v837);
                            let v840 = constructor_sse_and(ctx, v3, v838, v839);
                            let v841 = &C::put_in_xmm_mem(ctx, v833.2);
                            let v842 = constructor_sse_and_not(ctx, v3, v837, v841);
                            let v843 = &C::xmm_to_xmm_mem(ctx, v840);
                            let v844 = constructor_sse_or(ctx, v3, v842, v843);
                            let v845 = constructor_output_xmm(ctx, v844);
                            let v846 = Some(v845);
                            // Rule at src\isa\x64\lower.isle line 1419.
                            return v846;
                        }
                    }
                }
                &Opcode::X86Blendv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v833 = C::unpack_value_array_3(ctx, v832);
                                    let v849 = constructor_put_in_xmm(ctx, v833.2);
                                    let v850 = &C::put_in_xmm_mem(ctx, v833.1);
                                    let v851 = constructor_put_in_xmm(ctx, v833.0);
                                    let v852 = constructor_x64_pblendvb(ctx, v849, v850, v851);
                                    let v853 = constructor_output_xmm(ctx, v852);
                                    let v854 = Some(v853);
                                    // Rule at src\isa\x64\lower.isle line 1485.
                                    return v854;
                                }
                            }
                            I32X4 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v833 = C::unpack_value_array_3(ctx, v832);
                                    let v849 = constructor_put_in_xmm(ctx, v833.2);
                                    let v850 = &C::put_in_xmm_mem(ctx, v833.1);
                                    let v851 = constructor_put_in_xmm(ctx, v833.0);
                                    let v919 = constructor_x64_blendvps(ctx, v849, v850, v851);
                                    let v920 = constructor_output_xmm(ctx, v919);
                                    let v921 = Some(v920);
                                    // Rule at src\isa\x64\lower.isle line 1490.
                                    return v921;
                                }
                            }
                            I64X2 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v833 = C::unpack_value_array_3(ctx, v832);
                                    let v849 = constructor_put_in_xmm(ctx, v833.2);
                                    let v850 = &C::put_in_xmm_mem(ctx, v833.1);
                                    let v851 = constructor_put_in_xmm(ctx, v833.0);
                                    let v922 = constructor_x64_blendvpd(ctx, v849, v850, v851);
                                    let v923 = constructor_output_xmm(ctx, v922);
                                    let v924 = Some(v923);
                                    // Rule at src\isa\x64\lower.isle line 1495.
                                    return v924;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1923 = C::use_fma(ctx);
                        if v1923 == true {
                            let v833 = C::unpack_value_array_3(ctx, v832);
                            let v1927 = C::def_inst(ctx, v833.2);
                            if let Some(v1928) = v1927 {
                                let v1929 = &C::inst_data(ctx, v1928);
                                if let &InstructionData::Unary {
                                    opcode: ref v1930,
                                    arg: v1931,
                                } = v1929
                                {
                                    if let &Opcode::Fneg = v1930 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1932 =
                                            constructor_fmsub(ctx, v3, v833.0, v833.1, v1931);
                                        let v1933 = constructor_output_xmm(ctx, v1932);
                                        let v1934 = Some(v1933);
                                        // Rule at src\isa\x64\lower.isle line 2877.
                                        return v1934;
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            let v1924 = constructor_fmadd(ctx, v3, v833.0, v833.1, v833.2);
                            let v1925 = constructor_output_xmm(ctx, v1924);
                            let v1926 = Some(v1925);
                            // Rule at src\isa\x64\lower.isle line 2846.
                            return v1926;
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v1854 = C::put_in_reg(ctx, v833.0);
                                let v1855 = C::put_in_reg(ctx, v833.1);
                                let v1856 = C::put_in_reg(ctx, v833.2);
                                let v1857 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1854, v1855, v1856);
                                let v1858 = constructor_output_reg(ctx, v1857);
                                let v1859 = Some(v1858);
                                // Rule at src\isa\x64\lower.isle line 2801.
                                return v1859;
                            }
                            F64 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v1854 = C::put_in_reg(ctx, v833.0);
                                let v1855 = C::put_in_reg(ctx, v833.1);
                                let v1856 = C::put_in_reg(ctx, v833.2);
                                let v1861 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1854, v1855, v1856);
                                let v1862 = constructor_output_reg(ctx, v1861);
                                let v1863 = Some(v1862);
                                // Rule at src\isa\x64\lower.isle line 2803.
                                return v1863;
                            }
                            F32X4 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v837 = constructor_put_in_xmm(ctx, v833.0);
                                let v838 = constructor_put_in_xmm(ctx, v833.1);
                                let v1864 = constructor_put_in_xmm(ctx, v833.2);
                                let v1865 = C::xmm_to_reg(ctx, v837);
                                let v1866 = C::xmm_to_reg(ctx, v838);
                                let v1867 = C::xmm_to_reg(ctx, v1864);
                                let v1868 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1865, v1866, v1867);
                                let v1869 = C::xmm_new(ctx, v1868);
                                let v1870 = &C::xmm_to_xmm_mem(ctx, v837);
                                let v1871 = constructor_x64_pshufd(ctx, v1870, 0x1);
                                let v1872 = C::xmm_to_reg(ctx, v1871);
                                let v1873 = &C::xmm_to_xmm_mem(ctx, v838);
                                let v1874 = constructor_x64_pshufd(ctx, v1873, 0x1);
                                let v1875 = C::xmm_to_reg(ctx, v1874);
                                let v1876 = &C::xmm_to_xmm_mem(ctx, v1864);
                                let v1877 = constructor_x64_pshufd(ctx, v1876, 0x1);
                                let v1878 = C::xmm_to_reg(ctx, v1877);
                                let v1879 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1872, v1875, v1878);
                                let v1880 = C::xmm_new(ctx, v1879);
                                let v1881 = &C::xmm_to_xmm_mem(ctx, v837);
                                let v1882 = constructor_x64_pshufd(ctx, v1881, 0x2);
                                let v1883 = C::xmm_to_reg(ctx, v1882);
                                let v1884 = &C::xmm_to_xmm_mem(ctx, v838);
                                let v1885 = constructor_x64_pshufd(ctx, v1884, 0x2);
                                let v1886 = C::xmm_to_reg(ctx, v1885);
                                let v1887 = &C::xmm_to_xmm_mem(ctx, v1864);
                                let v1888 = constructor_x64_pshufd(ctx, v1887, 0x2);
                                let v1889 = C::xmm_to_reg(ctx, v1888);
                                let v1890 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1883, v1886, v1889);
                                let v1891 = C::xmm_new(ctx, v1890);
                                let v1892 = &C::xmm_to_xmm_mem(ctx, v837);
                                let v1893 = constructor_x64_pshufd(ctx, v1892, 0x3);
                                let v1894 = C::xmm_to_reg(ctx, v1893);
                                let v1895 = &C::xmm_to_xmm_mem(ctx, v838);
                                let v1896 = constructor_x64_pshufd(ctx, v1895, 0x3);
                                let v1897 = C::xmm_to_reg(ctx, v1896);
                                let v1898 = &C::xmm_to_xmm_mem(ctx, v1864);
                                let v1899 = constructor_x64_pshufd(ctx, v1898, 0x3);
                                let v1900 = C::xmm_to_reg(ctx, v1899);
                                let v1901 =
                                    C::libcall_3(ctx, &LibCall::FmaF32, v1894, v1897, v1900);
                                let v1902 = C::xmm_new(ctx, v1901);
                                let v1903 = constructor_f32x4_insertlane(ctx, v1869, v1880, 0x1);
                                let v1904 = constructor_f32x4_insertlane(ctx, v1903, v1891, 0x2);
                                let v1905 = constructor_f32x4_insertlane(ctx, v1904, v1902, 0x3);
                                let v1906 = constructor_output_xmm(ctx, v1905);
                                let v1907 = Some(v1906);
                                // Rule at src\isa\x64\lower.isle line 2806.
                                return v1907;
                            }
                            F64X2 => {
                                let v833 = C::unpack_value_array_3(ctx, v832);
                                let v837 = constructor_put_in_xmm(ctx, v833.0);
                                let v838 = constructor_put_in_xmm(ctx, v833.1);
                                let v1864 = constructor_put_in_xmm(ctx, v833.2);
                                let v1865 = C::xmm_to_reg(ctx, v837);
                                let v1866 = C::xmm_to_reg(ctx, v838);
                                let v1867 = C::xmm_to_reg(ctx, v1864);
                                let v1908 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1865, v1866, v1867);
                                let v1909 = C::xmm_new(ctx, v1908);
                                let v1870 = &C::xmm_to_xmm_mem(ctx, v837);
                                let v1911 = constructor_x64_pshufd(ctx, v1870, 0xEE);
                                let v1912 = C::xmm_to_reg(ctx, v1911);
                                let v1873 = &C::xmm_to_xmm_mem(ctx, v838);
                                let v1913 = constructor_x64_pshufd(ctx, v1873, 0xEE);
                                let v1914 = C::xmm_to_reg(ctx, v1913);
                                let v1876 = &C::xmm_to_xmm_mem(ctx, v1864);
                                let v1915 = constructor_x64_pshufd(ctx, v1876, 0xEE);
                                let v1916 = C::xmm_to_reg(ctx, v1915);
                                let v1917 =
                                    C::libcall_3(ctx, &LibCall::FmaF64, v1912, v1914, v1916);
                                let v1918 = C::xmm_new(ctx, v1917);
                                let v1919 = &C::xmm_to_xmm_mem(ctx, v1918);
                                let v1920 = constructor_x64_movlhps(ctx, v1909, v1919);
                                let v1921 = constructor_output_xmm(ctx, v1920);
                                let v1922 = Some(v1921);
                                // Rule at src\isa\x64\lower.isle line 2830.
                                return v1922;
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v925,
            args: ref v926,
            imm: v927,
        } => {
            if let &Opcode::Insertlane = v925 {
                let v584 = C::use_sse41(ctx);
                if v584 == true {
                    let v932 = C::u8_from_uimm8(ctx, v927);
                    if v932 == 0x1 {
                        let v928 = C::unpack_value_array_2(ctx, v926);
                        let v1016 = C::def_inst(ctx, v928.0);
                        if let Some(v1017) = v1016 {
                            let v1018 = C::first_result(ctx, v1017);
                            if let Some(v1019) = v1018 {
                                let v1020 = C::value_type(ctx, v1019);
                                if v1020 == I64X2 {
                                    let v1021 = &C::inst_data(ctx, v1017);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1022,
                                        arg: v1023,
                                    } = v1021
                                    {
                                        if let &Opcode::Splat = v1022 {
                                            let v1025 = constructor_put_in_gpr(ctx, v1023);
                                            let v1026 =
                                                constructor_bitcast_gpr_to_xmm(ctx, 0x40, v1025);
                                            let v1027 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                            let v1029 =
                                                constructor_x64_pinsrq(ctx, v1026, v1027, 0x1);
                                            let v1030 = constructor_output_xmm(ctx, v1029);
                                            let v1031 = Some(v1030);
                                            // Rule at src\isa\x64\lower.isle line 1597.
                                            return v1031;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v928 = C::unpack_value_array_2(ctx, v926);
                    let v931 = C::value_type(ctx, v928.0);
                    match v931 {
                        I8X16 => {
                            let v938 = &C::sinkable_load_exact(ctx, v928.1);
                            if let Some(v939) = v938 {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v940 = &constructor_sink_load_to_gpr_mem(ctx, v939);
                                let v941 = constructor_x64_pinsrb(ctx, v933, v940, v932);
                                let v942 = constructor_output_xmm(ctx, v941);
                                let v943 = Some(v942);
                                // Rule at src\isa\x64\lower.isle line 1505.
                                return v943;
                            }
                            let v933 = constructor_put_in_xmm(ctx, v928.0);
                            let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                            let v935 = constructor_x64_pinsrb(ctx, v933, v934, v932);
                            let v936 = constructor_output_xmm(ctx, v935);
                            let v937 = Some(v936);
                            // Rule at src\isa\x64\lower.isle line 1502.
                            return v937;
                        }
                        I32X4 => {
                            let v933 = constructor_put_in_xmm(ctx, v928.0);
                            let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                            let v974 = constructor_x64_pinsrd(ctx, v933, v934, v932);
                            let v975 = constructor_output_xmm(ctx, v974);
                            let v976 = Some(v975);
                            // Rule at src\isa\x64\lower.isle line 1557.
                            return v976;
                        }
                        I64X2 => {
                            let v933 = constructor_put_in_xmm(ctx, v928.0);
                            let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                            let v1005 = constructor_x64_pinsrq(ctx, v933, v934, v932);
                            let v1006 = constructor_output_xmm(ctx, v1005);
                            let v1007 = Some(v1006);
                            // Rule at src\isa\x64\lower.isle line 1586.
                            return v1007;
                        }
                        F32X4 => {
                            let v1032 = &C::sinkable_load(ctx, v928.1);
                            if let Some(v1033) = v1032 {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v1034 = &constructor_sink_load_to_xmm_mem(ctx, v1033);
                                let v1035 = C::sse_insertps_lane_imm(ctx, v932);
                                let v1036 = constructor_x64_insertps(ctx, v933, v1034, v1035);
                                let v1037 = constructor_output_xmm(ctx, v1036);
                                let v1038 = Some(v1037);
                                // Rule at src\isa\x64\lower.isle line 1603.
                                return v1038;
                            }
                        }
                        _ => {}
                    }
                }
                let v928 = C::unpack_value_array_2(ctx, v926);
                let v931 = C::value_type(ctx, v928.0);
                match v931 {
                    I8X16 => {
                        let v933 = constructor_put_in_xmm(ctx, v928.0);
                        let v932 = C::u8_from_uimm8(ctx, v927);
                        let v944 = C::insert_i8x16_lane_hole(ctx, v932);
                        let v945 = &constructor_const_to_xmm_mem(ctx, v944);
                        let v946 = constructor_x64_pand(ctx, v933, v945);
                        let v948 = &constructor_put_in_gpr_mem(ctx, v928.1);
                        let v949 = constructor_x64_movzx(ctx, &ExtMode::BL, v948);
                        let v952 = C::u8_and(ctx, v932, 0x3);
                        let v953 = C::u8_shl(ctx, v952, 0x3);
                        let v954 = Imm8Reg::Imm8 { imm: v953 };
                        let v955 = &C::imm8_reg_to_imm8_gpr(ctx, &v954);
                        let v956 = constructor_x64_shl(ctx, I32, v949, v955);
                        let v957 = &C::gpr_to_gpr_mem(ctx, v956);
                        let v958 = constructor_x64_movd_to_xmm(ctx, v957);
                        let v959 = &C::xmm_to_xmm_mem(ctx, v958);
                        let v961 = C::u8_shr(ctx, v932, 0x2);
                        let v962 = constructor_insert_i8x16_lane_pshufd_imm(ctx, v961);
                        let v963 = constructor_x64_pshufd(ctx, v959, v962);
                        let v964 = &C::xmm_to_xmm_mem(ctx, v963);
                        let v965 = constructor_x64_por(ctx, v946, v964);
                        let v966 = constructor_output_xmm(ctx, v965);
                        let v967 = Some(v966);
                        // Rule at src\isa\x64\lower.isle line 1533.
                        return v967;
                    }
                    I16X8 => {
                        let v938 = &C::sinkable_load_exact(ctx, v928.1);
                        if let Some(v939) = v938 {
                            let v933 = constructor_put_in_xmm(ctx, v928.0);
                            let v940 = &constructor_sink_load_to_gpr_mem(ctx, v939);
                            let v932 = C::u8_from_uimm8(ctx, v927);
                            let v971 = constructor_x64_pinsrw(ctx, v933, v940, v932);
                            let v972 = constructor_output_xmm(ctx, v971);
                            let v973 = Some(v972);
                            // Rule at src\isa\x64\lower.isle line 1553.
                            return v973;
                        }
                        let v933 = constructor_put_in_xmm(ctx, v928.0);
                        let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                        let v932 = C::u8_from_uimm8(ctx, v927);
                        let v968 = constructor_x64_pinsrw(ctx, v933, v934, v932);
                        let v969 = constructor_output_xmm(ctx, v968);
                        let v970 = Some(v969);
                        // Rule at src\isa\x64\lower.isle line 1551.
                        return v970;
                    }
                    I32X4 => {
                        let v932 = C::u8_from_uimm8(ctx, v927);
                        match v932 {
                            0x0 => {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                let v977 = constructor_x64_movd_to_xmm(ctx, v934);
                                let v978 = constructor_x64_movss_regmove(ctx, v933, v977);
                                let v979 = constructor_output_xmm(ctx, v978);
                                let v980 = Some(v979);
                                // Rule at src\isa\x64\lower.isle line 1561.
                                return v980;
                            }
                            0x1 => {
                                let v981 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                let v982 = constructor_x64_movd_to_xmm(ctx, v981);
                                let v983 = constructor_put_in_xmm(ctx, v928.0);
                                let v984 = &C::xmm_to_xmm_mem(ctx, v983);
                                let v985 = constructor_x64_punpcklqdq(ctx, v982, v984);
                                let v986 = &C::xmm_to_xmm_mem(ctx, v983);
                                let v988 = constructor_x64_shufps(ctx, v985, v986, 0xE2);
                                let v989 = constructor_output_xmm(ctx, v988);
                                let v990 = Some(v989);
                                // Rule at src\isa\x64\lower.isle line 1566.
                                return v990;
                            }
                            0x2 => {
                                let v981 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                let v982 = constructor_x64_movd_to_xmm(ctx, v981);
                                let v983 = constructor_put_in_xmm(ctx, v928.0);
                                let v984 = &C::xmm_to_xmm_mem(ctx, v983);
                                let v992 = constructor_x64_shufps(ctx, v982, v984, 0x30);
                                let v993 = &C::xmm_to_xmm_mem(ctx, v992);
                                let v995 = constructor_x64_shufps(ctx, v983, v993, 0x84);
                                let v996 = constructor_output_xmm(ctx, v995);
                                let v997 = Some(v996);
                                // Rule at src\isa\x64\lower.isle line 1573.
                                return v997;
                            }
                            0x3 => {
                                let v981 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                let v982 = constructor_x64_movd_to_xmm(ctx, v981);
                                let v983 = constructor_put_in_xmm(ctx, v928.0);
                                let v984 = &C::xmm_to_xmm_mem(ctx, v983);
                                let v999 = constructor_x64_shufps(ctx, v982, v984, 0xE4);
                                let v1000 = &C::xmm_to_xmm_mem(ctx, v999);
                                let v1002 = constructor_x64_shufps(ctx, v983, v1000, 0x24);
                                let v1003 = constructor_output_xmm(ctx, v1002);
                                let v1004 = Some(v1003);
                                // Rule at src\isa\x64\lower.isle line 1580.
                                return v1004;
                            }
                            _ => {}
                        }
                    }
                    I64X2 => {
                        let v932 = C::u8_from_uimm8(ctx, v927);
                        match v932 {
                            0x0 => {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                let v1008 = constructor_x64_movq_to_xmm(ctx, v934);
                                let v1009 = constructor_x64_movsd_regmove(ctx, v933, v1008);
                                let v1010 = constructor_output_xmm(ctx, v1009);
                                let v1011 = Some(v1010);
                                // Rule at src\isa\x64\lower.isle line 1589.
                                return v1011;
                            }
                            0x1 => {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v934 = &constructor_put_in_gpr_mem(ctx, v928.1);
                                let v1008 = constructor_x64_movq_to_xmm(ctx, v934);
                                let v1012 = &C::xmm_to_xmm_mem(ctx, v1008);
                                let v1013 = constructor_x64_punpcklqdq(ctx, v933, v1012);
                                let v1014 = constructor_output_xmm(ctx, v1013);
                                let v1015 = Some(v1014);
                                // Rule at src\isa\x64\lower.isle line 1591.
                                return v1015;
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v933 = constructor_put_in_xmm(ctx, v928.0);
                        let v1039 = constructor_put_in_xmm(ctx, v928.1);
                        let v932 = C::u8_from_uimm8(ctx, v927);
                        let v1040 = constructor_f32x4_insertlane(ctx, v933, v1039, v932);
                        let v1041 = constructor_output_xmm(ctx, v1040);
                        let v1042 = Some(v1041);
                        // Rule at src\isa\x64\lower.isle line 1606.
                        return v1042;
                    }
                    F64X2 => {
                        let v932 = C::u8_from_uimm8(ctx, v927);
                        match v932 {
                            0x0 => {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v1039 = constructor_put_in_xmm(ctx, v928.1);
                                let v1043 = constructor_x64_movsd_regmove(ctx, v933, v1039);
                                let v1044 = constructor_output_xmm(ctx, v1043);
                                let v1045 = Some(v1044);
                                // Rule at src\isa\x64\lower.isle line 1651.
                                return v1045;
                            }
                            0x1 => {
                                let v933 = constructor_put_in_xmm(ctx, v928.0);
                                let v1046 = &C::put_in_xmm_mem(ctx, v928.1);
                                let v1047 = constructor_x64_movlhps(ctx, v933, v1046);
                                let v1048 = constructor_output_xmm(ctx, v1047);
                                let v1049 = Some(v1048);
                                // Rule at src\isa\x64\lower.isle line 1659.
                                return v1049;
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1121,
            code: ref v1122,
        } => {
            if let &Opcode::Trap = v1121 {
                let v1123 = &constructor_x64_ud2(ctx, v1122);
                let v1124 = constructor_side_effect(ctx, v1123);
                let v1125 = Some(v1124);
                // Rule at src\isa\x64\lower.isle line 1812.
                return v1125;
            }
        }
        &InstructionData::Unary {
            opcode: ref v494,
            arg: v495,
        } => {
            match v494 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            match v94.0 {
                                0x20 => {
                                    if v94.1 == 0x4 {
                                        let v3104 = &C::sinkable_load(ctx, v495);
                                        if let Some(v3105) = v3104 {
                                            let v3185 = C::use_avx(ctx);
                                            if v3185 == true {
                                                let v3186 =
                                                    &constructor_sink_load_to_xmm_mem(ctx, v3105);
                                                let v3187 =
                                                    constructor_x64_vbroadcastss(ctx, v3186);
                                                let v3188 = constructor_output_xmm(ctx, v3187);
                                                let v3189 = Some(v3188);
                                                // Rule at src\isa\x64\lower.isle line 4685.
                                                return v3189;
                                            }
                                            let v3108 = &C::sink_load(ctx, v3105);
                                            let v3109 = constructor_x64_movss_load(ctx, v3108);
                                            let v3181 = &C::xmm_to_xmm_mem(ctx, v3109);
                                            let v3182 =
                                                constructor_x64_shufps(ctx, v3109, v3181, 0x0);
                                            let v3183 = constructor_output_xmm(ctx, v3182);
                                            let v3184 = Some(v3183);
                                            // Rule at src\isa\x64\lower.isle line 4682.
                                            return v3184;
                                        }
                                    }
                                }
                                0x40 => {
                                    if v94.1 == 0x2 {
                                        let v680 = C::use_ssse3(ctx);
                                        if v680 == true {
                                            let v3104 = &C::sinkable_load(ctx, v495);
                                            if let Some(v3105) = v3104 {
                                                let v3186 =
                                                    &constructor_sink_load_to_xmm_mem(ctx, v3105);
                                                let v3199 = constructor_x64_movddup(ctx, v3186);
                                                let v3200 = constructor_output_xmm(ctx, v3199);
                                                let v3201 = Some(v3200);
                                                // Rule at src\isa\x64\lower.isle line 4696.
                                                return v3201;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8X16 => {
                                let v3139 = &C::sinkable_load_exact(ctx, v495);
                                if let Some(v3140) = v3139 {
                                    let v3134 = C::use_avx2(ctx);
                                    if v3134 == true {
                                        let v3146 = &constructor_sink_load_to_xmm_mem(ctx, v3140);
                                        let v3147 = constructor_x64_vpbroadcastb(ctx, v3146);
                                        let v3148 = constructor_output_xmm(ctx, v3147);
                                        let v3149 = Some(v3148);
                                        // Rule at src\isa\x64\lower.isle line 4633.
                                        return v3149;
                                    }
                                    let v584 = C::use_sse41(ctx);
                                    if v584 == true {
                                        let v680 = C::use_ssse3(ctx);
                                        if v680 == true {
                                            let v1978 = constructor_xmm_uninit_value(ctx);
                                            let v3141 =
                                                &constructor_sink_load_to_gpr_mem(ctx, v3140);
                                            let v3142 =
                                                constructor_x64_pinsrb(ctx, v1978, v3141, 0x0);
                                            let v1314 = constructor_xmm_zero(ctx, I8X16);
                                            let v1315 = &C::xmm_to_xmm_mem(ctx, v1314);
                                            let v3143 = constructor_x64_pshufb(ctx, v3142, v1315);
                                            let v3144 = constructor_output_xmm(ctx, v3143);
                                            let v3145 = Some(v3144);
                                            // Rule at src\isa\x64\lower.isle line 4629.
                                            return v3145;
                                        }
                                    }
                                }
                                let v3134 = C::use_avx2(ctx);
                                if v3134 == true {
                                    let v496 = constructor_put_in_gpr(ctx, v495);
                                    let v3128 = constructor_bitcast_gpr_to_xmm(ctx, 0x20, v496);
                                    let v3135 = &C::xmm_to_xmm_mem(ctx, v3128);
                                    let v3136 = constructor_x64_vpbroadcastb(ctx, v3135);
                                    let v3137 = constructor_output_xmm(ctx, v3136);
                                    let v3138 = Some(v3137);
                                    // Rule at src\isa\x64\lower.isle line 4626.
                                    return v3138;
                                }
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v496 = constructor_put_in_gpr(ctx, v495);
                                    let v3128 = constructor_bitcast_gpr_to_xmm(ctx, 0x20, v496);
                                    let v3129 = constructor_xmm_zero(ctx, I8X16);
                                    let v3130 = &C::xmm_to_xmm_mem(ctx, v3129);
                                    let v3131 = constructor_x64_pshufb(ctx, v3128, v3130);
                                    let v3132 = constructor_output_xmm(ctx, v3131);
                                    let v3133 = Some(v3132);
                                    // Rule at src\isa\x64\lower.isle line 4623.
                                    return v3133;
                                }
                                let v3117 = &constructor_put_in_gpr_mem(ctx, v495);
                                let v3118 = constructor_x64_movd_to_xmm(ctx, v3117);
                                let v3119 = &C::xmm_to_xmm_mem(ctx, v3118);
                                let v3120 = constructor_x64_punpcklbw(ctx, v3118, v3119);
                                let v3121 = &C::xmm_to_xmm_mem(ctx, v3120);
                                let v3122 = constructor_x64_pshuflw(ctx, v3121, 0x0);
                                let v3123 = &C::xmm_to_xmm_mem(ctx, v3122);
                                let v3124 = constructor_x64_pshufd(ctx, v3123, 0x0);
                                let v3125 = constructor_output_xmm(ctx, v3124);
                                let v3126 = Some(v3125);
                                // Rule at src\isa\x64\lower.isle line 4620.
                                return v3126;
                            }
                            I16X8 => {
                                let v3139 = &C::sinkable_load_exact(ctx, v495);
                                if let Some(v3140) = v3139 {
                                    let v3134 = C::use_avx2(ctx);
                                    if v3134 == true {
                                        let v3146 = &constructor_sink_load_to_xmm_mem(ctx, v3140);
                                        let v3165 = constructor_x64_vpbroadcastw(ctx, v3146);
                                        let v3166 = constructor_output_xmm(ctx, v3165);
                                        let v3167 = Some(v3166);
                                        // Rule at src\isa\x64\lower.isle line 4649.
                                        return v3167;
                                    }
                                    let v1978 = constructor_xmm_uninit_value(ctx);
                                    let v3141 = &constructor_sink_load_to_gpr_mem(ctx, v3140);
                                    let v3158 = constructor_x64_pinsrw(ctx, v1978, v3141, 0x0);
                                    let v3159 = &C::xmm_to_xmm_mem(ctx, v3158);
                                    let v3160 = constructor_x64_pshuflw(ctx, v3159, 0x0);
                                    let v3161 = &C::xmm_to_xmm_mem(ctx, v3160);
                                    let v3162 = constructor_x64_pshufd(ctx, v3161, 0x0);
                                    let v3163 = constructor_output_xmm(ctx, v3162);
                                    let v3164 = Some(v3163);
                                    // Rule at src\isa\x64\lower.isle line 4647.
                                    return v3164;
                                }
                                let v3134 = C::use_avx2(ctx);
                                if v3134 == true {
                                    let v496 = constructor_put_in_gpr(ctx, v495);
                                    let v3128 = constructor_bitcast_gpr_to_xmm(ctx, 0x20, v496);
                                    let v3135 = &C::xmm_to_xmm_mem(ctx, v3128);
                                    let v3155 = constructor_x64_vpbroadcastw(ctx, v3135);
                                    let v3156 = constructor_output_xmm(ctx, v3155);
                                    let v3157 = Some(v3156);
                                    // Rule at src\isa\x64\lower.isle line 4644.
                                    return v3157;
                                }
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v3128 = constructor_bitcast_gpr_to_xmm(ctx, 0x20, v496);
                                let v3135 = &C::xmm_to_xmm_mem(ctx, v3128);
                                let v3150 = constructor_x64_pshuflw(ctx, v3135, 0x0);
                                let v3151 = &C::xmm_to_xmm_mem(ctx, v3150);
                                let v3152 = constructor_x64_pshufd(ctx, v3151, 0x0);
                                let v3153 = constructor_output_xmm(ctx, v3152);
                                let v3154 = Some(v3153);
                                // Rule at src\isa\x64\lower.isle line 4642.
                                return v3154;
                            }
                            I32X4 => {
                                let v3134 = C::use_avx2(ctx);
                                if v3134 == true {
                                    let v496 = constructor_put_in_gpr(ctx, v495);
                                    let v3128 = constructor_bitcast_gpr_to_xmm(ctx, 0x20, v496);
                                    let v3135 = &C::xmm_to_xmm_mem(ctx, v3128);
                                    let v3171 = constructor_x64_vpbroadcastd(ctx, v3135);
                                    let v3172 = constructor_output_xmm(ctx, v3171);
                                    let v3173 = Some(v3172);
                                    // Rule at src\isa\x64\lower.isle line 4659.
                                    return v3173;
                                }
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v3128 = constructor_bitcast_gpr_to_xmm(ctx, 0x20, v496);
                                let v3135 = &C::xmm_to_xmm_mem(ctx, v3128);
                                let v3168 = constructor_x64_pshufd(ctx, v3135, 0x0);
                                let v3169 = constructor_output_xmm(ctx, v3168);
                                let v3170 = Some(v3169);
                                // Rule at src\isa\x64\lower.isle line 4657.
                                return v3170;
                            }
                            I64X2 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v3190 = constructor_bitcast_gpr_to_xmm(ctx, 0x40, v496);
                                let v3191 = &C::xmm_to_xmm_mem(ctx, v3190);
                                let v3193 = constructor_x64_pshufd(ctx, v3191, 0x44);
                                let v3194 = constructor_output_xmm(ctx, v3193);
                                let v3195 = Some(v3194);
                                // Rule at src\isa\x64\lower.isle line 4692.
                                return v3195;
                            }
                            F32X4 => {
                                let v3134 = C::use_avx2(ctx);
                                if v3134 == true {
                                    let v681 = &C::put_in_xmm_mem(ctx, v495);
                                    let v3178 = constructor_x64_vbroadcastss(ctx, v681);
                                    let v3179 = constructor_output_xmm(ctx, v3178);
                                    let v3180 = Some(v3179);
                                    // Rule at src\isa\x64\lower.isle line 4669.
                                    return v3180;
                                }
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v3174 = constructor_put_in_xmm(ctx, v495);
                                let v513 = &C::put_in_xmm_mem(ctx, v495);
                                let v3175 = constructor_x64_shufps(ctx, v3174, v513, 0x0);
                                let v3176 = constructor_output_xmm(ctx, v3175);
                                let v3177 = Some(v3176);
                                // Rule at src\isa\x64\lower.isle line 4666.
                                return v3177;
                            }
                            F64X2 => {
                                let v681 = &C::put_in_xmm_mem(ctx, v495);
                                let v3196 = constructor_x64_pshufd(ctx, v681, 0x44);
                                let v3197 = constructor_output_xmm(ctx, v3196);
                                let v3198 = Some(v3197);
                                // Rule at src\isa\x64\lower.isle line 4694.
                                return v3198;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v496 = constructor_put_in_gpr(ctx, v495);
                    let v2897 = &constructor_write_pinned_gpr(ctx, v496);
                    let v2898 = constructor_side_effect(ctx, v2897);
                    let v2899 = Some(v2898);
                    // Rule at src\isa\x64\lower.isle line 4337.
                    return v2899;
                }
                &Opcode::VanyTrue => {
                    let v584 = C::use_sse41(ctx);
                    if v584 == true {
                        let v685 = constructor_put_in_xmm(ctx, v495);
                        let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                        let v3202 = &constructor_x64_ptest(ctx, v685, v1767);
                        let v3203 = &constructor_x64_setcc(ctx, &CC::NZ);
                        let v3204 = constructor_with_flags(ctx, v3202, v3203);
                        let v3205 = C::output(ctx, v3204);
                        let v3206 = Some(v3205);
                        // Rule at src\isa\x64\lower.isle line 4702.
                        return v3206;
                    }
                    let v3207 = &constructor_emit_vany_true(ctx, v495);
                    let v3208 = constructor_lower_icmp_bool(ctx, v3207);
                    let v3209 = C::output(ctx, v3208);
                    let v3210 = Some(v3209);
                    // Rule at src\isa\x64\lower.isle line 4711.
                    return v3210;
                }
                &Opcode::VallTrue => {
                    let v3211 = &constructor_emit_vall_true(ctx, v495);
                    let v3212 = constructor_lower_icmp_bool(ctx, v3211);
                    let v3213 = C::output(ctx, v3212);
                    let v3214 = Some(v3213);
                    // Rule at src\isa\x64\lower.isle line 4725.
                    return v3214;
                }
                &Opcode::VhighBits => {
                    let v814 = C::value_type(ctx, v495);
                    let v3215 = C::multi_lane(ctx, v814);
                    if let Some(v3216) = v3215 {
                        match v3216.0 {
                            0x8 => {
                                if v3216.1 == 0x10 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v3220 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v685);
                                    let v3221 = constructor_output_gpr(ctx, v3220);
                                    let v3222 = Some(v3221);
                                    // Rule at src\isa\x64\lower.isle line 4756.
                                    return v3222;
                                }
                            }
                            0x10 => {
                                if v3216.1 == 0x8 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                                    let v3229 = constructor_x64_packsswb(ctx, v685, v1767);
                                    let v3230 =
                                        constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v3229);
                                    let v1611 = Imm8Reg::Imm8 { imm: 0x8 };
                                    let v2842 = &C::imm8_reg_to_imm8_gpr(ctx, &v1611);
                                    let v3231 = constructor_x64_shr(ctx, I64, v3230, v2842);
                                    let v3232 = constructor_output_gpr(ctx, v3231);
                                    let v3233 = Some(v3232);
                                    // Rule at src\isa\x64\lower.isle line 4771.
                                    return v3233;
                                }
                            }
                            0x20 => {
                                if v3216.1 == 0x4 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v3223 =
                                        constructor_x64_movmskps(ctx, &OperandSize::Size32, v685);
                                    let v3224 = constructor_output_gpr(ctx, v3223);
                                    let v3225 = Some(v3224);
                                    // Rule at src\isa\x64\lower.isle line 4759.
                                    return v3225;
                                }
                            }
                            0x40 => {
                                if v3216.1 == 0x2 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v3226 =
                                        constructor_x64_movmskpd(ctx, &OperandSize::Size32, v685);
                                    let v3227 = constructor_output_gpr(ctx, v3226);
                                    let v3228 = Some(v3227);
                                    // Rule at src\isa\x64\lower.isle line 4762.
                                    return v3228;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v511 = constructor_imm(ctx, I8X16, 0x0);
                                let v512 = C::xmm_new(ctx, v511);
                                let v513 = &C::put_in_xmm_mem(ctx, v495);
                                let v514 = constructor_x64_psubb(ctx, v512, v513);
                                let v515 = constructor_output_xmm(ctx, v514);
                                let v516 = Some(v515);
                                // Rule at src\isa\x64\lower.isle line 957.
                                return v516;
                            }
                            I16X8 => {
                                let v518 = constructor_imm(ctx, I16X8, 0x0);
                                let v519 = C::xmm_new(ctx, v518);
                                let v513 = &C::put_in_xmm_mem(ctx, v495);
                                let v520 = constructor_x64_psubw(ctx, v519, v513);
                                let v521 = constructor_output_xmm(ctx, v520);
                                let v522 = Some(v521);
                                // Rule at src\isa\x64\lower.isle line 960.
                                return v522;
                            }
                            I32X4 => {
                                let v524 = constructor_imm(ctx, I32X4, 0x0);
                                let v525 = C::xmm_new(ctx, v524);
                                let v513 = &C::put_in_xmm_mem(ctx, v495);
                                let v526 = constructor_x64_psubd(ctx, v525, v513);
                                let v527 = constructor_output_xmm(ctx, v526);
                                let v528 = Some(v527);
                                // Rule at src\isa\x64\lower.isle line 963.
                                return v528;
                            }
                            I64X2 => {
                                let v530 = constructor_imm(ctx, I64X2, 0x0);
                                let v531 = C::xmm_new(ctx, v530);
                                let v513 = &C::put_in_xmm_mem(ctx, v495);
                                let v532 = constructor_x64_psubq(ctx, v531, v513);
                                let v533 = constructor_output_xmm(ctx, v532);
                                let v534 = Some(v533);
                                // Rule at src\isa\x64\lower.isle line 966.
                                return v534;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v496 = constructor_put_in_gpr(ctx, v495);
                            let v497 = constructor_x64_neg(ctx, v5, v496);
                            let v498 = constructor_output_gpr(ctx, v497);
                            let v499 = Some(v498);
                            // Rule at src\isa\x64\lower.isle line 943.
                            return v499;
                        }
                        if v3 == I128 {
                            let v500 = C::put_in_regs(ctx, v495);
                            let v501 = constructor_value_regs_get_gpr(ctx, v500, 0x0);
                            let v502 = constructor_value_regs_get_gpr(ctx, v500, 0x1);
                            let v503 = &constructor_x64_neg_paired(ctx, I64, v501);
                            let v504 = constructor_imm(ctx, I64, 0x0);
                            let v505 = C::gpr_new(ctx, v504);
                            let v506 = &C::gpr_to_gpr_mem_imm(ctx, v502);
                            let v507 = &constructor_x64_sbb_paired(ctx, I64, v505, v506);
                            let v508 = constructor_with_flags(ctx, v503, v507);
                            let v509 = C::output(ctx, v508);
                            let v510 = Some(v509);
                            // Rule at src\isa\x64\lower.isle line 946.
                            return v510;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v500 = C::put_in_regs(ctx, v495);
                                let v501 = constructor_value_regs_get_gpr(ctx, v500, 0x0);
                                let v502 = constructor_value_regs_get_gpr(ctx, v500, 0x1);
                                let v503 = &constructor_x64_neg_paired(ctx, I64, v501);
                                let v504 = constructor_imm(ctx, I64, 0x0);
                                let v747 = &constructor_reg_to_gpr_mem_imm(ctx, v504);
                                let v748 = &constructor_x64_adc_paired(ctx, I64, v502, v747);
                                let v749 = constructor_with_flags(ctx, v503, v748);
                                let v750 = C::value_regs_get(ctx, v749, 0x1);
                                let v751 = C::gpr_new(ctx, v750);
                                let v752 = &constructor_x64_neg_paired(ctx, I64, v751);
                                let v753 = &constructor_produces_flags_ignore(ctx, v752);
                                let v754 = &C::gpr_to_gpr_mem(ctx, v501);
                                let v755 = C::value_regs_get(ctx, v749, 0x0);
                                let v756 = C::gpr_new(ctx, v755);
                                let v757 = &constructor_cmove(ctx, I64, &CC::S, v754, v756);
                                let v758 = &C::gpr_to_gpr_mem(ctx, v502);
                                let v759 = constructor_produces_flags_get_reg(ctx, v752);
                                let v760 = C::gpr_new(ctx, v759);
                                let v761 = &constructor_cmove(ctx, I64, &CC::S, v758, v760);
                                let v762 = &constructor_consumes_flags_concat(ctx, v757, v761);
                                let v763 = constructor_with_flags(ctx, v753, v762);
                                let v764 = C::output(ctx, v763);
                                let v765 = Some(v764);
                                // Rule at src\isa\x64\lower.isle line 1287.
                                return v765;
                            }
                            I8X16 => {
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v681 = &C::put_in_xmm_mem(ctx, v495);
                                    let v682 = constructor_x64_pabsb(ctx, v681);
                                    let v683 = constructor_output_xmm(ctx, v682);
                                    let v684 = Some(v683);
                                    // Rule at src\isa\x64\lower.isle line 1203.
                                    return v684;
                                }
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v686 = constructor_xmm_zero(ctx, I8X16);
                                let v687 = &C::xmm_to_xmm_mem(ctx, v685);
                                let v688 = constructor_x64_psubb(ctx, v686, v687);
                                let v689 = &C::xmm_to_xmm_mem(ctx, v688);
                                let v690 = constructor_x64_pminub(ctx, v685, v689);
                                let v691 = constructor_output_xmm(ctx, v690);
                                let v692 = Some(v691);
                                // Rule at src\isa\x64\lower.isle line 1210.
                                return v692;
                            }
                            I16X8 => {
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v681 = &C::put_in_xmm_mem(ctx, v495);
                                    let v693 = constructor_x64_pabsw(ctx, v681);
                                    let v694 = constructor_output_xmm(ctx, v693);
                                    let v695 = Some(v694);
                                    // Rule at src\isa\x64\lower.isle line 1217.
                                    return v695;
                                }
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v696 = constructor_xmm_zero(ctx, I16X8);
                                let v687 = &C::xmm_to_xmm_mem(ctx, v685);
                                let v697 = constructor_x64_psubw(ctx, v696, v687);
                                let v698 = &C::xmm_to_xmm_mem(ctx, v697);
                                let v699 = constructor_x64_pmaxsw(ctx, v685, v698);
                                let v700 = constructor_output_xmm(ctx, v699);
                                let v701 = Some(v700);
                                // Rule at src\isa\x64\lower.isle line 1221.
                                return v701;
                            }
                            I32X4 => {
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v681 = &C::put_in_xmm_mem(ctx, v495);
                                    let v702 = constructor_x64_pabsd(ctx, v681);
                                    let v703 = constructor_output_xmm(ctx, v702);
                                    let v704 = Some(v703);
                                    // Rule at src\isa\x64\lower.isle line 1228.
                                    return v704;
                                }
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v706 = &C::xmi_imm(ctx, 0x1F);
                                let v707 = constructor_x64_psrad(ctx, v685, v706);
                                let v708 = &C::xmm_to_xmm_mem(ctx, v707);
                                let v709 = constructor_x64_pxor(ctx, v685, v708);
                                let v710 = &C::xmm_to_xmm_mem(ctx, v707);
                                let v711 = constructor_x64_psubd(ctx, v709, v710);
                                let v712 = constructor_output_xmm(ctx, v711);
                                let v713 = Some(v712);
                                // Rule at src\isa\x64\lower.isle line 1238.
                                return v713;
                            }
                            I64X2 => {
                                let v438 = C::use_avx512vl(ctx);
                                if v438 == true {
                                    let v439 = C::use_avx512f(ctx);
                                    if v439 == true {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v714 = constructor_x64_vpabsq(ctx, v681);
                                        let v715 = constructor_output_xmm(ctx, v714);
                                        let v716 = Some(v715);
                                        // Rule at src\isa\x64\lower.isle line 1247.
                                        return v716;
                                    }
                                }
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v717 = constructor_imm(ctx, I64X2, 0x0);
                                    let v718 = C::xmm_new(ctx, v717);
                                    let v719 = &C::xmm_to_xmm_mem(ctx, v685);
                                    let v720 = constructor_x64_psubq(ctx, v718, v719);
                                    let v721 = &C::xmm_to_xmm_mem(ctx, v685);
                                    let v722 = constructor_x64_blendvpd(ctx, v720, v721, v720);
                                    let v723 = constructor_output_xmm(ctx, v722);
                                    let v724 = Some(v723);
                                    // Rule at src\isa\x64\lower.isle line 1256.
                                    return v724;
                                }
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v725 = RegMemImm::Imm { simm32: 0x1F };
                                let v726 = &C::xmm_mem_imm_new(ctx, &v725);
                                let v727 = constructor_x64_psrad(ctx, v685, v726);
                                let v728 = &C::xmm_to_xmm_mem(ctx, v727);
                                let v730 = constructor_x64_pshufd(ctx, v728, 0xF5);
                                let v731 = &C::xmm_to_xmm_mem(ctx, v730);
                                let v732 = constructor_x64_pxor(ctx, v685, v731);
                                let v733 = &C::xmm_to_xmm_mem(ctx, v730);
                                let v734 = constructor_x64_psubq(ctx, v732, v733);
                                let v735 = constructor_output_xmm(ctx, v734);
                                let v736 = Some(v735);
                                // Rule at src\isa\x64\lower.isle line 1265.
                                return v736;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v496 = constructor_put_in_gpr(ctx, v495);
                            let v737 = &constructor_x64_neg_paired(ctx, v5, v496);
                            let v738 = constructor_produces_flags_get_reg(ctx, v737);
                            let v739 = C::gpr_new(ctx, v738);
                            let v741 = &C::gpr_to_gpr_mem(ctx, v496);
                            let v742 = &constructor_cmove(ctx, v5, &CC::S, v741, v739);
                            let v743 = &constructor_produces_flags_ignore(ctx, v737);
                            let v744 = constructor_with_flags_reg(ctx, v743, v742);
                            let v745 = constructor_output_reg(ctx, v744);
                            let v746 = Some(v745);
                            // Rule at src\isa\x64\lower.isle line 1274.
                            return v746;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v821 = constructor_i128_not(ctx, v495);
                            let v822 = C::output(ctx, v821);
                            let v823 = Some(v822);
                            // Rule at src\isa\x64\lower.isle line 1404.
                            return v823;
                        }
                        let v93 = C::multi_lane(ctx, v3);
                        if let Some(v94) = v93 {
                            let v685 = constructor_put_in_xmm(ctx, v495);
                            let v778 = constructor_vector_all_ones(ctx);
                            let v824 = &C::xmm_to_xmm_mem(ctx, v778);
                            let v828 = constructor_x64_xor_vector(ctx, v3, v685, v824);
                            let v829 = constructor_output_xmm(ctx, v828);
                            let v830 = Some(v829);
                            // Rule at src\isa\x64\lower.isle line 1414.
                            return v830;
                        }
                        let v212 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v213) = v212 {
                            let v496 = constructor_put_in_gpr(ctx, v495);
                            let v818 = constructor_x64_not(ctx, v3, v496);
                            let v819 = constructor_output_gpr(ctx, v818);
                            let v820 = Some(v819);
                            // Rule at src\isa\x64\lower.isle line 1389.
                            return v820;
                        }
                        let v225 = C::ty_scalar_float(ctx, v3);
                        if let Some(v226) = v225 {
                            let v685 = constructor_put_in_xmm(ctx, v495);
                            let v778 = constructor_vector_all_ones(ctx);
                            let v824 = &C::xmm_to_xmm_mem(ctx, v778);
                            let v825 = constructor_x64_xor_vector(ctx, v226, v685, v824);
                            let v826 = constructor_output_xmm(ctx, v825);
                            let v827 = Some(v826);
                            // Rule at src\isa\x64\lower.isle line 1409.
                            return v827;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1589 = constructor_do_bitrev8(ctx, I32, v496);
                                let v1590 = constructor_output_gpr(ctx, v1589);
                                let v1591 = Some(v1590);
                                // Rule at src\isa\x64\lower.isle line 2367.
                                return v1591;
                            }
                            I16 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1592 = constructor_do_bitrev16(ctx, I32, v496);
                                let v1593 = constructor_output_gpr(ctx, v1592);
                                let v1594 = Some(v1593);
                                // Rule at src\isa\x64\lower.isle line 2370.
                                return v1594;
                            }
                            I32 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1595 = constructor_do_bitrev32(ctx, I32, v496);
                                let v1596 = constructor_output_gpr(ctx, v1595);
                                let v1597 = Some(v1596);
                                // Rule at src\isa\x64\lower.isle line 2373.
                                return v1597;
                            }
                            I64 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1598 = constructor_do_bitrev64(ctx, I64, v496);
                                let v1599 = constructor_output_gpr(ctx, v1598);
                                let v1600 = Some(v1599);
                                // Rule at src\isa\x64\lower.isle line 2376.
                                return v1600;
                            }
                            I128 => {
                                let v500 = C::put_in_regs(ctx, v495);
                                let v1464 = constructor_value_regs_get_gpr(ctx, v500, 0x1);
                                let v1601 = constructor_do_bitrev64(ctx, I64, v1464);
                                let v1602 = C::gpr_to_reg(ctx, v1601);
                                let v1603 = C::put_in_regs(ctx, v495);
                                let v1604 = constructor_value_regs_get_gpr(ctx, v1603, 0x0);
                                let v1605 = constructor_do_bitrev64(ctx, I64, v1604);
                                let v1606 = C::gpr_to_reg(ctx, v1605);
                                let v1607 = C::value_regs(ctx, v1602, v1606);
                                let v1608 = C::output(ctx, v1607);
                                let v1609 = Some(v1608);
                                // Rule at src\isa\x64\lower.isle line 2379.
                                return v1609;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v71 = C::ty_32_or_64(ctx, v3);
                        if let Some(v72) = v71 {
                            let v496 = constructor_put_in_gpr(ctx, v495);
                            let v1448 = constructor_do_clz(ctx, v72, v72, v496);
                            let v1449 = constructor_output_gpr(ctx, v1448);
                            let v1450 = Some(v1449);
                            // Rule at src\isa\x64\lower.isle line 2140.
                            return v1450;
                        }
                        let v1451 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1452) = v1451 {
                            let v1453 =
                                constructor_extend_to_gpr(ctx, v495, I64, &ExtendKind::Zero);
                            let v1454 = constructor_do_clz(ctx, I64, I64, v1453);
                            let v1456 = C::ty_bits(ctx, v1452);
                            let v1457 = C::u8_as_u32(ctx, v1456);
                            let v1458 = C::u32_sub(ctx, 0x40, v1457);
                            let v1459 = RegMemImm::Imm { simm32: v1458 };
                            let v1460 = &C::gpr_mem_imm_new(ctx, &v1459);
                            let v1461 = constructor_x64_sub(ctx, I64, v1454, v1460);
                            let v1462 = constructor_output_gpr(ctx, v1461);
                            let v1463 = Some(v1462);
                            // Rule at src\isa\x64\lower.isle line 2143.
                            return v1463;
                        }
                        if v3 == I128 {
                            let v500 = C::put_in_regs(ctx, v495);
                            let v1464 = constructor_value_regs_get_gpr(ctx, v500, 0x1);
                            let v1465 = constructor_do_clz(ctx, I64, I64, v1464);
                            let v1466 = C::put_in_regs(ctx, v495);
                            let v1467 = constructor_value_regs_get_gpr(ctx, v1466, 0x0);
                            let v1468 = constructor_do_clz(ctx, I64, I64, v1467);
                            let v1469 = RegMemImm::Imm { simm32: 0x40 };
                            let v1470 = &C::gpr_mem_imm_new(ctx, &v1469);
                            let v1471 = constructor_x64_add(ctx, I64, v1468, v1470);
                            let v1473 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1465, 0x40);
                            let v1474 = &C::gpr_to_gpr_mem(ctx, v1465);
                            let v1475 = &constructor_cmove(ctx, I64, &CC::NZ, v1474, v1471);
                            let v1476 = constructor_with_flags_reg(ctx, v1473, v1475);
                            let v1477 = C::gpr_new(ctx, v1476);
                            let v1478 = C::gpr_to_reg(ctx, v1477);
                            let v1479 = constructor_imm(ctx, I64, 0x0);
                            let v1480 = C::value_regs(ctx, v1478, v1479);
                            let v1481 = C::output(ctx, v1480);
                            let v1482 = Some(v1481);
                            // Rule at src\isa\x64\lower.isle line 2149.
                            return v1482;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v71 = C::ty_32_or_64(ctx, v3);
                        if let Some(v72) = v71 {
                            let v496 = constructor_put_in_gpr(ctx, v495);
                            let v1483 = constructor_do_ctz(ctx, v72, v72, v496);
                            let v1484 = constructor_output_gpr(ctx, v1483);
                            let v1485 = Some(v1484);
                            // Rule at src\isa\x64\lower.isle line 2180.
                            return v1485;
                        }
                        let v1451 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1452) = v1451 {
                            let v1486 =
                                constructor_extend_to_gpr(ctx, v495, I32, &ExtendKind::Zero);
                            let v1456 = C::ty_bits(ctx, v1452);
                            let v1457 = C::u8_as_u32(ctx, v1456);
                            let v1487 = C::u32_shl(ctx, 0x1, v1457);
                            let v1488 = RegMemImm::Imm { simm32: v1487 };
                            let v1489 = &C::gpr_mem_imm_new(ctx, &v1488);
                            let v1490 = constructor_x64_or(ctx, I32, v1486, v1489);
                            let v1491 = constructor_do_ctz(ctx, I32, v1452, v1490);
                            let v1492 = constructor_output_gpr(ctx, v1491);
                            let v1493 = Some(v1492);
                            // Rule at src\isa\x64\lower.isle line 2183.
                            return v1493;
                        }
                        if v3 == I128 {
                            let v500 = C::put_in_regs(ctx, v495);
                            let v501 = constructor_value_regs_get_gpr(ctx, v500, 0x0);
                            let v1494 = constructor_do_ctz(ctx, I64, I64, v501);
                            let v1466 = C::put_in_regs(ctx, v495);
                            let v1495 = constructor_value_regs_get_gpr(ctx, v1466, 0x1);
                            let v1496 = constructor_do_ctz(ctx, I64, I64, v1495);
                            let v1469 = RegMemImm::Imm { simm32: 0x40 };
                            let v1470 = &C::gpr_mem_imm_new(ctx, &v1469);
                            let v1497 = constructor_x64_add(ctx, I64, v1496, v1470);
                            let v1498 =
                                &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1494, 0x40);
                            let v1499 = &C::gpr_to_gpr_mem(ctx, v1497);
                            let v1500 = &constructor_cmove(ctx, I64, &CC::Z, v1499, v1494);
                            let v1501 = constructor_with_flags_reg(ctx, v1498, v1500);
                            let v1502 = C::gpr_new(ctx, v1501);
                            let v1503 = C::gpr_to_reg(ctx, v1502);
                            let v1479 = constructor_imm(ctx, I64, 0x0);
                            let v1504 = C::value_regs(ctx, v1503, v1479);
                            let v1505 = C::output(ctx, v1504);
                            let v1506 = Some(v1505);
                            // Rule at src\isa\x64\lower.isle line 2188.
                            return v1506;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1611 = Imm8Reg::Imm8 { imm: 0x8 };
                                let v1612 = &C::imm8_reg_to_imm8_gpr(ctx, &v1611);
                                let v1613 = constructor_x64_rotl(ctx, I16, v496, v1612);
                                let v1614 = constructor_output_gpr(ctx, v1613);
                                let v1615 = Some(v1614);
                                // Rule at src\isa\x64\lower.isle line 2446.
                                return v1615;
                            }
                            I32 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1616 = constructor_x64_bswap(ctx, I32, v496);
                                let v1617 = constructor_output_gpr(ctx, v1616);
                                let v1618 = Some(v1617);
                                // Rule at src\isa\x64\lower.isle line 2449.
                                return v1618;
                            }
                            I64 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1619 = constructor_x64_bswap(ctx, I64, v496);
                                let v1620 = constructor_output_gpr(ctx, v1619);
                                let v1621 = Some(v1620);
                                // Rule at src\isa\x64\lower.isle line 2452.
                                return v1621;
                            }
                            I128 => {
                                let v500 = C::put_in_regs(ctx, v495);
                                let v1464 = constructor_value_regs_get_gpr(ctx, v500, 0x1);
                                let v1622 = constructor_x64_bswap(ctx, I64, v1464);
                                let v1623 = C::gpr_to_reg(ctx, v1622);
                                let v1603 = C::put_in_regs(ctx, v495);
                                let v1604 = constructor_value_regs_get_gpr(ctx, v1603, 0x0);
                                let v1624 = constructor_x64_bswap(ctx, I64, v1604);
                                let v1625 = C::gpr_to_reg(ctx, v1624);
                                let v1626 = C::value_regs(ctx, v1623, v1625);
                                let v1627 = C::output(ctx, v1626);
                                let v1628 = Some(v1627);
                                // Rule at src\isa\x64\lower.isle line 2455.
                                return v1628;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1507 = C::use_popcnt(ctx);
                        if v1507 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v71 = C::ty_32_or_64(ctx, v3);
                            if let Some(v72) = v71 {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v1508 = constructor_x64_popcnt(ctx, v72, v496);
                                let v1509 = constructor_output_gpr(ctx, v1508);
                                let v1510 = Some(v1509);
                                // Rule at src\isa\x64\lower.isle line 2214.
                                return v1510;
                            }
                            let v1451 = C::ty_8_or_16(ctx, v3);
                            if let Some(v1452) = v1451 {
                                let v1486 =
                                    constructor_extend_to_gpr(ctx, v495, I32, &ExtendKind::Zero);
                                let v1511 = constructor_x64_popcnt(ctx, I32, v1486);
                                let v1512 = constructor_output_gpr(ctx, v1511);
                                let v1513 = Some(v1512);
                                // Rule at src\isa\x64\lower.isle line 2218.
                                return v1513;
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                if v1507 == true {
                                    let v500 = C::put_in_regs(ctx, v495);
                                    let v501 = constructor_value_regs_get_gpr(ctx, v500, 0x0);
                                    let v1514 = constructor_x64_popcnt(ctx, I64, v501);
                                    let v1466 = C::put_in_regs(ctx, v495);
                                    let v1495 = constructor_value_regs_get_gpr(ctx, v1466, 0x1);
                                    let v1515 = constructor_x64_popcnt(ctx, I64, v1495);
                                    let v1516 = &C::gpr_to_gpr_mem_imm(ctx, v1515);
                                    let v1517 = constructor_x64_add(ctx, I64, v1514, v1516);
                                    let v1518 = C::gpr_to_reg(ctx, v1517);
                                    let v1519 = constructor_imm(ctx, I64, 0x0);
                                    let v1520 = C::value_regs(ctx, v1518, v1519);
                                    let v1521 = C::output(ctx, v1520);
                                    let v1522 = Some(v1521);
                                    // Rule at src\isa\x64\lower.isle line 2222.
                                    return v1522;
                                }
                                let v500 = C::put_in_regs(ctx, v495);
                                let v501 = constructor_value_regs_get_gpr(ctx, v500, 0x0);
                                let v1529 = constructor_do_popcnt(ctx, I64, v501);
                                let v1466 = C::put_in_regs(ctx, v495);
                                let v1495 = constructor_value_regs_get_gpr(ctx, v1466, 0x1);
                                let v1530 = constructor_do_popcnt(ctx, I64, v1495);
                                let v1531 = &C::gpr_to_gpr_mem_imm(ctx, v1530);
                                let v1532 = constructor_x64_add(ctx, I64, v1529, v1531);
                                let v1533 = C::gpr_to_reg(ctx, v1532);
                                let v1519 = constructor_imm(ctx, I64, 0x0);
                                let v1534 = C::value_regs(ctx, v1533, v1519);
                                let v1535 = C::output(ctx, v1534);
                                let v1536 = Some(v1535);
                                // Rule at src\isa\x64\lower.isle line 2238.
                                return v1536;
                            }
                            I8X16 => {
                                let v438 = C::use_avx512vl(ctx);
                                if v438 == true {
                                    let v1537 = C::use_avx512bitalg(ctx);
                                    if v1537 == true {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v1538 = constructor_x64_vpopcntb(ctx, v681);
                                        let v1539 = constructor_output_xmm(ctx, v1538);
                                        let v1540 = Some(v1539);
                                        // Rule at src\isa\x64\lower.isle line 2311.
                                        return v1540;
                                    }
                                }
                                let v680 = C::use_ssse3(ctx);
                                if v680 == true {
                                    let v1542 = C::emit_u128_le_const(
                                        ctx,
                                        0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F,
                                    );
                                    let v1543 = &constructor_const_to_xmm_mem(ctx, v1542);
                                    let v1544 = constructor_put_in_xmm(ctx, v495);
                                    let v1545 = constructor_sse_and(ctx, I8X16, v1544, v1543);
                                    let v1546 = constructor_put_in_xmm(ctx, v495);
                                    let v1548 = &C::xmi_imm(ctx, 0x4);
                                    let v1549 = constructor_x64_psrlw(ctx, v1546, v1548);
                                    let v1550 = constructor_sse_and(ctx, I8X16, v1549, v1543);
                                    let v1552 = C::emit_u128_le_const(
                                        ctx,
                                        0x4030302030202010302020102010100,
                                    );
                                    let v1553 = constructor_x64_xmm_load_const(ctx, I8X16, v1552);
                                    let v1554 = &C::xmm_to_xmm_mem(ctx, v1545);
                                    let v1555 = constructor_x64_pshufb(ctx, v1553, v1554);
                                    let v1556 = &C::xmm_to_xmm_mem(ctx, v1550);
                                    let v1557 = constructor_x64_pshufb(ctx, v1553, v1556);
                                    let v1558 = &C::xmm_to_xmm_mem(ctx, v1557);
                                    let v1559 = constructor_x64_paddb(ctx, v1555, v1558);
                                    let v1560 = constructor_output_xmm(ctx, v1559);
                                    let v1561 = Some(v1560);
                                    // Rule at src\isa\x64\lower.isle line 2337.
                                    return v1561;
                                }
                                let v1563 =
                                    C::emit_u128_le_const(ctx, 0x77777777777777777777777777777777);
                                let v1564 = &constructor_const_to_xmm_mem(ctx, v1563);
                                let v1544 = constructor_put_in_xmm(ctx, v495);
                                let v1565 = &C::xmi_imm(ctx, 0x1);
                                let v1566 = constructor_x64_psrlq(ctx, v1544, v1565);
                                let v1567 = constructor_x64_pand(ctx, v1566, v1564);
                                let v1568 = &C::xmm_to_xmm_mem(ctx, v1567);
                                let v1569 = constructor_x64_psubb(ctx, v1544, v1568);
                                let v1570 = &C::xmi_imm(ctx, 0x1);
                                let v1571 = constructor_x64_psrlq(ctx, v1567, v1570);
                                let v1572 = constructor_x64_pand(ctx, v1571, v1564);
                                let v1573 = &C::xmm_to_xmm_mem(ctx, v1572);
                                let v1574 = constructor_x64_psubb(ctx, v1569, v1573);
                                let v1575 = &C::xmi_imm(ctx, 0x1);
                                let v1576 = constructor_x64_psrlq(ctx, v1572, v1575);
                                let v1577 = constructor_x64_pand(ctx, v1576, v1564);
                                let v1578 = &C::xmm_to_xmm_mem(ctx, v1577);
                                let v1579 = constructor_x64_psubb(ctx, v1574, v1578);
                                let v1580 = &C::xmi_imm(ctx, 0x4);
                                let v1581 = constructor_x64_psrlw(ctx, v1579, v1580);
                                let v1582 = &C::xmm_to_xmm_mem(ctx, v1581);
                                let v1583 = constructor_x64_paddb(ctx, v1579, v1582);
                                let v1584 =
                                    C::emit_u128_le_const(ctx, 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F);
                                let v1585 = &constructor_const_to_xmm_mem(ctx, v1584);
                                let v1586 = constructor_x64_pand(ctx, v1583, v1585);
                                let v1587 = constructor_output_xmm(ctx, v1586);
                                let v1588 = Some(v1587);
                                // Rule at src\isa\x64\lower.isle line 2353.
                                return v1588;
                            }
                            _ => {}
                        }
                        let v71 = C::ty_32_or_64(ctx, v3);
                        if let Some(v72) = v71 {
                            let v496 = constructor_put_in_gpr(ctx, v495);
                            let v1523 = constructor_do_popcnt(ctx, v72, v496);
                            let v1524 = constructor_output_gpr(ctx, v1523);
                            let v1525 = Some(v1524);
                            // Rule at src\isa\x64\lower.isle line 2228.
                            return v1525;
                        }
                        let v1451 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1452) = v1451 {
                            let v1486 =
                                constructor_extend_to_gpr(ctx, v495, I32, &ExtendKind::Zero);
                            let v1526 = constructor_do_popcnt(ctx, I32, v1486);
                            let v1527 = constructor_output_gpr(ctx, v1526);
                            let v1528 = Some(v1527);
                            // Rule at src\isa\x64\lower.isle line 2233.
                            return v1528;
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1748 = constructor_xmm_zero(ctx, F32X4);
                                let v1749 = &C::put_in_xmm_mem(ctx, v495);
                                let v1750 = constructor_x64_sqrtss(ctx, v1748, v1749);
                                let v1751 = constructor_output_xmm(ctx, v1750);
                                let v1752 = Some(v1751);
                                // Rule at src\isa\x64\lower.isle line 2602.
                                return v1752;
                            }
                            F64 => {
                                let v1754 = constructor_xmm_zero(ctx, F64X2);
                                let v1749 = &C::put_in_xmm_mem(ctx, v495);
                                let v1755 = constructor_x64_sqrtsd(ctx, v1754, v1749);
                                let v1756 = constructor_output_xmm(ctx, v1755);
                                let v1757 = Some(v1756);
                                // Rule at src\isa\x64\lower.isle line 2604.
                                return v1757;
                            }
                            F32X4 => {
                                let v681 = &C::put_in_xmm_mem(ctx, v495);
                                let v1758 = constructor_x64_sqrtps(ctx, v681);
                                let v1759 = constructor_output_xmm(ctx, v1758);
                                let v1760 = Some(v1759);
                                // Rule at src\isa\x64\lower.isle line 2606.
                                return v1760;
                            }
                            F64X2 => {
                                let v681 = &C::put_in_xmm_mem(ctx, v495);
                                let v1761 = constructor_x64_sqrtpd(ctx, v681);
                                let v1762 = constructor_output_xmm(ctx, v1761);
                                let v1763 = Some(v1762);
                                // Rule at src\isa\x64\lower.isle line 2608.
                                return v1763;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v791 = constructor_imm(ctx, F32, 0x80000000);
                                let v792 = &constructor_reg_to_xmm_mem(ctx, v791);
                                let v793 = constructor_x64_xorps(ctx, v685, v792);
                                let v794 = constructor_output_xmm(ctx, v793);
                                let v795 = Some(v794);
                                // Rule at src\isa\x64\lower.isle line 1327.
                                return v795;
                            }
                            F64 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v797 = constructor_imm(ctx, F64, 0x8000000000000000);
                                let v798 = &constructor_reg_to_xmm_mem(ctx, v797);
                                let v799 = constructor_x64_xorpd(ctx, v685, v798);
                                let v800 = constructor_output_xmm(ctx, v799);
                                let v801 = Some(v800);
                                // Rule at src\isa\x64\lower.isle line 1330.
                                return v801;
                            }
                            F32X4 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v778 = constructor_vector_all_ones(ctx);
                                let v802 = &C::xmi_imm(ctx, 0x1F);
                                let v803 = constructor_x64_pslld(ctx, v778, v802);
                                let v804 = &C::xmm_to_xmm_mem(ctx, v803);
                                let v805 = constructor_x64_xorps(ctx, v685, v804);
                                let v806 = constructor_output_xmm(ctx, v805);
                                let v807 = Some(v806);
                                // Rule at src\isa\x64\lower.isle line 1333.
                                return v807;
                            }
                            F64X2 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v778 = constructor_vector_all_ones(ctx);
                                let v808 = &C::xmi_imm(ctx, 0x3F);
                                let v809 = constructor_x64_psllq(ctx, v778, v808);
                                let v810 = &C::xmm_to_xmm_mem(ctx, v809);
                                let v811 = constructor_x64_xorpd(ctx, v685, v810);
                                let v812 = constructor_output_xmm(ctx, v811);
                                let v813 = Some(v812);
                                // Rule at src\isa\x64\lower.isle line 1337.
                                return v813;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v767 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v768 = &constructor_reg_to_xmm_mem(ctx, v767);
                                let v769 = constructor_x64_andps(ctx, v685, v768);
                                let v770 = constructor_output_xmm(ctx, v769);
                                let v771 = Some(v770);
                                // Rule at src\isa\x64\lower.isle line 1309.
                                return v771;
                            }
                            F64 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v773 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v774 = &constructor_reg_to_xmm_mem(ctx, v773);
                                let v775 = constructor_x64_andpd(ctx, v685, v774);
                                let v776 = constructor_output_xmm(ctx, v775);
                                let v777 = Some(v776);
                                // Rule at src\isa\x64\lower.isle line 1312.
                                return v777;
                            }
                            F32X4 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v778 = constructor_vector_all_ones(ctx);
                                let v779 = &C::xmi_imm(ctx, 0x1);
                                let v780 = constructor_x64_psrld(ctx, v778, v779);
                                let v781 = &C::xmm_to_xmm_mem(ctx, v780);
                                let v782 = constructor_x64_andps(ctx, v685, v781);
                                let v783 = constructor_output_xmm(ctx, v782);
                                let v784 = Some(v783);
                                // Rule at src\isa\x64\lower.isle line 1316.
                                return v784;
                            }
                            F64X2 => {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v778 = constructor_vector_all_ones(ctx);
                                let v779 = &C::xmi_imm(ctx, 0x1);
                                let v785 = constructor_x64_psrlq(ctx, v778, v779);
                                let v786 = &C::xmm_to_xmm_mem(ctx, v785);
                                let v787 = constructor_x64_andpd(ctx, v685, v786);
                                let v788 = constructor_output_xmm(ctx, v787);
                                let v789 = Some(v788);
                                // Rule at src\isa\x64\lower.isle line 1321.
                                return v789;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v2787 = &C::put_in_reg_mem(ctx, v495);
                    let v814 = C::value_type(ctx, v495);
                    let v2789 = constructor_x64_round(ctx, v814, v2787, &RoundImm::RoundUp);
                    let v2790 = constructor_output_xmm(ctx, v2789);
                    let v2791 = Some(v2790);
                    // Rule at src\isa\x64\lower.isle line 4161.
                    return v2791;
                }
                &Opcode::Floor => {
                    let v2787 = &C::put_in_reg_mem(ctx, v495);
                    let v814 = C::value_type(ctx, v495);
                    let v2793 = constructor_x64_round(ctx, v814, v2787, &RoundImm::RoundDown);
                    let v2794 = constructor_output_xmm(ctx, v2793);
                    let v2795 = Some(v2794);
                    // Rule at src\isa\x64\lower.isle line 4166.
                    return v2795;
                }
                &Opcode::Trunc => {
                    let v2787 = &C::put_in_reg_mem(ctx, v495);
                    let v814 = C::value_type(ctx, v495);
                    let v2801 = constructor_x64_round(ctx, v814, v2787, &RoundImm::RoundZero);
                    let v2802 = constructor_output_xmm(ctx, v2801);
                    let v2803 = Some(v2802);
                    // Rule at src\isa\x64\lower.isle line 4176.
                    return v2803;
                }
                &Opcode::Nearest => {
                    let v2787 = &C::put_in_reg_mem(ctx, v495);
                    let v814 = C::value_type(ctx, v495);
                    let v2797 = constructor_x64_round(ctx, v814, v2787, &RoundImm::RoundNearest);
                    let v2798 = constructor_output_xmm(ctx, v2797);
                    let v2799 = Some(v2798);
                    // Rule at src\isa\x64\lower.isle line 4171.
                    return v2799;
                }
                &Opcode::IsNull => {
                    let v814 = C::value_type(ctx, v495);
                    if v814 == R64 {
                        let v496 = constructor_put_in_gpr(ctx, v495);
                        let v1630 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v496, 0x0);
                        let v1631 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1632 = constructor_with_flags(ctx, v1630, v1631);
                        let v1633 = C::output(ctx, v1632);
                        let v1634 = Some(v1633);
                        // Rule at src\isa\x64\lower.isle line 2463.
                        return v1634;
                    }
                }
                &Opcode::IsInvalid => {
                    let v814 = C::value_type(ctx, v495);
                    if v814 == R64 {
                        let v496 = constructor_put_in_gpr(ctx, v495);
                        let v1636 =
                            &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v496, 0xFFFFFFFF);
                        let v1631 = &constructor_x64_setcc(ctx, &CC::Z);
                        let v1637 = constructor_with_flags(ctx, v1636, v1631);
                        let v1638 = C::output(ctx, v1637);
                        let v1639 = Some(v1638);
                        // Rule at src\isa\x64\lower.isle line 2471.
                        return v1639;
                    }
                }
                &Opcode::ScalarToVector => {
                    let v3104 = &C::sinkable_load(ctx, v495);
                    if let Some(v3105) = v3104 {
                        let v814 = C::value_type(ctx, v495);
                        let v3112 = C::ty_64(ctx, v814);
                        if let Some(v3113) = v3112 {
                            let v3108 = &C::sink_load(ctx, v3105);
                            let v3114 = constructor_x64_movsd_load(ctx, v3108);
                            let v3115 = constructor_output_xmm(ctx, v3114);
                            let v3116 = Some(v3115);
                            // Rule at src\isa\x64\lower.isle line 4604.
                            return v3116;
                        }
                        let v3106 = C::ty_32(ctx, v814);
                        if let Some(v3107) = v3106 {
                            let v3108 = &C::sink_load(ctx, v3105);
                            let v3109 = constructor_x64_movss_load(ctx, v3108);
                            let v3110 = constructor_output_xmm(ctx, v3109);
                            let v3111 = Some(v3110);
                            // Rule at src\isa\x64\lower.isle line 4602.
                            return v3111;
                        }
                    }
                    let v814 = C::value_type(ctx, v495);
                    let v2448 = C::ty_scalar_float(ctx, v814);
                    if let Some(v2449) = v2448 {
                        let v1663 = constructor_output_value(ctx, v495);
                        let v1664 = Some(v1663);
                        // Rule at src\isa\x64\lower.isle line 4592.
                        return v1664;
                    }
                    let v496 = constructor_put_in_gpr(ctx, v495);
                    let v3100 = C::ty_bits(ctx, v814);
                    let v3101 = constructor_bitcast_gpr_to_xmm(ctx, v3100, v496);
                    let v3102 = constructor_output_xmm(ctx, v3101);
                    let v3103 = Some(v3102);
                    // Rule at src\isa\x64\lower.isle line 4597.
                    return v3103;
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v500 = C::put_in_regs(ctx, v495);
                        let v3 = C::value_type(ctx, v2);
                        let v814 = C::value_type(ctx, v495);
                        let v815 = constructor_lower_bmask(ctx, v3, v814, v500);
                        let v816 = C::output(ctx, v815);
                        let v817 = Some(v816);
                        // Rule at src\isa\x64\lower.isle line 1382.
                        return v817;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v500 = C::put_in_regs(ctx, v495);
                            let v501 = constructor_value_regs_get_gpr(ctx, v500, 0x0);
                            let v1665 = constructor_output_gpr(ctx, v501);
                            let v1666 = Some(v1665);
                            // Rule at src\isa\x64\lower.isle line 2521.
                            return v1666;
                        }
                        let v814 = C::value_type(ctx, v495);
                        if v3 == v814 {
                            let v1663 = constructor_output_value(ctx, v495);
                            let v1664 = Some(v1663);
                            // Rule at src\isa\x64\lower.isle line 2515.
                            return v1664;
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v814 = C::value_type(ctx, v495);
                                    if v814 == I8X16 {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2635 = constructor_x64_pmovsxbw(ctx, v681);
                                        let v2636 = constructor_output_xmm(ctx, v2635);
                                        let v2637 = Some(v2636);
                                        // Rule at src\isa\x64\lower.isle line 3866.
                                        return v2637;
                                    }
                                }
                            }
                            I32X4 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v814 = C::value_type(ctx, v495);
                                    if v814 == I16X8 {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2638 = constructor_x64_pmovsxwd(ctx, v681);
                                        let v2639 = constructor_output_xmm(ctx, v2638);
                                        let v2640 = Some(v2639);
                                        // Rule at src\isa\x64\lower.isle line 3869.
                                        return v2640;
                                    }
                                }
                            }
                            I64X2 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v814 = C::value_type(ctx, v495);
                                    if v814 == I32X4 {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2641 = constructor_x64_pmovsxdq(ctx, v681);
                                        let v2642 = constructor_output_xmm(ctx, v2641);
                                        let v2643 = Some(v2642);
                                        // Rule at src\isa\x64\lower.isle line 3872.
                                        return v2643;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v685 = constructor_put_in_xmm(ctx, v495);
                        let v2644 = constructor_lower_swiden_low(ctx, v3, v685);
                        let v2645 = constructor_output_xmm(ctx, v2644);
                        let v2646 = Some(v2645);
                        // Rule at src\isa\x64\lower.isle line 3876.
                        return v2646;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v814 = C::value_type(ctx, v495);
                                if v814 == I8X16 {
                                    let v584 = C::use_sse41(ctx);
                                    if v584 == true {
                                        let v680 = C::use_ssse3(ctx);
                                        if v680 == true {
                                            let v685 = constructor_put_in_xmm(ctx, v495);
                                            let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                                            let v2647 =
                                                constructor_x64_palignr(ctx, v685, v1767, 0x8);
                                            let v2648 = &C::xmm_to_xmm_mem(ctx, v2647);
                                            let v2649 = constructor_x64_pmovsxbw(ctx, v2648);
                                            let v2650 = constructor_output_xmm(ctx, v2649);
                                            let v2651 = Some(v2650);
                                            // Rule at src\isa\x64\lower.isle line 3899.
                                            return v2651;
                                        }
                                    }
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                                    let v2660 = constructor_x64_punpckhbw(ctx, v685, v1767);
                                    let v2661 = &C::xmi_imm(ctx, 0x8);
                                    let v2662 = constructor_x64_psraw(ctx, v2660, v2661);
                                    let v2663 = constructor_output_xmm(ctx, v2662);
                                    let v2664 = Some(v2663);
                                    // Rule at src\isa\x64\lower.isle line 3915.
                                    return v2664;
                                }
                            }
                            I32X4 => {
                                let v814 = C::value_type(ctx, v495);
                                if v814 == I16X8 {
                                    let v584 = C::use_sse41(ctx);
                                    if v584 == true {
                                        let v680 = C::use_ssse3(ctx);
                                        if v680 == true {
                                            let v685 = constructor_put_in_xmm(ctx, v495);
                                            let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                                            let v2647 =
                                                constructor_x64_palignr(ctx, v685, v1767, 0x8);
                                            let v2648 = &C::xmm_to_xmm_mem(ctx, v2647);
                                            let v2652 = constructor_x64_pmovsxwd(ctx, v2648);
                                            let v2653 = constructor_output_xmm(ctx, v2652);
                                            let v2654 = Some(v2653);
                                            // Rule at src\isa\x64\lower.isle line 3904.
                                            return v2654;
                                        }
                                    }
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                                    let v2665 = constructor_x64_punpckhwd(ctx, v685, v1767);
                                    let v2432 = &C::xmi_imm(ctx, 0x10);
                                    let v2666 = constructor_x64_psrad(ctx, v2665, v2432);
                                    let v2667 = constructor_output_xmm(ctx, v2666);
                                    let v2668 = Some(v2667);
                                    // Rule at src\isa\x64\lower.isle line 3918.
                                    return v2668;
                                }
                            }
                            I64X2 => {
                                let v814 = C::value_type(ctx, v495);
                                if v814 == I32X4 {
                                    let v584 = C::use_sse41(ctx);
                                    if v584 == true {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2655 = constructor_x64_pshufd(ctx, v681, 0xEE);
                                        let v2656 = &C::xmm_to_xmm_mem(ctx, v2655);
                                        let v2657 = constructor_x64_pmovsxdq(ctx, v2656);
                                        let v2658 = constructor_output_xmm(ctx, v2657);
                                        let v2659 = Some(v2658);
                                        // Rule at src\isa\x64\lower.isle line 3909.
                                        return v2659;
                                    }
                                    let v681 = &C::put_in_xmm_mem(ctx, v495);
                                    let v2670 = constructor_x64_pshufd(ctx, v681, 0xE);
                                    let v2671 = constructor_xmm_zero(ctx, I32X4);
                                    let v2672 = &C::xmm_to_xmm_mem(ctx, v2670);
                                    let v2673 = constructor_x64_pcmpgtd(ctx, v2671, v2672);
                                    let v2674 = &C::xmm_to_xmm_mem(ctx, v2673);
                                    let v2675 = constructor_x64_punpckldq(ctx, v2670, v2674);
                                    let v2676 = constructor_output_xmm(ctx, v2675);
                                    let v2677 = Some(v2676);
                                    // Rule at src\isa\x64\lower.isle line 3923.
                                    return v2677;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v814 = C::value_type(ctx, v495);
                                    if v814 == I8X16 {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2678 = constructor_x64_pmovzxbw(ctx, v681);
                                        let v2679 = constructor_output_xmm(ctx, v2678);
                                        let v2680 = Some(v2679);
                                        // Rule at src\isa\x64\lower.isle line 3931.
                                        return v2680;
                                    }
                                }
                            }
                            I32X4 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v814 = C::value_type(ctx, v495);
                                    if v814 == I16X8 {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2681 = constructor_x64_pmovzxwd(ctx, v681);
                                        let v2682 = constructor_output_xmm(ctx, v2681);
                                        let v2683 = Some(v2682);
                                        // Rule at src\isa\x64\lower.isle line 3934.
                                        return v2683;
                                    }
                                }
                            }
                            I64X2 => {
                                let v584 = C::use_sse41(ctx);
                                if v584 == true {
                                    let v814 = C::value_type(ctx, v495);
                                    if v814 == I32X4 {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2684 = constructor_x64_pmovzxdq(ctx, v681);
                                        let v2685 = constructor_output_xmm(ctx, v2684);
                                        let v2686 = Some(v2685);
                                        // Rule at src\isa\x64\lower.isle line 3937.
                                        return v2686;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v685 = constructor_put_in_xmm(ctx, v495);
                        let v2687 = constructor_lower_uwiden_low(ctx, v3, v685);
                        let v2688 = constructor_output_xmm(ctx, v2687);
                        let v2689 = Some(v2688);
                        // Rule at src\isa\x64\lower.isle line 3941.
                        return v2689;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v814 = C::value_type(ctx, v495);
                                if v814 == I8X16 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v686 = constructor_xmm_zero(ctx, I8X16);
                                    let v2690 = &C::xmm_to_xmm_mem(ctx, v686);
                                    let v2691 = constructor_x64_punpckhbw(ctx, v685, v2690);
                                    let v2692 = constructor_output_xmm(ctx, v2691);
                                    let v2693 = Some(v2692);
                                    // Rule at src\isa\x64\lower.isle line 3956.
                                    return v2693;
                                }
                            }
                            I32X4 => {
                                let v814 = C::value_type(ctx, v495);
                                if v814 == I16X8 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v686 = constructor_xmm_zero(ctx, I8X16);
                                    let v2690 = &C::xmm_to_xmm_mem(ctx, v686);
                                    let v2694 = constructor_x64_punpckhwd(ctx, v685, v2690);
                                    let v2695 = constructor_output_xmm(ctx, v2694);
                                    let v2696 = Some(v2695);
                                    // Rule at src\isa\x64\lower.isle line 3958.
                                    return v2696;
                                }
                            }
                            I64X2 => {
                                let v814 = C::value_type(ctx, v495);
                                if v814 == I32X4 {
                                    let v685 = constructor_put_in_xmm(ctx, v495);
                                    let v2477 = constructor_xmm_zero(ctx, F32X4);
                                    let v2478 = &C::xmm_to_xmm_mem(ctx, v2477);
                                    let v2697 = constructor_x64_unpckhps(ctx, v685, v2478);
                                    let v2698 = constructor_output_xmm(ctx, v2697);
                                    let v2699 = Some(v2698);
                                    // Rule at src\isa\x64\lower.isle line 3960.
                                    return v2699;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1453 =
                                    constructor_extend_to_gpr(ctx, v495, I64, &ExtendKind::Zero);
                                let v1645 = constructor_output_gpr(ctx, v1453);
                                let v1646 = Some(v1645);
                                // Rule at src\isa\x64\lower.isle line 2484.
                                return v1646;
                            }
                            I128 => {
                                let v1453 =
                                    constructor_extend_to_gpr(ctx, v495, I64, &ExtendKind::Zero);
                                let v1640 = C::gpr_to_reg(ctx, v1453);
                                let v1641 = constructor_imm(ctx, I64, 0x0);
                                let v1642 = C::value_regs(ctx, v1640, v1641);
                                let v1643 = C::output(ctx, v1642);
                                let v1644 = Some(v1643);
                                // Rule at src\isa\x64\lower.isle line 2480.
                                return v1644;
                            }
                            _ => {}
                        }
                        let v1647 = C::fits_in_32(ctx, v3);
                        if let Some(v1648) = v1647 {
                            let v1486 =
                                constructor_extend_to_gpr(ctx, v495, I32, &ExtendKind::Zero);
                            let v1649 = constructor_output_gpr(ctx, v1486);
                            let v1650 = Some(v1649);
                            // Rule at src\isa\x64\lower.isle line 2489.
                            return v1650;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1651 =
                                    constructor_extend_to_gpr(ctx, v495, I64, &ExtendKind::Sign);
                                let v1658 = constructor_output_gpr(ctx, v1651);
                                let v1659 = Some(v1658);
                                // Rule at src\isa\x64\lower.isle line 2504.
                                return v1659;
                            }
                            I128 => {
                                let v1651 =
                                    constructor_extend_to_gpr(ctx, v495, I64, &ExtendKind::Sign);
                                let v1180 = Imm8Reg::Imm8 { imm: 0x3F };
                                let v1181 = &C::imm8_reg_to_imm8_gpr(ctx, &v1180);
                                let v1652 = constructor_x64_sar(ctx, I64, v1651, v1181);
                                let v1653 = C::gpr_to_reg(ctx, v1651);
                                let v1654 = C::gpr_to_reg(ctx, v1652);
                                let v1655 = C::value_regs(ctx, v1653, v1654);
                                let v1656 = C::output(ctx, v1655);
                                let v1657 = Some(v1656);
                                // Rule at src\isa\x64\lower.isle line 2498.
                                return v1657;
                            }
                            _ => {}
                        }
                        let v1647 = C::fits_in_32(ctx, v3);
                        if let Some(v1648) = v1647 {
                            let v1660 =
                                constructor_extend_to_gpr(ctx, v495, I32, &ExtendKind::Sign);
                            let v1661 = constructor_output_gpr(ctx, v1660);
                            let v1662 = Some(v1661);
                            // Rule at src\isa\x64\lower.isle line 2509.
                            return v1662;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v1754 = constructor_xmm_zero(ctx, F64X2);
                            let v1749 = &C::put_in_xmm_mem(ctx, v495);
                            let v1764 = constructor_x64_cvtss2sd(ctx, v1754, v1749);
                            let v1765 = constructor_output_xmm(ctx, v1764);
                            let v1766 = Some(v1765);
                            // Rule at src\isa\x64\lower.isle line 2612.
                            return v1766;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v1748 = constructor_xmm_zero(ctx, F32X4);
                            let v1749 = &C::put_in_xmm_mem(ctx, v495);
                            let v1771 = constructor_x64_cvtsd2ss(ctx, v1748, v1749);
                            let v1772 = constructor_output_xmm(ctx, v1771);
                            let v1773 = Some(v1772);
                            // Rule at src\isa\x64\lower.isle line 2620.
                            return v1773;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v681 = &C::put_in_xmm_mem(ctx, v495);
                            let v1774 = constructor_x64_cvtpd2ps(ctx, v681);
                            let v1775 = constructor_output_xmm(ctx, v1774);
                            let v1776 = Some(v1775);
                            // Rule at src\isa\x64\lower.isle line 2624.
                            return v1776;
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v685 = constructor_put_in_xmm(ctx, v495);
                            let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                            let v1768 = constructor_x64_cvtps2pd(ctx, v1767);
                            let v1769 = constructor_output_xmm(ctx, v1768);
                            let v1770 = Some(v1769);
                            // Rule at src\isa\x64\lower.isle line 2616.
                            return v1770;
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v814 = C::value_type(ctx, v495);
                        let v2448 = C::ty_scalar_float(ctx, v814);
                        if let Some(v2449) = v2448 {
                            let v3 = C::value_type(ctx, v2);
                            let v2450 = constructor_cvt_float_to_uint_seq(ctx, v3, v495, false);
                            let v2451 = constructor_output_gpr(ctx, v2450);
                            let v2452 = Some(v2451);
                            // Rule at src\isa\x64\lower.isle line 3618.
                            return v2452;
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v814 = C::value_type(ctx, v495);
                        let v2448 = C::ty_scalar_float(ctx, v814);
                        if let Some(v2449) = v2448 {
                            let v3 = C::value_type(ctx, v2);
                            let v2456 = constructor_cvt_float_to_sint_seq(ctx, v3, v495, false);
                            let v2457 = constructor_output_gpr(ctx, v2456);
                            let v2458 = Some(v2457);
                            // Rule at src\isa\x64\lower.isle line 3624.
                            return v2458;
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v814 = C::value_type(ctx, v495);
                            if v814 == F32X4 {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v2477 = constructor_xmm_zero(ctx, F32X4);
                                let v2478 = &C::xmm_to_xmm_mem(ctx, v2477);
                                let v2479 = constructor_x64_maxps(ctx, v685, v2478);
                                let v2480 = &C::xmm_to_xmm_mem(ctx, v2477);
                                let v2481 = constructor_x64_pcmpeqd(ctx, v2477, v2480);
                                let v2482 = &C::xmi_imm(ctx, 0x1);
                                let v2483 = constructor_x64_psrld(ctx, v2481, v2482);
                                let v2484 = &C::xmm_to_xmm_mem(ctx, v2483);
                                let v2485 = constructor_x64_cvtdq2ps(ctx, v2484);
                                let v2486 = &C::xmm_to_xmm_mem(ctx, v2479);
                                let v2487 = constructor_x64_cvttps2dq(ctx, v2486);
                                let v2488 = &C::xmm_to_xmm_mem(ctx, v2485);
                                let v2489 = constructor_x64_subps(ctx, v2479, v2488);
                                let v2490 = &C::xmm_to_xmm_mem(ctx, v2489);
                                let v2491 = constructor_x64_cmpps(
                                    ctx,
                                    v2485,
                                    v2490,
                                    &FcmpImm::LessThanOrEqual,
                                );
                                let v2492 = &C::xmm_to_xmm_mem(ctx, v2489);
                                let v2493 = constructor_x64_cvttps2dq(ctx, v2492);
                                let v2494 = &C::xmm_to_xmm_mem(ctx, v2491);
                                let v2495 = constructor_x64_pxor(ctx, v2493, v2494);
                                let v2496 = constructor_xmm_zero(ctx, I32X4);
                                let v2497 = constructor_lower_vec_smax(ctx, I32X4, v2495, v2496);
                                let v2498 = &C::xmm_to_xmm_mem(ctx, v2487);
                                let v2499 = constructor_x64_paddd(ctx, v2497, v2498);
                                let v2500 = constructor_output_xmm(ctx, v2499);
                                let v2501 = Some(v2500);
                                // Rule at src\isa\x64\lower.isle line 3702.
                                return v2501;
                            }
                        }
                        let v814 = C::value_type(ctx, v495);
                        let v2448 = C::ty_scalar_float(ctx, v814);
                        if let Some(v2449) = v2448 {
                            let v2453 = constructor_cvt_float_to_uint_seq(ctx, v3, v495, true);
                            let v2454 = constructor_output_gpr(ctx, v2453);
                            let v2455 = Some(v2454);
                            // Rule at src\isa\x64\lower.isle line 3621.
                            return v2455;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v814 = C::value_type(ctx, v495);
                            if v814 == F32X4 {
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v1767 = &C::xmm_to_xmm_mem(ctx, v685);
                                let v2462 =
                                    constructor_x64_cmpps(ctx, v685, v1767, &FcmpImm::Equal);
                                let v2463 = &C::xmm_to_xmm_mem(ctx, v2462);
                                let v2464 = constructor_x64_andps(ctx, v685, v2463);
                                let v2465 = &C::xmm_to_xmm_mem(ctx, v2464);
                                let v2466 = constructor_x64_pxor(ctx, v2462, v2465);
                                let v2467 = &C::xmm_to_xmm_mem(ctx, v2464);
                                let v2468 = constructor_x64_cvttps2dq(ctx, v2467);
                                let v2469 = &C::xmm_to_xmm_mem(ctx, v2466);
                                let v2470 = constructor_x64_pand(ctx, v2468, v2469);
                                let v2471 = &C::xmi_imm(ctx, 0x1F);
                                let v2472 = constructor_x64_psrad(ctx, v2470, v2471);
                                let v2473 = &C::xmm_to_xmm_mem(ctx, v2468);
                                let v2474 = constructor_x64_pxor(ctx, v2472, v2473);
                                let v2475 = constructor_output_xmm(ctx, v2474);
                                let v2476 = Some(v2475);
                                // Rule at src\isa\x64\lower.isle line 3631.
                                return v2476;
                            }
                        }
                        let v814 = C::value_type(ctx, v495);
                        let v2448 = C::ty_scalar_float(ctx, v814);
                        if let Some(v2449) = v2448 {
                            let v2459 = constructor_cvt_float_to_sint_seq(ctx, v3, v495, true);
                            let v2460 = constructor_output_gpr(ctx, v2459);
                            let v2461 = Some(v2460);
                            // Rule at src\isa\x64\lower.isle line 3627.
                            return v2461;
                        }
                    }
                }
                &Opcode::X86Cvtt2dq => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v814 = C::value_type(ctx, v495);
                            if v814 == F32X4 {
                                let v681 = &C::put_in_xmm_mem(ctx, v495);
                                let v2502 = constructor_x64_cvttps2dq(ctx, v681);
                                let v2503 = constructor_output_xmm(ctx, v2502);
                                let v2504 = Some(v2503);
                                // Rule at src\isa\x64\lower.isle line 3749.
                                return v2504;
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v814 = C::value_type(ctx, v495);
                                let v2378 = C::fits_in_32(ctx, v814);
                                if let Some(v2379) = v2378 {
                                    let v2380 = C::ty_int(ctx, v2379);
                                    if let Some(v2381) = v2380 {
                                        let v1748 = constructor_xmm_zero(ctx, F32X4);
                                        let v2382 = constructor_extend_to_gpr(
                                            ctx,
                                            v495,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v2383 = &C::gpr_to_gpr_mem(ctx, v2382);
                                        let v2384 =
                                            constructor_x64_cvtsi2ss(ctx, I64, v1748, v2383);
                                        let v2385 = constructor_output_xmm(ctx, v2384);
                                        let v2386 = Some(v2385);
                                        // Rule at src\isa\x64\lower.isle line 3506.
                                        return v2386;
                                    }
                                }
                            }
                            F64 => {
                                let v814 = C::value_type(ctx, v495);
                                let v2378 = C::fits_in_32(ctx, v814);
                                if let Some(v2379) = v2378 {
                                    let v2380 = C::ty_int(ctx, v2379);
                                    if let Some(v2381) = v2380 {
                                        let v1754 = constructor_xmm_zero(ctx, F64X2);
                                        let v2382 = constructor_extend_to_gpr(
                                            ctx,
                                            v495,
                                            I64,
                                            &ExtendKind::Zero,
                                        );
                                        let v2383 = &C::gpr_to_gpr_mem(ctx, v2382);
                                        let v2387 =
                                            constructor_x64_cvtsi2sd(ctx, I64, v1754, v2383);
                                        let v2388 = constructor_output_xmm(ctx, v2387);
                                        let v2389 = Some(v2388);
                                        // Rule at src\isa\x64\lower.isle line 3509.
                                        return v2389;
                                    }
                                }
                            }
                            F32X4 => {
                                let v438 = C::use_avx512vl(ctx);
                                if v438 == true {
                                    let v439 = C::use_avx512f(ctx);
                                    if v439 == true {
                                        let v681 = &C::put_in_xmm_mem(ctx, v495);
                                        let v2426 = constructor_x64_vcvtudq2ps(ctx, v681);
                                        let v2427 = constructor_output_xmm(ctx, v2426);
                                        let v2428 = Some(v2427);
                                        // Rule at src\isa\x64\lower.isle line 3566.
                                        return v2428;
                                    }
                                }
                                let v685 = constructor_put_in_xmm(ctx, v495);
                                let v2430 = &C::xmi_imm(ctx, 0x10);
                                let v2431 = constructor_x64_pslld(ctx, v685, v2430);
                                let v2432 = &C::xmi_imm(ctx, 0x10);
                                let v2433 = constructor_x64_psrld(ctx, v2431, v2432);
                                let v2434 = &C::xmm_to_xmm_mem(ctx, v2433);
                                let v2435 = constructor_x64_psubd(ctx, v685, v2434);
                                let v2436 = &C::xmm_to_xmm_mem(ctx, v2433);
                                let v2437 = constructor_x64_cvtdq2ps(ctx, v2436);
                                let v2438 = &C::xmi_imm(ctx, 0x1);
                                let v2439 = constructor_x64_psrld(ctx, v2435, v2438);
                                let v2440 = &C::xmm_to_xmm_mem(ctx, v2439);
                                let v2441 = constructor_x64_cvtdq2ps(ctx, v2440);
                                let v2442 = &C::xmm_to_xmm_mem(ctx, v2441);
                                let v2443 = constructor_x64_addps(ctx, v2441, v2442);
                                let v2444 = &C::xmm_to_xmm_mem(ctx, v2437);
                                let v2445 = constructor_x64_addps(ctx, v2443, v2444);
                                let v2446 = constructor_output_xmm(ctx, v2445);
                                let v2447 = Some(v2446);
                                // Rule at src\isa\x64\lower.isle line 3594.
                                return v2447;
                            }
                            F64X2 => {
                                let v2368 = C::def_inst(ctx, v495);
                                if let Some(v2369) = v2368 {
                                    let v2370 = &C::inst_data(ctx, v2369);
                                    if let &InstructionData::Unary {
                                        opcode: ref v2371,
                                        arg: v2372,
                                    } = v2370
                                    {
                                        if let &Opcode::UwidenLow = v2371 {
                                            let v2373 = C::value_type(ctx, v2372);
                                            if v2373 == I32X4 {
                                                let v2417 =
                                                    C::emit_u128_le_const(ctx, 0x4330000043300000);
                                                let v2418 =
                                                    &constructor_const_to_xmm_mem(ctx, v2417);
                                                let v2419 = constructor_put_in_xmm(ctx, v2372);
                                                let v2420 =
                                                    constructor_x64_unpcklps(ctx, v2419, v2418);
                                                let v2421 = C::emit_u128_le_const(
                                                    ctx,
                                                    0x43300000000000004330000000000000,
                                                );
                                                let v2422 =
                                                    &constructor_const_to_xmm_mem(ctx, v2421);
                                                let v2423 =
                                                    constructor_x64_subpd(ctx, v2420, v2422);
                                                let v2424 = constructor_output_xmm(ctx, v2423);
                                                let v2425 = Some(v2424);
                                                // Rule at src\isa\x64\lower.isle line 3558.
                                                return v2425;
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v814 = C::value_type(ctx, v495);
                        match v814 {
                            I64 => {
                                let v496 = constructor_put_in_gpr(ctx, v495);
                                let v2390 = constructor_cvt_u64_to_float_seq(ctx, v3, v496);
                                let v2391 = constructor_output_xmm(ctx, v2390);
                                let v2392 = Some(v2391);
                                // Rule at src\isa\x64\lower.isle line 3512.
                                return v2392;
                            }
                            I64X2 => {
                                if v3 == F64X2 {
                                    let v2394 =
                                        C::emit_u128_le_const(ctx, 0xFFFFFFFF00000000FFFFFFFF);
                                    let v2395 = &constructor_const_to_xmm_mem(ctx, v2394);
                                    let v2397 = C::emit_u128_le_const(
                                        ctx,
                                        0x43300000000000004330000000000000,
                                    );
                                    let v2398 = &constructor_const_to_xmm_mem(ctx, v2397);
                                    let v2400 = C::emit_u128_le_const(
                                        ctx,
                                        0x45300000000000004530000000000000,
                                    );
                                    let v2401 = &constructor_const_to_xmm_mem(ctx, v2400);
                                    let v2403 = C::emit_u128_le_const(
                                        ctx,
                                        0x45300000001000004530000000100000,
                                    );
                                    let v2404 = &constructor_const_to_xmm_mem(ctx, v2403);
                                    let v2405 = constructor_put_in_xmm(ctx, v495);
                                    let v2406 = constructor_x64_pand(ctx, v2405, v2395);
                                    let v2407 = constructor_x64_por(ctx, v2406, v2398);
                                    let v2408 = constructor_put_in_xmm(ctx, v495);
                                    let v620 = &C::xmi_imm(ctx, 0x20);
                                    let v2409 = constructor_x64_psrlq(ctx, v2408, v620);
                                    let v2410 = constructor_x64_por(ctx, v2409, v2401);
                                    let v2411 = constructor_x64_subpd(ctx, v2410, v2404);
                                    let v2412 = &C::xmm_to_xmm_mem(ctx, v2411);
                                    let v2413 = constructor_x64_addpd(ctx, v2407, v2412);
                                    let v2414 = constructor_output_xmm(ctx, v2413);
                                    let v2415 = Some(v2414);
                                    // Rule at src\isa\x64\lower.isle line 3543.
                                    return v2415;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v814 = C::value_type(ctx, v495);
                                match v814 {
                                    I8 => {
                                        let v1748 = constructor_xmm_zero(ctx, F32X4);
                                        let v2334 = constructor_extend_to_gpr(
                                            ctx,
                                            v495,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v2335 = &C::gpr_to_gpr_mem(ctx, v2334);
                                        let v2336 =
                                            constructor_x64_cvtsi2ss(ctx, I32, v1748, v2335);
                                        let v2337 = constructor_output_xmm(ctx, v2336);
                                        let v2338 = Some(v2337);
                                        // Rule at src\isa\x64\lower.isle line 3468.
                                        return v2338;
                                    }
                                    I16 => {
                                        let v1748 = constructor_xmm_zero(ctx, F32X4);
                                        let v2334 = constructor_extend_to_gpr(
                                            ctx,
                                            v495,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v2335 = &C::gpr_to_gpr_mem(ctx, v2334);
                                        let v2336 =
                                            constructor_x64_cvtsi2ss(ctx, I32, v1748, v2335);
                                        let v2337 = constructor_output_xmm(ctx, v2336);
                                        let v2338 = Some(v2337);
                                        // Rule at src\isa\x64\lower.isle line 3471.
                                        return v2338;
                                    }
                                    _ => {}
                                }
                                let v2339 = C::ty_int(ctx, v814);
                                if let Some(v2340) = v2339 {
                                    let v2341 = C::fits_in_64(ctx, v2340);
                                    if let Some(v2342) = v2341 {
                                        let v1748 = constructor_xmm_zero(ctx, F32X4);
                                        let v2343 = &constructor_put_in_gpr_mem(ctx, v495);
                                        let v2344 =
                                            constructor_x64_cvtsi2ss(ctx, v2342, v1748, v2343);
                                        let v2345 = constructor_output_xmm(ctx, v2344);
                                        let v2346 = Some(v2345);
                                        // Rule at src\isa\x64\lower.isle line 3474.
                                        return v2346;
                                    }
                                }
                            }
                            F64 => {
                                let v814 = C::value_type(ctx, v495);
                                match v814 {
                                    I8 => {
                                        let v1754 = constructor_xmm_zero(ctx, F64X2);
                                        let v2334 = constructor_extend_to_gpr(
                                            ctx,
                                            v495,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v2335 = &C::gpr_to_gpr_mem(ctx, v2334);
                                        let v2347 =
                                            constructor_x64_cvtsi2sd(ctx, I32, v1754, v2335);
                                        let v2348 = constructor_output_xmm(ctx, v2347);
                                        let v2349 = Some(v2348);
                                        // Rule at src\isa\x64\lower.isle line 3477.
                                        return v2349;
                                    }
                                    I16 => {
                                        let v1754 = constructor_xmm_zero(ctx, F64X2);
                                        let v2334 = constructor_extend_to_gpr(
                                            ctx,
                                            v495,
                                            I32,
                                            &ExtendKind::Sign,
                                        );
                                        let v2335 = &C::gpr_to_gpr_mem(ctx, v2334);
                                        let v2347 =
                                            constructor_x64_cvtsi2sd(ctx, I32, v1754, v2335);
                                        let v2348 = constructor_output_xmm(ctx, v2347);
                                        let v2349 = Some(v2348);
                                        // Rule at src\isa\x64\lower.isle line 3480.
                                        return v2349;
                                    }
                                    _ => {}
                                }
                                let v2339 = C::ty_int(ctx, v814);
                                if let Some(v2340) = v2339 {
                                    let v2341 = C::fits_in_64(ctx, v2340);
                                    if let Some(v2342) = v2341 {
                                        let v1754 = constructor_xmm_zero(ctx, F64X2);
                                        let v2343 = &constructor_put_in_gpr_mem(ctx, v495);
                                        let v2350 =
                                            constructor_x64_cvtsi2sd(ctx, v2342, v1754, v2343);
                                        let v2351 = constructor_output_xmm(ctx, v2350);
                                        let v2352 = Some(v2351);
                                        // Rule at src\isa\x64\lower.isle line 3483.
                                        return v2352;
                                    }
                                }
                            }
                            F64X2 => {
                                let v2368 = C::def_inst(ctx, v495);
                                if let Some(v2369) = v2368 {
                                    let v2370 = &C::inst_data(ctx, v2369);
                                    if let &InstructionData::Unary {
                                        opcode: ref v2371,
                                        arg: v2372,
                                    } = v2370
                                    {
                                        if let &Opcode::SwidenLow = v2371 {
                                            let v2373 = C::value_type(ctx, v2372);
                                            if v2373 == I32X4 {
                                                let v2374 = &C::put_in_xmm_mem(ctx, v2372);
                                                let v2375 = constructor_x64_cvtdq2pd(ctx, v2374);
                                                let v2376 = constructor_output_xmm(ctx, v2375);
                                                let v2377 = Some(v2376);
                                                // Rule at src\isa\x64\lower.isle line 3501.
                                                return v2377;
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v814 = C::value_type(ctx, v495);
                    match v814 {
                        I32X4 => {
                            let v681 = &C::put_in_xmm_mem(ctx, v495);
                            let v2353 = constructor_x64_cvtdq2ps(ctx, v681);
                            let v2354 = constructor_output_xmm(ctx, v2353);
                            let v2355 = Some(v2354);
                            // Rule at src\isa\x64\lower.isle line 3486.
                            return v2355;
                        }
                        I64X2 => {
                            let v685 = constructor_put_in_xmm(ctx, v495);
                            let v2356 = constructor_xmm_zero(ctx, F64X2);
                            let v2357 = constructor_x64_movq_to_gpr(ctx, v685);
                            let v2358 = &C::gpr_to_gpr_mem(ctx, v2357);
                            let v2359 = constructor_x64_cvtsi2sd(ctx, I64, v2356, v2358);
                            let v721 = &C::xmm_to_xmm_mem(ctx, v685);
                            let v2360 = constructor_x64_pshufd(ctx, v721, 0xEE);
                            let v2361 = constructor_x64_movq_to_gpr(ctx, v2360);
                            let v2362 = &C::gpr_to_gpr_mem(ctx, v2361);
                            let v2363 = constructor_x64_cvtsi2sd(ctx, I64, v2356, v2362);
                            let v2364 = &C::xmm_to_xmm_mem(ctx, v2363);
                            let v2365 = constructor_x64_unpcklpd(ctx, v2359, v2364);
                            let v2366 = constructor_output_xmm(ctx, v2365);
                            let v2367 = Some(v2366);
                            // Rule at src\isa\x64\lower.isle line 3492.
                            return v2367;
                        }
                        _ => {}
                    }
                }
                &Opcode::Isplit => {
                    let v814 = C::value_type(ctx, v495);
                    if v814 == I128 {
                        let v500 = C::put_in_regs(ctx, v495);
                        let v3239 = C::value_regs_get(ctx, v500, 0x0);
                        let v3240 = C::value_regs_get(ctx, v500, 0x1);
                        let v3241 = C::value_reg(ctx, v3239);
                        let v3242 = C::value_reg(ctx, v3240);
                        let v3243 = C::output_pair(ctx, v3241, v3242);
                        let v3244 = Some(v3243);
                        // Rule at src\isa\x64\lower.isle line 4784.
                        return v3244;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v43,
            constant_handle: v44,
        } => {
            match v43 {
                &Opcode::F128const => {
                    let v50 = C::u128_from_constant(ctx, v44);
                    if let Some(v51) = v50 {
                        if v51 == 0x0 {
                            let v52 = constructor_xmm_zero(ctx, F128);
                            let v53 = constructor_output_xmm(ctx, v52);
                            let v54 = Some(v53);
                            // Rule at src\isa\x64\lower.isle line 45.
                            return v54;
                        }
                    }
                    let v46 = C::const_to_vconst(ctx, v44);
                    let v47 = constructor_x64_xmm_load_const(ctx, F128, v46);
                    let v48 = constructor_output_xmm(ctx, v47);
                    let v49 = Some(v48);
                    // Rule at src\isa\x64\lower.isle line 41.
                    return v49;
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::u128_from_constant(ctx, v44);
                        if let Some(v51) = v50 {
                            match v51 {
                                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF => {
                                    let v2906 = constructor_vector_all_ones(ctx);
                                    let v2907 = constructor_output_xmm(ctx, v2906);
                                    let v2908 = Some(v2907);
                                    // Rule at src\isa\x64\lower.isle line 4348.
                                    return v2908;
                                }
                                0x0 => {
                                    let v3 = C::value_type(ctx, v2);
                                    let v2903 = constructor_xmm_zero(ctx, v3);
                                    let v2904 = constructor_output_xmm(ctx, v2903);
                                    let v2905 = Some(v2904);
                                    // Rule at src\isa\x64\lower.isle line 4347.
                                    return v2905;
                                }
                                _ => {}
                            }
                        }
                        let v46 = C::const_to_vconst(ctx, v44);
                        let v3 = C::value_type(ctx, v2);
                        let v2900 = constructor_x64_xmm_load_const(ctx, v3, v46);
                        let v2901 = constructor_output_xmm(ctx, v2900);
                        let v2902 = Some(v2901);
                        // Rule at src\isa\x64\lower.isle line 4342.
                        return v2902;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v2216,
            global_value: v2217,
        } => {
            match v2216 {
                &Opcode::SymbolValue => {
                    let v2218 = C::symbol_value_data(ctx, v2217);
                    if let Some(v2219) = v2218 {
                        let v2223 = constructor_load_ext_name(ctx, v2219.0, v2219.2, v2219.1);
                        let v2224 = constructor_output_reg(ctx, v2223);
                        let v2225 = Some(v2224);
                        // Rule at src\isa\x64\lower.isle line 3292.
                        return v2225;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2218 = C::symbol_value_data(ctx, v2217);
                        if let Some(v2219) = v2218 {
                            let v3 = C::value_type(ctx, v2);
                            let v3245 = &C::tls_model(ctx, v3);
                            match v3245 {
                                &TlsModel::ElfGd => {
                                    let v3246 = constructor_elf_tls_get_addr(ctx, v2219.0);
                                    let v3247 = constructor_output_gpr(ctx, v3246);
                                    let v3248 = Some(v3247);
                                    // Rule at src\isa\x64\lower.isle line 4792.
                                    return v3248;
                                }
                                &TlsModel::Macho => {
                                    let v3249 = constructor_macho_tls_get_addr(ctx, v2219.0);
                                    let v3250 = constructor_output_gpr(ctx, v3249);
                                    let v3251 = Some(v3250);
                                    // Rule at src\isa\x64\lower.isle line 4795.
                                    return v3251;
                                }
                                &TlsModel::Coff => {
                                    let v3252 = constructor_coff_tls_get_addr(ctx, v2219.0);
                                    let v3253 = constructor_output_gpr(ctx, v3252);
                                    let v3254 = Some(v3253);
                                    // Rule at src\isa\x64\lower.isle line 4798.
                                    return v3254;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F16const = v20 {
                let v22 = C::u16_from_ieee16(ctx, v21);
                let v24 = C::u16_as_u64(ctx, v22);
                let v25 = constructor_imm(ctx, F16, v24);
                let v26 = constructor_output_reg(ctx, v25);
                let v27 = Some(v26);
                // Rule at src\isa\x64\lower.isle line 27.
                return v27;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v28,
            imm: v29,
        } => {
            if let &Opcode::F32const = v28 {
                let v30 = C::u32_from_ieee32(ctx, v29);
                let v32 = C::u32_as_u64(ctx, v30);
                let v33 = constructor_imm(ctx, F32, v32);
                let v34 = constructor_output_reg(ctx, v33);
                let v35 = Some(v34);
                // Rule at src\isa\x64\lower.isle line 32.
                return v35;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v36,
            imm: v37,
        } => {
            if let &Opcode::F64const = v36 {
                let v38 = C::u64_from_ieee64(ctx, v37);
                let v40 = constructor_imm(ctx, F64, v38);
                let v41 = constructor_output_reg(ctx, v40);
                let v42 = Some(v41);
                // Rule at src\isa\x64\lower.isle line 37.
                return v42;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v14 = constructor_imm(ctx, I64, v9);
                        let v16 = constructor_imm(ctx, I64, 0x0);
                        let v17 = C::value_regs(ctx, v14, v16);
                        let v18 = C::output(ctx, v17);
                        let v19 = Some(v18);
                        // Rule at src\isa\x64\lower.isle line 20.
                        return v19;
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        let v12 = Some(v11);
                        // Rule at src\isa\x64\lower.isle line 15.
                        return v12;
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v70,
            arg: v71,
            table: v72,
        } => {
            if let &Opcode::BrTable = v70 {
                let v74 = C::jump_table_targets(ctx, arg1);
                if let Some(v75) = v74 {
                    let v73 = C::value_type(ctx, v71);
                    let v78 = &C::raw_operand_size_of_type(ctx, v73);
                    let v79 = C::jump_table_size(ctx, &v75.1);
                    let v80 = C::u32_as_u64(ctx, v79);
                    let v81 = constructor_imm(ctx, v73, v80);
                    let v84 = constructor_extend_to_gpr(ctx, v71, I64, &ExtendKind::Zero);
                    let v85 = &constructor_reg_to_gpr_mem_imm(ctx, v81);
                    let v86 = &constructor_x64_cmp(ctx, v78, v84, v85);
                    let v88 = &C::gpr_to_gpr_mem(ctx, v84);
                    let v89 = C::gpr_new(ctx, v81);
                    let v90 = &constructor_cmove(ctx, v73, &CC::B, v88, v89);
                    let v91 = constructor_with_flags_reg(ctx, v86, v90);
                    let v92 = C::gpr_new(ctx, v91);
                    let v93 = &constructor_jmp_table_seq(ctx, v73, v92, v75.0, &v75.1);
                    let v94 = constructor_emit_side_effect(ctx, v93);
                    let v95 = Some(v94);
                    // Rule at src\isa\x64\lower.isle line 3425.
                    return v95;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v27 = C::two_targets(ctx, arg1);
                if let Some(v28) = v27 {
                    let v13 = C::maybe_uextend(ctx, v11);
                    if let Some(v14) = v13 {
                        let v15 = C::def_inst(ctx, v14);
                        if let Some(v16) = v15 {
                            let v17 = &C::inst_data(ctx, v16);
                            match v17 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v35,
                                    args: ref v36,
                                    cond: ref v37,
                                } => {
                                    if let &Opcode::Fcmp = v35 {
                                        let v38 = C::unpack_value_array_2(ctx, v36);
                                        let v41 = &constructor_emit_fcmp(ctx, v37, v38.0, v38.1);
                                        let v42 =
                                            &constructor_jmp_cond_fcmp(ctx, v41, v28.0, v28.1);
                                        let v43 = constructor_emit_side_effect(ctx, v42);
                                        let v44 = Some(v43);
                                        // Rule at src\isa\x64\lower.isle line 3382.
                                        return v44;
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v18,
                                    args: ref v19,
                                    cond: ref v20,
                                } => {
                                    if let &Opcode::Icmp = v18 {
                                        let v21 = C::unpack_value_array_2(ctx, v19);
                                        let v31 = &constructor_emit_cmp(ctx, v20, v21.0, v21.1);
                                        let v32 =
                                            &constructor_jmp_cond_icmp(ctx, v31, v28.0, v28.1);
                                        let v33 = constructor_emit_side_effect(ctx, v32);
                                        let v34 = Some(v33);
                                        // Rule at src\isa\x64\lower.isle line 3379.
                                        return v34;
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::VanyTrue => {
                                            let v47 = &constructor_emit_vany_true(ctx, v46);
                                            let v48 =
                                                &constructor_jmp_cond_icmp(ctx, v47, v28.0, v28.1);
                                            let v49 = constructor_emit_side_effect(ctx, v48);
                                            let v50 = Some(v49);
                                            // Rule at src\isa\x64\lower.isle line 3385.
                                            return v50;
                                        }
                                        &Opcode::VallTrue => {
                                            let v51 = &constructor_emit_vall_true(ctx, v46);
                                            let v52 =
                                                &constructor_jmp_cond_icmp(ctx, v51, v28.0, v28.1);
                                            let v53 = constructor_emit_side_effect(ctx, v52);
                                            let v54 = Some(v53);
                                            // Rule at src\isa\x64\lower.isle line 3388.
                                            return v54;
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v55 = C::value_type(ctx, v11);
                    if v55 == I128 {
                        let v57 = C::put_in_regs(ctx, v11);
                        let v58 = &constructor_cmp_zero_i128(ctx, &CC::Z, v57);
                        let v59 = &constructor_jmp_cond_icmp(ctx, v58, v28.0, v28.1);
                        let v60 = constructor_emit_side_effect(ctx, v59);
                        let v61 = Some(v60);
                        // Rule at src\isa\x64\lower.isle line 3391.
                        return v61;
                    }
                    let v62 = C::ty_int_bool_or_ref(ctx, v55);
                    if let Some(v63) = v62 {
                        let v64 = &constructor_cmp_zero_int_bool_ref(ctx, v11);
                        let v66 = &constructor_jmp_cond(ctx, &CC::NZ, v28.0, v28.1);
                        let v67 = &constructor_with_flags_side_effect(ctx, v64, v66);
                        let v68 = constructor_emit_side_effect(ctx, v67);
                        let v69 = Some(v68);
                        // Rule at src\isa\x64\lower.isle line 3395.
                        return v69;
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jmp_known(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src\isa\x64\lower.isle line 3374.
                    return v9;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term construct_overflow_op.
pub fn constructor_construct_overflow_op<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &ProducesFlags,
) -> InstOutput {
    let v2 = &constructor_x64_setcc_paired(ctx, arg0);
    let v3 = constructor_with_flags(ctx, arg1, v2);
    let v5 = C::value_regs_get(ctx, v3, 0x0);
    let v6 = C::value_reg(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1);
    let v9 = C::value_reg(ctx, v8);
    let v10 = C::output_pair(ctx, v6, v9);
    // Rule at src\isa\x64\lower.isle line 117.
    return v10;
}

// Generated as internal constructor for term construct_overflow_op_alu.
pub fn constructor_construct_overflow_op_alu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &AluRmiROpcode,
    arg3: Gpr,
    arg4: &GprMemImm,
) -> InstOutput {
    let v5 = &constructor_x64_alurmi_with_flags_paired(ctx, arg2, arg0, arg3, arg4);
    let v6 = constructor_construct_overflow_op(ctx, arg1, v5);
    // Rule at src\isa\x64\lower.isle line 124.
    return v6;
}

// Generated as internal constructor for term construct_overflow_op_alu_128.
pub fn constructor_construct_overflow_op_alu_128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &AluRmiROpcode,
    arg2: &AluRmiROpcode,
    arg3: Value,
    arg4: Value,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg3);
    let v7 = constructor_value_regs_get_gpr(ctx, v5, 0x0);
    let v9 = constructor_value_regs_get_gpr(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg4);
    let v11 = constructor_value_regs_get_gpr(ctx, v10, 0x0);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x1);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
    let v15 = &constructor_x64_alurmi_with_flags_paired(ctx, arg1, I64, v7, v14);
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, v12);
    let v17 = &constructor_x64_alurmi_with_flags_chained(ctx, arg2, I64, v9, v16);
    let v18 = &constructor_x64_setcc_paired(ctx, arg0);
    let v19 = &constructor_with_flags_chained(ctx, v15, v17, v18);
    let v20 = constructor_multi_reg_to_pair_and_single(ctx, v19);
    // Rule at src\isa\x64\lower.isle line 132.
    return v20;
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 308.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 309.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 306.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 307.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src\isa\x64\lower.isle line 310.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and", "src\\isa\\x64\\lower.isle line 305"
    )
}

// Generated as internal constructor for term and_i128.
pub fn constructor_and_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_and(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_and(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src\isa\x64\lower.isle line 319.
    return v13;
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 337.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 338.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src\isa\x64\lower.isle line 339.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_and_not", "src\\isa\\x64\\lower.isle line 336"
    )
}

// Generated as internal constructor for term val_minus_one.
pub fn constructor_val_minus_one<C: Context>(ctx: &mut C, arg0: Value) -> Option<Value> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Binary {
            opcode: ref v4,
            args: ref v5,
        } = v3
        {
            match v4 {
                &Opcode::Iadd => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v18 = C::i64_from_iconst(ctx, v6.0);
                    if let Some(v19) = v18 {
                        if v19 == -0x1 {
                            let v20 = Some(v6.1);
                            // Rule at src\isa\x64\lower.isle line 368.
                            return v20;
                        }
                    }
                    let v16 = C::i64_from_iconst(ctx, v6.1);
                    if let Some(v17) = v16 {
                        if v17 == -0x1 {
                            let v15 = Some(v6.0);
                            // Rule at src\isa\x64\lower.isle line 367.
                            return v15;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v9 = C::def_inst(ctx, v6.1);
                    if let Some(v10) = v9 {
                        let v11 = &C::inst_data(ctx, v10);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v12,
                            imm: v13,
                        } = v11
                        {
                            if let &Opcode::Iconst = v12 {
                                let v14 = C::u64_from_imm64(ctx, v13);
                                if v14 == 0x1 {
                                    let v15 = Some(v6.0);
                                    // Rule at src\isa\x64\lower.isle line 366.
                                    return v15;
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    None
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm, arg2: &XmmMem) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 432.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 433.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 430.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src\isa\x64\lower.isle line 431.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src\isa\x64\lower.isle line 434.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sse_or", "src\\isa\\x64\\lower.isle line 429"
    )
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: ValueRegs) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src\isa\x64\lower.isle line 443.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src\isa\x64\lower.isle line 517.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0x0,
                base: v6,
                index: v10,
                shift: 0x0,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src\isa\x64\lower.isle line 591.
            return v15.clone();
        }
        &RegMemImm::Mem { addr: ref v16 } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg { reg: v18 };
            let v20 = &constructor_ishl_i8x16_mask(ctx, &v19);
            // Rule at src\isa\x64\lower.isle line 602.
            return v20.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src\isa\x64\lower.isle line 582.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ishl_i8x16_mask", "src\\isa\\x64\\lower.isle line 576"
    )
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm { simm32: 0x7F };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm { simm32: 0x40 };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src\isa\x64\lower.isle line 627.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(ctx: &mut C, arg0: &RegMemImm) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg { reg: v3 } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0x0,
                base: v6,
                index: v10,
                shift: 0x0,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src\isa\x64\lower.isle line 696.
            return v15.clone();
        }
        &RegMemImm::Mem { addr: ref v16 } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg { reg: v18 };
            let v20 = &constructor_ushr_i8x16_mask(ctx, &v19);
            // Rule at src\isa\x64\lower.isle line 708.
            return v20.clone();
        }
        &RegMemImm::Imm { simm32: v1 } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src\isa\x64\lower.isle line 687.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ushr_i8x16_mask", "src\\isa\\x64\\lower.isle line 681"
    )
}

// Generated as internal constructor for term mask_xmm_shift.
pub fn constructor_mask_xmm_shift<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> RegMemImm {
    let v11 = C::def_inst(ctx, arg1);
    if let Some(v12) = v11 {
        let v13 = &C::inst_data(ctx, v12);
        if let &InstructionData::UnaryImm {
            opcode: ref v14,
            imm: v15,
        } = v13
        {
            if let &Opcode::Iconst = v14 {
                let v16 = C::shift_amount_masked(ctx, arg0, v15);
                let v17 = C::u8_as_u32(ctx, v16);
                let v18 = RegMemImm::Imm { simm32: v17 };
                // Rule at src\isa\x64\lower.isle line 725.
                return v18;
            }
        }
    }
    let v3 = constructor_put_in_gpr(ctx, arg1);
    let v4 = C::shift_mask(ctx, arg0);
    let v5 = C::u8_as_u32(ctx, v4);
    let v6 = RegMemImm::Imm { simm32: v5 };
    let v7 = &C::gpr_mem_imm_new(ctx, &v6);
    let v8 = constructor_x64_and(ctx, I64, v3, v7);
    let v9 = C::gpr_to_reg(ctx, v8);
    let v10 = &C::reg_to_reg_mem_imm(ctx, v9);
    // Rule at src\isa\x64\lower.isle line 723.
    return v10.clone();
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Gpr) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm { simm32: 0x7F };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v21);
    let v25 = constructor_imm(ctx, I64, 0x0);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3F);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm { simm32: 0x40 };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v37);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src\isa\x64\lower.isle line 739.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg { reg: v7 } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm { simm32: 0x8 };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg { reg: v12 };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src\isa\x64\lower.isle line 807.
            return v14.clone();
        }
        &RegMemImm::Mem { addr: ref v15 } => {
            let v17 = constructor_imm(ctx, arg0, 0x8);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg { reg: v21 };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src\isa\x64\lower.isle line 811.
            return v23.clone();
        }
        &RegMemImm::Imm { simm32: v2 } => {
            let v4 = C::u32_add(ctx, v2, 0x8);
            let v5 = RegMemImm::Imm { simm32: v4 };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src\isa\x64\lower.isle line 805.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sshr_i8x16_bigger_shift", "src\\isa\\x64\\lower.isle line 804"
    )
}

// Generated as internal constructor for term lower_i64x2_sshr_imm.
pub fn constructor_lower_i64x2_sshr_imm<C: Context>(ctx: &mut C, arg0: Xmm, arg1: u32) -> Xmm {
    let v2 = C::u32_as_u64(ctx, arg1);
    let v4 = C::u64_lt(ctx, v2, 0x20);
    if v4 == true {
        let v5 = &C::xmi_imm(ctx, arg1);
        let v6 = constructor_x64_psrad(ctx, arg0, v5);
        let v7 = &C::xmm_to_xmm_mem(ctx, v6);
        let v9 = constructor_x64_pshufd(ctx, v7, 0xED);
        let v10 = &C::xmi_imm(ctx, arg1);
        let v11 = constructor_x64_psrlq(ctx, arg0, v10);
        let v12 = &C::xmm_to_xmm_mem(ctx, v11);
        let v14 = constructor_x64_pshufd(ctx, v12, 0xE8);
        let v15 = &C::xmm_to_xmm_mem(ctx, v9);
        let v16 = constructor_x64_punpckldq(ctx, v14, v15);
        // Rule at src\isa\x64\lower.isle line 850.
        return v16;
    }
    if arg1 == 0x20 {
        let v17 = &C::xmm_to_xmm_mem(ctx, arg0);
        let v18 = constructor_x64_pshufd(ctx, v17, 0xED);
        let v20 = &C::xmi_imm(ctx, 0x1F);
        let v21 = constructor_x64_psrad(ctx, arg0, v20);
        let v22 = &C::xmm_to_xmm_mem(ctx, v21);
        let v23 = constructor_x64_pshufd(ctx, v22, 0xED);
        let v24 = &C::xmm_to_xmm_mem(ctx, v23);
        let v25 = constructor_x64_punpckldq(ctx, v18, v24);
        // Rule at src\isa\x64\lower.isle line 861.
        return v25;
    }
    let v26 = C::u64_lt(ctx, 0x20, v2);
    if v26 == true {
        let v27 = &C::xmi_imm(ctx, 0x1F);
        let v28 = constructor_x64_psrad(ctx, arg0, v27);
        let v29 = &C::xmm_to_xmm_mem(ctx, v28);
        let v30 = constructor_x64_pshufd(ctx, v29, 0xED);
        let v32 = C::u32_sub(ctx, arg1, 0x20);
        let v33 = &C::xmi_imm(ctx, v32);
        let v34 = constructor_x64_psrad(ctx, arg0, v33);
        let v35 = &C::xmm_to_xmm_mem(ctx, v34);
        let v36 = constructor_x64_pshufd(ctx, v35, 0xED);
        let v37 = &C::xmm_to_xmm_mem(ctx, v30);
        let v38 = constructor_x64_punpckldq(ctx, v36, v37);
        // Rule at src\isa\x64\lower.isle line 872.
        return v38;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_i64x2_sshr_imm", "src\\isa\\x64\\lower.isle line 845"
    )
}

// Generated as internal constructor for term lower_i64x2_sshr_gpr.
pub fn constructor_lower_i64x2_sshr_gpr<C: Context>(ctx: &mut C, arg0: Xmm, arg1: Gpr) -> Xmm {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v3 = constructor_x64_movq_to_xmm(ctx, v2);
    let v5 = constructor_flip_high_bit_mask(ctx, I64X2);
    let v6 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v7 = constructor_x64_psrlq(ctx, v5, v6);
    let v8 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v9 = constructor_x64_psrlq(ctx, arg0, v8);
    let v10 = &C::xmm_to_xmm_mem(ctx, v9);
    let v11 = constructor_x64_pxor(ctx, v7, v10);
    let v12 = &C::xmm_to_xmm_mem(ctx, v7);
    let v13 = constructor_x64_psubq(ctx, v11, v12);
    // Rule at src\isa\x64\lower.isle line 887.
    return v13;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src\isa\x64\lower.isle line 1374.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src\isa\x64\lower.isle line 1366.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src\isa\x64\lower.isle line 1355.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src\\isa\\x64\\lower.isle line 1343"
    )
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(ctx: &mut C, arg0: Value) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src\isa\x64\lower.isle line 1397.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(ctx: &mut C, arg0: Value) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v17,
                args: ref v18,
                cond: ref v19,
            } => {
                if let &Opcode::Fcmp = v17 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v16 = Some(true);
                        // Rule at src\isa\x64\lower.isle line 1443.
                        return v16;
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v16 = Some(true);
                        // Rule at src\isa\x64\lower.isle line 1442.
                        return v16;
                    }
                }
            }
            &InstructionData::LoadNoOffset {
                opcode: ref v23,
                arg: v24,
                flags: v25,
            } => {
                if let &Opcode::Bitcast = v23 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v26 = C::def_inst(ctx, v24);
                        if let Some(v27) = v26 {
                            let v28 = &C::inst_data(ctx, v27);
                            if let &InstructionData::FloatCompare {
                                opcode: ref v29,
                                args: ref v30,
                                cond: ref v31,
                            } = v28
                            {
                                if let &Opcode::Fcmp = v29 {
                                    let v16 = Some(true);
                                    // Rule at src\isa\x64\lower.isle line 1444.
                                    return v16;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v35,
                constant_handle: v36,
            } => {
                if let &Opcode::Vconst = v35 {
                    let v37 = C::vconst_all_ones_or_all_zeros(ctx, v36);
                    if let Some(v38) = v37 {
                        let v16 = Some(true);
                        // Rule at src\isa\x64\lower.isle line 1445.
                        return v16;
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term insert_i8x16_lane_pshufd_imm.
pub fn constructor_insert_i8x16_lane_pshufd_imm<C: Context>(ctx: &mut C, arg0: u8) -> u8 {
    match arg0 {
        0x0 => {
            // Rule at src\isa\x64\lower.isle line 1544.
            return 0x54;
        }
        0x1 => {
            // Rule at src\isa\x64\lower.isle line 1545.
            return 0x51;
        }
        0x2 => {
            // Rule at src\isa\x64\lower.isle line 1546.
            return 0x45;
        }
        0x3 => {
            // Rule at src\isa\x64\lower.isle line 1547.
            return 0x15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_i8x16_lane_pshufd_imm", "src\\isa\\x64\\lower.isle line 1543"
    )
}

// Generated as internal constructor for term f32x4_insertlane.
pub fn constructor_f32x4_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: u8,
) -> Xmm {
    let v3 = C::use_sse41(ctx);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
        let v5 = C::sse_insertps_lane_imm(ctx, arg2);
        let v6 = constructor_x64_insertps(ctx, arg0, v4, v5);
        // Rule at src\isa\x64\lower.isle line 1613.
        return v6;
    }
    match arg2 {
        0x0 => {
            let v7 = constructor_x64_movss_regmove(ctx, arg0, arg1);
            // Rule at src\isa\x64\lower.isle line 1622.
            return v7;
        }
        0x1 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v9 = constructor_x64_movlhps(ctx, arg1, v8);
            let v10 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v12 = constructor_x64_shufps(ctx, v9, v10, 0xE2);
            // Rule at src\isa\x64\lower.isle line 1628.
            return v12;
        }
        0x2 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v14 = constructor_x64_shufps(ctx, arg1, v8, 0x30);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v17 = constructor_x64_shufps(ctx, arg0, v15, 0x84);
            // Rule at src\isa\x64\lower.isle line 1635.
            return v17;
        }
        0x3 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v19 = constructor_x64_shufps(ctx, arg1, v8, 0xE4);
            let v20 = &C::xmm_to_xmm_mem(ctx, v19);
            let v22 = constructor_x64_shufps(ctx, arg0, v20, 0x24);
            // Rule at src\isa\x64\lower.isle line 1642.
            return v22;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "f32x4_insertlane", "src\\isa\\x64\\lower.isle line 1610"
    )
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = C::gpr_new(ctx, v8);
        let v10 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src\isa\x64\lower.isle line 1667.
        return v16;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src\\isa\\x64\\lower.isle line 1666"
    )
}

// Generated as internal constructor for term has_pmins.
pub fn constructor_has_pmins<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\x64\lower.isle line 1693.
            return true;
        }
        I64X2 => {
            // Rule at src\isa\x64\lower.isle line 1694.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1695.
    return v3;
}

// Generated as internal constructor for term has_pmaxs.
pub fn constructor_has_pmaxs<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I16X8 => {
            // Rule at src\isa\x64\lower.isle line 1698.
            return true;
        }
        I64X2 => {
            // Rule at src\isa\x64\lower.isle line 1699.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1700.
    return v3;
}

// Generated as internal constructor for term has_pmaxu.
pub fn constructor_has_pmaxu<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\x64\lower.isle line 1703.
            return true;
        }
        I64X2 => {
            // Rule at src\isa\x64\lower.isle line 1704.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1705.
    return v3;
}

// Generated as internal constructor for term has_pminu.
pub fn constructor_has_pminu<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        I8X16 => {
            // Rule at src\isa\x64\lower.isle line 1708.
            return true;
        }
        I64X2 => {
            // Rule at src\isa\x64\lower.isle line 1709.
            return false;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src\isa\x64\lower.isle line 1710.
    return v3;
}

// Generated as internal constructor for term lower_vec_smax.
pub fn constructor_lower_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v3 = constructor_has_pmaxs(ctx, arg0);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
        let v5 = constructor_x64_pmaxs(ctx, arg0, arg1, v4);
        // Rule at src\isa\x64\lower.isle line 1718.
        return v5;
    }
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v6 = constructor_x64_pcmpgt(ctx, arg0, arg1, v4);
    let v7 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v8 = constructor_x64_pand(ctx, v6, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v10 = constructor_x64_pandn(ctx, v6, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v10);
    let v12 = constructor_x64_por(ctx, v8, v11);
    // Rule at src\isa\x64\lower.isle line 1722.
    return v12;
}

// Generated as internal constructor for term flip_high_bit_mask.
pub fn constructor_flip_high_bit_mask<C: Context>(ctx: &mut C, arg0: Type) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000);
            let v3 = &constructor_const_to_xmm_mem(ctx, v2);
            let v4 = constructor_x64_movdqu_load(ctx, v3);
            // Rule at src\isa\x64\lower.isle line 1777.
            return v4;
        }
        I32X4 => {
            let v6 = C::emit_u128_le_const(ctx, 0x80000000800000008000000080000000);
            let v7 = &constructor_const_to_xmm_mem(ctx, v6);
            let v8 = constructor_x64_movdqu_load(ctx, v7);
            // Rule at src\isa\x64\lower.isle line 1779.
            return v8;
        }
        I64X2 => {
            let v10 = C::emit_u128_le_const(ctx, 0x80000000000000008000000000000000);
            let v11 = &constructor_const_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            // Rule at src\isa\x64\lower.isle line 1781.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flip_high_bit_mask", "src\\isa\\x64\\lower.isle line 1776"
    )
}

// Generated as internal constructor for term lower_select_fcmp.
pub fn constructor_lower_select_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    match arg1 {
        &FcmpCondResult::Condition {
            producer: ref v2,
            cc: ref v3,
        } => {
            let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
            let v7 = constructor_with_flags(ctx, v2, v6);
            let v8 = C::output(ctx, v7);
            // Rule at src\isa\x64\lower.isle line 2095.
            return v8;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v9,
            cc1: ref v10,
            cc2: ref v11,
        } => {
            let v12 = &constructor_cmove_or_from_values(ctx, arg0, v10, v11, arg2, arg3);
            let v13 = constructor_with_flags(ctx, v9, v12);
            let v14 = C::output(ctx, v13);
            // Rule at src\isa\x64\lower.isle line 2097.
            return v14;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select_fcmp", "src\\isa\\x64\\lower.isle line 2094"
    )
}

// Generated as internal constructor for term lower_select_icmp.
pub fn constructor_lower_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    if let &IcmpCondResult::Condition {
        producer: ref v2,
        cc: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags(ctx, v2, v6);
        let v8 = C::output(ctx, v7);
        // Rule at src\isa\x64\lower.isle line 2123.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select_icmp", "src\\isa\\x64\\lower.isle line 2122"
    )
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v3 = C::use_lzcnt(ctx);
    if v3 == true {
        let v4 = constructor_x64_lzcnt(ctx, arg0, arg2);
        // Rule at src\isa\x64\lower.isle line 2169.
        return v4;
    }
    let v7 = constructor_imm_i64(ctx, I64, -0x1);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsr_or_else(ctx, arg0, arg2, v8);
    let v10 = C::gpr_to_reg(ctx, v9);
    let v11 = C::ty_bits_u64(ctx, arg1);
    let v13 = C::u64_sub(ctx, v11, 0x1);
    let v14 = constructor_imm(ctx, arg0, v13);
    let v15 = C::gpr_new(ctx, v14);
    let v16 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v17 = constructor_x64_sub(ctx, arg0, v15, v16);
    // Rule at src\isa\x64\lower.isle line 2173.
    return v17;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Gpr) -> Gpr {
    let v3 = C::use_bmi1(ctx);
    if v3 == true {
        let v4 = constructor_x64_tzcnt(ctx, arg0, arg2);
        // Rule at src\isa\x64\lower.isle line 2205.
        return v4;
    }
    let v6 = C::ty_bits_u64(ctx, arg1);
    let v7 = constructor_imm(ctx, I64, v6);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsf_or_else(ctx, arg0, arg2, v8);
    // Rule at src\isa\x64\lower.isle line 2209.
    return v9;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm { simm32: 0xF0F0F0F };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v72 = &C::gpr_to_gpr_mem(ctx, v71);
            let v74 = constructor_x64_imul_imm(ctx, I32, v72, 0x1010101);
            let v76 = Imm8Reg::Imm8 { imm: 0x18 };
            let v77 = &C::imm8_reg_to_imm8_gpr(ctx, &v76);
            let v78 = constructor_x64_shr(ctx, I32, v74, v77);
            // Rule at src\isa\x64\lower.isle line 2291.
            return v78;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 { imm: 0x1 };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 { imm: 0x4 };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xF0F0F0F0F0F0F0F);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem(ctx, v39);
            let v41 = constructor_x64_imul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 { imm: 0x38 };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src\isa\x64\lower.isle line 2248.
            return v45;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_popcnt", "src\\isa\\x64\\lower.isle line 2247"
    )
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 { imm: 0x1 };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 { imm: 0x2 };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xF0F0F0F0F0F0F0F);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 { imm: 0x4 };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src\isa\x64\lower.isle line 2385.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFF00FF00FF00FF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x8 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src\isa\x64\lower.isle line 2408.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xFFFF0000FFFF);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 { imm: 0x10 };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src\isa\x64\lower.isle line 2420.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xFFFFFFFF);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 { imm: 0x20 };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src\isa\x64\lower.isle line 2432.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_bitrev64", "src\\isa\\x64\\lower.isle line 2431"
    )
}

// Generated as internal constructor for term fmadd.
pub fn constructor_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2866.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2865.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2861.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2860.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2855.
    return v7;
}

// Generated as internal constructor for term fnmadd.
pub fn constructor_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2874.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2873.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2870.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2869.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2868.
    return v7;
}

// Generated as internal constructor for term fmsub.
pub fn constructor_fmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmsub(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2897.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmsub(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2896.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmsub132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2892.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmsub132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2891.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmsub213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2886.
    return v7;
}

// Generated as internal constructor for term fnmsub.
pub fn constructor_fnmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26
        {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmsub(ctx, arg0, arg1, v28, arg3);
                // Rule at src\isa\x64\lower.isle line 2905.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmsub(ctx, arg0, v22, arg2, arg3);
                // Rule at src\isa\x64\lower.isle line 2904.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmsub132(ctx, arg0, v4, v11, v16);
        // Rule at src\isa\x64\lower.isle line 2901.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmsub132(ctx, arg0, v10, v11, v12);
        // Rule at src\isa\x64\lower.isle line 2900.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmsub213(ctx, arg0, v4, v5, v6);
    // Rule at src\isa\x64\lower.isle line 2899.
    return v7;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1);
        let v10 = &C::gpr_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Or, I64, v5, v10);
        let v12 = &C::cc_invert(ctx, v2);
        let v13 = &constructor_icmp_cond_result(ctx, v11, v12);
        // Rule at src\isa\x64\lower.isle line 3409.
        return v13.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_zero_i128", "src\\isa\\x64\\lower.isle line 3408"
    )
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v3, v4);
    // Rule at src\isa\x64\lower.isle line 3418.
    return v5.clone();
}

// Generated as internal constructor for term lower_swiden_low.
pub fn constructor_lower_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v3 = constructor_x64_punpcklbw(ctx, arg1, v2);
            let v5 = &C::xmi_imm(ctx, 0x8);
            let v6 = constructor_x64_psraw(ctx, v3, v5);
            // Rule at src\isa\x64\lower.isle line 3883.
            return v6;
        }
        I32X4 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v7 = constructor_x64_punpcklwd(ctx, arg1, v2);
            let v9 = &C::xmi_imm(ctx, 0x10);
            let v10 = constructor_x64_psrad(ctx, v7, v9);
            // Rule at src\isa\x64\lower.isle line 3885.
            return v10;
        }
        I64X2 => {
            let v12 = constructor_xmm_zero(ctx, I32X4);
            let v13 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v14 = constructor_x64_pcmpgtd(ctx, v12, v13);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_punpckldq(ctx, arg1, v15);
            // Rule at src\isa\x64\lower.isle line 3891.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_swiden_low", "src\\isa\\x64\\lower.isle line 3878"
    )
}

// Generated as internal constructor for term lower_uwiden_low.
pub fn constructor_lower_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Xmm {
    match arg0 {
        I16X8 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v5 = constructor_x64_punpcklbw(ctx, arg1, v4);
            // Rule at src\isa\x64\lower.isle line 3946.
            return v5;
        }
        I32X4 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v6 = constructor_x64_punpcklwd(ctx, arg1, v4);
            // Rule at src\isa\x64\lower.isle line 3947.
            return v6;
        }
        I64X2 => {
            let v8 = constructor_xmm_zero(ctx, F32X4);
            let v9 = &C::xmm_to_xmm_mem(ctx, v8);
            let v10 = constructor_x64_unpcklps(ctx, arg1, v9);
            // Rule at src\isa\x64\lower.isle line 3948.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_uwiden_low", "src\\isa\\x64\\lower.isle line 3945"
    )
}

// Generated as internal constructor for term unarrow_i32x4_lanes_to_low_u16_lanes.
pub fn constructor_unarrow_i32x4_lanes_to_low_u16_lanes<C: Context>(ctx: &mut C, arg0: Xmm) -> Xmm {
    let v2 = constructor_xmm_zero(ctx, I32X4);
    let v3 = &C::xmm_to_xmm_mem(ctx, v2);
    let v4 = constructor_x64_pcmpgtd(ctx, arg0, v3);
    let v5 = &C::xmm_to_xmm_mem(ctx, v4);
    let v6 = constructor_x64_pand(ctx, arg0, v5);
    let v8 = C::emit_u128_le_const(ctx, 0xFFFF0000FFFF0000FFFF0000FFFF);
    let v9 = &constructor_const_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_movdqu_load(ctx, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v6);
    let v12 = constructor_x64_pcmpgtd(ctx, v10, v11);
    let v13 = &C::xmm_to_xmm_mem(ctx, v12);
    let v14 = constructor_x64_pand(ctx, v6, v13);
    let v15 = &C::xmm_to_xmm_mem(ctx, v10);
    let v16 = constructor_x64_pandn(ctx, v12, v15);
    let v17 = &C::xmm_to_xmm_mem(ctx, v16);
    let v18 = constructor_x64_por(ctx, v14, v17);
    let v19 = &C::xmm_to_xmm_mem(ctx, v18);
    let v21 = constructor_x64_pshuflw(ctx, v19, 0x8);
    let v22 = &C::xmm_to_xmm_mem(ctx, v21);
    let v23 = constructor_x64_pshufhw(ctx, v22, 0x8);
    let v24 = &C::xmm_to_xmm_mem(ctx, v23);
    let v25 = constructor_x64_pshufd(ctx, v24, 0x8);
    // Rule at src\isa\x64\lower.isle line 4028.
    return v25;
}

// Generated as internal constructor for term x64_round.
pub fn constructor_x64_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMem,
    arg2: &RoundImm,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v5 = constructor_x64_roundss(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4112.
                return v5;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                // Rule at src\isa\x64\lower.isle line 4125.
                return v13;
            }
        }
        F64 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v6 = constructor_x64_roundsd(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4115.
                return v6;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                // Rule at src\isa\x64\lower.isle line 4126.
                return v17;
            }
        }
        F32X4 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v7 = constructor_x64_roundps(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4118.
                return v7;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v20 = constructor_x64_pshufd(ctx, v18, 0x1);
                let v21 = C::xmm_to_reg(ctx, v20);
                let v22 = C::libcall_1(ctx, v11, v21);
                let v23 = C::xmm_new(ctx, v22);
                let v24 = constructor_f32x4_insertlane(ctx, v13, v23, 0x1);
                let v25 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v27 = constructor_x64_pshufd(ctx, v25, 0x2);
                let v28 = C::xmm_to_reg(ctx, v27);
                let v29 = C::libcall_1(ctx, v11, v28);
                let v30 = C::xmm_new(ctx, v29);
                let v31 = constructor_f32x4_insertlane(ctx, v24, v30, 0x2);
                let v32 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v34 = constructor_x64_pshufd(ctx, v32, 0x3);
                let v35 = C::xmm_to_reg(ctx, v34);
                let v36 = C::libcall_1(ctx, v11, v35);
                let v37 = C::xmm_new(ctx, v36);
                let v38 = constructor_f32x4_insertlane(ctx, v31, v37, 0x3);
                // Rule at src\isa\x64\lower.isle line 4127.
                return v38;
            }
        }
        F64X2 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v8 = constructor_x64_roundpd(ctx, v4, arg2);
                // Rule at src\isa\x64\lower.isle line 4121.
                return v8;
            }
            if let &RegMem::Reg { reg: v9 } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v40 = constructor_x64_pshufd(ctx, v18, 0xE);
                let v41 = C::xmm_to_reg(ctx, v40);
                let v42 = C::libcall_1(ctx, v15, v41);
                let v43 = C::xmm_new(ctx, v42);
                let v44 = &C::xmm_to_xmm_mem(ctx, v43);
                let v45 = constructor_x64_movlhps(ctx, v17, v44);
                // Rule at src\isa\x64\lower.isle line 4139.
                return v45;
            }
        }
        _ => {}
    }
    if let &RegMem::Mem { addr: ref v46 } = arg1 {
        let v48 = constructor_x64_load(ctx, arg0, v46, &ExtKind::ZeroExtend);
        let v49 = RegMem::Reg { reg: v48 };
        let v50 = constructor_x64_round(ctx, arg0, &v49, arg2);
        // Rule at src\isa\x64\lower.isle line 4146.
        return v50;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "x64_round", "src\\isa\\x64\\lower.isle line 4111"
    )
}

// Generated as internal constructor for term round_libcall.
pub fn constructor_round_libcall<C: Context>(ctx: &mut C, arg0: Type, arg1: &RoundImm) -> LibCall {
    match arg0 {
        F32 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src\isa\x64\lower.isle line 4154.
                    return LibCall::NearestF32;
                }
                &RoundImm::RoundDown => {
                    // Rule at src\isa\x64\lower.isle line 4152.
                    return LibCall::FloorF32;
                }
                &RoundImm::RoundUp => {
                    // Rule at src\isa\x64\lower.isle line 4150.
                    return LibCall::CeilF32;
                }
                &RoundImm::RoundZero => {
                    // Rule at src\isa\x64\lower.isle line 4156.
                    return LibCall::TruncF32;
                }
                _ => {}
            }
        }
        F64 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src\isa\x64\lower.isle line 4155.
                    return LibCall::NearestF64;
                }
                &RoundImm::RoundDown => {
                    // Rule at src\isa\x64\lower.isle line 4153.
                    return LibCall::FloorF64;
                }
                &RoundImm::RoundUp => {
                    // Rule at src\isa\x64\lower.isle line 4151.
                    return LibCall::CeilF64;
                }
                &RoundImm::RoundZero => {
                    // Rule at src\isa\x64\lower.isle line 4157.
                    return LibCall::TruncF64;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "round_libcall", "src\\isa\\x64\\lower.isle line 4149"
    )
}

// Generated as internal constructor for term nonzero_sdiv_divisor.
pub fn constructor_nonzero_sdiv_divisor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Reg {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data(ctx, v3);
        if let &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } = v4
        {
            if let &Opcode::Iconst = v5 {
                let v7 = C::safe_divisor_from_imm64(ctx, arg0, v6);
                if let Some(v8) = v7 {
                    let v9 = constructor_imm(ctx, arg0, v8);
                    // Rule at src\isa\x64\lower.isle line 4237.
                    return v9;
                }
            }
        }
    }
    let v10 = C::put_in_reg(ctx, arg1);
    let v11 = &C::raw_operand_size_of_type(ctx, arg0);
    let v12 = C::gpr_new(ctx, v10);
    let v13 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v14 = &constructor_x64_test(ctx, v11, v12, v13);
    let v17 = &constructor_trap_if(ctx, &CC::Z, &TrapCode::IntegerDivisionByZero);
    let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
    let v19 = constructor_side_effect(ctx, v18);
    // Rule at src\isa\x64\lower.isle line 4240.
    return v10;
}

// Generated as internal constructor for term lower_pshufb.
pub fn constructor_lower_pshufb<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &RegMem) -> Xmm {
    let v2 = C::use_ssse3(ctx);
    if v2 == true {
        let v3 = &C::reg_mem_to_xmm_mem(ctx, arg1);
        let v4 = constructor_x64_pshufb(ctx, arg0, v3);
        // Rule at src\isa\x64\lower.isle line 4521.
        return v4;
    }
    match arg1 {
        &RegMem::Reg { reg: v5 } => {
            let v7 = C::xmm_to_reg(ctx, arg0);
            let v8 = C::libcall_2(ctx, &LibCall::X86Pshufb, v7, v5);
            let v9 = C::xmm_new(ctx, v8);
            // Rule at src\isa\x64\lower.isle line 4524.
            return v9;
        }
        &RegMem::Mem { addr: ref v10 } => {
            let v11 = &constructor_synthetic_amode_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            let v13 = C::xmm_to_reg(ctx, v12);
            let v14 = &constructor_xmm_to_reg_mem(ctx, v13);
            let v15 = &C::xmm_mem_to_reg_mem(ctx, v14);
            let v16 = constructor_lower_pshufb(ctx, arg0, v15);
            // Rule at src\isa\x64\lower.isle line 4526.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_pshufb", "src\\isa\\x64\\lower.isle line 4520"
    )
}

// Generated as internal constructor for term emit_vany_true.
pub fn constructor_emit_vany_true<C: Context>(ctx: &mut C, arg0: Value) -> IcmpCondResult {
    let v1 = constructor_put_in_xmm(ctx, arg0);
    let v3 = constructor_xmm_zero(ctx, I8X16);
    let v4 = &C::xmm_to_xmm_mem(ctx, v3);
    let v5 = constructor_x64_pcmpeqb(ctx, v1, v4);
    let v7 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v5);
    let v9 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size32, v7, 0xFFFF);
    let v11 = &constructor_icmp_cond_result(ctx, v9, &CC::NZ);
    // Rule at src\isa\x64\lower.isle line 4715.
    return v11.clone();
}

// Generated as internal constructor for term emit_vall_true.
pub fn constructor_emit_vall_true<C: Context>(ctx: &mut C, arg0: Value) -> IcmpCondResult {
    let v2 = C::use_sse41(ctx);
    if v2 == true {
        let v3 = constructor_put_in_xmm(ctx, arg0);
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_xmm_zero(ctx, v1);
        let v5 = constructor_vec_int_type(ctx, v1);
        let v6 = &C::xmm_to_xmm_mem(ctx, v4);
        let v7 = constructor_x64_pcmpeq(ctx, v5, v3, v6);
        let v8 = &C::xmm_to_xmm_mem(ctx, v7);
        let v9 = &constructor_x64_ptest(ctx, v7, v8);
        let v11 = &constructor_icmp_cond_result(ctx, v9, &CC::Z);
        // Rule at src\isa\x64\lower.isle line 4729.
        return v11.clone();
    }
    let v1 = C::value_type(ctx, arg0);
    let v12 = constructor_vec_int_type(ctx, v1);
    let v13 = constructor_put_in_xmm(ctx, arg0);
    let v14 = constructor_xmm_zero(ctx, v1);
    let v15 = &C::xmm_to_xmm_mem(ctx, v14);
    let v16 = constructor_x64_pcmpeq(ctx, v12, v13, v15);
    let v18 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v16);
    let v19 = &C::gpr_to_gpr_mem_imm(ctx, v18);
    let v20 = &constructor_x64_test(ctx, &OperandSize::Size32, v18, v19);
    let v21 = &constructor_icmp_cond_result(ctx, v20, &CC::Z);
    // Rule at src\isa\x64\lower.isle line 4739.
    return v21.clone();
}
