// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src\prelude.isle
// - src\prelude_lower.isle
// - src\isa\riscv64\inst.isle
// - src\isa\riscv64\inst_vector.isle
// - src\isa\riscv64\lower.isle
// - D:\zedversions\target\debug\build\cranelift-codegen-fffda47e534a6fd7\out\clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn frm_bits(&mut self, arg0: &FRM) -> UImm5;
    fn xreg_new(&mut self, arg0: Reg) -> XReg;
    fn writable_xreg_new(&mut self, arg0: WritableReg) -> WritableXReg;
    fn writable_xreg_to_xreg(&mut self, arg0: WritableXReg) -> XReg;
    fn writable_xreg_to_writable_reg(&mut self, arg0: WritableXReg) -> WritableReg;
    fn xreg_to_reg(&mut self, arg0: XReg) -> Reg;
    fn freg_new(&mut self, arg0: Reg) -> FReg;
    fn writable_freg_new(&mut self, arg0: WritableReg) -> WritableFReg;
    fn writable_freg_to_freg(&mut self, arg0: WritableFReg) -> FReg;
    fn writable_freg_to_writable_reg(&mut self, arg0: WritableFReg) -> WritableReg;
    fn freg_to_reg(&mut self, arg0: FReg) -> Reg;
    fn vreg_new(&mut self, arg0: Reg) -> VReg;
    fn writable_vreg_new(&mut self, arg0: WritableReg) -> WritableVReg;
    fn writable_vreg_to_vreg(&mut self, arg0: WritableVReg) -> VReg;
    fn writable_vreg_to_writable_reg(&mut self, arg0: WritableVReg) -> WritableReg;
    fn vreg_to_reg(&mut self, arg0: VReg) -> Reg;
    fn u8_as_i32(&mut self, arg0: u8) -> i32;
    fn has_m(&mut self) -> bool;
    fn has_v(&mut self) -> bool;
    fn has_zfa(&mut self) -> bool;
    fn has_zbkb(&mut self) -> bool;
    fn has_zba(&mut self) -> bool;
    fn has_zbb(&mut self) -> bool;
    fn has_zbc(&mut self) -> bool;
    fn has_zbs(&mut self) -> bool;
    fn has_zicond(&mut self) -> bool;
    fn fli_constant_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<FliConstant>;
    fn fli_constant_from_negated_u64(&mut self, arg0: Type, arg1: u64) -> Option<FliConstant>;
    fn i64_generate_imm(&mut self, arg0: i64) -> Option<(Imm20, Imm12)>;
    fn i64_shift_for_lui(&mut self, arg0: i64) -> Option<(u64, Imm12)>;
    fn i64_shift(&mut self, arg0: i64) -> Option<(i64, Imm12)>;
    fn imm12_const(&mut self, arg0: i32) -> Imm12;
    fn imm_from_bits(&mut self, arg0: u64) -> Imm12;
    fn imm_from_neg_bits(&mut self, arg0: i64) -> Imm12;
    fn imm12_const_add(&mut self, arg0: i32, arg1: i32) -> Imm12;
    fn imm12_add(&mut self, arg0: Imm12, arg1: i32) -> Option<Imm12>;
    fn imm12_and(&mut self, arg0: Imm12, arg1: u64) -> Imm12;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn imm12_from_i64(&mut self, arg0: i64) -> Option<Imm12>;
    fn imm12_is_zero(&mut self, arg0: Imm12) -> Option<()>;
    fn imm20_is_zero(&mut self, arg0: Imm20) -> Option<()>;
    fn imm20_from_u64(&mut self, arg0: u64) -> Option<Imm20>;
    fn imm20_from_i64(&mut self, arg0: i64) -> Option<Imm20>;
    fn imm5_from_u64(&mut self, arg0: u64) -> Option<Imm5>;
    fn imm5_from_i64(&mut self, arg0: i64) -> Option<Imm5>;
    fn i8_to_imm5(&mut self, arg0: i8) -> Option<Imm5>;
    fn uimm5_from_u8(&mut self, arg0: u8) -> Option<UImm5>;
    fn uimm5_from_u64(&mut self, arg0: u64) -> Option<UImm5>;
    fn uimm5_bitcast_to_imm5(&mut self, arg0: UImm5) -> Imm5;
    fn gen_shamt(&mut self, arg0: Type, arg1: XReg) -> ValueRegs;
    fn gen_reg_offset_amode(&mut self, arg0: Reg, arg1: i64) -> AMode;
    fn gen_sp_offset_amode(&mut self, arg0: i64) -> AMode;
    fn gen_fp_offset_amode(&mut self, arg0: i64) -> AMode;
    fn gen_stack_slot_amode(&mut self, arg0: StackSlot, arg1: i64) -> AMode;
    fn gen_const_amode(&mut self, arg0: VCodeConstant) -> AMode;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn atomic_amo(&mut self) -> AMO;
    fn gen_stack_addr(&mut self, arg0: StackSlot, arg1: Offset32) -> Reg;
    fn load_op(&mut self, arg0: Type) -> LoadOP;
    fn store_op(&mut self, arg0: Type) -> StoreOP;
    fn load_ext_name(&mut self, arg0: ExternalName, arg1: i64) -> Reg;
    fn int_compare(&mut self, arg0: &IntCC, arg1: XReg, arg2: XReg) -> IntegerCompare;
    fn int_compare_decompose(&mut self, arg0: IntegerCompare) -> (IntCC, XReg, XReg);
    fn label_to_br_target(&mut self, arg0: MachLabel) -> CondBrTarget;
    fn lower_br_table(&mut self, arg0: Reg, arg1: &MachLabelSlice) -> Unit;
    fn load_ra(&mut self) -> Reg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn fp_reg(&mut self) -> PReg;
    fn sp_reg(&mut self) -> PReg;
    fn is_non_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn is_zero_reg(&mut self, arg0: XReg) -> Option<()>;
    fn zero_reg(&mut self) -> XReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn vec_alu_rr_dst_type(&mut self, arg0: &VecAluOpRR) -> Type;
    fn vstate_from_type(&mut self, arg0: Type) -> VState;
    fn vstate_mf2(&mut self, arg0: VState) -> VState;
    fn min_vec_reg_size(&mut self) -> u64;
    fn ty_vec_fits_in_register(&mut self, arg0: Type) -> Option<Type>;
    fn bclr_imm(&mut self, arg0: Type, arg1: u64) -> Option<Imm12>;
    fn bseti_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn binvi_imm(&mut self, arg0: u64) -> Option<Imm12>;
    fn is_atomic_rmw_max_etc(&mut self, arg0: &AtomicRmwOp) -> Option<(AtomicRmwOp, bool)>;
    fn fcvt_smax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_smin_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umax_bound(&mut self, arg0: Type, arg1: Type, arg2: bool) -> u64;
    fn fcvt_umin_bound(&mut self, arg0: Type, arg1: bool) -> u64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src\prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src\prelude_lower.isle line 354.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src\prelude_lower.isle line 396.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src\prelude_lower.isle line 415.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src\prelude_lower.isle line 423.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src\isa\riscv64\inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    Lui {
        rd: WritableReg,
        imm: Imm20,
    },
    LoadInlineConst {
        rd: WritableReg,
        ty: Type,
        imm: u64,
    },
    Auipc {
        rd: WritableReg,
        imm: Imm20,
    },
    Fli {
        ty: Type,
        imm: FliConstant,
        rd: WritableReg,
    },
    FpuRR {
        alu_op: FpuOPRR,
        frm: FRM,
        rd: WritableReg,
        rs: Reg,
    },
    AluRRR {
        alu_op: AluOPRRR,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRR {
        alu_op: FpuOPRRR,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
    },
    FpuRRRR {
        alu_op: FpuOPRRRR,
        frm: FRM,
        rd: WritableReg,
        rs1: Reg,
        rs2: Reg,
        rs3: Reg,
    },
    AluRRImm12 {
        alu_op: AluOPRRI,
        rd: WritableReg,
        rs: Reg,
        imm12: Imm12,
    },
    CsrReg {
        op: CsrRegOP,
        rd: WritableReg,
        rs: Reg,
        csr: CSR,
    },
    CsrImm {
        op: CsrImmOP,
        rd: WritableReg,
        imm: UImm5,
        csr: CSR,
    },
    Load {
        rd: WritableReg,
        op: LoadOP,
        flags: MemFlags,
        from: AMode,
    },
    Store {
        to: AMode,
        op: StoreOP,
        flags: MemFlags,
        src: Reg,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    TrapIf {
        rs1: Reg,
        rs2: Reg,
        cc: IntCC,
        trap_code: TrapCode,
    },
    Jal {
        label: MachLabel,
    },
    CondBr {
        taken: CondBrTarget,
        not_taken: CondBrTarget,
        kind: IntegerCompare,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    ElfTlsGetAddr {
        rd: WritableReg,
        name: BoxExternalName,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Mov {
        rd: WritableReg,
        rm: Reg,
        ty: Type,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Fence {
        pred: u8,
        succ: u8,
    },
    EBreak,
    Udf {
        trap_code: TrapCode,
    },
    Jalr {
        rd: WritableReg,
        base: Reg,
        offset: Imm12,
    },
    Atomic {
        op: AtomicOP,
        rd: WritableReg,
        addr: Reg,
        src: Reg,
        amo: AMO,
    },
    AtomicStore {
        src: Reg,
        ty: Type,
        p: Reg,
    },
    AtomicLoad {
        rd: WritableReg,
        ty: Type,
        p: Reg,
    },
    AtomicRmwLoop {
        offset: Reg,
        op: AtomicRmwOp,
        dst: WritableReg,
        ty: Type,
        p: Reg,
        x: Reg,
        t0: WritableReg,
    },
    Select {
        dst: WritableValueRegs,
        condition: IntegerCompare,
        x: ValueRegs,
        y: ValueRegs,
    },
    BrTable {
        index: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        targets: VecMachLabel,
    },
    AtomicCas {
        offset: Reg,
        t0: WritableReg,
        dst: WritableReg,
        e: Reg,
        addr: Reg,
        v: Reg,
        ty: Type,
    },
    RawData {
        data: VecU8,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    Popcnt {
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Cltz {
        leading: bool,
        sum: WritableReg,
        step: WritableReg,
        tmp: WritableReg,
        rs: Reg,
        ty: Type,
    },
    Brev8 {
        rs: Reg,
        ty: Type,
        step: WritableReg,
        tmp: WritableReg,
        tmp2: WritableReg,
        rd: WritableReg,
    },
    StackProbeLoop {
        guard_size: u32,
        probe_count: u32,
        tmp: WritableReg,
    },
    VecAluRRRR {
        op: VecAluOpRRRR,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRRImm5 {
        op: VecAluOpRRRImm5,
        vd: WritableReg,
        vd_src: Reg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRR {
        op: VecAluOpRRR,
        vd: WritableReg,
        vs2: Reg,
        vs1: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRRImm5 {
        op: VecAluOpRRImm5,
        vd: WritableReg,
        vs2: Reg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRR {
        op: VecAluOpRR,
        vd: WritableReg,
        vs: Reg,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecAluRImm5 {
        op: VecAluOpRImm5,
        vd: WritableReg,
        imm: Imm5,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecSetState {
        rd: WritableReg,
        vstate: VState,
    },
    VecLoad {
        eew: VecElementWidth,
        to: WritableReg,
        from: VecAMode,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
    VecStore {
        eew: VecElementWidth,
        to: VecAMode,
        from: Reg,
        flags: MemFlags,
        mask: VecOpMasking,
        vstate: VState,
    },
}

/// Internal type AtomicOP: defined at src\isa\riscv64\inst.isle line 353.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicOP {
    LrW,
    ScW,
    AmoswapW,
    AmoaddW,
    AmoxorW,
    AmoandW,
    AmoorW,
    AmominW,
    AmomaxW,
    AmominuW,
    AmomaxuW,
    LrD,
    ScD,
    AmoswapD,
    AmoaddD,
    AmoxorD,
    AmoandD,
    AmoorD,
    AmominD,
    AmomaxD,
    AmominuD,
    AmomaxuD,
}

/// Internal type FpuOPRRRR: defined at src\isa\riscv64\inst.isle line 378.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRRR {
    FmaddS,
    FmsubS,
    FnmsubS,
    FnmaddS,
    FmaddD,
    FmsubD,
    FnmsubD,
    FnmaddD,
}

/// Internal type FClassResult: defined at src\isa\riscv64\inst.isle line 391.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FClassResult {
    NegInfinite,
    NegNormal,
    NegSubNormal,
    NegZero,
    PosZero,
    PosSubNormal,
    PosNormal,
    PosInfinite,
    SNaN,
    QNaN,
}

/// Internal type FpuOPRR: defined at src\isa\riscv64\inst.isle line 416.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRR {
    FsqrtS,
    FcvtWS,
    FcvtWuS,
    FmvXW,
    FclassS,
    FcvtSw,
    FcvtSwU,
    FmvWX,
    FcvtLS,
    FcvtLuS,
    FcvtSL,
    FcvtSLU,
    FcvtLD,
    FcvtLuD,
    FmvXD,
    FcvtDL,
    FcvtDLu,
    FmvDX,
    FsqrtD,
    FcvtSD,
    FcvtDS,
    FclassD,
    FcvtWD,
    FcvtWuD,
    FcvtDW,
    FcvtDWU,
    FroundS,
    FroundD,
}

/// Internal type LoadOP: defined at src\isa\riscv64\inst.isle line 458.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LoadOP {
    Lb,
    Lh,
    Lw,
    Lbu,
    Lhu,
    Lwu,
    Ld,
    Flw,
    Fld,
}

/// Internal type StoreOP: defined at src\isa\riscv64\inst.isle line 470.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum StoreOP {
    Sb,
    Sh,
    Sw,
    Sd,
    Fsw,
    Fsd,
}

/// Internal type AluOPRRR: defined at src\isa\riscv64\inst.isle line 479.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRR {
    Add,
    Sub,
    Sll,
    Slt,
    SltU,
    Sgt,
    Sgtu,
    Xor,
    Srl,
    Sra,
    Or,
    And,
    Addw,
    Subw,
    Sllw,
    Srlw,
    Sraw,
    Mul,
    Mulh,
    Mulhsu,
    Mulhu,
    Div,
    DivU,
    Rem,
    RemU,
    Mulw,
    Divw,
    Divuw,
    Remw,
    Remuw,
    Adduw,
    Sh1add,
    Sh1adduw,
    Sh2add,
    Sh2adduw,
    Sh3add,
    Sh3adduw,
    Andn,
    Orn,
    Xnor,
    Max,
    Maxu,
    Min,
    Minu,
    Rol,
    Rolw,
    Ror,
    Rorw,
    Bclr,
    Bext,
    Binv,
    Bset,
    Clmul,
    Clmulh,
    Clmulr,
    Pack,
    Packw,
    Packh,
    CzeroEqz,
    CzeroNez,
}

/// Internal type FpuOPRRR: defined at src\isa\riscv64\inst.isle line 563.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuOPRRR {
    FaddS,
    FsubS,
    FmulS,
    FdivS,
    FsgnjS,
    FsgnjnS,
    FsgnjxS,
    FminS,
    FmaxS,
    FeqS,
    FltS,
    FleS,
    FaddD,
    FsubD,
    FmulD,
    FdivD,
    FsgnjD,
    FsgnjnD,
    FsgnjxD,
    FminD,
    FmaxD,
    FeqD,
    FltD,
    FleD,
    FminmS,
    FmaxmS,
    FminmD,
    FmaxmD,
}

/// Internal type AluOPRRI: defined at src\isa\riscv64\inst.isle line 602.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluOPRRI {
    Addi,
    Slti,
    SltiU,
    Xori,
    Ori,
    Andi,
    Slli,
    Srli,
    Srai,
    Addiw,
    Slliw,
    SrliW,
    Sraiw,
    SlliUw,
    Clz,
    Clzw,
    Ctz,
    Ctzw,
    Cpop,
    Cpopw,
    Sextb,
    Sexth,
    Zexth,
    Rori,
    Roriw,
    Rev8,
    Brev8,
    Orcb,
    Bclri,
    Bexti,
    Binvi,
    Bseti,
}

/// Internal type COpcodeSpace: defined at src\isa\riscv64\inst.isle line 644.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum COpcodeSpace {
    C0,
    C1,
    C2,
}

/// Internal type CrOp: defined at src\isa\riscv64\inst.isle line 651.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CrOp {
    CMv,
    CAdd,
    CJr,
    CJalr,
    CEbreak,
}

/// Internal type CaOp: defined at src\isa\riscv64\inst.isle line 662.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CaOp {
    CAnd,
    COr,
    CXor,
    CSub,
    CAddw,
    CSubw,
    CMul,
}

/// Internal type CjOp: defined at src\isa\riscv64\inst.isle line 673.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CjOp {
    CJ,
}

/// Internal type CiOp: defined at src\isa\riscv64\inst.isle line 678.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiOp {
    CAddi,
    CAddiw,
    CAddi16sp,
    CSlli,
    CLi,
    CLui,
    CLwsp,
    CLdsp,
    CFldsp,
}

/// Internal type CiwOp: defined at src\isa\riscv64\inst.isle line 691.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CiwOp {
    CAddi4spn,
}

/// Internal type CbOp: defined at src\isa\riscv64\inst.isle line 696.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CbOp {
    CSrli,
    CSrai,
    CAndi,
}

/// Internal type CssOp: defined at src\isa\riscv64\inst.isle line 703.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CssOp {
    CSwsp,
    CSdsp,
    CFsdsp,
}

/// Internal type CsOp: defined at src\isa\riscv64\inst.isle line 710.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsOp {
    CSw,
    CSd,
    CFsd,
}

/// Internal type ClOp: defined at src\isa\riscv64\inst.isle line 717.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ClOp {
    CLw,
    CLd,
    CFld,
}

/// Internal type CsznOp: defined at src\isa\riscv64\inst.isle line 724.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsznOp {
    CNot,
    CZextb,
    CZexth,
    CZextw,
    CSextb,
    CSexth,
}

/// Internal type ZcbMemOp: defined at src\isa\riscv64\inst.isle line 737.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZcbMemOp {
    CLbu,
    CLhu,
    CLh,
    CSb,
    CSh,
}

/// Internal type CsrRegOP: defined at src\isa\riscv64\inst.isle line 746.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrRegOP {
    CsrRW,
    CsrRS,
    CsrRC,
}

/// Internal type CsrImmOP: defined at src\isa\riscv64\inst.isle line 755.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CsrImmOP {
    CsrRWI,
    CsrRSI,
    CsrRCI,
}

/// Internal type CSR: defined at src\isa\riscv64\inst.isle line 765.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CSR {
    Frm,
}

/// Internal type FRM: defined at src\isa\riscv64\inst.isle line 771.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FRM {
    RNE,
    RTZ,
    RDN,
    RUP,
    RMM,
    Fcsr,
}

/// Internal type FFlagsException: defined at src\isa\riscv64\inst.isle line 791.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FFlagsException {
    NV,
    DZ,
    OF,
    UF,
    NX,
}

/// Internal type ExtendOp: defined at src\isa\riscv64\inst.isle line 2306.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendOp {
    Zero,
    Signed,
}

/// Internal type FloatCompare: defined at src\isa\riscv64\inst.isle line 3093.
#[derive(Clone, Debug)]
pub enum FloatCompare {
    One { r: XReg },
    Zero { r: XReg },
}

/// Internal type VecElementWidth: defined at src\isa\riscv64\inst_vector.isle line 2.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecElementWidth {
    E8,
    E16,
    E32,
    E64,
}

/// Internal type VecLmul: defined at src\isa\riscv64\inst_vector.isle line 15.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLmul {
    LmulF8,
    LmulF4,
    LmulF2,
    Lmul1,
    Lmul2,
    Lmul4,
    Lmul8,
}

/// Internal type VecTailMode: defined at src\isa\riscv64\inst_vector.isle line 28.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecTailMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecMaskMode: defined at src\isa\riscv64\inst_vector.isle line 38.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMaskMode {
    Agnostic,
    Undisturbed,
}

/// Internal type VecAvl: defined at src\isa\riscv64\inst_vector.isle line 50.
#[derive(Clone, Debug)]
pub enum VecAvl {
    Static { size: UImm5 },
}

/// Internal type VecOpCategory: defined at src\isa\riscv64\inst_vector.isle line 64.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecOpCategory {
    OPIVV,
    OPFVV,
    OPMVV,
    OPIVI,
    OPIVX,
    OPFVF,
    OPMVX,
    OPCFG,
}

/// Internal type VecOpMasking: defined at src\isa\riscv64\inst_vector.isle line 79.
#[derive(Clone, Debug)]
pub enum VecOpMasking {
    Enabled { reg: Reg },
    Disabled,
}

/// Internal type VecAluOpRRR: defined at src\isa\riscv64\inst_vector.isle line 91.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRR {
    VaddVV,
    VsaddVV,
    VsadduVV,
    VwaddVV,
    VwaddWV,
    VwadduVV,
    VwadduWV,
    VsubVV,
    VwsubVV,
    VwsubWV,
    VwsubuVV,
    VwsubuWV,
    VssubVV,
    VssubuVV,
    VmulVV,
    VmulhVV,
    VmulhuVV,
    VsmulVV,
    VsllVV,
    VsrlVV,
    VsraVV,
    VandVV,
    VorVV,
    VxorVV,
    VmaxVV,
    VmaxuVV,
    VminVV,
    VminuVV,
    VfaddVV,
    VfsubVV,
    VfmulVV,
    VfdivVV,
    VfminVV,
    VfmaxVV,
    VfsgnjVV,
    VfsgnjnVV,
    VfsgnjxVV,
    VmergeVVM,
    VredmaxuVS,
    VredminuVS,
    VrgatherVV,
    VcompressVM,
    VmseqVV,
    VmsneVV,
    VmsltuVV,
    VmsltVV,
    VmsleuVV,
    VmsleVV,
    VmfeqVV,
    VmfneVV,
    VmfltVV,
    VmfleVV,
    VmandMM,
    VmorMM,
    VmnandMM,
    VmnorMM,
    VaddVX,
    VsaddVX,
    VsadduVX,
    VwaddVX,
    VwaddWX,
    VwadduVX,
    VwadduWX,
    VsubVX,
    VrsubVX,
    VwsubVX,
    VwsubWX,
    VwsubuVX,
    VwsubuWX,
    VssubVX,
    VssubuVX,
    VmulVX,
    VmulhVX,
    VmulhuVX,
    VsmulVX,
    VsllVX,
    VsrlVX,
    VsraVX,
    VandVX,
    VorVX,
    VxorVX,
    VmaxVX,
    VmaxuVX,
    VminVX,
    VminuVX,
    VslidedownVX,
    VfaddVF,
    VfsubVF,
    VfrsubVF,
    VfmulVF,
    VfdivVF,
    VfsgnjVF,
    VfrdivVF,
    VmergeVXM,
    VfmergeVFM,
    VrgatherVX,
    VmseqVX,
    VmsneVX,
    VmsltuVX,
    VmsltVX,
    VmsleuVX,
    VmsleVX,
    VmsgtuVX,
    VmsgtVX,
    VmfeqVF,
    VmfneVF,
    VmfltVF,
    VmfleVF,
    VmfgtVF,
    VmfgeVF,
}

/// Internal type VecAluOpRRRImm5: defined at src\isa\riscv64\inst_vector.isle line 211.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRImm5 {
    VslideupVI,
}

/// Internal type VecAluOpRRRR: defined at src\isa\riscv64\inst_vector.isle line 216.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRRR {
    VmaccVV,
    VnmsacVV,
    VfmaccVV,
    VfnmaccVV,
    VfmsacVV,
    VfnmsacVV,
    VmaccVX,
    VnmsacVX,
    VfmaccVF,
    VfnmaccVF,
    VfmsacVF,
    VfnmsacVF,
    Vslide1upVX,
}

/// Internal type VecAluOpRRImm5: defined at src\isa\riscv64\inst_vector.isle line 236.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRRImm5 {
    VaddVI,
    VsaddVI,
    VsadduVI,
    VrsubVI,
    VsllVI,
    VsrlVI,
    VsraVI,
    VandVI,
    VorVI,
    VxorVI,
    VssrlVI,
    VslidedownVI,
    VmergeVIM,
    VrgatherVI,
    VmvrV,
    VnclipWI,
    VnclipuWI,
    VmseqVI,
    VmsneVI,
    VmsleuVI,
    VmsleVI,
    VmsgtuVI,
    VmsgtVI,
}

/// Internal type VecAluOpRImm5: defined at src\isa\riscv64\inst_vector.isle line 266.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRImm5 {
    VmvVI,
}

/// Internal type VecAluOpRR: defined at src\isa\riscv64\inst_vector.isle line 273.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecAluOpRR {
    VmvSX,
    VmvXS,
    VfmvSF,
    VfmvFS,
    VmvVV,
    VmvVX,
    VfmvVF,
    VfsqrtV,
    VsextVF2,
    VsextVF4,
    VsextVF8,
    VzextVF2,
    VzextVF4,
    VzextVF8,
    VfcvtxufV,
    VfcvtxfV,
    VfcvtrtzxufV,
    VfcvtrtzxfV,
    VfcvtfxuV,
    VfcvtfxV,
    VfwcvtffV,
    VfncvtffW,
}

/// Internal type VecAMode: defined at src\isa\riscv64\inst_vector.isle line 305.
#[derive(Clone, Debug)]
pub enum VecAMode {
    UnitStride { base: AMode },
}

/// Internal type IsFneg: defined at src\isa\riscv64\lower.isle line 1551.
#[derive(Clone, Debug)]
pub enum IsFneg {
    Result { negate: u64, value: Value },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src\prelude.isle line 408.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        R32 => {
            // Rule at src\prelude.isle line 415.
            return true;
        }
        R64 => {
            // Rule at src\prelude.isle line 416.
            return true;
        }
        _ => {}
    }
    // Rule at src\prelude.isle line 417.
    return false;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src\prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src\prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src\prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src\prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src\\prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src\prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src\\prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src\prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src\\prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src\prelude_lower.isle line 364.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src\prelude_lower.isle line 366.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src\prelude_lower.isle line 369.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src\\prelude_lower.isle line 363"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 377.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 382.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 384.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src\prelude_lower.isle line 386.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src\\prelude_lower.isle line 381"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src\prelude_lower.isle line 411.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src\\prelude_lower.isle line 410"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src\prelude_lower.isle line 441.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src\prelude_lower.isle line 442.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src\\prelude_lower.isle line 440"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src\prelude_lower.isle line 447.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src\prelude_lower.isle line 449.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src\\prelude_lower.isle line 446"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src\prelude_lower.isle line 462.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src\prelude_lower.isle line 456.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src\\prelude_lower.isle line 455"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 493.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 499.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 511.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src\prelude_lower.isle line 527.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src\prelude_lower.isle line 534.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src\prelude_lower.isle line 547.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src\prelude_lower.isle line 487.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src\prelude_lower.isle line 479.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src\\prelude_lower.isle line 477"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src\prelude_lower.isle line 565.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src\prelude_lower.isle line 572.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src\prelude_lower.isle line 583.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 588.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 593.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src\prelude_lower.isle line 598.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src\prelude_lower.isle line 603.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src\\prelude_lower.isle line 581"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src\prelude_lower.isle line 612.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src\prelude_lower.isle line 620.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src\prelude_lower.isle line 629.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src\prelude_lower.isle line 637.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src\prelude_lower.isle line 646.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 706.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src\prelude_lower.isle line 714.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src\prelude_lower.isle line 723.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 731.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 740.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 659.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src\prelude_lower.isle line 667.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src\prelude_lower.isle line 676.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src\prelude_lower.isle line 684.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src\prelude_lower.isle line 693.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 753.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src\prelude_lower.isle line 761.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src\prelude_lower.isle line 770.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src\prelude_lower.isle line 778.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src\prelude_lower.isle line 787.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 799.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src\prelude_lower.isle line 807.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src\prelude_lower.isle line 824.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src\prelude_lower.isle line 816.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src\prelude_lower.isle line 832.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src\prelude_lower.isle line 841.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src\\prelude_lower.isle line 609"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src\prelude_lower.isle line 1045.
    return v2;
}

// Generated as internal constructor for term put_in_xreg.
pub fn constructor_put_in_xreg<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 856.
    return v2;
}

// Generated as internal constructor for term output_xreg.
pub fn constructor_output_xreg<C: Context>(ctx: &mut C, arg0: XReg) -> InstOutput {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 861.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_reg.
pub fn constructor_writable_xreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableXReg) -> Reg {
    let v1 = C::writable_xreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 876.
    return v2;
}

// Generated as internal constructor for term xreg_to_value_regs.
pub fn constructor_xreg_to_value_regs<C: Context>(ctx: &mut C, arg0: XReg) -> ValueRegs {
    let v1 = C::xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 886.
    return v2;
}

// Generated as internal constructor for term writable_xreg_to_value_regs.
pub fn constructor_writable_xreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXReg,
) -> ValueRegs {
    let v1 = constructor_writable_xreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 891.
    return v2;
}

// Generated as internal constructor for term temp_writable_xreg.
pub fn constructor_temp_writable_xreg<C: Context>(ctx: &mut C) -> WritableXReg {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::writable_xreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 896.
    return v2;
}

// Generated as internal constructor for term put_in_freg.
pub fn constructor_put_in_freg<C: Context>(ctx: &mut C, arg0: Value) -> FReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::freg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 917.
    return v2;
}

// Generated as internal constructor for term output_freg.
pub fn constructor_output_freg<C: Context>(ctx: &mut C, arg0: FReg) -> InstOutput {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 922.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_reg.
pub fn constructor_writable_freg_to_reg<C: Context>(ctx: &mut C, arg0: WritableFReg) -> Reg {
    let v1 = C::writable_freg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 937.
    return v2;
}

// Generated as internal constructor for term freg_to_value_regs.
pub fn constructor_freg_to_value_regs<C: Context>(ctx: &mut C, arg0: FReg) -> ValueRegs {
    let v1 = C::freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 947.
    return v2;
}

// Generated as internal constructor for term writable_freg_to_value_regs.
pub fn constructor_writable_freg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableFReg,
) -> ValueRegs {
    let v1 = constructor_writable_freg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 952.
    return v2;
}

// Generated as internal constructor for term temp_writable_freg.
pub fn constructor_temp_writable_freg<C: Context>(ctx: &mut C) -> WritableFReg {
    let v1 = C::temp_writable_reg(ctx, F64);
    let v2 = C::writable_freg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 957.
    return v2;
}

// Generated as internal constructor for term put_in_vreg.
pub fn constructor_put_in_vreg<C: Context>(ctx: &mut C, arg0: Value) -> VReg {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::vreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 979.
    return v2;
}

// Generated as internal constructor for term output_vreg.
pub fn constructor_output_vreg<C: Context>(ctx: &mut C, arg0: VReg) -> InstOutput {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 984.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_reg.
pub fn constructor_writable_vreg_to_reg<C: Context>(ctx: &mut C, arg0: WritableVReg) -> Reg {
    let v1 = C::writable_vreg_to_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 999.
    return v2;
}

// Generated as internal constructor for term vreg_to_value_regs.
pub fn constructor_vreg_to_value_regs<C: Context>(ctx: &mut C, arg0: VReg) -> ValueRegs {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 1009.
    return v2;
}

// Generated as internal constructor for term writable_vreg_to_value_regs.
pub fn constructor_writable_vreg_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableVReg,
) -> ValueRegs {
    let v1 = constructor_writable_vreg_to_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 1014.
    return v2;
}

// Generated as internal constructor for term temp_writable_vreg.
pub fn constructor_temp_writable_vreg<C: Context>(ctx: &mut C) -> WritableVReg {
    let v1 = C::temp_writable_reg(ctx, I8X16);
    let v2 = C::writable_vreg_new(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 1019.
    return v2;
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Add, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1065.
    return v6;
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1071.
    return v5;
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1077.
    return v6;
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v3 = C::xreg_to_reg(ctx, v2);
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sub, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1083.
    return v6;
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sll, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1089.
    return v6;
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1095.
    return v5;
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srl, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1101.
    return v6;
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srli, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1107.
    return v5;
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sra, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1113.
    return v6;
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Srai, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1119.
    return v5;
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Or, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1125.
    return v6;
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Ori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1131.
    return v5;
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1137.
    return v6;
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Xori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1143.
    return v5;
}

// Generated as internal constructor for term rv_not.
pub fn constructor_rv_not<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, -0x1);
    let v3 = constructor_rv_xori(ctx, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 1149.
    return v3;
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::And, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1155.
    return v6;
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Andi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1161.
    return v5;
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Slt, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1167.
    return v6;
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::SltU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1173.
    return v6;
}

// Generated as internal constructor for term rv_snez.
pub fn constructor_rv_snez<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_sltu(ctx, v1, arg0);
    // Rule at src\isa\riscv64\inst.isle line 1179.
    return v2;
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1185.
    return v5;
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SltiU, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1191.
    return v5;
}

// Generated as internal constructor for term rv_seqz.
pub fn constructor_rv_seqz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x1);
    let v3 = constructor_rv_sltiu(ctx, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 1197.
    return v3;
}

// Generated as internal constructor for term rv_addw.
pub fn constructor_rv_addw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Addw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1207.
    return v6;
}

// Generated as internal constructor for term rv_addiw.
pub fn constructor_rv_addiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Addiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1213.
    return v5;
}

// Generated as internal constructor for term rv_sextw.
pub fn constructor_rv_sextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::imm12_const(ctx, 0x0);
    let v3 = constructor_rv_addiw(ctx, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 1219.
    return v3;
}

// Generated as internal constructor for term rv_subw.
pub fn constructor_rv_subw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Subw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1225.
    return v6;
}

// Generated as internal constructor for term rv_sllw.
pub fn constructor_rv_sllw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sllw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1231.
    return v6;
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Slliw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1237.
    return v5;
}

// Generated as internal constructor for term rv_srlw.
pub fn constructor_rv_srlw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Srlw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1243.
    return v6;
}

// Generated as internal constructor for term rv_srliw.
pub fn constructor_rv_srliw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SrliW, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1249.
    return v5;
}

// Generated as internal constructor for term rv_sraw.
pub fn constructor_rv_sraw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Sraw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1255.
    return v6;
}

// Generated as internal constructor for term rv_sraiw.
pub fn constructor_rv_sraiw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sraiw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1261.
    return v5;
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mul, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1271.
    return v6;
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulh, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1277.
    return v6;
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulhu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1283.
    return v6;
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Div, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1289.
    return v6;
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::DivU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1295.
    return v6;
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rem, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1301.
    return v6;
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::RemU, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1307.
    return v6;
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Mulw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1316.
    return v6;
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1322.
    return v6;
}

// Generated as internal constructor for term rv_divuw.
pub fn constructor_rv_divuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Divuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1328.
    return v6;
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1334.
    return v6;
}

// Generated as internal constructor for term rv_remuw.
pub fn constructor_rv_remuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Remuw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1340.
    return v6;
}

// Generated as internal constructor for term rv_fadd.
pub fn constructor_rv_fadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1349.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FaddD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1350.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fadd", "src\\isa\\riscv64\\inst.isle line 1348"
    )
}

// Generated as internal constructor for term rv_fsub.
pub fn constructor_rv_fsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1354.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsubD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1355.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsub", "src\\isa\\riscv64\\inst.isle line 1353"
    )
}

// Generated as internal constructor for term rv_fmul.
pub fn constructor_rv_fmul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1359.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmulD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1360.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmul", "src\\isa\\riscv64\\inst.isle line 1358"
    )
}

// Generated as internal constructor for term rv_fdiv.
pub fn constructor_rv_fdiv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivS, F32, arg1, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1364.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg2);
            let v7 = C::freg_to_reg(ctx, arg3);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FdivD, F64, arg1, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1365.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fdiv", "src\\isa\\riscv64\\inst.isle line 1363"
    )
}

// Generated as internal constructor for term rv_fsqrt.
pub fn constructor_rv_fsqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg2);
            let v6 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtS, F32, arg1, v5);
            let v7 = C::freg_new(ctx, v6);
            // Rule at src\isa\riscv64\inst.isle line 1369.
            return v7;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rr(ctx, &FpuOPRR::FsqrtD, F64, arg1, v5);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 1370.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsqrt", "src\\isa\\riscv64\\inst.isle line 1368"
    )
}

// Generated as internal constructor for term rv_fmadd.
pub fn constructor_rv_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v10 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddS, F32, arg1, v7, v8, v9);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 1374.
            return v11;
        }
        F64 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v14 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmaddD, F64, arg1, v7, v8, v9);
            let v15 = C::freg_new(ctx, v14);
            // Rule at src\isa\riscv64\inst.isle line 1375.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmadd", "src\\isa\\riscv64\\inst.isle line 1373"
    )
}

// Generated as internal constructor for term rv_fmsub.
pub fn constructor_rv_fmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v10 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmsubS, F32, arg1, v7, v8, v9);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 1379.
            return v11;
        }
        F64 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v14 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FmsubD, F64, arg1, v7, v8, v9);
            let v15 = C::freg_new(ctx, v14);
            // Rule at src\isa\riscv64\inst.isle line 1380.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmsub", "src\\isa\\riscv64\\inst.isle line 1378"
    )
}

// Generated as internal constructor for term rv_fnmadd.
pub fn constructor_rv_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v10 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FnmaddS, F32, arg1, v7, v8, v9);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 1384.
            return v11;
        }
        F64 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v14 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FnmaddD, F64, arg1, v7, v8, v9);
            let v15 = C::freg_new(ctx, v14);
            // Rule at src\isa\riscv64\inst.isle line 1385.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fnmadd", "src\\isa\\riscv64\\inst.isle line 1383"
    )
}

// Generated as internal constructor for term rv_fnmsub.
pub fn constructor_rv_fnmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
    arg3: FReg,
    arg4: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v10 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FnmsubS, F32, arg1, v7, v8, v9);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 1389.
            return v11;
        }
        F64 => {
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = C::freg_to_reg(ctx, arg3);
            let v9 = C::freg_to_reg(ctx, arg4);
            let v14 = constructor_fpu_rrrr(ctx, &FpuOPRRRR::FnmsubD, F64, arg1, v7, v8, v9);
            let v15 = C::freg_new(ctx, v14);
            // Rule at src\isa\riscv64\inst.isle line 1390.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fnmsub", "src\\isa\\riscv64\\inst.isle line 1388"
    )
}

// Generated as internal constructor for term rv_fmvxw.
pub fn constructor_rv_fmvxw<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXW, I32, &FRM::RNE, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1394.
    return v6;
}

// Generated as internal constructor for term rv_fmvxd.
pub fn constructor_rv_fmvxd<C: Context>(ctx: &mut C, arg0: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvXD, I64, &FRM::RNE, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1398.
    return v6;
}

// Generated as internal constructor for term rv_fmvwx.
pub fn constructor_rv_fmvwx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvWX, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1402.
    return v6;
}

// Generated as internal constructor for term rv_fmvdx.
pub fn constructor_rv_fmvdx<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FmvDX, F64, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1406.
    return v6;
}

// Generated as internal constructor for term rv_fcvtds.
pub fn constructor_rv_fcvtds<C: Context>(ctx: &mut C, arg0: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDS, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1410.
    return v6;
}

// Generated as internal constructor for term rv_fcvtsd.
pub fn constructor_rv_fcvtsd<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> FReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSD, F64, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1414.
    return v6;
}

// Generated as internal constructor for term rv_fcvtsw.
pub fn constructor_rv_fcvtsw<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSw, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1418.
    return v6;
}

// Generated as internal constructor for term rv_fcvtswu.
pub fn constructor_rv_fcvtswu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSwU, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1422.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdw.
pub fn constructor_rv_fcvtdw<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDW, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1426.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdwu.
pub fn constructor_rv_fcvtdwu<C: Context>(ctx: &mut C, arg0: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDWU, F32, &FRM::RNE, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1430.
    return v6;
}

// Generated as internal constructor for term rv_fcvtsl.
pub fn constructor_rv_fcvtsl<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSL, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1434.
    return v6;
}

// Generated as internal constructor for term rv_fcvtslu.
pub fn constructor_rv_fcvtslu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtSLU, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1438.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdl.
pub fn constructor_rv_fcvtdl<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDL, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1442.
    return v6;
}

// Generated as internal constructor for term rv_fcvtdlu.
pub fn constructor_rv_fcvtdlu<C: Context>(ctx: &mut C, arg0: &FRM, arg1: XReg) -> FReg {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtDLu, F32, arg0, v4);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1446.
    return v6;
}

// Generated as internal constructor for term rv_fcvtws.
pub fn constructor_rv_fcvtws<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1450.
    return v6;
}

// Generated as internal constructor for term rv_fcvtls.
pub fn constructor_rv_fcvtls<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1454.
    return v6;
}

// Generated as internal constructor for term rv_fcvtwus.
pub fn constructor_rv_fcvtwus<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWuS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1458.
    return v6;
}

// Generated as internal constructor for term rv_fcvtlus.
pub fn constructor_rv_fcvtlus<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLuS, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1462.
    return v6;
}

// Generated as internal constructor for term rv_fcvtwd.
pub fn constructor_rv_fcvtwd<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1466.
    return v6;
}

// Generated as internal constructor for term rv_fcvtld.
pub fn constructor_rv_fcvtld<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1470.
    return v6;
}

// Generated as internal constructor for term rv_fcvtwud.
pub fn constructor_rv_fcvtwud<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtWuD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1474.
    return v6;
}

// Generated as internal constructor for term rv_fcvtlud.
pub fn constructor_rv_fcvtlud<C: Context>(ctx: &mut C, arg0: &FRM, arg1: FReg) -> XReg {
    let v4 = C::freg_to_reg(ctx, arg1);
    let v5 = constructor_fpu_rr(ctx, &FpuOPRR::FcvtLuD, I64, arg0, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1478.
    return v6;
}

// Generated as internal constructor for term rv_fcvtw.
pub fn constructor_rv_fcvtw<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1482.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwd(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1483.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtw", "src\\isa\\riscv64\\inst.isle line 1481"
    )
}

// Generated as internal constructor for term rv_fcvtl.
pub fn constructor_rv_fcvtl<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtls(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1487.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtld(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1488.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtl", "src\\isa\\riscv64\\inst.isle line 1486"
    )
}

// Generated as internal constructor for term rv_fcvtwu.
pub fn constructor_rv_fcvtwu<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtwus(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1492.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtwud(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1493.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtwu", "src\\isa\\riscv64\\inst.isle line 1491"
    )
}

// Generated as internal constructor for term rv_fcvtlu.
pub fn constructor_rv_fcvtlu<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtlus(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1497.
            return v3;
        }
        F64 => {
            let v4 = constructor_rv_fcvtlud(ctx, arg1, arg2);
            // Rule at src\isa\riscv64\inst.isle line 1498.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fcvtlu", "src\\isa\\riscv64\\inst.isle line 1496"
    )
}

// Generated as internal constructor for term rv_fsgnj.
pub fn constructor_rv_fsgnj<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjS, F32, &FRM::RNE, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1504.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjD, F64, &FRM::RNE, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1505.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnj", "src\\isa\\riscv64\\inst.isle line 1503"
    )
}

// Generated as internal constructor for term rv_fsgnjn.
pub fn constructor_rv_fsgnjn<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnS, F32, &FRM::RTZ, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1511.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjnD, F64, &FRM::RTZ, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1512.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjn", "src\\isa\\riscv64\\inst.isle line 1510"
    )
}

// Generated as internal constructor for term rv_fneg.
pub fn constructor_rv_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjn(ctx, arg0, arg1, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1517.
    return v2;
}

// Generated as internal constructor for term rv_fsgnjx.
pub fn constructor_rv_fsgnjx<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxS, F32, &FRM::RDN, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1523.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FsgnjxD, F64, &FRM::RDN, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1524.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fsgnjx", "src\\isa\\riscv64\\inst.isle line 1522"
    )
}

// Generated as internal constructor for term rv_fabs.
pub fn constructor_rv_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> FReg {
    let v2 = constructor_rv_fsgnjx(ctx, arg0, arg1, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1529.
    return v2;
}

// Generated as internal constructor for term rv_feq.
pub fn constructor_rv_feq<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqS, I64, &FRM::RDN, v6, v7);
            let v9 = C::xreg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1533.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FeqD, I64, &FRM::RDN, v6, v7);
            let v12 = C::xreg_new(ctx, v11);
            // Rule at src\isa\riscv64\inst.isle line 1534.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_feq", "src\\isa\\riscv64\\inst.isle line 1532"
    )
}

// Generated as internal constructor for term rv_flt.
pub fn constructor_rv_flt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltS, I64, &FRM::RTZ, v6, v7);
            let v9 = C::xreg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1538.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FltD, I64, &FRM::RTZ, v6, v7);
            let v12 = C::xreg_new(ctx, v11);
            // Rule at src\isa\riscv64\inst.isle line 1539.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_flt", "src\\isa\\riscv64\\inst.isle line 1537"
    )
}

// Generated as internal constructor for term rv_fle.
pub fn constructor_rv_fle<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleS, I64, &FRM::RNE, v6, v7);
            let v9 = C::xreg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1543.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v11 = constructor_fpu_rrr(ctx, &FpuOPRRR::FleD, I64, &FRM::RNE, v6, v7);
            let v12 = C::xreg_new(ctx, v11);
            // Rule at src\isa\riscv64\inst.isle line 1544.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fle", "src\\isa\\riscv64\\inst.isle line 1542"
    )
}

// Generated as internal constructor for term rv_fgt.
pub fn constructor_rv_fgt<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_flt(ctx, arg0, arg2, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1549.
    return v3;
}

// Generated as internal constructor for term rv_fge.
pub fn constructor_rv_fge<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> XReg {
    let v3 = constructor_rv_fle(ctx, arg0, arg2, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1554.
    return v3;
}

// Generated as internal constructor for term rv_fmin.
pub fn constructor_rv_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FminS, F32, &FRM::RNE, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1558.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FminD, F64, &FRM::RNE, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1559.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmin", "src\\isa\\riscv64\\inst.isle line 1557"
    )
}

// Generated as internal constructor for term rv_fmax.
pub fn constructor_rv_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmaxS, F32, &FRM::RTZ, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1563.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmaxD, F64, &FRM::RTZ, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1564.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmax", "src\\isa\\riscv64\\inst.isle line 1562"
    )
}

// Generated as internal constructor for term rv_fminm.
pub fn constructor_rv_fminm<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FminmS, F32, &FRM::RDN, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1570.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FminmD, F64, &FRM::RDN, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1571.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fminm", "src\\isa\\riscv64\\inst.isle line 1569"
    )
}

// Generated as internal constructor for term rv_fmaxm.
pub fn constructor_rv_fmaxm<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v8 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmaxmS, F32, &FRM::RUP, v6, v7);
            let v9 = C::freg_new(ctx, v8);
            // Rule at src\isa\riscv64\inst.isle line 1575.
            return v9;
        }
        F64 => {
            let v6 = C::freg_to_reg(ctx, arg1);
            let v7 = C::freg_to_reg(ctx, arg2);
            let v12 = constructor_fpu_rrr(ctx, &FpuOPRRR::FmaxmD, F64, &FRM::RUP, v6, v7);
            let v13 = C::freg_new(ctx, v12);
            // Rule at src\isa\riscv64\inst.isle line 1576.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fmaxm", "src\\isa\\riscv64\\inst.isle line 1574"
    )
}

// Generated as internal constructor for term rv_fround.
pub fn constructor_rv_fround<C: Context>(ctx: &mut C, arg0: Type, arg1: &FRM, arg2: FReg) -> FReg {
    match arg0 {
        F32 => {
            let v5 = C::freg_to_reg(ctx, arg2);
            let v6 = constructor_fpu_rr(ctx, &FpuOPRR::FroundS, F32, arg1, v5);
            let v7 = C::freg_new(ctx, v6);
            // Rule at src\isa\riscv64\inst.isle line 1580.
            return v7;
        }
        F64 => {
            let v5 = C::freg_to_reg(ctx, arg2);
            let v10 = constructor_fpu_rr(ctx, &FpuOPRR::FroundD, F64, arg1, v5);
            let v11 = C::freg_new(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 1581.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fround", "src\\isa\\riscv64\\inst.isle line 1579"
    )
}

// Generated as internal constructor for term rv_fli.
pub fn constructor_rv_fli<C: Context>(ctx: &mut C, arg0: Type, arg1: FliConstant) -> FReg {
    let v2 = constructor_temp_writable_freg(ctx);
    let v3 = C::writable_freg_to_writable_reg(ctx, v2);
    let v4 = MInst::Fli {
        ty: arg0,
        imm: arg1,
        rd: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_freg_to_freg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 1585.
    return v6;
}

// Generated as internal constructor for term rv_adduw.
pub fn constructor_rv_adduw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Adduw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1597.
    return v6;
}

// Generated as internal constructor for term rv_zextw.
pub fn constructor_rv_zextw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v1 = C::zero_reg(ctx);
    let v2 = constructor_rv_adduw(ctx, arg0, v1);
    // Rule at src\isa\riscv64\inst.isle line 1604.
    return v2;
}

// Generated as internal constructor for term rv_slliuw.
pub fn constructor_rv_slliuw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::SlliUw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1610.
    return v5;
}

// Generated as internal constructor for term rv_andn.
pub fn constructor_rv_andn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v2 = C::has_zbb(ctx);
    match v2 {
        true => {
            let v4 = C::xreg_to_reg(ctx, arg0);
            let v5 = C::xreg_to_reg(ctx, arg1);
            let v6 = constructor_alu_rrr(ctx, &AluOPRRR::Andn, v4, v5);
            let v7 = C::xreg_new(ctx, v6);
            // Rule at src\isa\riscv64\inst.isle line 1619.
            return v7;
        }
        false => {
            let v8 = constructor_rv_not(ctx, arg1);
            let v9 = constructor_rv_and(ctx, arg0, v8);
            // Rule at src\isa\riscv64\inst.isle line 1622.
            return v9;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_andn", "src\\isa\\riscv64\\inst.isle line 1618"
    )
}

// Generated as internal constructor for term rv_orn.
pub fn constructor_rv_orn<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Orn, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1629.
    return v6;
}

// Generated as internal constructor for term rv_xnor.
pub fn constructor_rv_xnor<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Xnor, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1635.
    return v6;
}

// Generated as internal constructor for term rv_clz.
pub fn constructor_rv_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1640.
    return v4;
}

// Generated as internal constructor for term rv_clzw.
pub fn constructor_rv_clzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Clzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1645.
    return v4;
}

// Generated as internal constructor for term rv_ctz.
pub fn constructor_rv_ctz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctz, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1650.
    return v4;
}

// Generated as internal constructor for term rv_ctzw.
pub fn constructor_rv_ctzw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Ctzw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1655.
    return v4;
}

// Generated as internal constructor for term rv_cpop.
pub fn constructor_rv_cpop<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpop, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1660.
    return v4;
}

// Generated as internal constructor for term rv_cpopw.
pub fn constructor_rv_cpopw<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Cpopw, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1665.
    return v4;
}

// Generated as internal constructor for term rv_max.
pub fn constructor_rv_max<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Max, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1670.
    return v6;
}

// Generated as internal constructor for term rv_maxu.
pub fn constructor_rv_maxu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Maxu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1675.
    return v6;
}

// Generated as internal constructor for term rv_min.
pub fn constructor_rv_min<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Min, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1680.
    return v6;
}

// Generated as internal constructor for term rv_minu.
pub fn constructor_rv_minu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Minu, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1685.
    return v6;
}

// Generated as internal constructor for term rv_sextb.
pub fn constructor_rv_sextb<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sextb, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1690.
    return v6;
}

// Generated as internal constructor for term rv_sexth.
pub fn constructor_rv_sexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Sexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1695.
    return v6;
}

// Generated as internal constructor for term rv_zexth.
pub fn constructor_rv_zexth<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::imm12_const(ctx, 0x0);
    let v5 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Zexth, v2, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1700.
    return v6;
}

// Generated as internal constructor for term rv_rol.
pub fn constructor_rv_rol<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rol, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1705.
    return v6;
}

// Generated as internal constructor for term rv_rolw.
pub fn constructor_rv_rolw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rolw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1710.
    return v6;
}

// Generated as internal constructor for term rv_ror.
pub fn constructor_rv_ror<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Ror, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1715.
    return v6;
}

// Generated as internal constructor for term rv_rorw.
pub fn constructor_rv_rorw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Rorw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1720.
    return v6;
}

// Generated as internal constructor for term rv_rori.
pub fn constructor_rv_rori<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Rori, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1725.
    return v5;
}

// Generated as internal constructor for term rv_roriw.
pub fn constructor_rv_roriw<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Roriw, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1730.
    return v5;
}

// Generated as internal constructor for term rv_rev8.
pub fn constructor_rv_rev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Rev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1735.
    return v4;
}

// Generated as internal constructor for term rv_brev8.
pub fn constructor_rv_brev8<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::xreg_to_reg(ctx, arg0);
    let v3 = constructor_alu_rr_funct12(ctx, &AluOPRRI::Brev8, v2);
    let v4 = C::xreg_new(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1743.
    return v4;
}

// Generated as internal constructor for term rv_bclr.
pub fn constructor_rv_bclr<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bclr, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1749.
    return v6;
}

// Generated as internal constructor for term rv_bclri.
pub fn constructor_rv_bclri<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bclri, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1753.
    return v5;
}

// Generated as internal constructor for term rv_bext.
pub fn constructor_rv_bext<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bext, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1757.
    return v6;
}

// Generated as internal constructor for term rv_bexti.
pub fn constructor_rv_bexti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bexti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1761.
    return v5;
}

// Generated as internal constructor for term rv_binv.
pub fn constructor_rv_binv<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Binv, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1765.
    return v6;
}

// Generated as internal constructor for term rv_binvi.
pub fn constructor_rv_binvi<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Binvi, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1769.
    return v5;
}

// Generated as internal constructor for term rv_bset.
pub fn constructor_rv_bset<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Bset, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1773.
    return v6;
}

// Generated as internal constructor for term rv_bseti.
pub fn constructor_rv_bseti<C: Context>(ctx: &mut C, arg0: XReg, arg1: Imm12) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = constructor_alu_rr_imm12(ctx, &AluOPRRI::Bseti, v3, arg1);
    let v5 = C::xreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 1778.
    return v5;
}

// Generated as internal constructor for term rv_pack.
pub fn constructor_rv_pack<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Pack, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1785.
    return v6;
}

// Generated as internal constructor for term rv_packw.
pub fn constructor_rv_packw<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::Packw, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1790.
    return v6;
}

// Generated as internal constructor for term rv_czero_eqz.
pub fn constructor_rv_czero_eqz<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::CzeroEqz, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1801.
    return v6;
}

// Generated as internal constructor for term rv_czero_nez.
pub fn constructor_rv_czero_nez<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> XReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = constructor_alu_rrr(ctx, &AluOPRRR::CzeroNez, v3, v4);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 1810.
    return v6;
}

// Generated as internal constructor for term rv_csrrwi.
pub fn constructor_rv_csrrwi<C: Context>(ctx: &mut C, arg0: &CSR, arg1: UImm5) -> XReg {
    let v3 = constructor_csr_imm(ctx, &CsrImmOP::CsrRWI, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1818.
    return v3;
}

// Generated as internal constructor for term rv_fsrmi.
pub fn constructor_rv_fsrmi<C: Context>(ctx: &mut C, arg0: &FRM) -> XReg {
    let v2 = C::frm_bits(ctx, arg0);
    let v3 = constructor_rv_csrrwi(ctx, &CSR::Frm, v2);
    // Rule at src\isa\riscv64\inst.isle line 1823.
    return v3;
}

// Generated as internal constructor for term rv_csrw.
pub fn constructor_rv_csrw<C: Context>(ctx: &mut C, arg0: &CSR, arg1: XReg) -> Unit {
    let v3 = constructor_csr_reg_dst_zero(ctx, &CsrRegOP::CsrRW, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 1829.
    return v3;
}

// Generated as internal constructor for term rv_fsrm.
pub fn constructor_rv_fsrm<C: Context>(ctx: &mut C, arg0: XReg) -> Unit {
    let v2 = constructor_rv_csrw(ctx, &CSR::Frm, arg0);
    // Rule at src\isa\riscv64\inst.isle line 1834.
    return v2;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        F32 => {
            if arg1 == 0x0 {
                let v2 = C::zero_reg(ctx);
                let v3 = C::xreg_to_reg(ctx, v2);
                let v6 = constructor_gen_bitcast(ctx, v3, I32, F32);
                // Rule at src\isa\riscv64\inst.isle line 1868.
                return v6;
            }
        }
        F64 => {
            if arg1 == 0x0 {
                let v2 = C::zero_reg(ctx);
                let v3 = C::xreg_to_reg(ctx, v2);
                let v9 = constructor_gen_bitcast(ctx, v3, I64, F64);
                // Rule at src\isa\riscv64\inst.isle line 1869.
                return v9;
            }
        }
        _ => {}
    }
    let v10 = C::ty_scalar_float(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::has_zfa(ctx);
        if v12 == true {
            let v13 = C::fli_constant_from_u64(ctx, v11, arg1);
            if let Some(v14) = v13 {
                let v15 = constructor_rv_fli(ctx, v11, v14);
                let v16 = C::freg_to_reg(ctx, v15);
                // Rule at src\isa\riscv64\inst.isle line 1872.
                return v16;
            }
            let v17 = C::fli_constant_from_negated_u64(ctx, v11, arg1);
            if let Some(v18) = v17 {
                let v19 = constructor_rv_fli(ctx, v11, v18);
                let v20 = constructor_rv_fneg(ctx, v11, v19);
                let v21 = C::freg_to_reg(ctx, v20);
                // Rule at src\isa\riscv64\inst.isle line 1882.
                return v21;
            }
        }
    }
    match arg0 {
        R32 => {
            let v22 = constructor_imm(ctx, I32, arg1);
            // Rule at src\isa\riscv64\inst.isle line 1892.
            return v22;
        }
        R64 => {
            let v24 = constructor_imm(ctx, I64, arg1);
            // Rule at src\isa\riscv64\inst.isle line 1893.
            return v24;
        }
        F32 => {
            let v22 = constructor_imm(ctx, I32, arg1);
            let v23 = constructor_gen_bitcast(ctx, v22, I32, F32);
            // Rule at src\isa\riscv64\inst.isle line 1888.
            return v23;
        }
        F64 => {
            let v24 = constructor_imm(ctx, I64, arg1);
            let v25 = constructor_gen_bitcast(ctx, v24, I64, F64);
            // Rule at src\isa\riscv64\inst.isle line 1889.
            return v25;
        }
        _ => {}
    }
    let v26 = C::ty_int(ctx, arg0);
    if let Some(v27) = v26 {
        let v28 = C::i64_sextend_u64(ctx, v27, arg1);
        let v29 = C::i64_generate_imm(ctx, v28);
        if let Some(v30) = v29 {
            let v33 = C::imm20_is_zero(ctx, v30.0);
            if let Some(v34) = v33 {
                let v2 = C::zero_reg(ctx);
                let v35 = constructor_rv_addi(ctx, v2, v30.1);
                let v36 = C::xreg_to_reg(ctx, v35);
                // Rule at src\isa\riscv64\inst.isle line 1896.
                return v36;
            }
            let v37 = C::imm12_is_zero(ctx, v30.1);
            if let Some(v38) = v37 {
                let v39 = constructor_rv_lui(ctx, v30.0);
                let v40 = C::xreg_to_reg(ctx, v39);
                // Rule at src\isa\riscv64\inst.isle line 1903.
                return v40;
            }
            let v39 = constructor_rv_lui(ctx, v30.0);
            let v41 = constructor_rv_addi(ctx, v39, v30.1);
            let v42 = C::xreg_to_reg(ctx, v41);
            // Rule at src\isa\riscv64\inst.isle line 1909.
            return v42;
        }
        let v43 = C::i64_shift_for_lui(ctx, v28);
        if let Some(v44) = v43 {
            let v47 = C::imm20_from_u64(ctx, v44.0);
            if let Some(v48) = v47 {
                let v49 = constructor_rv_lui(ctx, v48);
                let v50 = constructor_rv_slli(ctx, v49, v44.1);
                let v51 = C::xreg_to_reg(ctx, v50);
                // Rule at src\isa\riscv64\inst.isle line 1914.
                return v51;
            }
        }
        let v52 = C::i64_shift(ctx, v28);
        if let Some(v53) = v52 {
            let v56 = C::i64_generate_imm(ctx, v53.0);
            if let Some(v57) = v56 {
                let v60 = C::i64_as_u64(ctx, v53.0);
                let v61 = constructor_imm(ctx, v27, v60);
                let v62 = C::xreg_new(ctx, v61);
                let v63 = constructor_rv_slli(ctx, v62, v53.1);
                let v64 = C::xreg_to_reg(ctx, v63);
                // Rule at src\isa\riscv64\inst.isle line 1923.
                return v64;
            }
        }
        let v65 = C::emit_u64_le_const(ctx, arg1);
        let v66 = C::gen_const_amode(ctx, v65);
        let v68 = C::mem_flags_trusted(ctx);
        let v69 = constructor_gen_load(ctx, v66, &LoadOP::Ld, v68);
        // Rule at src\isa\riscv64\inst.isle line 1929.
        return v69;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src\\isa\\riscv64\\inst.isle line 1864"
    )
}

// Generated as internal constructor for term imm12_zero.
pub fn constructor_imm12_zero<C: Context>(ctx: &mut C) -> Imm12 {
    let v1 = C::imm12_const(ctx, 0x0);
    // Rule at src\isa\riscv64\inst.isle line 1938.
    return v1;
}

// Generated as internal constructor for term load_imm12.
pub fn constructor_load_imm12<C: Context>(ctx: &mut C, arg0: i32) -> Reg {
    let v1 = C::zero_reg(ctx);
    let v2 = C::imm12_const(ctx, arg0);
    let v3 = constructor_rv_addi(ctx, v1, v2);
    let v4 = C::xreg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 1945.
    return v4;
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        let v14 = Some(v13);
                        // Rule at src\isa\riscv64\inst.isle line 1975.
                        return v14;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term u64_to_imm12.
pub fn constructor_u64_to_imm12<C: Context>(ctx: &mut C, arg0: u64) -> Option<Imm12> {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = Some(v2);
        // Rule at src\isa\riscv64\inst.isle line 1986.
        return v3;
    }
    None
}

// Generated as internal constructor for term imm5_from_negated_value.
pub fn constructor_imm5_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::imm5_from_i64(ctx, v10);
                    if let Some(v12) = v11 {
                        let v13 = Some(v12);
                        // Rule at src\isa\riscv64\inst.isle line 2022.
                        return v13;
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term replicated_imm5.
pub fn constructor_replicated_imm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::i64_from_iconst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = C::imm5_from_i64(ctx, v7);
                        if let Some(v9) = v8 {
                            let v10 = Some(v9);
                            // Rule at src\isa\riscv64\inst.isle line 2028.
                            return v10;
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v11,
                constant_handle: v12,
            } => {
                if let &Opcode::Vconst = v11 {
                    let v13 = C::u128_from_constant(ctx, v12);
                    if let Some(v14) = v13 {
                        let v15 = C::u128_replicated_u64(ctx, v14);
                        if let Some(v16) = v15 {
                            let v17 = C::u64_replicated_u32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::u32_replicated_u16(ctx, v18);
                                if let Some(v20) = v19 {
                                    let v21 = C::u16_replicated_u8(ctx, v20);
                                    if let Some(v22) = v21 {
                                        let v23 = C::u8_as_i8(ctx, v22);
                                        let v24 = C::i8_to_imm5(ctx, v23);
                                        if let Some(v25) = v24 {
                                            let v26 = Some(v25);
                                            // Rule at src\isa\riscv64\inst.isle line 2029.
                                            return v26;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term negated_replicated_imm5.
pub fn constructor_negated_replicated_imm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = constructor_imm5_from_negated_value(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = Some(v7);
                        // Rule at src\isa\riscv64\inst.isle line 2039.
                        return v8;
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v9,
                constant_handle: v10,
            } => {
                if let &Opcode::Vconst = v9 {
                    let v11 = C::u128_from_constant(ctx, v10);
                    if let Some(v12) = v11 {
                        let v13 = C::u128_replicated_u64(ctx, v12);
                        if let Some(v14) = v13 {
                            let v15 = C::u64_replicated_u32(ctx, v14);
                            if let Some(v16) = v15 {
                                let v17 = C::u32_replicated_u16(ctx, v16);
                                if let Some(v18) = v17 {
                                    let v19 = C::u16_replicated_u8(ctx, v18);
                                    if let Some(v20) = v19 {
                                        let v21 = C::u8_as_i8(ctx, v20);
                                        let v22 = C::i8_neg(ctx, v21);
                                        let v23 = C::i8_to_imm5(ctx, v22);
                                        if let Some(v24) = v23 {
                                            let v25 = Some(v24);
                                            // Rule at src\isa\riscv64\inst.isle line 2042.
                                            return v25;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term replicated_uimm5.
pub fn constructor_replicated_uimm5<C: Context>(ctx: &mut C, arg0: Value) -> Option<UImm5> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Unary {
                opcode: ref v4,
                arg: v5,
            } => {
                if let &Opcode::Splat = v4 {
                    let v6 = C::def_inst(ctx, v5);
                    if let Some(v7) = v6 {
                        let v8 = &C::inst_data(ctx, v7);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v9,
                            imm: v10,
                        } = v8
                        {
                            if let &Opcode::Iconst = v9 {
                                let v11 = C::u64_from_imm64(ctx, v10);
                                let v12 = C::uimm5_from_u64(ctx, v11);
                                if let Some(v13) = v12 {
                                    let v14 = Some(v13);
                                    // Rule at src\isa\riscv64\inst.isle line 2054.
                                    return v14;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v15,
                constant_handle: v16,
            } => {
                if let &Opcode::Vconst = v15 {
                    let v17 = C::u128_from_constant(ctx, v16);
                    if let Some(v18) = v17 {
                        let v19 = C::u128_replicated_u64(ctx, v18);
                        if let Some(v20) = v19 {
                            let v21 = C::u64_replicated_u32(ctx, v20);
                            if let Some(v22) = v21 {
                                let v23 = C::u32_replicated_u16(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v25 = C::u16_replicated_u8(ctx, v24);
                                    if let Some(v26) = v25 {
                                        let v27 = C::uimm5_from_u8(ctx, v26);
                                        if let Some(v28) = v27 {
                                            let v29 = Some(v28);
                                            // Rule at src\isa\riscv64\inst.isle line 2055.
                                            return v29;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term u64_to_uimm5.
pub fn constructor_u64_to_uimm5<C: Context>(ctx: &mut C, arg0: u64) -> Option<UImm5> {
    let v1 = C::uimm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = Some(v2);
        // Rule at src\isa\riscv64\inst.isle line 2078.
        return v3;
    }
    None
}

// Generated as internal constructor for term canonical_nan_u64.
pub fn constructor_canonical_nan_u64<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src\isa\riscv64\inst.isle line 2087.
            return 0x7FC00000;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst.isle line 2088.
            return 0x7FF8000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "canonical_nan_u64", "src\\isa\\riscv64\\inst.isle line 2086"
    )
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg1);
    let v5 = MInst::FpuRR {
        alu_op: arg0.clone(),
        frm: arg2.clone(),
        rd: v4,
        rs: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2092.
    return v7;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(ctx: &mut C, arg0: &AluOPRRR, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRR {
        alu_op: arg0.clone(),
        rd: v4,
        rs1: arg1,
        rs2: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2099.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg1);
    let v6 = MInst::FpuRRR {
        alu_op: arg0.clone(),
        frm: arg2.clone(),
        rd: v5,
        rs1: arg3,
        rs2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 2106.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FpuOPRRRR,
    arg1: Type,
    arg2: &FRM,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, arg1);
    let v7 = MInst::FpuRRRR {
        alu_op: arg0.clone(),
        frm: arg2.clone(),
        rd: v6,
        rs1: arg3,
        rs2: arg4,
        rs3: arg5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src\isa\riscv64\inst.isle line 2113.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRI,
    arg1: Reg,
    arg2: Imm12,
) -> Reg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v4,
        rs: arg1,
        imm12: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2121.
    return v7;
}

// Generated as internal constructor for term alu_rr_funct12.
pub fn constructor_alu_rr_funct12<C: Context>(ctx: &mut C, arg0: &AluOPRRI, arg1: Reg) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = constructor_imm12_zero(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        rd: v3,
        rs: arg1,
        imm12: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = constructor_writable_xreg_to_reg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 2129.
    return v7;
}

// Generated as internal constructor for term rv_lui.
pub fn constructor_rv_lui<C: Context>(ctx: &mut C, arg0: Imm20) -> XReg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::Lui { rd: v2, imm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xreg_to_xreg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 2138.
    return v5;
}

// Generated as internal constructor for term csr_imm.
pub fn constructor_csr_imm<C: Context>(
    ctx: &mut C,
    arg0: &CsrImmOP,
    arg1: &CSR,
    arg2: UImm5,
) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = MInst::CsrImm {
        op: arg0.clone(),
        rd: v4,
        imm: arg2,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2145.
    return v7;
}

// Generated as internal constructor for term csr_reg_dst_zero.
pub fn constructor_csr_reg_dst_zero<C: Context>(
    ctx: &mut C,
    arg0: &CsrRegOP,
    arg1: &CSR,
    arg2: XReg,
) -> Unit {
    let v3 = C::writable_zero_reg(ctx);
    let v4 = C::xreg_to_reg(ctx, arg2);
    let v5 = MInst::CsrReg {
        op: arg0.clone(),
        rd: v3,
        rs: v4,
        csr: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    // Rule at src\isa\riscv64\inst.isle line 2152.
    return v6;
}

// Generated as internal constructor for term select_addi.
pub fn constructor_select_addi<C: Context>(ctx: &mut C, arg0: Type) -> AluOPRRI {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src\isa\riscv64\inst.isle line 2158.
        return AluOPRRI::Addiw;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src\isa\riscv64\inst.isle line 2159.
        return AluOPRRI::Addi;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_addi", "src\\isa\\riscv64\\inst.isle line 2157"
    )
}

// Generated as internal constructor for term gen_andi.
pub fn constructor_gen_andi<C: Context>(ctx: &mut C, arg0: XReg, arg1: u64) -> XReg {
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_rv_andi(ctx, arg0, v3);
        // Rule at src\isa\riscv64\inst.isle line 2163.
        return v4;
    }
    let v6 = constructor_imm(ctx, I64, arg1);
    let v7 = C::xreg_new(ctx, v6);
    let v8 = constructor_rv_and(ctx, arg0, v7);
    // Rule at src\isa\riscv64\inst.isle line 2166.
    return v8;
}

// Generated as internal constructor for term gen_or.
pub fn constructor_gen_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v11 = C::value_regs_get(ctx, arg1, 0x1);
        let v12 = C::xreg_new(ctx, v11);
        let v13 = C::value_regs_get(ctx, arg2, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v12, v14);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v16 = C::xreg_to_reg(ctx, v15);
        let v17 = C::value_regs(ctx, v9, v16);
        // Rule at src\isa\riscv64\inst.isle line 2171.
        return v17;
    }
    let v18 = C::fits_in_64(ctx, arg0);
    if let Some(v19) = v18 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v5 = C::xreg_new(ctx, v4);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v7 = C::xreg_new(ctx, v6);
        let v8 = constructor_rv_or(ctx, v5, v7);
        let v9 = C::xreg_to_reg(ctx, v8);
        let v20 = C::value_reg(ctx, v9);
        // Rule at src\isa\riscv64\inst.isle line 2176.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_or", "src\\isa\\riscv64\\inst.isle line 2170"
    )
}

// Generated as internal constructor for term lower_ctz.
pub fn constructor_lower_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::has_zbb(ctx);
    if v8 == true {
        match arg0 {
            I32 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v15 = constructor_rv_ctzw(ctx, v3);
                let v16 = C::xreg_to_reg(ctx, v15);
                // Rule at src\isa\riscv64\inst.isle line 2189.
                return v16;
            }
            I64 => {
                let v3 = C::xreg_new(ctx, arg1);
                let v17 = constructor_rv_ctz(ctx, v3);
                let v18 = C::xreg_to_reg(ctx, v17);
                // Rule at src\isa\riscv64\inst.isle line 2193.
                return v18;
            }
            _ => {}
        }
        let v6 = C::fits_in_16(ctx, arg0);
        if let Some(v7) = v6 {
            let v9 = C::ty_bits(ctx, v7);
            let v10 = C::u8_as_u64(ctx, v9);
            let v11 = constructor_gen_bseti(ctx, arg1, v10);
            let v12 = C::xreg_new(ctx, v11);
            let v13 = constructor_rv_ctzw(ctx, v12);
            let v14 = C::xreg_to_reg(ctx, v13);
            // Rule at src\isa\riscv64\inst.isle line 2184.
            return v14;
        }
    }
    let v3 = C::xreg_new(ctx, arg1);
    let v4 = constructor_gen_cltz(ctx, false, v3, arg0);
    let v5 = C::xreg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2181.
    return v5;
}

// Generated as internal constructor for term gen_cltz.
pub fn constructor_gen_cltz<C: Context>(ctx: &mut C, arg0: bool, arg1: XReg, arg2: Type) -> XReg {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v9 = C::xreg_to_reg(ctx, arg1);
    let v10 = MInst::Cltz {
        leading: arg0,
        sum: v6,
        step: v7,
        tmp: v8,
        rs: v9,
        ty: arg2,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_xreg_to_xreg(ctx, v5);
    // Rule at src\isa\riscv64\inst.isle line 2201.
    return v12;
}

// Generated as internal constructor for term zext.
pub fn constructor_zext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v25 = constructor_val_already_extended(ctx, &ExtendOp::Zero, arg0);
    if let Some(v26) = v25 {
        let v12 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src\isa\riscv64\inst.isle line 2245.
        return v12;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = constructor_put_in_xreg(ctx, arg0);
            let v14 = C::imm12_const(ctx, 0xFF);
            let v15 = constructor_rv_andi(ctx, v12, v14);
            // Rule at src\isa\riscv64\inst.isle line 2217.
            return v15;
        }
        I16 => {
            let v20 = C::has_zbb(ctx);
            if v20 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v21 = constructor_rv_zexth(ctx, v12);
                // Rule at src\isa\riscv64\inst.isle line 2234.
                return v21;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v18 = constructor_rv_packw(ctx, v12, v17);
                // Rule at src\isa\riscv64\inst.isle line 2224.
                return v18;
            }
        }
        I32 => {
            let v22 = C::has_zba(ctx);
            if v22 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v23 = constructor_rv_zextw(ctx, v12);
                // Rule at src\isa\riscv64\inst.isle line 2239.
                return v23;
            }
            let v16 = C::has_zbkb(ctx);
            if v16 == true {
                let v12 = constructor_put_in_xreg(ctx, arg0);
                let v17 = C::zero_reg(ctx);
                let v19 = constructor_rv_pack(ctx, v12, v17);
                // Rule at src\isa\riscv64\inst.isle line 2229.
                return v19;
            }
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srli(ctx, v10, v8);
        // Rule at src\isa\riscv64\inst.isle line 2212.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext", "src\\isa\\riscv64\\inst.isle line 2209"
    )
}

// Generated as internal constructor for term sext.
pub fn constructor_sext<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v18 = constructor_val_already_extended(ctx, &ExtendOp::Signed, arg0);
    if let Some(v19) = v18 {
        let v13 = constructor_put_in_xreg(ctx, arg0);
        // Rule at src\isa\riscv64\inst.isle line 2274.
        return v13;
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v14 = constructor_rv_sextb(ctx, v13);
                // Rule at src\isa\riscv64\inst.isle line 2258.
                return v14;
            }
        }
        I16 => {
            let v12 = C::has_zbb(ctx);
            if v12 == true {
                let v13 = constructor_put_in_xreg(ctx, arg0);
                let v15 = constructor_rv_sexth(ctx, v13);
                // Rule at src\isa\riscv64\inst.isle line 2263.
                return v15;
            }
        }
        I32 => {
            let v13 = constructor_put_in_xreg(ctx, arg0);
            let v16 = constructor_rv_sextw(ctx, v13);
            // Rule at src\isa\riscv64\inst.isle line 2269.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::ty_bits(ctx, v3);
        let v6 = C::u8_as_u64(ctx, v5);
        let v7 = C::u64_sub(ctx, 0x40, v6);
        let v8 = C::imm_from_bits(ctx, v7);
        let v9 = constructor_put_in_xreg(ctx, arg0);
        let v10 = constructor_rv_slli(ctx, v9, v8);
        let v11 = constructor_rv_srai(ctx, v10, v8);
        // Rule at src\isa\riscv64\inst.isle line 2253.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext", "src\\isa\\riscv64\\inst.isle line 2250"
    )
}

// Generated as internal constructor for term val_already_extended.
pub fn constructor_val_already_extended<C: Context>(
    ctx: &mut C,
    arg0: &ExtendOp,
    arg1: Value,
) -> Option<bool> {
    let v5 = C::def_inst(ctx, arg1);
    if let Some(v6) = v5 {
        let v7 = &C::inst_data(ctx, v6);
        match v7 {
            &InstructionData::Binary {
                opcode: ref v25,
                args: ref v26,
            } => {
                match v25 {
                    &Opcode::Iadd => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v4 = Some(true);
                                    // Rule at src\isa\riscv64\inst.isle line 2303.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Isub => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v4 = Some(true);
                                    // Rule at src\isa\riscv64\inst.isle line 2304.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v4 = Some(true);
                                    // Rule at src\isa\riscv64\inst.isle line 2300.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v4 = Some(true);
                                    // Rule at src\isa\riscv64\inst.isle line 2301.
                                    return v4;
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        if let &ExtendOp::Signed = arg0 {
                            let v22 = C::first_result(ctx, v6);
                            if let Some(v23) = v22 {
                                let v24 = C::value_type(ctx, v23);
                                if v24 == I32 {
                                    let v4 = Some(true);
                                    // Rule at src\isa\riscv64\inst.isle line 2302.
                                    return v4;
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::FloatCompare {
                opcode: ref v16,
                args: ref v17,
                cond: ref v18,
            } => {
                if let &Opcode::Fcmp = v16 {
                    let v4 = Some(true);
                    // Rule at src\isa\riscv64\inst.isle line 2293.
                    return v4;
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v10,
                args: ref v11,
                cond: ref v12,
            } => {
                if let &Opcode::Icmp = v10 {
                    let v4 = Some(true);
                    // Rule at src\isa\riscv64\inst.isle line 2292.
                    return v4;
                }
            }
            &InstructionData::Unary {
                opcode: ref v8,
                arg: v9,
            } => {
                match v8 {
                    &Opcode::Uextend => {
                        if let &ExtendOp::Zero = arg0 {
                            let v4 = Some(true);
                            // Rule at src\isa\riscv64\inst.isle line 2287.
                            return v4;
                        }
                    }
                    &Opcode::Sextend => {
                        if let &ExtendOp::Signed = arg0 {
                            let v4 = Some(true);
                            // Rule at src\isa\riscv64\inst.isle line 2288.
                            return v4;
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v4 = Some(true);
        // Rule at src\isa\riscv64\inst.isle line 2283.
        return v4;
    }
    None
}

// Generated as internal constructor for term lower_b128_binary.
pub fn constructor_lower_b128_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v4 = C::value_regs_get(ctx, arg1, 0x0);
    let v5 = C::value_regs_get(ctx, arg2, 0x0);
    let v6 = constructor_alu_rrr(ctx, arg0, v4, v5);
    let v7 = C::xreg_new(ctx, v6);
    let v9 = C::value_regs_get(ctx, arg1, 0x1);
    let v10 = C::value_regs_get(ctx, arg2, 0x1);
    let v11 = constructor_alu_rrr(ctx, arg0, v9, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = C::xreg_to_reg(ctx, v7);
    let v14 = C::xreg_to_reg(ctx, v12);
    let v15 = C::value_regs(ctx, v13, v14);
    // Rule at src\isa\riscv64\inst.isle line 2313.
    return v15;
}

// Generated as internal constructor for term lower_smlhi.
pub fn constructor_lower_smlhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    if arg0 == I64 {
        let v3 = constructor_rv_mulh(ctx, arg1, arg2);
        // Rule at src\isa\riscv64\inst.isle line 2322.
        return v3;
    }
    let v4 = constructor_rv_mul(ctx, arg1, arg2);
    let v5 = C::ty_bits(ctx, arg0);
    let v6 = C::u8_as_i32(ctx, v5);
    let v7 = C::imm12_const(ctx, v6);
    let v8 = constructor_rv_srli(ctx, v4, v7);
    // Rule at src\isa\riscv64\inst.isle line 2327.
    return v8;
}

// Generated as internal constructor for term gen_bseti.
pub fn constructor_gen_bseti<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    let v2 = C::has_zbs(ctx);
    match v2 {
        true => {
            let v13 = C::xreg_new(ctx, arg0);
            let v18 = C::u64_as_i32(ctx, arg1);
            let v19 = C::imm12_const(ctx, v18);
            let v20 = constructor_rv_bseti(ctx, v13, v19);
            let v21 = C::xreg_to_reg(ctx, v20);
            // Rule at src\isa\riscv64\inst.isle line 2351.
            return v21;
        }
        false => {
            let v4 = C::u64_le(ctx, arg1, 0xC);
            match v4 {
                true => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v14 = C::u64_as_i32(ctx, v7);
                    let v15 = C::imm12_const(ctx, v14);
                    let v16 = constructor_rv_ori(ctx, v13, v15);
                    let v17 = C::xreg_to_reg(ctx, v16);
                    // Rule at src\isa\riscv64\inst.isle line 2346.
                    return v17;
                }
                false => {
                    let v7 = C::u64_shl(ctx, 0x1, arg1);
                    let v8 = constructor_imm(ctx, I64, v7);
                    let v9 = C::xreg_new(ctx, v8);
                    let v10 = C::xreg_new(ctx, arg0);
                    let v11 = constructor_rv_or(ctx, v10, v9);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    // Rule at src\isa\riscv64\inst.isle line 2340.
                    return v12;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bseti", "src\\isa\\riscv64\\inst.isle line 2339"
    )
}

// Generated as internal constructor for term gen_popcnt.
pub fn constructor_gen_popcnt<C: Context>(ctx: &mut C, arg0: XReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v7 = C::xreg_to_reg(ctx, arg0);
    let v9 = MInst::Popcnt {
        sum: v4,
        step: v5,
        tmp: v6,
        rs: v7,
        ty: I64,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2357.
    return v11;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> AMode {
    let v3 = C::def_inst(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = &C::inst_data(ctx, v4);
        if let &InstructionData::Binary {
            opcode: ref v6,
            args: ref v7,
        } = v5
        {
            if let &Opcode::Iadd = v6 {
                let v8 = C::unpack_value_array_2(ctx, v7);
                let v16 = C::i32_from_iconst(ctx, v8.0);
                if let Some(v17) = v16 {
                    let v18 = C::s32_add_fallible(ctx, v17, arg1);
                    if let Some(v19) = v18 {
                        let v20 = constructor_amode_inner(ctx, v8.1, v19);
                        // Rule at src\isa\riscv64\inst.isle line 2399.
                        return v20;
                    }
                }
                let v11 = C::i32_from_iconst(ctx, v8.1);
                if let Some(v12) = v11 {
                    let v13 = C::s32_add_fallible(ctx, v12, arg1);
                    if let Some(v14) = v13 {
                        let v15 = constructor_amode_inner(ctx, v8.0, v14);
                        // Rule at src\isa\riscv64\inst.isle line 2396.
                        return v15;
                    }
                }
            }
        }
    }
    let v2 = constructor_amode_inner(ctx, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2389.
    return v2;
}

// Generated as internal constructor for term amode_inner.
pub fn constructor_amode_inner<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> AMode {
    let v8 = C::def_inst(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = &C::inst_data(ctx, v9);
        match v10 {
            &InstructionData::NullAry { opcode: ref v11 } => {
                match v11 {
                    &Opcode::GetFramePointer => {
                        let v6 = C::i32_as_i64(ctx, arg1);
                        let v12 = C::gen_fp_offset_amode(ctx, v6);
                        // Rule at src\isa\riscv64\inst.isle line 2412.
                        return v12;
                    }
                    &Opcode::GetStackPointer => {
                        let v6 = C::i32_as_i64(ctx, arg1);
                        let v13 = C::gen_sp_offset_amode(ctx, v6);
                        // Rule at src\isa\riscv64\inst.isle line 2416.
                        return v13;
                    }
                    _ => {}
                }
            }
            &InstructionData::StackLoad {
                opcode: ref v14,
                stack_slot: v15,
                offset: v16,
            } => {
                if let &Opcode::StackAddr = v14 {
                    let v17 = C::offset32_to_i32(ctx, v16);
                    let v18 = C::s32_add_fallible(ctx, v17, arg1);
                    if let Some(v19) = v18 {
                        let v20 = C::i32_as_i64(ctx, v19);
                        let v21 = C::gen_stack_slot_amode(ctx, v15, v20);
                        // Rule at src\isa\riscv64\inst.isle line 2420.
                        return v21;
                    }
                }
            }
            _ => {}
        }
    }
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::ty_addr64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v6 = C::i32_as_i64(ctx, arg1);
        let v7 = C::gen_reg_offset_amode(ctx, v5, v6);
        // Rule at src\isa\riscv64\inst.isle line 2408.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amode_inner", "src\\isa\\riscv64\\inst.isle line 2405"
    )
}

// Generated as internal constructor for term load_op_reg_type.
pub fn constructor_load_op_reg_type<C: Context>(ctx: &mut C, arg0: &LoadOP) -> Type {
    match arg0 {
        &LoadOP::Flw => {
            // Rule at src\isa\riscv64\inst.isle line 2446.
            return F64;
        }
        &LoadOP::Fld => {
            // Rule at src\isa\riscv64\inst.isle line 2445.
            return F64;
        }
        _ => {}
    }
    // Rule at src\isa\riscv64\inst.isle line 2447.
    return I64;
}

// Generated as internal constructor for term gen_load.
pub fn constructor_gen_load<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &LoadOP,
    arg2: MemFlags,
) -> Reg {
    let v3 = constructor_load_op_reg_type(ctx, arg1);
    let v4 = C::temp_writable_reg(ctx, v3);
    let v5 = MInst::Load {
        rd: v4,
        op: arg1.clone(),
        flags: arg2,
        from: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2451.
    return v7;
}

// Generated as internal constructor for term gen_sunk_load.
pub fn constructor_gen_sunk_load<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: AMode,
    arg2: &LoadOP,
    arg3: MemFlags,
) -> Reg {
    let v4 = C::sink_inst(ctx, arg0);
    let v5 = constructor_gen_load(ctx, arg1, arg2, arg3);
    // Rule at src\isa\riscv64\inst.isle line 2461.
    return v5;
}

// Generated as internal constructor for term gen_store.
pub fn constructor_gen_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: MemFlags,
    arg2: Value,
) -> InstOutput {
    let v4 = C::def_inst(ctx, arg2);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::u64_from_imm64(ctx, v8);
                if v9 == 0x0 {
                    let v3 = C::value_type(ctx, arg2);
                    let v10 = &C::store_op(ctx, v3);
                    let v11 = C::zero_reg(ctx);
                    let v12 = C::xreg_to_reg(ctx, v11);
                    let v13 = constructor_rv_store(ctx, arg0, v10, arg1, v12);
                    // Rule at src\isa\riscv64\inst.isle line 2472.
                    return v13;
                }
            }
        }
    }
    let v3 = C::value_type(ctx, arg2);
    let v10 = &C::store_op(ctx, v3);
    let v14 = C::put_in_reg(ctx, arg2);
    let v15 = constructor_rv_store(ctx, arg0, v10, arg1, v14);
    // Rule at src\isa\riscv64\inst.isle line 2475.
    return v15;
}

// Generated as internal constructor for term rv_store.
pub fn constructor_rv_store<C: Context>(
    ctx: &mut C,
    arg0: AMode,
    arg1: &StoreOP,
    arg2: MemFlags,
    arg3: Reg,
) -> InstOutput {
    let v4 = MInst::Store {
        to: arg0,
        op: arg1.clone(),
        flags: arg2,
        src: arg3,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    let v6 = constructor_side_effect(ctx, &v5);
    // Rule at src\isa\riscv64\inst.isle line 2483.
    return v6;
}

// Generated as internal constructor for term gen_atomic.
pub fn constructor_gen_atomic<C: Context>(
    ctx: &mut C,
    arg0: &AtomicOP,
    arg1: Reg,
    arg2: Reg,
    arg3: AMO,
) -> Reg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v6 = MInst::Atomic {
        op: arg0.clone(),
        rd: v5,
        addr: arg1,
        src: arg2,
        amo: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_xreg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst.isle line 2496.
    return v8;
}

// Generated as internal constructor for term get_atomic_rmw_op.
pub fn constructor_get_atomic_rmw_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwOp,
) -> AtomicOP {
    match arg0 {
        I32 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src\isa\riscv64\inst.isle line 2505.
                    return AtomicOP::AmoaddW;
                }
                &AtomicRmwOp::And => {
                    // Rule at src\isa\riscv64\inst.isle line 2512.
                    return AtomicOP::AmoandW;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src\isa\riscv64\inst.isle line 2520.
                    return AtomicOP::AmoorW;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src\isa\riscv64\inst.isle line 2528.
                    return AtomicOP::AmomaxW;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src\isa\riscv64\inst.isle line 2536.
                    return AtomicOP::AmominW;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src\isa\riscv64\inst.isle line 2544.
                    return AtomicOP::AmomaxuW;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src\isa\riscv64\inst.isle line 2553.
                    return AtomicOP::AmominuW;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src\isa\riscv64\inst.isle line 2561.
                    return AtomicOP::AmoswapW;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src\isa\riscv64\inst.isle line 2569.
                    return AtomicOP::AmoxorW;
                }
                _ => {}
            }
        }
        I64 => {
            match arg1 {
                &AtomicRmwOp::Add => {
                    // Rule at src\isa\riscv64\inst.isle line 2508.
                    return AtomicOP::AmoaddD;
                }
                &AtomicRmwOp::And => {
                    // Rule at src\isa\riscv64\inst.isle line 2516.
                    return AtomicOP::AmoandD;
                }
                &AtomicRmwOp::Or => {
                    // Rule at src\isa\riscv64\inst.isle line 2524.
                    return AtomicOP::AmoorD;
                }
                &AtomicRmwOp::Smax => {
                    // Rule at src\isa\riscv64\inst.isle line 2532.
                    return AtomicOP::AmomaxD;
                }
                &AtomicRmwOp::Smin => {
                    // Rule at src\isa\riscv64\inst.isle line 2540.
                    return AtomicOP::AmominD;
                }
                &AtomicRmwOp::Umax => {
                    // Rule at src\isa\riscv64\inst.isle line 2549.
                    return AtomicOP::AmomaxuD;
                }
                &AtomicRmwOp::Umin => {
                    // Rule at src\isa\riscv64\inst.isle line 2557.
                    return AtomicOP::AmominuD;
                }
                &AtomicRmwOp::Xchg => {
                    // Rule at src\isa\riscv64\inst.isle line 2565.
                    return AtomicOP::AmoswapD;
                }
                &AtomicRmwOp::Xor => {
                    // Rule at src\isa\riscv64\inst.isle line 2573.
                    return AtomicOP::AmoxorD;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_atomic_rmw_op", "src\\isa\\riscv64\\inst.isle line 2503"
    )
}

// Generated as internal constructor for term gen_atomic_load.
pub fn constructor_gen_atomic_load<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = MInst::AtomicLoad {
        rd: v3,
        ty: arg1,
        p: arg0,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src\isa\riscv64\inst.isle line 2582.
    return v6;
}

// Generated as internal constructor for term gen_atomic_store.
pub fn constructor_gen_atomic_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Type,
    arg2: Reg,
) -> InstOutput {
    let v3 = MInst::AtomicStore {
        src: arg2,
        ty: arg1,
        p: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    let v5 = constructor_side_effect(ctx, &v4);
    // Rule at src\isa\riscv64\inst.isle line 2591.
    return v5;
}

// Generated as internal constructor for term float_round_fcvt.
pub fn constructor_float_round_fcvt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FRM,
    arg2: FReg,
) -> FReg {
    match arg0 {
        F32 => {
            let v3 = constructor_rv_fcvtws(ctx, arg1, arg2);
            let v4 = constructor_rv_fcvtsw(ctx, arg1, v3);
            // Rule at src\isa\riscv64\inst.isle line 2599.
            return v4;
        }
        F64 => {
            let v5 = constructor_rv_fcvtld(ctx, arg1, arg2);
            let v6 = constructor_rv_fcvtdl(ctx, arg1, v5);
            // Rule at src\isa\riscv64\inst.isle line 2600.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_round_fcvt", "src\\isa\\riscv64\\inst.isle line 2598"
    )
}

// Generated as internal constructor for term gen_float_round.
pub fn constructor_gen_float_round<C: Context>(
    ctx: &mut C,
    arg0: &FRM,
    arg1: FReg,
    arg2: Type,
) -> FReg {
    let v19 = C::has_zfa(ctx);
    if v19 == true {
        let v20 = constructor_rv_fround(ctx, arg2, arg0, arg1);
        // Rule at src\isa\riscv64\inst.isle line 2625.
        return v20;
    }
    let v3 = constructor_float_int_max(ctx, arg2);
    let v4 = constructor_imm(ctx, arg2, v3);
    let v5 = C::freg_new(ctx, v4);
    let v6 = constructor_rv_fabs(ctx, arg2, arg1);
    let v7 = constructor_rv_flt(ctx, arg2, v6, v5);
    let v8 = constructor_float_round_fcvt(ctx, arg2, arg0, arg1);
    let v9 = constructor_rv_fsgnj(ctx, arg2, v8, arg1);
    let v10 = C::zero_reg(ctx);
    let v12 = constructor_float_int_of_same_size(ctx, arg2);
    let v11 = C::xreg_to_reg(ctx, v10);
    let v13 = constructor_gen_bitcast(ctx, v11, v12, arg2);
    let v14 = C::freg_new(ctx, v13);
    let v16 = constructor_rv_fadd(ctx, arg2, &FRM::RNE, arg1, v14);
    let v17 = constructor_cmp_eqz(ctx, v7);
    let v18 = constructor_gen_select_freg(ctx, v17, v16, v9);
    // Rule at src\isa\riscv64\inst.isle line 2603.
    return v18;
}

// Generated as internal constructor for term gen_select_xreg.
pub fn constructor_gen_select_xreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    let v7 = &C::intcc_without_eq(ctx, &v1.0);
    match v7 {
        &IntCC::SignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v12 = constructor_rv_max(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2651.
                        return v12;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v10 = constructor_rv_min(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2641.
                        return v10;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v11 = constructor_rv_maxu(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2646.
                        return v11;
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v8 = C::has_zbb(ctx);
            if v8 == true {
                if v1.1 == arg1 {
                    if v1.2 == arg2 {
                        let v9 = constructor_rv_minu(ctx, v1.1, v1.2);
                        // Rule at src\isa\riscv64\inst.isle line 2636.
                        return v9;
                    }
                }
            }
        }
        _ => {}
    }
    let v17 = C::has_zicond(ctx);
    if v17 == true {
        let v13 = C::is_zero_reg(ctx, v1.1);
        if let Some(v14) = v13 {
            let v15 = C::is_non_zero_reg(ctx, v1.2);
            if let Some(v16) = v15 {
                let v18 = &C::intcc_swap_args(ctx, &v1.0);
                let v19 = C::int_compare(ctx, v18, v1.2, v1.1);
                let v20 = constructor_gen_select_xreg(ctx, v19, arg1, arg2);
                // Rule at src\isa\riscv64\inst.isle line 2662.
                return v20;
            }
        }
        let v21 = C::is_zero_reg(ctx, arg1);
        if let Some(v22) = v21 {
            let v23 = C::is_non_zero_reg(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = &C::intcc_complement(ctx, &v1.0);
                let v26 = C::int_compare(ctx, v25, v1.1, v1.2);
                let v27 = constructor_gen_select_xreg(ctx, v26, arg2, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2666.
                return v27;
            }
        }
        match &v1.0 {
            &IntCC::Equal => {
                let v28 = C::is_zero_reg(ctx, v1.2);
                if let Some(v29) = v28 {
                    let v30 = C::is_zero_reg(ctx, arg2);
                    if let Some(v31) = v30 {
                        let v32 = constructor_rv_czero_nez(ctx, arg1, v1.1);
                        // Rule at src\isa\riscv64\inst.isle line 2670.
                        return v32;
                    }
                    let v32 = constructor_rv_czero_nez(ctx, arg1, v1.1);
                    let v34 = constructor_rv_czero_eqz(ctx, arg2, v1.1);
                    let v35 = constructor_rv_or(ctx, v32, v34);
                    // Rule at src\isa\riscv64\inst.isle line 2678.
                    return v35;
                }
            }
            &IntCC::NotEqual => {
                let v28 = C::is_zero_reg(ctx, v1.2);
                if let Some(v29) = v28 {
                    let v30 = C::is_zero_reg(ctx, arg2);
                    if let Some(v31) = v30 {
                        let v33 = constructor_rv_czero_eqz(ctx, arg1, v1.1);
                        // Rule at src\isa\riscv64\inst.isle line 2674.
                        return v33;
                    }
                    let v33 = constructor_rv_czero_eqz(ctx, arg1, v1.1);
                    let v36 = constructor_rv_czero_nez(ctx, arg2, v1.1);
                    let v37 = constructor_rv_or(ctx, v33, v36);
                    // Rule at src\isa\riscv64\inst.isle line 2684.
                    return v37;
                }
            }
            _ => {}
        }
        let v38 = constructor_lower_int_compare(ctx, arg0);
        let v39 = constructor_cmp_nez(ctx, v38);
        let v40 = constructor_gen_select_xreg(ctx, v39, arg1, arg2);
        // Rule at src\isa\riscv64\inst.isle line 2692.
        return v40;
    }
    let v41 = constructor_temp_writable_xreg(ctx);
    let v42 = C::writable_xreg_to_writable_reg(ctx, v41);
    let v43 = C::writable_value_reg(ctx, v42);
    let v44 = C::xreg_to_reg(ctx, arg1);
    let v45 = C::value_reg(ctx, v44);
    let v46 = C::xreg_to_reg(ctx, arg2);
    let v47 = C::value_reg(ctx, v46);
    let v48 = MInst::Select {
        dst: v43,
        condition: arg0,
        x: v45,
        y: v47,
    };
    let v49 = C::emit(ctx, &v48);
    let v50 = C::writable_reg_to_reg(ctx, v42);
    let v51 = C::xreg_new(ctx, v50);
    // Rule at src\isa\riscv64\inst.isle line 2698.
    return v51;
}

// Generated as internal constructor for term gen_select_vreg.
pub fn constructor_gen_select_vreg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: VReg,
    arg2: VReg,
) -> VReg {
    let v3 = constructor_temp_writable_vreg(ctx);
    let v4 = C::writable_vreg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::vreg_new(ctx, v12);
    // Rule at src\isa\riscv64\inst.isle line 2706.
    return v13;
}

// Generated as internal constructor for term gen_select_freg.
pub fn constructor_gen_select_freg<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: FReg,
    arg2: FReg,
) -> FReg {
    let v3 = constructor_temp_writable_freg(ctx);
    let v4 = C::writable_freg_to_writable_reg(ctx, v3);
    let v5 = C::writable_value_reg(ctx, v4);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = C::value_reg(ctx, v6);
    let v8 = C::freg_to_reg(ctx, arg2);
    let v9 = C::value_reg(ctx, v8);
    let v10 = MInst::Select {
        dst: v5,
        condition: arg0,
        x: v7,
        y: v9,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_reg_to_reg(ctx, v4);
    let v13 = C::freg_new(ctx, v12);
    // Rule at src\isa\riscv64\inst.isle line 2712.
    return v13;
}

// Generated as internal constructor for term gen_select_regs.
pub fn constructor_gen_select_regs<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v4 = C::writable_xreg_to_writable_reg(ctx, v3);
    let v6 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v7 = C::writable_value_regs(ctx, v4, v6);
    let v8 = MInst::Select {
        dst: v7,
        condition: arg0,
        x: arg1,
        y: arg2,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v4);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src\isa\riscv64\inst.isle line 2718.
    return v12;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> InstOutput {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    let v3 = constructor_side_effect(ctx, &v2);
    // Rule at src\isa\riscv64\inst.isle line 2727.
    return v3;
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_external_name(ctx, arg0);
    let v4 = MInst::ElfTlsGetAddr { rd: v2, name: v3 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 2742.
    return v6;
}

// Generated as internal constructor for term lower_float_binary.
pub fn constructor_lower_float_binary<C: Context>(
    ctx: &mut C,
    arg0: &AluOPRRR,
    arg1: FReg,
    arg2: FReg,
    arg3: Type,
) -> FReg {
    let v4 = constructor_move_f_to_x(ctx, arg1, arg3);
    let v5 = constructor_move_f_to_x(ctx, arg2, arg3);
    let v6 = C::xreg_to_reg(ctx, v4);
    let v7 = C::xreg_to_reg(ctx, v5);
    let v8 = constructor_alu_rrr(ctx, arg0, v6, v7);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_float_int_of_same_size(ctx, arg3);
    let v11 = constructor_move_x_to_f(ctx, v9, v10);
    // Rule at src\isa\riscv64\inst.isle line 2753.
    return v11;
}

// Generated as internal constructor for term i128_sub.
pub fn constructor_i128_sub<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v4 = C::xreg_new(ctx, v3);
    let v5 = C::value_regs_get(ctx, arg1, 0x0);
    let v6 = C::xreg_new(ctx, v5);
    let v7 = constructor_rv_sub(ctx, v4, v6);
    let v8 = C::value_regs_get(ctx, arg0, 0x0);
    let v9 = C::xreg_new(ctx, v8);
    let v10 = constructor_rv_sltu(ctx, v9, v7);
    let v12 = C::value_regs_get(ctx, arg0, 0x1);
    let v13 = C::xreg_new(ctx, v12);
    let v14 = C::value_regs_get(ctx, arg1, 0x1);
    let v15 = C::xreg_new(ctx, v14);
    let v16 = constructor_rv_sub(ctx, v13, v15);
    let v17 = constructor_rv_sub(ctx, v16, v10);
    let v18 = C::xreg_to_reg(ctx, v7);
    let v19 = C::xreg_to_reg(ctx, v17);
    let v20 = C::value_regs(ctx, v18, v19);
    // Rule at src\isa\riscv64\inst.isle line 2762.
    return v20;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: IntegerCompare,
    arg1: CondBrTarget,
    arg2: CondBrTarget,
) -> SideEffectNoResult {
    let v3 = MInst::CondBr {
        taken: arg1,
        not_taken: arg2,
        kind: arg0,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src\isa\riscv64\inst.isle line 2776.
    return v4;
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jal { label: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src\isa\riscv64\inst.isle line 2782.
    return v2;
}

// Generated as internal constructor for term cmp_eqz.
pub fn constructor_cmp_eqz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 2798.
    return v3;
}

// Generated as internal constructor for term cmp_nez.
pub fn constructor_cmp_nez<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 2801.
    return v3;
}

// Generated as internal constructor for term cmp_eq.
pub fn constructor_cmp_eq<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::Equal, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2804.
    return v3;
}

// Generated as internal constructor for term cmp_ne.
pub fn constructor_cmp_ne<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::NotEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2807.
    return v3;
}

// Generated as internal constructor for term cmp_lt.
pub fn constructor_cmp_lt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2810.
    return v3;
}

// Generated as internal constructor for term cmp_ltz.
pub fn constructor_cmp_ltz<C: Context>(ctx: &mut C, arg0: XReg) -> IntegerCompare {
    let v2 = C::zero_reg(ctx);
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThan, arg0, v2);
    // Rule at src\isa\riscv64\inst.isle line 2813.
    return v3;
}

// Generated as internal constructor for term cmp_gt.
pub fn constructor_cmp_gt<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2816.
    return v3;
}

// Generated as internal constructor for term cmp_ge.
pub fn constructor_cmp_ge<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2819.
    return v3;
}

// Generated as internal constructor for term cmp_le.
pub fn constructor_cmp_le<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::SignedLessThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2822.
    return v3;
}

// Generated as internal constructor for term cmp_gtu.
pub fn constructor_cmp_gtu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2825.
    return v3;
}

// Generated as internal constructor for term cmp_geu.
pub fn constructor_cmp_geu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedGreaterThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2828.
    return v3;
}

// Generated as internal constructor for term cmp_ltu.
pub fn constructor_cmp_ltu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThan, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2831.
    return v3;
}

// Generated as internal constructor for term cmp_leu.
pub fn constructor_cmp_leu<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg) -> IntegerCompare {
    let v3 = C::int_compare(ctx, &IntCC::UnsignedLessThanOrEqual, arg0, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2834.
    return v3;
}

// Generated as internal constructor for term is_nonzero_cmp.
pub fn constructor_is_nonzero_cmp<C: Context>(ctx: &mut C, arg0: Value) -> IntegerCompare {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v33,
                    args: ref v34,
                    cond: ref v35,
                } => {
                    if let &Opcode::Fcmp = v33 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let v40 = constructor_put_in_freg(ctx, v36.0);
                        let v41 = constructor_put_in_freg(ctx, v36.1);
                        let v39 = C::value_type(ctx, v36.0);
                        let v42 = &constructor_fcmp_to_float_compare(ctx, v35, v39, v40, v41);
                        let v43 = constructor_float_to_int_compare(ctx, v42);
                        // Rule at src\isa\riscv64\inst.isle line 2865.
                        return v43;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v26 = C::unpack_value_array_2(ctx, v24);
                        let v29 = C::value_type(ctx, v26.1);
                        let v30 = C::fits_in_64(ctx, v29);
                        if let Some(v31) = v30 {
                            let v32 = constructor_icmp_to_int_compare(ctx, v25, v26.0, v26.1);
                            // Rule at src\isa\riscv64\inst.isle line 2863.
                            return v32;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I8 => {
            let v6 = constructor_zext(ctx, arg0);
            let v7 = constructor_cmp_nez(ctx, v6);
            // Rule at src\isa\riscv64\inst.isle line 2855.
            return v7;
        }
        I128 => {
            let v8 = C::put_in_regs(ctx, arg0);
            let v10 = C::value_regs_get(ctx, v8, 0x0);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::put_in_regs(ctx, arg0);
            let v14 = C::value_regs_get(ctx, v12, 0x1);
            let v15 = C::xreg_new(ctx, v14);
            let v16 = constructor_rv_or(ctx, v11, v15);
            let v17 = constructor_cmp_nez(ctx, v16);
            // Rule at src\isa\riscv64\inst.isle line 2857.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_cmp_nez(ctx, v4);
        // Rule at src\isa\riscv64\inst.isle line 2853.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_nonzero_cmp", "src\\isa\\riscv64\\inst.isle line 2842"
    )
}

// Generated as internal constructor for term icmp_to_int_compare.
pub fn constructor_icmp_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IntegerCompare {
    let v3 = C::value_type(ctx, arg2);
    if v3 == I128 {
        let v9 = C::put_in_regs(ctx, arg1);
        let v10 = C::put_in_regs(ctx, arg2);
        let v11 = constructor_lower_icmp_i128(ctx, arg0, v9, v10);
        let v12 = constructor_cmp_nez(ctx, v11);
        // Rule at src\isa\riscv64\inst.isle line 2879.
        return v12;
    }
    let v4 = C::fits_in_64(ctx, v3);
    if let Some(v5) = v4 {
        let v6 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg1);
        let v7 = constructor_put_value_in_reg_for_icmp(ctx, arg0, arg2);
        let v8 = C::int_compare(ctx, arg0, v6, v7);
        // Rule at src\isa\riscv64\inst.isle line 2877.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_to_int_compare", "src\\isa\\riscv64\\inst.isle line 2876"
    )
}

// Generated as internal constructor for term put_value_in_reg_for_icmp.
pub fn constructor_put_value_in_reg_for_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
) -> XReg {
    let v9 = C::i64_from_iconst(ctx, arg1);
    if let Some(v10) = v9 {
        if v10 == 0x0 {
            let v11 = C::zero_reg(ctx);
            // Rule at src\isa\riscv64\inst.isle line 2909.
            return v11;
        }
    }
    match arg0 {
        &IntCC::Equal => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2903.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2899.
                return v5;
            }
        }
        &IntCC::NotEqual => {
            let v6 = C::value_type(ctx, arg1);
            if v6 == I8 {
                let v2 = constructor_zext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2905.
                return v2;
            }
            let v7 = C::fits_in_64(ctx, v6);
            if let Some(v8) = v7 {
                let v5 = constructor_sext(ctx, arg1);
                // Rule at src\isa\riscv64\inst.isle line 2901.
                return v5;
            }
        }
        _ => {}
    }
    let v3 = &C::signed_cond_code(ctx, arg0);
    if let Some(v4) = v3 {
        let v5 = constructor_sext(ctx, arg1);
        // Rule at src\isa\riscv64\inst.isle line 2892.
        return v5;
    }
    let v2 = constructor_zext(ctx, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2890.
    return v2;
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v26,
            arg: v27,
            table: v28,
        } => {
            if let &Opcode::BrTable = v26 {
                let v29 = C::put_in_reg(ctx, v27);
                let v30 = C::lower_br_table(ctx, v29, arg1);
                let v31 = Some(v30);
                // Rule at src\isa\riscv64\inst.isle line 2923.
                return v31;
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v16 = C::two_targets(ctx, arg1);
                if let Some(v17) = v16 {
                    let v20 = constructor_is_nonzero_cmp(ctx, v11);
                    let v21 = C::label_to_br_target(ctx, v17.0);
                    let v22 = C::label_to_br_target(ctx, v17.1);
                    let v23 = &constructor_cond_br(ctx, v20, v21, v22);
                    let v24 = constructor_emit_side_effect(ctx, v23);
                    let v25 = Some(v24);
                    // Rule at src\isa\riscv64\inst.isle line 2917.
                    return v25;
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_rv_j(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src\isa\riscv64\inst.isle line 2914.
                    return v9;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term gen_bitcast.
pub fn constructor_gen_bitcast<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type, arg2: Type) -> Reg {
    let v5 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v6) = v5 {
        let v2 = C::ty_scalar_float(ctx, arg1);
        if let Some(v3) = v2 {
            let v7 = C::freg_new(ctx, arg0);
            let v8 = C::vstate_from_type(ctx, v3);
            let v9 = constructor_rv_vfmv_sf(ctx, v7, v8);
            let v10 = C::vreg_to_reg(ctx, v9);
            // Rule at src\isa\riscv64\inst.isle line 2933.
            return v10;
        }
        let v11 = C::ty_int_ref_scalar_64_extract(ctx, arg1);
        if let Some(v12) = v11 {
            let v13 = C::xreg_new(ctx, arg0);
            let v14 = C::vstate_from_type(ctx, v12);
            let v15 = constructor_rv_vmv_sx(ctx, v13, v14);
            let v16 = C::vreg_to_reg(ctx, v15);
            // Rule at src\isa\riscv64\inst.isle line 2934.
            return v16;
        }
    }
    let v17 = C::ty_vec_fits_in_register(ctx, arg1);
    if let Some(v18) = v17 {
        let v19 = C::ty_scalar_float(ctx, arg2);
        if let Some(v20) = v19 {
            let v21 = C::vreg_new(ctx, arg0);
            let v22 = C::vstate_from_type(ctx, v20);
            let v23 = constructor_rv_vfmv_fs(ctx, v21, v22);
            let v24 = C::freg_to_reg(ctx, v23);
            // Rule at src\isa\riscv64\inst.isle line 2935.
            return v24;
        }
        let v25 = C::ty_int_ref_scalar_64_extract(ctx, arg2);
        if let Some(v26) = v25 {
            let v21 = C::vreg_new(ctx, arg0);
            let v27 = C::vstate_from_type(ctx, v26);
            let v28 = constructor_rv_vmv_xs(ctx, v21, v27);
            let v29 = C::xreg_to_reg(ctx, v28);
            // Rule at src\isa\riscv64\inst.isle line 2936.
            return v29;
        }
    }
    match arg1 {
        I32 => {
            if arg2 == F32 {
                let v13 = C::xreg_new(ctx, arg0);
                let v34 = constructor_rv_fmvwx(ctx, v13);
                let v35 = C::freg_to_reg(ctx, v34);
                // Rule at src\isa\riscv64\inst.isle line 2939.
                return v35;
            }
        }
        I64 => {
            match arg2 {
                R64 => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v39 = constructor_copy_reg(ctx, v13, I64);
                    let v40 = C::xreg_to_reg(ctx, v39);
                    // Rule at src\isa\riscv64\inst.isle line 2941.
                    return v40;
                }
                F64 => {
                    let v13 = C::xreg_new(ctx, arg0);
                    let v36 = constructor_rv_fmvdx(ctx, v13);
                    let v37 = C::freg_to_reg(ctx, v36);
                    // Rule at src\isa\riscv64\inst.isle line 2940.
                    return v37;
                }
                _ => {}
            }
        }
        R64 => {
            if arg2 == I64 {
                let v13 = C::xreg_new(ctx, arg0);
                let v39 = constructor_copy_reg(ctx, v13, I64);
                let v40 = C::xreg_to_reg(ctx, v39);
                // Rule at src\isa\riscv64\inst.isle line 2942.
                return v40;
            }
        }
        F32 => {
            if arg2 == I32 {
                let v7 = C::freg_new(ctx, arg0);
                let v30 = constructor_rv_fmvxw(ctx, v7);
                let v31 = C::xreg_to_reg(ctx, v30);
                // Rule at src\isa\riscv64\inst.isle line 2937.
                return v31;
            }
        }
        F64 => {
            if arg2 == I64 {
                let v7 = C::freg_new(ctx, arg0);
                let v32 = constructor_rv_fmvxd(ctx, v7);
                let v33 = C::xreg_to_reg(ctx, v32);
                // Rule at src\isa\riscv64\inst.isle line 2938.
                return v33;
            }
        }
        _ => {}
    }
    // Rule at src\isa\riscv64\inst.isle line 2943.
    return arg0;
}

// Generated as internal constructor for term move_f_to_x.
pub fn constructor_move_f_to_x<C: Context>(ctx: &mut C, arg0: FReg, arg1: Type) -> XReg {
    match arg1 {
        F32 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, F32, I32);
            let v6 = C::xreg_new(ctx, v5);
            // Rule at src\isa\riscv64\inst.isle line 2946.
            return v6;
        }
        F64 => {
            let v2 = C::freg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, F64, I64);
            let v10 = C::xreg_new(ctx, v9);
            // Rule at src\isa\riscv64\inst.isle line 2947.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_f_to_x", "src\\isa\\riscv64\\inst.isle line 2945"
    )
}

// Generated as internal constructor for term move_x_to_f.
pub fn constructor_move_x_to_f<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> FReg {
    match arg1 {
        I32 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v5 = constructor_gen_bitcast(ctx, v2, I32, F32);
            let v6 = C::freg_new(ctx, v5);
            // Rule at src\isa\riscv64\inst.isle line 2950.
            return v6;
        }
        I64 => {
            let v2 = C::xreg_to_reg(ctx, arg0);
            let v9 = constructor_gen_bitcast(ctx, v2, I64, F64);
            let v10 = C::freg_new(ctx, v9);
            // Rule at src\isa\riscv64\inst.isle line 2951.
            return v10;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "move_x_to_f", "src\\isa\\riscv64\\inst.isle line 2949"
    )
}

// Generated as internal constructor for term float_int_of_same_size.
pub fn constructor_float_int_of_same_size<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        F32 => {
            // Rule at src\isa\riscv64\inst.isle line 2954.
            return I32;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst.isle line 2955.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_of_same_size", "src\\isa\\riscv64\\inst.isle line 2953"
    )
}

// Generated as internal constructor for term gen_brev8.
pub fn constructor_gen_brev8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v2 = C::has_zbkb(ctx);
    match v2 {
        true => {
            let v3 = C::xreg_new(ctx, arg0);
            let v4 = constructor_rv_brev8(ctx, v3);
            let v5 = C::xreg_to_reg(ctx, v4);
            // Rule at src\isa\riscv64\inst.isle line 2959.
            return v5;
        }
        false => {
            let v6 = constructor_temp_writable_xreg(ctx);
            let v7 = constructor_temp_writable_xreg(ctx);
            let v8 = constructor_temp_writable_xreg(ctx);
            let v9 = constructor_temp_writable_xreg(ctx);
            let v10 = C::writable_xreg_to_writable_reg(ctx, v8);
            let v11 = C::writable_xreg_to_writable_reg(ctx, v6);
            let v12 = C::writable_xreg_to_writable_reg(ctx, v7);
            let v13 = C::writable_xreg_to_writable_reg(ctx, v9);
            let v14 = MInst::Brev8 {
                rs: arg0,
                ty: arg1,
                step: v10,
                tmp: v11,
                tmp2: v12,
                rd: v13,
            };
            let v15 = C::emit(ctx, &v14);
            let v16 = C::writable_reg_to_reg(ctx, v13);
            // Rule at src\isa\riscv64\inst.isle line 2964.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_brev8", "src\\isa\\riscv64\\inst.isle line 2958"
    )
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: ValueRegs) -> ValueRegs {
    if arg0 == I128 {
        let v12 = constructor_value_regs_zero(ctx);
        let v13 = constructor_i128_sub(ctx, v12, arg1);
        // Rule at src\isa\riscv64\inst.isle line 2981.
        return v13;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::value_regs_get(ctx, arg1, 0x0);
            let v8 = C::xreg_new(ctx, v7);
            let v9 = constructor_rv_neg(ctx, v8);
            let v10 = C::xreg_to_reg(ctx, v9);
            let v11 = C::value_reg(ctx, v10);
            // Rule at src\isa\riscv64\inst.isle line 2977.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg", "src\\isa\\riscv64\\inst.isle line 2976"
    )
}

// Generated as internal constructor for term gen_trapif.
pub fn constructor_gen_trapif<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: XReg,
    arg2: XReg,
    arg3: &TrapCode,
) -> InstOutput {
    let v4 = C::xreg_to_reg(ctx, arg1);
    let v5 = C::xreg_to_reg(ctx, arg2);
    let v6 = MInst::TrapIf {
        rs1: v4,
        rs2: v5,
        cc: arg0.clone(),
        trap_code: arg3.clone(),
    };
    let v7 = SideEffectNoResult::Inst { inst: v6 };
    let v8 = constructor_side_effect(ctx, &v7);
    // Rule at src\isa\riscv64\inst.isle line 2987.
    return v8;
}

// Generated as internal constructor for term gen_trapnz.
pub fn constructor_gen_trapnz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::NotEqual, arg0, v3, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2992.
    return v4;
}

// Generated as internal constructor for term gen_trapz.
pub fn constructor_gen_trapz<C: Context>(ctx: &mut C, arg0: XReg, arg1: &TrapCode) -> InstOutput {
    let v3 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(ctx, &IntCC::Equal, arg0, v3, arg1);
    // Rule at src\isa\riscv64\inst.isle line 2997.
    return v4;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(ctx: &mut C, arg0: XReg, arg1: XReg, arg2: XReg) -> XReg {
    let v3 = constructor_rv_mul(ctx, arg0, arg1);
    let v4 = constructor_rv_add(ctx, v3, arg2);
    // Rule at src\isa\riscv64\inst.isle line 3011.
    return v4;
}

// Generated as internal constructor for term gen_bmask.
pub fn constructor_gen_bmask<C: Context>(ctx: &mut C, arg0: Value) -> XReg {
    let v18 = C::maybe_uextend(ctx, arg0);
    if let Some(v19) = v18 {
        let v20 = C::def_inst(ctx, v19);
        if let Some(v21) = v20 {
            let v22 = &C::inst_data(ctx, v21);
            match v22 {
                &InstructionData::FloatCompare {
                    opcode: ref v31,
                    args: ref v32,
                    cond: ref v33,
                } => {
                    if let &Opcode::Fcmp = v31 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src\isa\riscv64\inst.isle line 3035.
                        return v30;
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v23,
                    args: ref v24,
                    cond: ref v25,
                } => {
                    if let &Opcode::Icmp = v23 {
                        let v29 = constructor_put_in_xreg(ctx, arg0);
                        let v30 = constructor_rv_neg(ctx, v29);
                        // Rule at src\isa\riscv64\inst.isle line 3034.
                        return v30;
                    }
                }
                _ => {}
            }
        }
    }
    let v1 = C::value_type(ctx, arg0);
    if v1 == I128 {
        let v7 = C::put_in_regs(ctx, arg0);
        let v9 = C::value_regs_get(ctx, v7, 0x0);
        let v10 = C::xreg_new(ctx, v9);
        let v11 = C::put_in_regs(ctx, arg0);
        let v13 = C::value_regs_get(ctx, v11, 0x1);
        let v14 = C::xreg_new(ctx, v13);
        let v15 = constructor_rv_or(ctx, v10, v14);
        let v16 = constructor_rv_snez(ctx, v15);
        let v17 = constructor_rv_neg(ctx, v16);
        // Rule at src\isa\riscv64\inst.isle line 3026.
        return v17;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = constructor_sext(ctx, arg0);
        let v5 = constructor_rv_snez(ctx, v4);
        let v6 = constructor_rv_neg(ctx, v5);
        // Rule at src\isa\riscv64\inst.isle line 3023.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bmask", "src\\isa\\riscv64\\inst.isle line 3019"
    )
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(ctx: &mut C, arg0: Value, arg1: Type) -> ValueRegs {
    if arg1 == I128 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v7 = C::value_regs(ctx, v5, v5);
        // Rule at src\isa\riscv64\inst.isle line 3040.
        return v7;
    }
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = constructor_gen_bmask(ctx, arg0);
        let v5 = C::xreg_to_reg(ctx, v4);
        let v6 = C::value_reg(ctx, v5);
        // Rule at src\isa\riscv64\inst.isle line 3038.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src\\isa\\riscv64\\inst.isle line 3037"
    )
}

// Generated as internal constructor for term gen_mov_from_preg.
pub fn constructor_gen_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v1 = constructor_temp_writable_xreg(ctx);
    let v2 = C::writable_xreg_to_writable_reg(ctx, v1);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_xreg_to_reg(ctx, v1);
    // Rule at src\isa\riscv64\inst.isle line 3049.
    return v5;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = constructor_temp_writable_xreg(ctx);
    let v3 = C::writable_xreg_to_writable_reg(ctx, v2);
    let v4 = C::xreg_to_reg(ctx, arg0);
    let v5 = MInst::Mov {
        rd: v3,
        rm: v4,
        ty: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xreg_to_xreg(ctx, v2);
    // Rule at src\isa\riscv64\inst.isle line 3061.
    return v7;
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v2 = constructor_imm(ctx, I64, 0x0);
    let v3 = constructor_imm(ctx, I64, 0x0);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src\isa\riscv64\inst.isle line 3084.
    return v4;
}

// Generated as internal constructor for term float_compare_invert.
pub fn constructor_float_compare_invert<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> FloatCompare {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            let v2 = FloatCompare::Zero { r: v1 };
            // Rule at src\isa\riscv64\inst.isle line 3101.
            return v2;
        }
        &FloatCompare::Zero { r: v3 } => {
            let v4 = FloatCompare::One { r: v3 };
            // Rule at src\isa\riscv64\inst.isle line 3102.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_compare_invert", "src\\isa\\riscv64\\inst.isle line 3100"
    )
}

// Generated as internal constructor for term float_to_int_compare.
pub fn constructor_float_to_int_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCompare,
) -> IntegerCompare {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            let v2 = constructor_cmp_nez(ctx, v1);
            // Rule at src\isa\riscv64\inst.isle line 3105.
            return v2;
        }
        &FloatCompare::Zero { r: v3 } => {
            let v4 = constructor_cmp_eqz(ctx, v3);
            // Rule at src\isa\riscv64\inst.isle line 3106.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_to_int_compare", "src\\isa\\riscv64\\inst.isle line 3104"
    )
}

// Generated as internal constructor for term fcmp_to_float_compare.
pub fn constructor_fcmp_to_float_compare<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Type,
    arg2: FReg,
    arg3: FReg,
) -> FloatCompare {
    match arg0 {
        &FloatCC::Equal => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v13 = FloatCompare::One { r: v12 };
            // Rule at src\isa\riscv64\inst.isle line 3127.
            return v13;
        }
        &FloatCC::GreaterThan => {
            let v22 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v23 = FloatCompare::One { r: v22 };
            // Rule at src\isa\riscv64\inst.isle line 3148.
            return v23;
        }
        &FloatCC::GreaterThanOrEqual => {
            let v24 = constructor_rv_fge(ctx, arg1, arg2, arg3);
            let v25 = FloatCompare::One { r: v24 };
            // Rule at src\isa\riscv64\inst.isle line 3152.
            return v25;
        }
        &FloatCC::LessThan => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v19 = FloatCompare::One { r: v15 };
            // Rule at src\isa\riscv64\inst.isle line 3140.
            return v19;
        }
        &FloatCC::LessThanOrEqual => {
            let v20 = constructor_rv_fle(ctx, arg1, arg2, arg3);
            let v21 = FloatCompare::One { r: v20 };
            // Rule at src\isa\riscv64\inst.isle line 3144.
            return v21;
        }
        &FloatCC::NotEqual => {
            let v12 = constructor_rv_feq(ctx, arg1, arg2, arg3);
            let v14 = FloatCompare::Zero { r: v12 };
            // Rule at src\isa\riscv64\inst.isle line 3132.
            return v14;
        }
        &FloatCC::Ordered => {
            let v8 = constructor_is_not_nan(ctx, arg1, arg2);
            let v9 = constructor_is_not_nan(ctx, arg1, arg3);
            let v10 = constructor_rv_and(ctx, v8, v9);
            let v11 = FloatCompare::One { r: v10 };
            // Rule at src\isa\riscv64\inst.isle line 3120.
            return v11;
        }
        &FloatCC::OrderedNotEqual => {
            let v15 = constructor_rv_flt(ctx, arg1, arg2, arg3);
            let v16 = constructor_rv_fgt(ctx, arg1, arg2, arg3);
            let v17 = constructor_rv_or(ctx, v15, v16);
            let v18 = FloatCompare::One { r: v17 };
            // Rule at src\isa\riscv64\inst.isle line 3136.
            return v18;
        }
        _ => {}
    }
    let v4 = C::floatcc_unordered(ctx, arg0);
    if v4 == true {
        let v5 = &C::floatcc_complement(ctx, arg0);
        let v6 = &constructor_fcmp_to_float_compare(ctx, v5, arg1, arg2, arg3);
        let v7 = &constructor_float_compare_invert(ctx, v6);
        // Rule at src\isa\riscv64\inst.isle line 3115.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_to_float_compare", "src\\isa\\riscv64\\inst.isle line 3110"
    )
}

// Generated as internal constructor for term is_not_nan.
pub fn constructor_is_not_nan<C: Context>(ctx: &mut C, arg0: Type, arg1: FReg) -> XReg {
    let v2 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    // Rule at src\isa\riscv64\inst.isle line 3124.
    return v2;
}

// Generated as internal constructor for term masked.
pub fn constructor_masked<C: Context>(ctx: &mut C, arg0: VReg) -> VecOpMasking {
    let v1 = C::vreg_to_reg(ctx, arg0);
    let v2 = VecOpMasking::Enabled { reg: v1 };
    // Rule at src\isa\riscv64\inst_vector.isle line 85.
    return v2;
}

// Generated as internal constructor for term unmasked.
pub fn constructor_unmasked<C: Context>(ctx: &mut C) -> VecOpMasking {
    // Rule at src\isa\riscv64\inst_vector.isle line 88.
    return VecOpMasking::Disabled;
}

// Generated as internal constructor for term element_width_from_type.
pub fn constructor_element_width_from_type<C: Context>(ctx: &mut C, arg0: Type) -> VecElementWidth {
    let v1 = C::lane_type(ctx, arg0);
    match v1 {
        I8 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 331.
            return VecElementWidth::E8;
        }
        I16 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 334.
            return VecElementWidth::E16;
        }
        I32 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 337.
            return VecElementWidth::E32;
        }
        I64 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 343.
            return VecElementWidth::E64;
        }
        F32 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 340.
            return VecElementWidth::E32;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 346.
            return VecElementWidth::E64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "element_width_from_type", "src\\isa\\riscv64\\inst_vector.isle line 330"
    )
}

// Generated as internal constructor for term vec_alu_rrrr.
pub fn constructor_vec_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRR,
    arg1: VReg,
    arg2: VReg,
    arg3: Reg,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRR {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        vs1: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 369.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_imm5.
pub fn constructor_vec_alu_rrr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: Imm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = constructor_temp_writable_vreg(ctx);
    let v7 = C::writable_vreg_to_writable_reg(ctx, v6);
    let v8 = C::vreg_to_reg(ctx, arg1);
    let v9 = C::vreg_to_reg(ctx, arg2);
    let v10 = MInst::VecAluRRRImm5 {
        op: arg0.clone(),
        vd: v7,
        vd_src: v8,
        vs2: v9,
        imm: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_vreg_to_vreg(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 377.
    return v12;
}

// Generated as internal constructor for term vec_alu_rrr_uimm5.
pub fn constructor_vec_alu_rrr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRRImm5,
    arg1: VReg,
    arg2: VReg,
    arg3: UImm5,
    arg4: &VecOpMasking,
    arg5: VState,
) -> VReg {
    let v6 = C::uimm5_bitcast_to_imm5(ctx, arg3);
    let v7 = constructor_vec_alu_rrr_imm5(ctx, arg0, arg1, arg2, v6, arg4, arg5);
    // Rule at src\isa\riscv64\inst_vector.isle line 385.
    return v7;
}

// Generated as internal constructor for term vec_alu_rrr.
pub fn constructor_vec_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRR,
    arg1: Reg,
    arg2: Reg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRR {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        vs1: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 390.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_imm5.
pub fn constructor_vec_alu_rr_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: Imm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecAluRRImm5 {
        op: arg0.clone(),
        vd: v6,
        vs2: arg1,
        imm: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 397.
    return v9;
}

// Generated as internal constructor for term vec_alu_rr_uimm5.
pub fn constructor_vec_alu_rr_uimm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRRImm5,
    arg1: Reg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = C::uimm5_bitcast_to_imm5(ctx, arg2);
    let v6 = constructor_vec_alu_rr_imm5(ctx, arg0, arg1, v5, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 405.
    return v6;
}

// Generated as internal constructor for term vec_alu_rr.
pub fn constructor_vec_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRR,
    arg1: Reg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = C::vec_alu_rr_dst_type(ctx, arg0);
    let v5 = C::temp_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRR {
        op: arg0.clone(),
        vd: v5,
        vs: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 411.
    return v8;
}

// Generated as internal constructor for term vec_alu_r_imm5.
pub fn constructor_vec_alu_r_imm5<C: Context>(
    ctx: &mut C,
    arg0: &VecAluOpRImm5,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> Reg {
    let v4 = constructor_temp_writable_vreg(ctx);
    let v5 = C::writable_vreg_to_writable_reg(ctx, v4);
    let v6 = MInst::VecAluRImm5 {
        op: arg0.clone(),
        vd: v5,
        imm: arg1,
        mask: arg2.clone(),
        vstate: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_vreg_to_reg(ctx, v4);
    // Rule at src\isa\riscv64\inst_vector.isle line 418.
    return v8;
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: MemFlags,
    arg3: &VecOpMasking,
    arg4: VState,
) -> Reg {
    let v5 = constructor_temp_writable_vreg(ctx);
    let v6 = C::writable_vreg_to_writable_reg(ctx, v5);
    let v7 = MInst::VecLoad {
        eew: arg0.clone(),
        to: v6,
        from: arg1.clone(),
        flags: arg2,
        mask: arg3.clone(),
        vstate: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = constructor_writable_vreg_to_reg(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 425.
    return v9;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: &VecElementWidth,
    arg1: &VecAMode,
    arg2: VReg,
    arg3: MemFlags,
    arg4: &VecOpMasking,
    arg5: VState,
) -> InstOutput {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = MInst::VecStore {
        eew: arg0.clone(),
        to: arg1.clone(),
        from: v6,
        flags: arg3,
        mask: arg4.clone(),
        vstate: arg5,
    };
    let v8 = SideEffectNoResult::Inst { inst: v7 };
    let v9 = constructor_side_effect(ctx, &v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 432.
    return v9;
}

// Generated as internal constructor for term rv_vadd_vv.
pub fn constructor_rv_vadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 438.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vx.
pub fn constructor_rv_vadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 443.
    return v8;
}

// Generated as internal constructor for term rv_vadd_vi.
pub fn constructor_rv_vadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 448.
    return v7;
}

// Generated as internal constructor for term rv_vsadd_vv.
pub fn constructor_rv_vsadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 453.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vx.
pub fn constructor_rv_vsadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 458.
    return v8;
}

// Generated as internal constructor for term rv_vsadd_vi.
pub fn constructor_rv_vsadd_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsaddVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 463.
    return v7;
}

// Generated as internal constructor for term rv_vsaddu_vv.
pub fn constructor_rv_vsaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 468.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vx.
pub fn constructor_rv_vsaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 473.
    return v8;
}

// Generated as internal constructor for term rv_vsaddu_vi.
pub fn constructor_rv_vsaddu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VsadduVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 478.
    return v7;
}

// Generated as internal constructor for term rv_vwadd_vv.
pub fn constructor_rv_vwadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 485.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_vx.
pub fn constructor_rv_vwadd_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 492.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wv.
pub fn constructor_rv_vwadd_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 499.
    return v8;
}

// Generated as internal constructor for term rv_vwadd_wx.
pub fn constructor_rv_vwadd_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwaddWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 506.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vv.
pub fn constructor_rv_vwaddu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 513.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_vx.
pub fn constructor_rv_vwaddu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 520.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wv.
pub fn constructor_rv_vwaddu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 527.
    return v8;
}

// Generated as internal constructor for term rv_vwaddu_wx.
pub fn constructor_rv_vwaddu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwadduWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 534.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vv.
pub fn constructor_rv_vsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 539.
    return v8;
}

// Generated as internal constructor for term rv_vsub_vx.
pub fn constructor_rv_vsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 544.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vx.
pub fn constructor_rv_vrsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 549.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vv.
pub fn constructor_rv_vwsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 556.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_vx.
pub fn constructor_rv_vwsub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 563.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wv.
pub fn constructor_rv_vwsub_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 570.
    return v8;
}

// Generated as internal constructor for term rv_vwsub_wx.
pub fn constructor_rv_vwsub_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 577.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vv.
pub fn constructor_rv_vwsubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 584.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_vx.
pub fn constructor_rv_vwsubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 591.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wv.
pub fn constructor_rv_vwsubu_wv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 598.
    return v8;
}

// Generated as internal constructor for term rv_vwsubu_wx.
pub fn constructor_rv_vwsubu_wx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VwsubuWX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 605.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vv.
pub fn constructor_rv_vssub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 610.
    return v8;
}

// Generated as internal constructor for term rv_vssub_vx.
pub fn constructor_rv_vssub_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 615.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vv.
pub fn constructor_rv_vssubu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 620.
    return v8;
}

// Generated as internal constructor for term rv_vssubu_vx.
pub fn constructor_rv_vssubu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VssubuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 625.
    return v8;
}

// Generated as internal constructor for term rv_vneg_v.
pub fn constructor_rv_vneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v5 = C::zero_reg(ctx);
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, v5);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrsubVX, v4, v6, arg1, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 630.
    return v8;
}

// Generated as internal constructor for term rv_vrsub_vi.
pub fn constructor_rv_vrsub_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VrsubVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 635.
    return v7;
}

// Generated as internal constructor for term rv_vmul_vv.
pub fn constructor_rv_vmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 640.
    return v8;
}

// Generated as internal constructor for term rv_vmul_vx.
pub fn constructor_rv_vmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 645.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vv.
pub fn constructor_rv_vmulh_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 650.
    return v8;
}

// Generated as internal constructor for term rv_vmulh_vx.
pub fn constructor_rv_vmulh_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 655.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vv.
pub fn constructor_rv_vmulhu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 660.
    return v8;
}

// Generated as internal constructor for term rv_vmulhu_vx.
pub fn constructor_rv_vmulhu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmulhuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 665.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vv.
pub fn constructor_rv_vsmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 673.
    return v8;
}

// Generated as internal constructor for term rv_vsmul_vx.
pub fn constructor_rv_vsmul_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsmulVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 681.
    return v8;
}

// Generated as internal constructor for term rv_vmacc_vv.
pub fn constructor_rv_vmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 689.
    return v7;
}

// Generated as internal constructor for term rv_vmacc_vx.
pub fn constructor_rv_vmacc_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VmaccVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 697.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vv.
pub fn constructor_rv_vnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 705.
    return v7;
}

// Generated as internal constructor for term rv_vnmsac_vx.
pub fn constructor_rv_vnmsac_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VnmsacVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 713.
    return v7;
}

// Generated as internal constructor for term rv_vsll_vv.
pub fn constructor_rv_vsll_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 718.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vx.
pub fn constructor_rv_vsll_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsllVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 723.
    return v8;
}

// Generated as internal constructor for term rv_vsll_vi.
pub fn constructor_rv_vsll_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsllVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 728.
    return v7;
}

// Generated as internal constructor for term rv_vsrl_vv.
pub fn constructor_rv_vsrl_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 733.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vx.
pub fn constructor_rv_vsrl_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsrlVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 738.
    return v8;
}

// Generated as internal constructor for term rv_vsrl_vi.
pub fn constructor_rv_vsrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 743.
    return v7;
}

// Generated as internal constructor for term rv_vsra_vv.
pub fn constructor_rv_vsra_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 748.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vx.
pub fn constructor_rv_vsra_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VsraVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 753.
    return v8;
}

// Generated as internal constructor for term rv_vsra_vi.
pub fn constructor_rv_vsra_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VsraVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 758.
    return v7;
}

// Generated as internal constructor for term rv_vand_vv.
pub fn constructor_rv_vand_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 763.
    return v8;
}

// Generated as internal constructor for term rv_vand_vx.
pub fn constructor_rv_vand_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VandVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 768.
    return v8;
}

// Generated as internal constructor for term rv_vand_vi.
pub fn constructor_rv_vand_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VandVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 773.
    return v7;
}

// Generated as internal constructor for term rv_vor_vv.
pub fn constructor_rv_vor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 778.
    return v8;
}

// Generated as internal constructor for term rv_vor_vx.
pub fn constructor_rv_vor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 783.
    return v8;
}

// Generated as internal constructor for term rv_vor_vi.
pub fn constructor_rv_vor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 788.
    return v7;
}

// Generated as internal constructor for term rv_vxor_vv.
pub fn constructor_rv_vxor_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 793.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vx.
pub fn constructor_rv_vxor_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VxorVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 798.
    return v8;
}

// Generated as internal constructor for term rv_vxor_vi.
pub fn constructor_rv_vxor_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VxorVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 803.
    return v7;
}

// Generated as internal constructor for term rv_vssrl_vi.
pub fn constructor_rv_vssrl_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VssrlVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 812.
    return v7;
}

// Generated as internal constructor for term rv_vnot_v.
pub fn constructor_rv_vnot_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::i8_to_imm5(ctx, -0x1);
    if let Some(v5) = v4 {
        let v6 = constructor_rv_vxor_vi(ctx, arg0, v5, arg1, arg2);
        // Rule at src\isa\riscv64\inst_vector.isle line 818.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_vnot_v", "src\\isa\\riscv64\\inst_vector.isle line 817"
    )
}

// Generated as internal constructor for term rv_vmax_vv.
pub fn constructor_rv_vmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 824.
    return v8;
}

// Generated as internal constructor for term rv_vmax_vx.
pub fn constructor_rv_vmax_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 829.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vv.
pub fn constructor_rv_vmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 834.
    return v8;
}

// Generated as internal constructor for term rv_vmin_vx.
pub fn constructor_rv_vmin_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 839.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vv.
pub fn constructor_rv_vmaxu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 844.
    return v8;
}

// Generated as internal constructor for term rv_vmaxu_vx.
pub fn constructor_rv_vmaxu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmaxuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 849.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vv.
pub fn constructor_rv_vminu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 854.
    return v8;
}

// Generated as internal constructor for term rv_vminu_vx.
pub fn constructor_rv_vminu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VminuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 859.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vv.
pub fn constructor_rv_vfadd_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 864.
    return v8;
}

// Generated as internal constructor for term rv_vfadd_vf.
pub fn constructor_rv_vfadd_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfaddVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 869.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vv.
pub fn constructor_rv_vfsub_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 874.
    return v8;
}

// Generated as internal constructor for term rv_vfsub_vf.
pub fn constructor_rv_vfsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 879.
    return v8;
}

// Generated as internal constructor for term rv_vfrsub_vf.
pub fn constructor_rv_vfrsub_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrsubVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 884.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vv.
pub fn constructor_rv_vfmul_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 889.
    return v8;
}

// Generated as internal constructor for term rv_vfmul_vf.
pub fn constructor_rv_vfmul_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmulVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 894.
    return v8;
}

// Generated as internal constructor for term rv_vfmacc_vv.
pub fn constructor_rv_vfmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 902.
    return v7;
}

// Generated as internal constructor for term rv_vfmacc_vf.
pub fn constructor_rv_vfmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 910.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vv.
pub fn constructor_rv_vfnmacc_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 918.
    return v7;
}

// Generated as internal constructor for term rv_vfnmacc_vf.
pub fn constructor_rv_vfnmacc_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmaccVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 926.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vv.
pub fn constructor_rv_vfmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 934.
    return v7;
}

// Generated as internal constructor for term rv_vfmsac_vf.
pub fn constructor_rv_vfmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 942.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vv.
pub fn constructor_rv_vfnmsac_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::vreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVV, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 950.
    return v7;
}

// Generated as internal constructor for term rv_vfnmsac_vf.
pub fn constructor_rv_vfnmsac_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: FReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::freg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::VfnmsacVF, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 958.
    return v7;
}

// Generated as internal constructor for term rv_vfdiv_vv.
pub fn constructor_rv_vfdiv_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 963.
    return v8;
}

// Generated as internal constructor for term rv_vfdiv_vf.
pub fn constructor_rv_vfdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 968.
    return v8;
}

// Generated as internal constructor for term rv_vfrdiv_vf.
pub fn constructor_rv_vfrdiv_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfrdivVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 973.
    return v8;
}

// Generated as internal constructor for term rv_vfmin_vv.
pub fn constructor_rv_vfmin_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfminVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 978.
    return v8;
}

// Generated as internal constructor for term rv_vfmax_vv.
pub fn constructor_rv_vfmax_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmaxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 983.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vv.
pub fn constructor_rv_vfsgnj_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 989.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnj_vf.
pub fn constructor_rv_vfsgnj_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 994.
    return v8;
}

// Generated as internal constructor for term rv_vfsgnjn_vv.
pub fn constructor_rv_vfsgnjn_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjnVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1000.
    return v8;
}

// Generated as internal constructor for term rv_vfneg_v.
pub fn constructor_rv_vfneg_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjn_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src\isa\riscv64\inst_vector.isle line 1006.
    return v3;
}

// Generated as internal constructor for term rv_vfsgnjx_vv.
pub fn constructor_rv_vfsgnjx_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfsgnjxVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1012.
    return v8;
}

// Generated as internal constructor for term rv_vfabs_v.
pub fn constructor_rv_vfabs_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v3 = constructor_rv_vfsgnjx_vv(ctx, arg0, arg0, arg1, arg2);
    // Rule at src\isa\riscv64\inst_vector.isle line 1018.
    return v3;
}

// Generated as internal constructor for term rv_vfsqrt_v.
pub fn constructor_rv_vfsqrt_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfsqrtV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1023.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_xu_f_v.
pub fn constructor_rv_vfcvt_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1029.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_x_f_v.
pub fn constructor_rv_vfcvt_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1035.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_xu_f_v.
pub fn constructor_rv_vfcvt_rtz_xu_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxufV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1043.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_rtz_x_f_v.
pub fn constructor_rv_vfcvt_rtz_x_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtrtzxfV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1051.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_xu_v.
pub fn constructor_rv_vfcvt_f_xu_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxuV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1057.
    return v6;
}

// Generated as internal constructor for term rv_vfcvt_f_x_v.
pub fn constructor_rv_vfcvt_f_x_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfcvtfxV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1063.
    return v6;
}

// Generated as internal constructor for term rv_vfwcvt_f_f_v.
pub fn constructor_rv_vfwcvt_f_f_v<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfwcvtffV, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1069.
    return v6;
}

// Generated as internal constructor for term rv_vfncvt_f_f_w.
pub fn constructor_rv_vfncvt_f_f_w<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfncvtffW, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1075.
    return v6;
}

// Generated as internal constructor for term rv_vslidedown_vx.
pub fn constructor_rv_vslidedown_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VslidedownVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1082.
    return v8;
}

// Generated as internal constructor for term rv_vslidedown_vi.
pub fn constructor_rv_vslidedown_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VslidedownVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1088.
    return v7;
}

// Generated as internal constructor for term rv_vslideup_vvi.
pub fn constructor_rv_vslideup_vvi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: UImm5,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = constructor_vec_alu_rrr_uimm5(
        ctx,
        &VecAluOpRRRImm5::VslideupVI,
        arg0,
        arg1,
        arg2,
        arg3,
        arg4,
    );
    // Rule at src\isa\riscv64\inst_vector.isle line 1096.
    return v6;
}

// Generated as internal constructor for term rv_vslide1up_vx.
pub fn constructor_rv_vslide1up_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: XReg,
    arg3: &VecOpMasking,
    arg4: VState,
) -> VReg {
    let v6 = C::xreg_to_reg(ctx, arg2);
    let v7 = constructor_vec_alu_rrrr(ctx, &VecAluOpRRRR::Vslide1upVX, arg0, arg1, v6, arg3, arg4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1103.
    return v7;
}

// Generated as internal constructor for term rv_vmv_xs.
pub fn constructor_rv_vmv_xs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> XReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvXS, v3, v4, arg1);
    let v6 = C::xreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1110.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_fs.
pub fn constructor_rv_vfmv_fs<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> FReg {
    let v3 = C::vreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvFS, v3, v4, arg1);
    let v6 = C::freg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1117.
    return v6;
}

// Generated as internal constructor for term rv_vmv_sx.
pub fn constructor_rv_vmv_sx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvSX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1124.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_sf.
pub fn constructor_rv_vfmv_sf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvSF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1131.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vx.
pub fn constructor_rv_vmv_vx<C: Context>(ctx: &mut C, arg0: XReg, arg1: VState) -> VReg {
    let v3 = C::xreg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VmvVX, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1138.
    return v6;
}

// Generated as internal constructor for term rv_vfmv_vf.
pub fn constructor_rv_vfmv_vf<C: Context>(ctx: &mut C, arg0: FReg, arg1: VState) -> VReg {
    let v3 = C::freg_to_reg(ctx, arg0);
    let v4 = &constructor_unmasked(ctx);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VfmvVF, v3, v4, arg1);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1145.
    return v6;
}

// Generated as internal constructor for term rv_vmv_vi.
pub fn constructor_rv_vmv_vi<C: Context>(ctx: &mut C, arg0: Imm5, arg1: VState) -> VReg {
    let v3 = &constructor_unmasked(ctx);
    let v4 = constructor_vec_alu_r_imm5(ctx, &VecAluOpRImm5::VmvVI, arg0, v3, arg1);
    let v5 = C::vreg_new(ctx, v4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1152.
    return v5;
}

// Generated as internal constructor for term rv_vmerge_vvm.
pub fn constructor_rv_vmerge_vvm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVVM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1162.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vxm.
pub fn constructor_rv_vmerge_vxm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmergeVXM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1171.
    return v9;
}

// Generated as internal constructor for term rv_vfmerge_vfm.
pub fn constructor_rv_vfmerge_vfm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = &constructor_masked(ctx, arg2);
    let v8 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VfmergeVFM, v5, v6, v7, arg3);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1180.
    return v9;
}

// Generated as internal constructor for term rv_vmerge_vim.
pub fn constructor_rv_vmerge_vim<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: VReg,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = &constructor_masked(ctx, arg2);
    let v7 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmergeVIM, v5, arg1, v6, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1189.
    return v8;
}

// Generated as internal constructor for term rv_vredminu_vs.
pub fn constructor_rv_vredminu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredminuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1197.
    return v8;
}

// Generated as internal constructor for term rv_vredmaxu_vs.
pub fn constructor_rv_vredmaxu_vs<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VredmaxuVS, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1204.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vv.
pub fn constructor_rv_vrgather_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1211.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vx.
pub fn constructor_rv_vrgather_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VrgatherVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1218.
    return v8;
}

// Generated as internal constructor for term rv_vrgather_vi.
pub fn constructor_rv_vrgather_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VrgatherVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1223.
    return v7;
}

// Generated as internal constructor for term rv_vcompress_vm.
pub fn constructor_rv_vcompress_vm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VcompressVM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1234.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vv.
pub fn constructor_rv_vmseq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1239.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vx.
pub fn constructor_rv_vmseq_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmseqVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1244.
    return v8;
}

// Generated as internal constructor for term rv_vmseq_vi.
pub fn constructor_rv_vmseq_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmseqVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1249.
    return v7;
}

// Generated as internal constructor for term rv_vmsne_vv.
pub fn constructor_rv_vmsne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1254.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vx.
pub fn constructor_rv_vmsne_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsneVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1259.
    return v8;
}

// Generated as internal constructor for term rv_vmsne_vi.
pub fn constructor_rv_vmsne_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsneVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1264.
    return v7;
}

// Generated as internal constructor for term rv_vmsltu_vv.
pub fn constructor_rv_vmsltu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1269.
    return v8;
}

// Generated as internal constructor for term rv_vmsltu_vx.
pub fn constructor_rv_vmsltu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1274.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vv.
pub fn constructor_rv_vmslt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1279.
    return v8;
}

// Generated as internal constructor for term rv_vmslt_vx.
pub fn constructor_rv_vmslt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsltVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1284.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vv.
pub fn constructor_rv_vmsleu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1289.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vx.
pub fn constructor_rv_vmsleu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1294.
    return v8;
}

// Generated as internal constructor for term rv_vmsleu_vi.
pub fn constructor_rv_vmsleu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1299.
    return v7;
}

// Generated as internal constructor for term rv_vmsle_vv.
pub fn constructor_rv_vmsle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1304.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vx.
pub fn constructor_rv_vmsle_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsleVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1309.
    return v8;
}

// Generated as internal constructor for term rv_vmsle_vi.
pub fn constructor_rv_vmsle_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsleVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1314.
    return v7;
}

// Generated as internal constructor for term rv_vmsgtu_vv.
pub fn constructor_rv_vmsgtu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsltu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1320.
    return v4;
}

// Generated as internal constructor for term rv_vmsgtu_vx.
pub fn constructor_rv_vmsgtu_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtuVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1324.
    return v8;
}

// Generated as internal constructor for term rv_vmsgtu_vi.
pub fn constructor_rv_vmsgtu_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtuVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1329.
    return v7;
}

// Generated as internal constructor for term rv_vmsgt_vv.
pub fn constructor_rv_vmsgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmslt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1335.
    return v4;
}

// Generated as internal constructor for term rv_vmsgt_vx.
pub fn constructor_rv_vmsgt_vx<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: XReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::xreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmsgtVX, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1339.
    return v8;
}

// Generated as internal constructor for term rv_vmsgt_vi.
pub fn constructor_rv_vmsgt_vi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: Imm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_imm5(ctx, &VecAluOpRRImm5::VmsgtVI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1344.
    return v7;
}

// Generated as internal constructor for term rv_vmsgeu_vv.
pub fn constructor_rv_vmsgeu_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsleu_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1350.
    return v4;
}

// Generated as internal constructor for term rv_vmsge_vv.
pub fn constructor_rv_vmsge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmsle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1355.
    return v4;
}

// Generated as internal constructor for term rv_vmfeq_vv.
pub fn constructor_rv_vmfeq_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1359.
    return v8;
}

// Generated as internal constructor for term rv_vmfeq_vf.
pub fn constructor_rv_vmfeq_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfeqVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1364.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vv.
pub fn constructor_rv_vmfne_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1369.
    return v8;
}

// Generated as internal constructor for term rv_vmfne_vf.
pub fn constructor_rv_vmfne_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfneVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1374.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vv.
pub fn constructor_rv_vmflt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1379.
    return v8;
}

// Generated as internal constructor for term rv_vmflt_vf.
pub fn constructor_rv_vmflt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfltVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1384.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vv.
pub fn constructor_rv_vmfle_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::vreg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVV, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1389.
    return v8;
}

// Generated as internal constructor for term rv_vmfle_vf.
pub fn constructor_rv_vmfle_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfleVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1394.
    return v8;
}

// Generated as internal constructor for term rv_vmfgt_vv.
pub fn constructor_rv_vmfgt_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmflt_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1400.
    return v4;
}

// Generated as internal constructor for term rv_vmfgt_vf.
pub fn constructor_rv_vmfgt_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgtVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1404.
    return v8;
}

// Generated as internal constructor for term rv_vmfge_vv.
pub fn constructor_rv_vmfge_vv<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v4 = constructor_rv_vmfle_vv(ctx, arg1, arg0, arg2, arg3);
    // Rule at src\isa\riscv64\inst_vector.isle line 1410.
    return v4;
}

// Generated as internal constructor for term rv_vmfge_vf.
pub fn constructor_rv_vmfge_vf<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: FReg,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = C::freg_to_reg(ctx, arg1);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmfgeVF, v5, v6, arg2, arg3);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1414.
    return v8;
}

// Generated as internal constructor for term rv_vzext_vf2.
pub fn constructor_rv_vzext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1420.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf4.
pub fn constructor_rv_vzext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1426.
    return v6;
}

// Generated as internal constructor for term rv_vzext_vf8.
pub fn constructor_rv_vzext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VzextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1432.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf2.
pub fn constructor_rv_vsext_vf2<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF2, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1438.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf4.
pub fn constructor_rv_vsext_vf4<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF4, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1444.
    return v6;
}

// Generated as internal constructor for term rv_vsext_vf8.
pub fn constructor_rv_vsext_vf8<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &VecOpMasking,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = constructor_vec_alu_rr(ctx, &VecAluOpRR::VsextVF8, v4, arg1, arg2);
    let v6 = C::vreg_new(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1450.
    return v6;
}

// Generated as internal constructor for term rv_vnclip_wi.
pub fn constructor_rv_vnclip_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1457.
    return v7;
}

// Generated as internal constructor for term rv_vnclipu_wi.
pub fn constructor_rv_vnclipu_wi<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: UImm5,
    arg2: &VecOpMasking,
    arg3: VState,
) -> VReg {
    let v5 = C::vreg_to_reg(ctx, arg0);
    let v6 = constructor_vec_alu_rr_uimm5(ctx, &VecAluOpRRImm5::VnclipuWI, v5, arg1, arg2, arg3);
    let v7 = C::vreg_new(ctx, v6);
    // Rule at src\isa\riscv64\inst_vector.isle line 1464.
    return v7;
}

// Generated as internal constructor for term rv_vmand_mm.
pub fn constructor_rv_vmand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1471.
    return v8;
}

// Generated as internal constructor for term rv_vmor_mm.
pub fn constructor_rv_vmor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1478.
    return v8;
}

// Generated as internal constructor for term rv_vmnand_mm.
pub fn constructor_rv_vmnand_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnandMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1485.
    return v8;
}

// Generated as internal constructor for term rv_vmnot_m.
pub fn constructor_rv_vmnot_m<C: Context>(ctx: &mut C, arg0: VReg, arg1: VState) -> VReg {
    let v2 = constructor_rv_vmnand_mm(ctx, arg0, arg0, arg1);
    // Rule at src\isa\riscv64\inst_vector.isle line 1493.
    return v2;
}

// Generated as internal constructor for term rv_vmnor_mm.
pub fn constructor_rv_vmnor_mm<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: VReg,
    arg2: VState,
) -> VReg {
    let v4 = C::vreg_to_reg(ctx, arg0);
    let v5 = C::vreg_to_reg(ctx, arg1);
    let v6 = &constructor_unmasked(ctx);
    let v7 = constructor_vec_alu_rrr(ctx, &VecAluOpRRR::VmnorMM, v4, v5, v6, arg2);
    let v8 = C::vreg_new(ctx, v7);
    // Rule at src\isa\riscv64\inst_vector.isle line 1499.
    return v8;
}

// Generated as internal constructor for term gen_extractlane.
pub fn constructor_gen_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VReg,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        if arg2 == 0x0 {
            let v5 = C::ty_vector_float(ctx, v2);
            if let Some(v6) = v5 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v8 = constructor_rv_vfmv_fs(ctx, arg1, v7);
                let v9 = C::freg_to_reg(ctx, v8);
                // Rule at src\isa\riscv64\inst_vector.isle line 1507.
                return v9;
            }
            let v10 = C::ty_vector_not_float(ctx, v2);
            if let Some(v11) = v10 {
                let v7 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vmv_xs(ctx, arg1, v7);
                let v13 = C::xreg_to_reg(ctx, v12);
                // Rule at src\isa\riscv64\inst_vector.isle line 1512.
                return v13;
            }
        }
        let v14 = C::uimm5_from_u8(ctx, arg2);
        if let Some(v15) = v14 {
            let v16 = &constructor_unmasked(ctx);
            let v7 = C::vstate_from_type(ctx, v2);
            let v17 = constructor_rv_vslidedown_vi(ctx, arg1, v15, v16, v7);
            let v19 = constructor_gen_extractlane(ctx, v2, v17, 0x0);
            // Rule at src\isa\riscv64\inst_vector.isle line 1519.
            return v19;
        }
        let v21 = C::u8_as_u64(ctx, arg2);
        let v22 = constructor_imm(ctx, I64, v21);
        let v23 = C::xreg_new(ctx, v22);
        let v16 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v2);
        let v24 = constructor_rv_vslidedown_vx(ctx, arg1, v23, v16, v7);
        let v25 = constructor_gen_extractlane(ctx, v2, v24, 0x0);
        // Rule at src\isa\riscv64\inst_vector.isle line 1523.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_extractlane", "src\\isa\\riscv64\\inst_vector.isle line 1504"
    )
}

// Generated as internal constructor for term gen_vec_mask.
pub fn constructor_gen_vec_mask<C: Context>(ctx: &mut C, arg0: u64) -> VReg {
    let v1 = C::imm5_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::vstate_from_type(ctx, I64X2);
        let v5 = constructor_rv_vmv_vi(ctx, v2, v4);
        // Rule at src\isa\riscv64\inst_vector.isle line 1533.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, arg0);
    let v8 = C::xreg_new(ctx, v7);
    let v4 = C::vstate_from_type(ctx, I64X2);
    let v9 = constructor_rv_vmv_sx(ctx, v8, v4);
    // Rule at src\isa\riscv64\inst_vector.isle line 1538.
    return v9;
}

// Generated as internal constructor for term gen_constant.
pub fn constructor_gen_constant<C: Context>(ctx: &mut C, arg0: Type, arg1: VCodeConstant) -> VReg {
    let v3 = C::gen_const_amode(ctx, arg1);
    let v2 = &constructor_element_width_from_type(ctx, arg0);
    let v4 = VecAMode::UnitStride { base: v3 };
    let v5 = C::mem_flags_trusted(ctx);
    let v6 = &constructor_unmasked(ctx);
    let v7 = C::vstate_from_type(ctx, arg0);
    let v8 = constructor_vec_load(ctx, v2, &v4, v5, v6, v7);
    let v9 = C::vreg_new(ctx, v8);
    // Rule at src\isa\riscv64\inst_vector.isle line 1549.
    return v9;
}

// Generated as internal constructor for term gen_slidedown_half.
pub fn constructor_gen_slidedown_half<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::ty_lane_count(ctx, v2);
        let v6 = C::u64_udiv(ctx, v4, 0x2);
        if let Some(v7) = v6 {
            let v8 = C::uimm5_from_u64(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = &constructor_unmasked(ctx);
                let v11 = C::vstate_from_type(ctx, v2);
                let v12 = constructor_rv_vslidedown_vi(ctx, arg1, v9, v10, v11);
                // Rule at src\isa\riscv64\inst_vector.isle line 1562.
                return v12;
            }
            let v14 = constructor_imm(ctx, I64, v7);
            let v15 = C::xreg_new(ctx, v14);
            let v10 = &constructor_unmasked(ctx);
            let v11 = C::vstate_from_type(ctx, v2);
            let v16 = constructor_rv_vslidedown_vx(ctx, arg1, v15, v10, v11);
            // Rule at src\isa\riscv64\inst_vector.isle line 1567.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_slidedown_half", "src\\isa\\riscv64\\inst_vector.isle line 1559"
    )
}

// Generated as internal constructor for term gen_expand_mask.
pub fn constructor_gen_expand_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: VReg) -> VReg {
    let v3 = C::i8_to_imm5(ctx, 0x0);
    if let Some(v4) = v3 {
        let v6 = C::i8_to_imm5(ctx, -0x1);
        if let Some(v7) = v6 {
            let v8 = C::vstate_from_type(ctx, arg0);
            let v9 = constructor_rv_vmv_vi(ctx, v4, v8);
            let v10 = constructor_rv_vmerge_vim(ctx, v9, v7, arg1, v8);
            // Rule at src\isa\riscv64\inst_vector.isle line 1575.
            return v10;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_expand_mask", "src\\isa\\riscv64\\inst_vector.isle line 1574"
    )
}

// Generated as internal constructor for term gen_icmp_mask.
pub fn constructor_gen_icmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &IntCC::Equal => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v31 = constructor_rv_vmseq_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1600.
                    return v31;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v28 = constructor_rv_vmseq_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1596.
                    return v28;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmseq_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1593.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmseq_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1590.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmseq_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1587.
                return v10;
            }
            &IntCC::NotEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v36 = constructor_rv_vmsne_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1619.
                    return v36;
                }
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v35 = constructor_rv_vmsne_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1615.
                    return v35;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmsne_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1612.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmsne_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1609.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmsne_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1606.
                return v32;
            }
            &IntCC::SignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v58 = constructor_rv_vmsgt_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1703.
                    return v58;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v57 = constructor_rv_vmslt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1700.
                            return v57;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v56 = constructor_rv_vmsgt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1697.
                            return v56;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v55 = constructor_rv_vmsgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1694.
                return v55;
            }
            &IntCC::SignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v64 = constructor_rv_vmsle_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1727.
                    return v64;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v63 = constructor_rv_vmsle_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1724.
                            return v63;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v62 = constructor_rv_vmsge_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1721.
                return v62;
            }
            &IntCC::SignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v44 = constructor_rv_vmsgt_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1649.
                    return v44;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v43 = constructor_rv_vmsgt_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1646.
                            return v43;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v42 = constructor_rv_vmslt_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1643.
                            return v42;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v41 = constructor_rv_vmslt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1640.
                return v41;
            }
            &IntCC::SignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v50 = constructor_rv_vmsle_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1673.
                    return v50;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v49 = constructor_rv_vmsle_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1670.
                            return v49;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmsle_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1667.
                return v48;
            }
            &IntCC::UnsignedGreaterThan => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v54 = constructor_rv_vmsgtu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1688.
                    return v54;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v53 = constructor_rv_vmsltu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1685.
                            return v53;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v52 = constructor_rv_vmsgtu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1682.
                            return v52;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v51 = constructor_rv_vmsgtu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1679.
                return v51;
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v61 = constructor_rv_vmsleu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1715.
                    return v61;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v60 = constructor_rv_vmsleu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1712.
                            return v60;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v59 = constructor_rv_vmsgeu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1709.
                return v59;
            }
            &IntCC::UnsignedLessThan => {
                let v29 = constructor_replicated_imm5(ctx, arg2);
                if let Some(v30) = v29 {
                    let v23 = constructor_put_in_vreg(ctx, arg3);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v40 = constructor_rv_vmsgtu_vi(ctx, v23, v30, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1634.
                    return v40;
                }
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_xreg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmsgtu_vx(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1631.
                            return v39;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v38 = constructor_rv_vmsltu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1628.
                            return v38;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v37 = constructor_rv_vmsltu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1625.
                return v37;
            }
            &IntCC::UnsignedLessThanOrEqual => {
                let v26 = constructor_replicated_imm5(ctx, arg3);
                if let Some(v27) = v26 {
                    let v6 = constructor_put_in_vreg(ctx, arg2);
                    let v8 = &constructor_unmasked(ctx);
                    let v9 = C::vstate_from_type(ctx, v2);
                    let v47 = constructor_rv_vmsleu_vi(ctx, v6, v27, v8, v9);
                    // Rule at src\isa\riscv64\inst_vector.isle line 1661.
                    return v47;
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_xreg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v46 = constructor_rv_vmsleu_vx(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1658.
                            return v46;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v45 = constructor_rv_vmsleu_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1655.
                return v45;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_icmp_mask", "src\\isa\\riscv64\\inst_vector.isle line 1583"
    )
}

// Generated as internal constructor for term gen_fcmp_mask.
pub fn constructor_gen_fcmp_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> VReg {
    let v1 = C::ty_vec_fits_in_register(ctx, arg0);
    if let Some(v2) = v1 {
        match arg1 {
            &FloatCC::Equal => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v25 = constructor_rv_vmfeq_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1744.
                            return v25;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v17 = constructor_rv_vmfeq_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1741.
                            return v17;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v10 = constructor_rv_vmfeq_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1738.
                return v10;
            }
            &FloatCC::GreaterThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v37 = constructor_rv_vmflt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1789.
                            return v37;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v36 = constructor_rv_vmfgt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1786.
                            return v36;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v35 = constructor_rv_vmfgt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1783.
                return v35;
            }
            &FloatCC::GreaterThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v40 = constructor_rv_vmfle_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1800.
                            return v40;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v39 = constructor_rv_vmfge_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1797.
                            return v39;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v38 = constructor_rv_vmfge_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1794.
                return v38;
            }
            &FloatCC::LessThan => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v31 = constructor_rv_vmfgt_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1767.
                            return v31;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v30 = constructor_rv_vmflt_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1764.
                            return v30;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v29 = constructor_rv_vmflt_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1761.
                return v29;
            }
            &FloatCC::LessThanOrEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v34 = constructor_rv_vmfge_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1778.
                            return v34;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v33 = constructor_rv_vmfle_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1775.
                            return v33;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v32 = constructor_rv_vmfle_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1772.
                return v32;
            }
            &FloatCC::NotEqual => {
                let v18 = C::def_inst(ctx, arg2);
                if let Some(v19) = v18 {
                    let v20 = &C::inst_data(ctx, v19);
                    if let &InstructionData::Unary {
                        opcode: ref v21,
                        arg: v22,
                    } = v20
                    {
                        if let &Opcode::Splat = v21 {
                            let v23 = constructor_put_in_vreg(ctx, arg3);
                            let v24 = constructor_put_in_freg(ctx, v22);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v28 = constructor_rv_vmfne_vf(ctx, v23, v24, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1756.
                            return v28;
                        }
                    }
                }
                let v11 = C::def_inst(ctx, arg3);
                if let Some(v12) = v11 {
                    let v13 = &C::inst_data(ctx, v12);
                    if let &InstructionData::Unary {
                        opcode: ref v14,
                        arg: v15,
                    } = v13
                    {
                        if let &Opcode::Splat = v14 {
                            let v6 = constructor_put_in_vreg(ctx, arg2);
                            let v16 = constructor_put_in_freg(ctx, v15);
                            let v8 = &constructor_unmasked(ctx);
                            let v9 = C::vstate_from_type(ctx, v2);
                            let v27 = constructor_rv_vmfne_vf(ctx, v6, v16, v8, v9);
                            // Rule at src\isa\riscv64\inst_vector.isle line 1753.
                            return v27;
                        }
                    }
                }
                let v6 = constructor_put_in_vreg(ctx, arg2);
                let v7 = constructor_put_in_vreg(ctx, arg3);
                let v8 = &constructor_unmasked(ctx);
                let v9 = C::vstate_from_type(ctx, v2);
                let v26 = constructor_rv_vmfne_vv(ctx, v6, v7, v8, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1750.
                return v26;
            }
            &FloatCC::Ordered => {
                let v42 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg2, arg2);
                let v43 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::Equal, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v44 = constructor_rv_vmand_mm(ctx, v42, v43, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1805.
                return v44;
            }
            &FloatCC::OrderedNotEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v52 = constructor_rv_vmor_mm(ctx, v50, v51, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1821.
                return v52;
            }
            &FloatCC::Unordered => {
                let v46 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg2, arg2);
                let v47 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::NotEqual, arg3, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v48 = constructor_rv_vmor_mm(ctx, v46, v47, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1813.
                return v48;
            }
            &FloatCC::UnorderedOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v51 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg3, arg2);
                let v9 = C::vstate_from_type(ctx, v2);
                let v53 = constructor_rv_vmnor_mm(ctx, v50, v51, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1829.
                return v53;
            }
            &FloatCC::UnorderedOrGreaterThan => {
                let v55 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v56 = constructor_rv_vmnot_m(ctx, v55, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1837.
                return v56;
            }
            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                let v50 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::LessThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v57 = constructor_rv_vmnot_m(ctx, v50, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1842.
                return v57;
            }
            &FloatCC::UnorderedOrLessThan => {
                let v59 =
                    constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThanOrEqual, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v60 = constructor_rv_vmnot_m(ctx, v59, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1847.
                return v60;
            }
            &FloatCC::UnorderedOrLessThanOrEqual => {
                let v62 = constructor_gen_fcmp_mask(ctx, v2, &FloatCC::GreaterThan, arg2, arg3);
                let v9 = C::vstate_from_type(ctx, v2);
                let v63 = constructor_rv_vmnot_m(ctx, v62, v9);
                // Rule at src\isa\riscv64\inst_vector.isle line 1852.
                return v63;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_fcmp_mask", "src\\isa\\riscv64\\inst_vector.isle line 1734"
    )
}

// Generated as internal constructor for term gen_vfcvt_x_f.
pub fn constructor_gen_vfcvt_x_f<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: VState,
) -> VReg {
    if let &FRM::RTZ = arg1 {
        let v3 = &constructor_unmasked(ctx);
        let v4 = constructor_rv_vfcvt_rtz_x_f_v(ctx, arg0, v3, arg2);
        // Rule at src\isa\riscv64\inst_vector.isle line 1860.
        return v4;
    }
    let v5 = constructor_rv_fsrmi(ctx, arg1);
    let v3 = &constructor_unmasked(ctx);
    let v6 = constructor_rv_vfcvt_x_f_v(ctx, arg0, v3, arg2);
    let v7 = constructor_rv_fsrm(ctx, v5);
    // Rule at src\isa\riscv64\inst_vector.isle line 1864.
    return v6;
}

// Generated as internal constructor for term float_int_max.
pub fn constructor_float_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        F32 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 1875.
            return 0x4B000000;
        }
        F64 => {
            // Rule at src\isa\riscv64\inst_vector.isle line 1876.
            return 0x4330000000000000;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "float_int_max", "src\\isa\\riscv64\\inst_vector.isle line 1874"
    )
}

// Generated as internal constructor for term gen_vec_round.
pub fn constructor_gen_vec_round<C: Context>(
    ctx: &mut C,
    arg0: VReg,
    arg1: &FRM,
    arg2: Type,
) -> VReg {
    let v3 = C::ty_vec_fits_in_register(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = &constructor_unmasked(ctx);
        let v7 = C::vstate_from_type(ctx, v4);
        let v8 = constructor_rv_vfabs_v(ctx, arg0, v6, v7);
        let v5 = C::lane_type(ctx, v4);
        let v9 = constructor_float_int_max(ctx, v5);
        let v10 = constructor_imm(ctx, v5, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_vmflt_vf(ctx, v8, v11, v6, v7);
        let v13 = constructor_gen_vfcvt_x_f(ctx, arg0, arg1, v7);
        let v14 = constructor_rv_vfcvt_f_x_v(ctx, v13, v6, v7);
        let v15 = constructor_rv_vfsgnj_vv(ctx, v14, arg0, v6, v7);
        let v16 = C::zero_reg(ctx);
        let v18 = constructor_float_int_of_same_size(ctx, v5);
        let v17 = C::xreg_to_reg(ctx, v16);
        let v19 = constructor_gen_bitcast(ctx, v17, v18, v5);
        let v20 = C::freg_new(ctx, v19);
        let v21 = constructor_rv_vfadd_vf(ctx, arg0, v20, v6, v7);
        let v22 = constructor_rv_vmerge_vvm(ctx, v21, v15, v12, v7);
        // Rule at src\isa\riscv64\inst_vector.isle line 1885.
        return v22;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_vec_round", "src\\isa\\riscv64\\inst_vector.isle line 1879"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1685,
            args: ref v1686,
            flags: v1687,
        } => {
            if let &Opcode::AtomicCas = v1685 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1616 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1617) = v1616 {
                        let v1651 = C::temp_writable_reg(ctx, v1617);
                        let v1692 = C::temp_writable_reg(ctx, v1617);
                        let v1688 = C::unpack_value_array_3(ctx, v1686);
                        let v1693 = constructor_put_in_xreg(ctx, v1688.0);
                        let v1694 = constructor_gen_atomic_offset(ctx, v1693, v1617);
                        let v1696 = constructor_zext(ctx, v1688.1);
                        let v1698 = constructor_put_in_xreg(ctx, v1688.0);
                        let v1699 = constructor_gen_atomic_p(ctx, v1698, v1617);
                        let v1701 = C::put_in_reg(ctx, v1688.2);
                        let v1695 = C::xreg_to_reg(ctx, v1694);
                        let v1697 = C::xreg_to_reg(ctx, v1696);
                        let v1700 = C::xreg_to_reg(ctx, v1699);
                        let v1702 = MInst::AtomicCas {
                            offset: v1695,
                            t0: v1651,
                            dst: v1692,
                            e: v1697,
                            addr: v1700,
                            v: v1701,
                            ty: v1617,
                        };
                        let v1703 = C::emit(ctx, &v1702);
                        let v1704 = C::writable_reg_to_reg(ctx, v1692);
                        let v1705 = constructor_output_reg(ctx, v1704);
                        let v1706 = Some(v1705);
                        // Rule at src\isa\riscv64\lower.isle line 1682.
                        return v1706;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1618,
            args: ref v1619,
            flags: v1620,
            op: ref v1621,
        } => {
            if let &Opcode::AtomicRmw = v1618 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1616 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1617) = v1616 {
                        let v1632 = C::fits_in_16(ctx, v1617);
                        if let Some(v1633) = v1632 {
                            let v1639 = C::is_atomic_rmw_max_etc(ctx, v1621);
                            if let Some(v1640) = v1639 {
                                match v1640.1 {
                                    true => {
                                        let v1622 = C::unpack_value_array_2(ctx, v1619);
                                        let v1634 = constructor_put_in_xreg(ctx, v1622.0);
                                        let v1643 = constructor_sext(ctx, v1622.1);
                                        let v1644 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1640.0, v1633, v1634, v1643,
                                        );
                                        let v1645 = constructor_output_xreg(ctx, v1644);
                                        let v1646 = Some(v1645);
                                        // Rule at src\isa\riscv64\lower.isle line 1614.
                                        return v1646;
                                    }
                                    false => {
                                        let v1622 = C::unpack_value_array_2(ctx, v1619);
                                        let v1634 = constructor_put_in_xreg(ctx, v1622.0);
                                        let v1647 = constructor_zext(ctx, v1622.1);
                                        let v1648 = constructor_gen_atomic_rmw_loop(
                                            ctx, &v1640.0, v1633, v1634, v1647,
                                        );
                                        let v1649 = constructor_output_xreg(ctx, v1648);
                                        let v1650 = Some(v1649);
                                        // Rule at src\isa\riscv64\lower.isle line 1620.
                                        return v1650;
                                    }
                                    _ => {}
                                }
                            }
                            let v1622 = C::unpack_value_array_2(ctx, v1619);
                            let v1634 = constructor_put_in_xreg(ctx, v1622.0);
                            let v1635 = constructor_put_in_xreg(ctx, v1622.1);
                            let v1636 =
                                constructor_gen_atomic_rmw_loop(ctx, v1621, v1633, v1634, v1635);
                            let v1637 = constructor_output_xreg(ctx, v1636);
                            let v1638 = Some(v1637);
                            // Rule at src\isa\riscv64\lower.isle line 1607.
                            return v1638;
                        }
                        match v1621 {
                            &AtomicRmwOp::Nand => {
                                let v1622 = C::unpack_value_array_2(ctx, v1619);
                                let v1634 = constructor_put_in_xreg(ctx, v1622.0);
                                let v1635 = constructor_put_in_xreg(ctx, v1622.1);
                                let v1662 = constructor_gen_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRmwOp::Nand,
                                    v1617,
                                    v1634,
                                    v1635,
                                );
                                let v1663 = constructor_output_xreg(ctx, v1662);
                                let v1664 = Some(v1663);
                                // Rule at src\isa\riscv64\lower.isle line 1647.
                                return v1664;
                            }
                            &AtomicRmwOp::Sub => {
                                let v1651 = C::temp_writable_reg(ctx, v1617);
                                let v1622 = C::unpack_value_array_2(ctx, v1619);
                                let v1635 = constructor_put_in_xreg(ctx, v1622.1);
                                let v1652 = constructor_rv_neg(ctx, v1635);
                                let v1655 =
                                    &constructor_get_atomic_rmw_op(ctx, v1617, &AtomicRmwOp::Add);
                                let v1656 = C::put_in_reg(ctx, v1622.0);
                                let v1657 = C::atomic_amo(ctx);
                                let v1653 = C::xreg_to_reg(ctx, v1652);
                                let v1658 = constructor_gen_atomic(ctx, v1655, v1656, v1653, v1657);
                                let v1659 = constructor_output_reg(ctx, v1658);
                                let v1660 = Some(v1659);
                                // Rule at src\isa\riscv64\lower.isle line 1629.
                                return v1660;
                            }
                            _ => {}
                        }
                        let v1625 = &constructor_get_atomic_rmw_op(ctx, v1617, v1621);
                        let v1622 = C::unpack_value_array_2(ctx, v1619);
                        let v1626 = C::put_in_reg(ctx, v1622.0);
                        let v1627 = C::put_in_reg(ctx, v1622.1);
                        let v1628 = C::atomic_amo(ctx);
                        let v1629 = constructor_gen_atomic(ctx, v1625, v1626, v1627, v1628);
                        let v1630 = constructor_output_reg(ctx, v1629);
                        let v1631 = Some(v1630);
                        // Rule at src\isa\riscv64\lower.isle line 1600.
                        return v1631;
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v43,
            args: ref v44,
        } => {
            match v43 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2589 = constructor_replicated_uimm5(ctx, v45.1);
                            if let Some(v2590) = v2589 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2591 =
                                    constructor_rv_vrgather_vi(ctx, v183, v2590, v185, v186);
                                let v2592 = constructor_output_vreg(ctx, v2591);
                                let v2593 = Some(v2592);
                                // Rule at src\isa\riscv64\lower.isle line 2769.
                                return v2593;
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2586 =
                                            constructor_rv_vrgather_vx(ctx, v183, v190, v185, v186);
                                        let v2587 = constructor_output_vreg(ctx, v2586);
                                        let v2588 = Some(v2587);
                                        // Rule at src\isa\riscv64\lower.isle line 2766.
                                        return v2588;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2583 = constructor_rv_vrgather_vv(ctx, v183, v184, v185, v186);
                            let v2584 = constructor_output_vreg(ctx, v2583);
                            let v2585 = Some(v2584);
                            // Rule at src\isa\riscv64\lower.isle line 2763.
                            return v2585;
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1992 =
                                            constructor_rv_vmin_vx(ctx, v218, v219, v185, v186);
                                        let v1993 = constructor_output_vreg(ctx, v1992);
                                        let v1994 = Some(v1993);
                                        // Rule at src\isa\riscv64\lower.isle line 1983.
                                        return v1994;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1989 =
                                            constructor_rv_vmin_vx(ctx, v183, v190, v185, v186);
                                        let v1990 = constructor_output_vreg(ctx, v1989);
                                        let v1991 = Some(v1990);
                                        // Rule at src\isa\riscv64\lower.isle line 1980.
                                        return v1991;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1986 = constructor_rv_vmin_vv(ctx, v183, v184, v185, v186);
                            let v1987 = constructor_output_vreg(ctx, v1986);
                            let v1988 = Some(v1987);
                            // Rule at src\isa\riscv64\lower.isle line 1977.
                            return v1988;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1982 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::SignedLessThan,
                                v45.0,
                                v45.1,
                            );
                            let v1963 = C::put_in_regs(ctx, v45.0);
                            let v1964 = C::put_in_regs(ctx, v45.1);
                            let v1983 = constructor_gen_select_regs(ctx, v1982, v1963, v1964);
                            let v1984 = C::output(ctx, v1983);
                            let v1985 = Some(v1984);
                            // Rule at src\isa\riscv64\lower.isle line 1974.
                            return v1985;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v589 = constructor_sext(ctx, v45.0);
                            let v590 = constructor_sext(ctx, v45.1);
                            let v1977 = constructor_cmp_lt(ctx, v589, v590);
                            let v1978 = constructor_gen_select_xreg(ctx, v1977, v589, v590);
                            let v1979 = constructor_output_xreg(ctx, v1978);
                            let v1980 = Some(v1979);
                            // Rule at src\isa\riscv64\lower.isle line 1969.
                            return v1980;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2027 =
                                            constructor_rv_vminu_vx(ctx, v218, v219, v185, v186);
                                        let v2028 = constructor_output_vreg(ctx, v2027);
                                        let v2029 = Some(v2028);
                                        // Rule at src\isa\riscv64\lower.isle line 2021.
                                        return v2029;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2024 =
                                            constructor_rv_vminu_vx(ctx, v183, v190, v185, v186);
                                        let v2025 = constructor_output_vreg(ctx, v2024);
                                        let v2026 = Some(v2025);
                                        // Rule at src\isa\riscv64\lower.isle line 2018.
                                        return v2026;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2021 = constructor_rv_vminu_vv(ctx, v183, v184, v185, v186);
                            let v2022 = constructor_output_vreg(ctx, v2021);
                            let v2023 = Some(v2022);
                            // Rule at src\isa\riscv64\lower.isle line 2015.
                            return v2023;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2017 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::UnsignedLessThan,
                                v45.0,
                                v45.1,
                            );
                            let v1963 = C::put_in_regs(ctx, v45.0);
                            let v1964 = C::put_in_regs(ctx, v45.1);
                            let v2018 = constructor_gen_select_regs(ctx, v2017, v1963, v1964);
                            let v2019 = C::output(ctx, v2018);
                            let v2020 = Some(v2019);
                            // Rule at src\isa\riscv64\lower.isle line 2012.
                            return v2020;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v603 = constructor_zext(ctx, v45.0);
                            let v604 = constructor_zext(ctx, v45.1);
                            let v2013 = constructor_cmp_ltu(ctx, v603, v604);
                            let v2014 = constructor_gen_select_xreg(ctx, v2013, v603, v604);
                            let v2015 = constructor_output_xreg(ctx, v2014);
                            let v2016 = Some(v2015);
                            // Rule at src\isa\riscv64\lower.isle line 2007.
                            return v2016;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1974 =
                                            constructor_rv_vmax_vx(ctx, v218, v219, v185, v186);
                                        let v1975 = constructor_output_vreg(ctx, v1974);
                                        let v1976 = Some(v1975);
                                        // Rule at src\isa\riscv64\lower.isle line 1964.
                                        return v1976;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1971 =
                                            constructor_rv_vmax_vx(ctx, v183, v190, v185, v186);
                                        let v1972 = constructor_output_vreg(ctx, v1971);
                                        let v1973 = Some(v1972);
                                        // Rule at src\isa\riscv64\lower.isle line 1961.
                                        return v1973;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1968 = constructor_rv_vmax_vv(ctx, v183, v184, v185, v186);
                            let v1969 = constructor_output_vreg(ctx, v1968);
                            let v1970 = Some(v1969);
                            // Rule at src\isa\riscv64\lower.isle line 1958.
                            return v1970;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1962 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::SignedGreaterThan,
                                v45.0,
                                v45.1,
                            );
                            let v1963 = C::put_in_regs(ctx, v45.0);
                            let v1964 = C::put_in_regs(ctx, v45.1);
                            let v1965 = constructor_gen_select_regs(ctx, v1962, v1963, v1964);
                            let v1966 = C::output(ctx, v1965);
                            let v1967 = Some(v1966);
                            // Rule at src\isa\riscv64\lower.isle line 1955.
                            return v1967;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v589 = constructor_sext(ctx, v45.0);
                            let v590 = constructor_sext(ctx, v45.1);
                            let v1957 = constructor_cmp_gt(ctx, v589, v590);
                            let v1958 = constructor_gen_select_xreg(ctx, v1957, v589, v590);
                            let v1959 = constructor_output_xreg(ctx, v1958);
                            let v1960 = Some(v1959);
                            // Rule at src\isa\riscv64\lower.isle line 1950.
                            return v1960;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2010 =
                                            constructor_rv_vmaxu_vx(ctx, v218, v219, v185, v186);
                                        let v2011 = constructor_output_vreg(ctx, v2010);
                                        let v2012 = Some(v2011);
                                        // Rule at src\isa\riscv64\lower.isle line 2002.
                                        return v2012;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2007 =
                                            constructor_rv_vmaxu_vx(ctx, v183, v190, v185, v186);
                                        let v2008 = constructor_output_vreg(ctx, v2007);
                                        let v2009 = Some(v2008);
                                        // Rule at src\isa\riscv64\lower.isle line 1999.
                                        return v2009;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2004 = constructor_rv_vmaxu_vv(ctx, v183, v184, v185, v186);
                            let v2005 = constructor_output_vreg(ctx, v2004);
                            let v2006 = Some(v2005);
                            // Rule at src\isa\riscv64\lower.isle line 1996.
                            return v2006;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v2000 = constructor_icmp_to_int_compare(
                                ctx,
                                &IntCC::UnsignedGreaterThan,
                                v45.0,
                                v45.1,
                            );
                            let v1963 = C::put_in_regs(ctx, v45.0);
                            let v1964 = C::put_in_regs(ctx, v45.1);
                            let v2001 = constructor_gen_select_regs(ctx, v2000, v1963, v1964);
                            let v2002 = C::output(ctx, v2001);
                            let v2003 = Some(v2002);
                            // Rule at src\isa\riscv64\lower.isle line 1993.
                            return v2003;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v603 = constructor_zext(ctx, v45.0);
                            let v604 = constructor_zext(ctx, v45.1);
                            let v1995 = constructor_cmp_gtu(ctx, v603, v604);
                            let v1996 = constructor_gen_select_xreg(ctx, v1995, v603, v604);
                            let v1997 = constructor_output_xreg(ctx, v1996);
                            let v1998 = Some(v1997);
                            // Rule at src\isa\riscv64\lower.isle line 1988.
                            return v1998;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1219 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v1220) = v1219 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v184 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v786 = constructor_rv_vand_vv(ctx, v183, v184, v185, v186);
                                let v2695 = constructor_put_in_vreg(ctx, v45.0);
                                let v2696 = constructor_put_in_vreg(ctx, v45.1);
                                let v2697 = constructor_rv_vxor_vv(ctx, v2695, v2696, v185, v186);
                                let v2698 = constructor_rv_vssrl_vi(ctx, v2697, v1220, v185, v186);
                                let v2699 = constructor_rv_vadd_vv(ctx, v786, v2698, v185, v186);
                                let v2700 = constructor_output_vreg(ctx, v2699);
                                let v2701 = Some(v2700);
                                // Rule at src\isa\riscv64\lower.isle line 2884.
                                return v2701;
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2531 = constructor_rv_vsaddu_vi(ctx, v218, v238, v185, v186);
                                let v2532 = constructor_output_vreg(ctx, v2531);
                                let v2533 = Some(v2532);
                                // Rule at src\isa\riscv64\lower.isle line 2674.
                                return v2533;
                            }
                            let v213 = constructor_replicated_imm5(ctx, v45.1);
                            if let Some(v214) = v213 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2528 = constructor_rv_vsaddu_vi(ctx, v183, v214, v185, v186);
                                let v2529 = constructor_output_vreg(ctx, v2528);
                                let v2530 = Some(v2529);
                                // Rule at src\isa\riscv64\lower.isle line 2670.
                                return v2530;
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2525 =
                                            constructor_rv_vsaddu_vx(ctx, v218, v219, v185, v186);
                                        let v2526 = constructor_output_vreg(ctx, v2525);
                                        let v2527 = Some(v2526);
                                        // Rule at src\isa\riscv64\lower.isle line 2667.
                                        return v2527;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2522 =
                                            constructor_rv_vsaddu_vx(ctx, v183, v190, v185, v186);
                                        let v2523 = constructor_output_vreg(ctx, v2522);
                                        let v2524 = Some(v2523);
                                        // Rule at src\isa\riscv64\lower.isle line 2664.
                                        return v2524;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2519 = constructor_rv_vsaddu_vv(ctx, v183, v184, v185, v186);
                            let v2520 = constructor_output_vreg(ctx, v2519);
                            let v2521 = Some(v2520);
                            // Rule at src\isa\riscv64\lower.isle line 2661.
                            return v2521;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2546 = constructor_rv_vsadd_vi(ctx, v218, v238, v185, v186);
                                let v2547 = constructor_output_vreg(ctx, v2546);
                                let v2548 = Some(v2547);
                                // Rule at src\isa\riscv64\lower.isle line 2693.
                                return v2548;
                            }
                            let v213 = constructor_replicated_imm5(ctx, v45.1);
                            if let Some(v214) = v213 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2543 = constructor_rv_vsadd_vi(ctx, v183, v214, v185, v186);
                                let v2544 = constructor_output_vreg(ctx, v2543);
                                let v2545 = Some(v2544);
                                // Rule at src\isa\riscv64\lower.isle line 2689.
                                return v2545;
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2540 =
                                            constructor_rv_vsadd_vx(ctx, v218, v219, v185, v186);
                                        let v2541 = constructor_output_vreg(ctx, v2540);
                                        let v2542 = Some(v2541);
                                        // Rule at src\isa\riscv64\lower.isle line 2686.
                                        return v2542;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2537 =
                                            constructor_rv_vsadd_vx(ctx, v183, v190, v185, v186);
                                        let v2538 = constructor_output_vreg(ctx, v2537);
                                        let v2539 = Some(v2538);
                                        // Rule at src\isa\riscv64\lower.isle line 2683.
                                        return v2539;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2534 = constructor_rv_vsadd_vv(ctx, v183, v184, v185, v186);
                            let v2535 = constructor_output_vreg(ctx, v2534);
                            let v2536 = Some(v2535);
                            // Rule at src\isa\riscv64\lower.isle line 2680.
                            return v2536;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2552 =
                                            constructor_rv_vssubu_vx(ctx, v183, v190, v185, v186);
                                        let v2553 = constructor_output_vreg(ctx, v2552);
                                        let v2554 = Some(v2553);
                                        // Rule at src\isa\riscv64\lower.isle line 2702.
                                        return v2554;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2549 = constructor_rv_vssubu_vv(ctx, v183, v184, v185, v186);
                            let v2550 = constructor_output_vreg(ctx, v2549);
                            let v2551 = Some(v2550);
                            // Rule at src\isa\riscv64\lower.isle line 2699.
                            return v2551;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2558 =
                                            constructor_rv_vssub_vx(ctx, v183, v190, v185, v186);
                                        let v2559 = constructor_output_vreg(ctx, v2558);
                                        let v2560 = Some(v2559);
                                        // Rule at src\isa\riscv64\lower.isle line 2710.
                                        return v2560;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2555 = constructor_rv_vssub_vv(ctx, v183, v184, v185, v186);
                            let v2556 = constructor_output_vreg(ctx, v2555);
                            let v2557 = Some(v2556);
                            // Rule at src\isa\riscv64\lower.isle line 2707.
                            return v2557;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v239 = constructor_rv_vadd_vi(ctx, v218, v238, v185, v186);
                                let v240 = constructor_output_vreg(ctx, v239);
                                let v241 = Some(v240);
                                // Rule at src\isa\riscv64\lower.isle line 143.
                                return v241;
                            }
                            let v213 = constructor_replicated_imm5(ctx, v45.1);
                            if let Some(v214) = v213 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v215 = constructor_rv_vadd_vi(ctx, v183, v214, v185, v186);
                                let v216 = constructor_output_vreg(ctx, v215);
                                let v217 = Some(v216);
                                // Rule at src\isa\riscv64\lower.isle line 125.
                                return v217;
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                match v89 {
                                    &InstructionData::Binary {
                                        opcode: ref v115,
                                        args: ref v116,
                                    } => {
                                        if let &Opcode::Imul = v115 {
                                            let v117 = C::unpack_value_array_2(ctx, v116);
                                            let v145 = C::def_inst(ctx, v117.0);
                                            if let Some(v146) = v145 {
                                                let v147 = &C::inst_data(ctx, v146);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v148,
                                                    arg: v149,
                                                } = v147
                                                {
                                                    if let &Opcode::Splat = v148 {
                                                        let v218 =
                                                            constructor_put_in_vreg(ctx, v45.1);
                                                        let v372 =
                                                            constructor_put_in_vreg(ctx, v117.1);
                                                        let v373 =
                                                            constructor_put_in_xreg(ctx, v149);
                                                        let v185 = &constructor_unmasked(ctx);
                                                        let v186 = C::vstate_from_type(ctx, v12);
                                                        let v374 = constructor_rv_vmacc_vx(
                                                            ctx, v218, v372, v373, v185, v186,
                                                        );
                                                        let v375 =
                                                            constructor_output_vreg(ctx, v374);
                                                        let v376 = Some(v375);
                                                        // Rule at src\isa\riscv64\lower.isle line 278.
                                                        return v376;
                                                    }
                                                }
                                            }
                                            let v363 = C::def_inst(ctx, v117.1);
                                            if let Some(v364) = v363 {
                                                let v365 = &C::inst_data(ctx, v364);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v366,
                                                    arg: v367,
                                                } = v365
                                                {
                                                    if let &Opcode::Splat = v366 {
                                                        let v218 =
                                                            constructor_put_in_vreg(ctx, v45.1);
                                                        let v358 =
                                                            constructor_put_in_vreg(ctx, v117.0);
                                                        let v368 =
                                                            constructor_put_in_xreg(ctx, v367);
                                                        let v185 = &constructor_unmasked(ctx);
                                                        let v186 = C::vstate_from_type(ctx, v12);
                                                        let v369 = constructor_rv_vmacc_vx(
                                                            ctx, v218, v358, v368, v185, v186,
                                                        );
                                                        let v370 =
                                                            constructor_output_vreg(ctx, v369);
                                                        let v371 = Some(v370);
                                                        // Rule at src\isa\riscv64\lower.isle line 275.
                                                        return v371;
                                                    }
                                                }
                                            }
                                            let v218 = constructor_put_in_vreg(ctx, v45.1);
                                            let v358 = constructor_put_in_vreg(ctx, v117.0);
                                            let v359 = constructor_put_in_vreg(ctx, v117.1);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v360 = constructor_rv_vmacc_vv(
                                                ctx, v218, v358, v359, v185, v186,
                                            );
                                            let v361 = constructor_output_vreg(ctx, v360);
                                            let v362 = Some(v361);
                                            // Rule at src\isa\riscv64\lower.isle line 272.
                                            return v362;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } => {
                                        match v90 {
                                            &Opcode::Splat => {
                                                let v223 = C::def_inst(ctx, v91);
                                                if let Some(v224) = v223 {
                                                    let v225 = &C::inst_data(ctx, v224);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v226,
                                                        arg: v227,
                                                    } = v225
                                                    {
                                                        match v226 {
                                                            &Opcode::Uextend => {
                                                                let v75 = C::def_inst(ctx, v45.1);
                                                                if let Some(v76) = v75 {
                                                                    let v77 =
                                                                        &C::inst_data(ctx, v76);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v78,
                                                                        arg: v79,
                                                                    } = v77 {
                                                                        match v78 {
                                                                            &Opcode::UwidenLow => {
                                                                                let v80 = C::value_type(ctx, v79);
                                                                                let v267 = C::lane_type(ctx, v80);
                                                                                let v228 = C::value_type(ctx, v227);
                                                                                let v268 = C::ty_equal(ctx, v267, v228);
                                                                                if v268 == true {
                                                                                    let v269 = constructor_put_in_vreg(ctx, v79);
                                                                                    let v230 = constructor_put_in_xreg(ctx, v227);
                                                                                    let v185 = &constructor_unmasked(ctx);
                                                                                    let v243 = C::ty_half_lanes(ctx, v80);
                                                                                    let v244 = v243?;
                                                                                    let v245 = C::vstate_from_type(ctx, v244);
                                                                                    let v246 = C::vstate_mf2(ctx, v245);
                                                                                    let v308 = constructor_rv_vwaddu_vx(ctx, v269, v230, v185, v246);
                                                                                    let v309 = constructor_output_vreg(ctx, v308);
                                                                                    let v310 = Some(v309);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 209.
                                                                                    return v310;
                                                                                }
                                                                            }
                                                                            &Opcode::UwidenHigh => {
                                                                                let v80 = C::value_type(ctx, v79);
                                                                                let v267 = C::lane_type(ctx, v80);
                                                                                let v228 = C::value_type(ctx, v227);
                                                                                let v268 = C::ty_equal(ctx, v267, v228);
                                                                                if v268 == true {
                                                                                    let v269 = constructor_put_in_vreg(ctx, v79);
                                                                                    let v291 = constructor_gen_slidedown_half(ctx, v80, v269);
                                                                                    let v292 = constructor_put_in_xreg(ctx, v227);
                                                                                    let v185 = &constructor_unmasked(ctx);
                                                                                    let v243 = C::ty_half_lanes(ctx, v80);
                                                                                    let v244 = v243?;
                                                                                    let v245 = C::vstate_from_type(ctx, v244);
                                                                                    let v246 = C::vstate_mf2(ctx, v245);
                                                                                    let v323 = constructor_rv_vwaddu_vx(ctx, v291, v292, v185, v246);
                                                                                    let v324 = constructor_output_vreg(ctx, v323);
                                                                                    let v325 = Some(v324);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 232.
                                                                                    return v325;
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v200 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v201) = v200 {
                                                                    let v202 =
                                                                        C::lane_type(ctx, v201);
                                                                    let v228 =
                                                                        C::value_type(ctx, v227);
                                                                    let v229 = C::ty_equal(
                                                                        ctx, v202, v228,
                                                                    );
                                                                    if v229 == true {
                                                                        let v218 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.1,
                                                                            );
                                                                        let v230 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v227,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v205 =
                                                                            C::vstate_from_type(
                                                                                ctx, v201,
                                                                            );
                                                                        let v206 = C::vstate_mf2(
                                                                            ctx, v205,
                                                                        );
                                                                        let v234 = constructor_rv_vwaddu_wx(ctx, v218, v230, v185, v206);
                                                                        let v235 =
                                                                            constructor_output_vreg(
                                                                                ctx, v234,
                                                                            );
                                                                        let v236 = Some(v235);
                                                                        // Rule at src\isa\riscv64\lower.isle line 138.
                                                                        return v236;
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v75 = C::def_inst(ctx, v45.1);
                                                                if let Some(v76) = v75 {
                                                                    let v77 =
                                                                        &C::inst_data(ctx, v76);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v78,
                                                                        arg: v79,
                                                                    } = v77 {
                                                                        match v78 {
                                                                            &Opcode::SwidenLow => {
                                                                                let v80 = C::value_type(ctx, v79);
                                                                                let v267 = C::lane_type(ctx, v80);
                                                                                let v228 = C::value_type(ctx, v227);
                                                                                let v268 = C::ty_equal(ctx, v267, v228);
                                                                                if v268 == true {
                                                                                    let v269 = constructor_put_in_vreg(ctx, v79);
                                                                                    let v230 = constructor_put_in_xreg(ctx, v227);
                                                                                    let v185 = &constructor_unmasked(ctx);
                                                                                    let v243 = C::ty_half_lanes(ctx, v80);
                                                                                    let v244 = v243?;
                                                                                    let v245 = C::vstate_from_type(ctx, v244);
                                                                                    let v246 = C::vstate_mf2(ctx, v245);
                                                                                    let v270 = constructor_rv_vwadd_vx(ctx, v269, v230, v185, v246);
                                                                                    let v271 = constructor_output_vreg(ctx, v270);
                                                                                    let v272 = Some(v271);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 164.
                                                                                    return v272;
                                                                                }
                                                                            }
                                                                            &Opcode::SwidenHigh => {
                                                                                let v80 = C::value_type(ctx, v79);
                                                                                let v267 = C::lane_type(ctx, v80);
                                                                                let v228 = C::value_type(ctx, v227);
                                                                                let v268 = C::ty_equal(ctx, v267, v228);
                                                                                if v268 == true {
                                                                                    let v269 = constructor_put_in_vreg(ctx, v79);
                                                                                    let v291 = constructor_gen_slidedown_half(ctx, v80, v269);
                                                                                    let v292 = constructor_put_in_xreg(ctx, v227);
                                                                                    let v185 = &constructor_unmasked(ctx);
                                                                                    let v243 = C::ty_half_lanes(ctx, v80);
                                                                                    let v244 = v243?;
                                                                                    let v245 = C::vstate_from_type(ctx, v244);
                                                                                    let v246 = C::vstate_mf2(ctx, v245);
                                                                                    let v293 = constructor_rv_vwadd_vx(ctx, v291, v292, v185, v246);
                                                                                    let v294 = constructor_output_vreg(ctx, v293);
                                                                                    let v295 = Some(v294);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 187.
                                                                                    return v295;
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                                let v200 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v201) = v200 {
                                                                    let v202 =
                                                                        C::lane_type(ctx, v201);
                                                                    let v228 =
                                                                        C::value_type(ctx, v227);
                                                                    let v229 = C::ty_equal(
                                                                        ctx, v202, v228,
                                                                    );
                                                                    if v229 == true {
                                                                        let v218 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.1,
                                                                            );
                                                                        let v230 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v227,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v205 =
                                                                            C::vstate_from_type(
                                                                                ctx, v201,
                                                                            );
                                                                        let v206 = C::vstate_mf2(
                                                                            ctx, v205,
                                                                        );
                                                                        let v231 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v218, v230,
                                                                                v185, v206,
                                                                            );
                                                                        let v232 =
                                                                            constructor_output_vreg(
                                                                                ctx, v231,
                                                                            );
                                                                        let v233 = Some(v232);
                                                                        // Rule at src\isa\riscv64\lower.isle line 133.
                                                                        return v233;
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                                let v219 = constructor_put_in_xreg(ctx, v91);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v186 = C::vstate_from_type(ctx, v12);
                                                let v220 = constructor_rv_vadd_vx(
                                                    ctx, v218, v219, v185, v186,
                                                );
                                                let v221 = constructor_output_vreg(ctx, v220);
                                                let v222 = Some(v221);
                                                // Rule at src\isa\riscv64\lower.isle line 130.
                                                return v222;
                                            }
                                            &Opcode::Ineg => {
                                                let v223 = C::def_inst(ctx, v91);
                                                if let Some(v224) = v223 {
                                                    let v225 = &C::inst_data(ctx, v224);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v406,
                                                        args: ref v407,
                                                    } = v225
                                                    {
                                                        if let &Opcode::Imul = v406 {
                                                            let v408 =
                                                                C::unpack_value_array_2(ctx, v407);
                                                            let v425 = C::def_inst(ctx, v408.0);
                                                            if let Some(v426) = v425 {
                                                                let v427 = &C::inst_data(ctx, v426);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v428,
                                                                    arg: v429,
                                                                } = v427
                                                                {
                                                                    if let &Opcode::Splat = v428 {
                                                                        let v218 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.1,
                                                                            );
                                                                        let v430 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v408.1,
                                                                            );
                                                                        let v431 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v429,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v186 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v432 = constructor_rv_vnmsac_vx(ctx, v218, v430, v431, v185, v186);
                                                                        let v433 =
                                                                            constructor_output_vreg(
                                                                                ctx, v432,
                                                                            );
                                                                        let v434 = Some(v433);
                                                                        // Rule at src\isa\riscv64\lower.isle line 298.
                                                                        return v434;
                                                                    }
                                                                }
                                                            }
                                                            let v416 = C::def_inst(ctx, v408.1);
                                                            if let Some(v417) = v416 {
                                                                let v418 = &C::inst_data(ctx, v417);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v419,
                                                                    arg: v420,
                                                                } = v418
                                                                {
                                                                    if let &Opcode::Splat = v419 {
                                                                        let v218 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.1,
                                                                            );
                                                                        let v411 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v408.0,
                                                                            );
                                                                        let v421 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v420,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v186 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v422 = constructor_rv_vnmsac_vx(ctx, v218, v411, v421, v185, v186);
                                                                        let v423 =
                                                                            constructor_output_vreg(
                                                                                ctx, v422,
                                                                            );
                                                                        let v424 = Some(v423);
                                                                        // Rule at src\isa\riscv64\lower.isle line 295.
                                                                        return v424;
                                                                    }
                                                                }
                                                            }
                                                            let v218 =
                                                                constructor_put_in_vreg(ctx, v45.1);
                                                            let v411 = constructor_put_in_vreg(
                                                                ctx, v408.0,
                                                            );
                                                            let v412 = constructor_put_in_vreg(
                                                                ctx, v408.1,
                                                            );
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v186 =
                                                                C::vstate_from_type(ctx, v12);
                                                            let v413 = constructor_rv_vnmsac_vv(
                                                                ctx, v218, v411, v412, v185, v186,
                                                            );
                                                            let v414 =
                                                                constructor_output_vreg(ctx, v413);
                                                            let v415 = Some(v414);
                                                            // Rule at src\isa\riscv64\lower.isle line 292.
                                                            return v415;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v75 = C::def_inst(ctx, v45.1);
                                                if let Some(v76) = v75 {
                                                    let v77 = &C::inst_data(ctx, v76);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v78,
                                                        arg: v79,
                                                    } = v77
                                                    {
                                                        match v78 {
                                                            &Opcode::Splat => {
                                                                let v194 = C::def_inst(ctx, v79);
                                                                if let Some(v195) = v194 {
                                                                    let v196 =
                                                                        &C::inst_data(ctx, v195);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v197,
                                                                        arg: v198,
                                                                    } = v196 {
                                                                        if let &Opcode::Sextend = v197 {
                                                                            let v92 = C::value_type(ctx, v91);
                                                                            let v262 = C::lane_type(ctx, v92);
                                                                            let v199 = C::value_type(ctx, v198);
                                                                            let v263 = C::ty_equal(ctx, v262, v199);
                                                                            if v263 == true {
                                                                                let v258 = constructor_put_in_vreg(ctx, v91);
                                                                                let v204 = constructor_put_in_xreg(ctx, v198);
                                                                                let v185 = &constructor_unmasked(ctx);
                                                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                                                let v252 = v251?;
                                                                                let v253 = C::vstate_from_type(ctx, v252);
                                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                                let v264 = constructor_rv_vwadd_vx(ctx, v258, v204, v185, v254);
                                                                                let v265 = constructor_output_vreg(ctx, v264);
                                                                                let v266 = Some(v265);
                                                                                // Rule at src\isa\riscv64\lower.isle line 159.
                                                                                return v266;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v242 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v259 = constructor_rv_vwadd_vv(
                                                                    ctx, v258, v242, v185, v254,
                                                                );
                                                                let v260 = constructor_output_vreg(
                                                                    ctx, v259,
                                                                );
                                                                let v261 = Some(v260);
                                                                // Rule at src\isa\riscv64\lower.isle line 155.
                                                                return v261;
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v242 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v326 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v242,
                                                                    );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v327 = constructor_rv_vwadd_vv(
                                                                    ctx, v258, v326, v185, v254,
                                                                );
                                                                let v328 = constructor_output_vreg(
                                                                    ctx, v327,
                                                                );
                                                                let v329 = Some(v328);
                                                                // Rule at src\isa\riscv64\lower.isle line 239.
                                                                return v329;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                                let v250 = constructor_put_in_vreg(ctx, v91);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v92 = C::value_type(ctx, v91);
                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                let v252 = v251?;
                                                let v253 = C::vstate_from_type(ctx, v252);
                                                let v254 = C::vstate_mf2(ctx, v253);
                                                let v255 = constructor_rv_vwadd_wv(
                                                    ctx, v218, v250, v185, v254,
                                                );
                                                let v256 = constructor_output_vreg(ctx, v255);
                                                let v257 = Some(v256);
                                                // Rule at src\isa\riscv64\lower.isle line 152.
                                                return v257;
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v75 = C::def_inst(ctx, v45.1);
                                                if let Some(v76) = v75 {
                                                    let v77 = &C::inst_data(ctx, v76);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v78,
                                                        arg: v79,
                                                    } = v77
                                                    {
                                                        match v78 {
                                                            &Opcode::Splat => {
                                                                let v194 = C::def_inst(ctx, v79);
                                                                if let Some(v195) = v194 {
                                                                    let v196 =
                                                                        &C::inst_data(ctx, v195);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v197,
                                                                        arg: v198,
                                                                    } = v196 {
                                                                        if let &Opcode::Sextend = v197 {
                                                                            let v92 = C::value_type(ctx, v91);
                                                                            let v262 = C::lane_type(ctx, v92);
                                                                            let v199 = C::value_type(ctx, v198);
                                                                            let v263 = C::ty_equal(ctx, v262, v199);
                                                                            if v263 == true {
                                                                                let v258 = constructor_put_in_vreg(ctx, v91);
                                                                                let v281 = constructor_gen_slidedown_half(ctx, v92, v258);
                                                                                let v287 = constructor_put_in_xreg(ctx, v198);
                                                                                let v185 = &constructor_unmasked(ctx);
                                                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                                                let v252 = v251?;
                                                                                let v253 = C::vstate_from_type(ctx, v252);
                                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                                let v288 = constructor_rv_vwadd_vx(ctx, v281, v287, v185, v254);
                                                                                let v289 = constructor_output_vreg(ctx, v288);
                                                                                let v290 = Some(v289);
                                                                                // Rule at src\isa\riscv64\lower.isle line 182.
                                                                                return v290;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::SwidenLow => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v281 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v258,
                                                                    );
                                                                let v282 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v330 = constructor_rv_vwadd_vv(
                                                                    ctx, v281, v282, v185, v254,
                                                                );
                                                                let v331 = constructor_output_vreg(
                                                                    ctx, v330,
                                                                );
                                                                let v332 = Some(v331);
                                                                // Rule at src\isa\riscv64\lower.isle line 243.
                                                                return v332;
                                                            }
                                                            &Opcode::SwidenHigh => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v281 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v258,
                                                                    );
                                                                let v282 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v283 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v282,
                                                                    );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v284 = constructor_rv_vwadd_vv(
                                                                    ctx, v281, v283, v185, v254,
                                                                );
                                                                let v285 = constructor_output_vreg(
                                                                    ctx, v284,
                                                                );
                                                                let v286 = Some(v285);
                                                                // Rule at src\isa\riscv64\lower.isle line 178.
                                                                return v286;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                                let v250 = constructor_put_in_vreg(ctx, v91);
                                                let v92 = C::value_type(ctx, v91);
                                                let v277 =
                                                    constructor_gen_slidedown_half(ctx, v92, v250);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                let v252 = v251?;
                                                let v253 = C::vstate_from_type(ctx, v252);
                                                let v254 = C::vstate_mf2(ctx, v253);
                                                let v278 = constructor_rv_vwadd_wv(
                                                    ctx, v218, v277, v185, v254,
                                                );
                                                let v279 = constructor_output_vreg(ctx, v278);
                                                let v280 = Some(v279);
                                                // Rule at src\isa\riscv64\lower.isle line 175.
                                                return v280;
                                            }
                                            &Opcode::UwidenLow => {
                                                let v75 = C::def_inst(ctx, v45.1);
                                                if let Some(v76) = v75 {
                                                    let v77 = &C::inst_data(ctx, v76);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v78,
                                                        arg: v79,
                                                    } = v77
                                                    {
                                                        match v78 {
                                                            &Opcode::Splat => {
                                                                let v194 = C::def_inst(ctx, v79);
                                                                if let Some(v195) = v194 {
                                                                    let v196 =
                                                                        &C::inst_data(ctx, v195);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v197,
                                                                        arg: v198,
                                                                    } = v196 {
                                                                        if let &Opcode::Uextend = v197 {
                                                                            let v92 = C::value_type(ctx, v91);
                                                                            let v262 = C::lane_type(ctx, v92);
                                                                            let v199 = C::value_type(ctx, v198);
                                                                            let v263 = C::ty_equal(ctx, v262, v199);
                                                                            if v263 == true {
                                                                                let v258 = constructor_put_in_vreg(ctx, v91);
                                                                                let v204 = constructor_put_in_xreg(ctx, v198);
                                                                                let v185 = &constructor_unmasked(ctx);
                                                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                                                let v252 = v251?;
                                                                                let v253 = C::vstate_from_type(ctx, v252);
                                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                                let v305 = constructor_rv_vwaddu_vx(ctx, v258, v204, v185, v254);
                                                                                let v306 = constructor_output_vreg(ctx, v305);
                                                                                let v307 = Some(v306);
                                                                                // Rule at src\isa\riscv64\lower.isle line 204.
                                                                                return v307;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v242 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v302 = constructor_rv_vwaddu_vv(
                                                                    ctx, v258, v242, v185, v254,
                                                                );
                                                                let v303 = constructor_output_vreg(
                                                                    ctx, v302,
                                                                );
                                                                let v304 = Some(v303);
                                                                // Rule at src\isa\riscv64\lower.isle line 200.
                                                                return v304;
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v242 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v326 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v242,
                                                                    );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v333 = constructor_rv_vwaddu_vv(
                                                                    ctx, v258, v326, v185, v254,
                                                                );
                                                                let v334 = constructor_output_vreg(
                                                                    ctx, v333,
                                                                );
                                                                let v335 = Some(v334);
                                                                // Rule at src\isa\riscv64\lower.isle line 249.
                                                                return v335;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                                let v250 = constructor_put_in_vreg(ctx, v91);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v92 = C::value_type(ctx, v91);
                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                let v252 = v251?;
                                                let v253 = C::vstate_from_type(ctx, v252);
                                                let v254 = C::vstate_mf2(ctx, v253);
                                                let v299 = constructor_rv_vwaddu_wv(
                                                    ctx, v218, v250, v185, v254,
                                                );
                                                let v300 = constructor_output_vreg(ctx, v299);
                                                let v301 = Some(v300);
                                                // Rule at src\isa\riscv64\lower.isle line 197.
                                                return v301;
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v75 = C::def_inst(ctx, v45.1);
                                                if let Some(v76) = v75 {
                                                    let v77 = &C::inst_data(ctx, v76);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v78,
                                                        arg: v79,
                                                    } = v77
                                                    {
                                                        match v78 {
                                                            &Opcode::Splat => {
                                                                let v194 = C::def_inst(ctx, v79);
                                                                if let Some(v195) = v194 {
                                                                    let v196 =
                                                                        &C::inst_data(ctx, v195);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v197,
                                                                        arg: v198,
                                                                    } = v196 {
                                                                        if let &Opcode::Uextend = v197 {
                                                                            let v92 = C::value_type(ctx, v91);
                                                                            let v262 = C::lane_type(ctx, v92);
                                                                            let v199 = C::value_type(ctx, v198);
                                                                            let v263 = C::ty_equal(ctx, v262, v199);
                                                                            if v263 == true {
                                                                                let v258 = constructor_put_in_vreg(ctx, v91);
                                                                                let v281 = constructor_gen_slidedown_half(ctx, v92, v258);
                                                                                let v287 = constructor_put_in_xreg(ctx, v198);
                                                                                let v185 = &constructor_unmasked(ctx);
                                                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                                                let v252 = v251?;
                                                                                let v253 = C::vstate_from_type(ctx, v252);
                                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                                let v320 = constructor_rv_vwaddu_vx(ctx, v281, v287, v185, v254);
                                                                                let v321 = constructor_output_vreg(ctx, v320);
                                                                                let v322 = Some(v321);
                                                                                // Rule at src\isa\riscv64\lower.isle line 227.
                                                                                return v322;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::UwidenLow => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v281 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v258,
                                                                    );
                                                                let v282 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v336 = constructor_rv_vwaddu_vv(
                                                                    ctx, v281, v282, v185, v254,
                                                                );
                                                                let v337 = constructor_output_vreg(
                                                                    ctx, v336,
                                                                );
                                                                let v338 = Some(v337);
                                                                // Rule at src\isa\riscv64\lower.isle line 253.
                                                                return v338;
                                                            }
                                                            &Opcode::UwidenHigh => {
                                                                let v258 = constructor_put_in_vreg(
                                                                    ctx, v91,
                                                                );
                                                                let v92 = C::value_type(ctx, v91);
                                                                let v281 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v258,
                                                                    );
                                                                let v282 = constructor_put_in_vreg(
                                                                    ctx, v79,
                                                                );
                                                                let v283 =
                                                                    constructor_gen_slidedown_half(
                                                                        ctx, v92, v282,
                                                                    );
                                                                let v185 =
                                                                    &constructor_unmasked(ctx);
                                                                let v251 =
                                                                    C::ty_half_lanes(ctx, v92);
                                                                let v252 = v251?;
                                                                let v253 =
                                                                    C::vstate_from_type(ctx, v252);
                                                                let v254 = C::vstate_mf2(ctx, v253);
                                                                let v317 = constructor_rv_vwaddu_vv(
                                                                    ctx, v281, v283, v185, v254,
                                                                );
                                                                let v318 = constructor_output_vreg(
                                                                    ctx, v317,
                                                                );
                                                                let v319 = Some(v318);
                                                                // Rule at src\isa\riscv64\lower.isle line 223.
                                                                return v319;
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                                let v250 = constructor_put_in_vreg(ctx, v91);
                                                let v92 = C::value_type(ctx, v91);
                                                let v277 =
                                                    constructor_gen_slidedown_half(ctx, v92, v250);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v251 = C::ty_half_lanes(ctx, v92);
                                                let v252 = v251?;
                                                let v253 = C::vstate_from_type(ctx, v252);
                                                let v254 = C::vstate_mf2(ctx, v253);
                                                let v314 = constructor_rv_vwaddu_wv(
                                                    ctx, v218, v277, v185, v254,
                                                );
                                                let v315 = constructor_output_vreg(ctx, v314);
                                                let v316 = Some(v315);
                                                // Rule at src\isa\riscv64\lower.isle line 220.
                                                return v316;
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                match v77 {
                                    &InstructionData::Binary {
                                        opcode: ref v97,
                                        args: ref v98,
                                    } => {
                                        if let &Opcode::Imul = v97 {
                                            let v99 = C::unpack_value_array_2(ctx, v98);
                                            let v133 = C::def_inst(ctx, v99.0);
                                            if let Some(v134) = v133 {
                                                let v135 = &C::inst_data(ctx, v134);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v136,
                                                    arg: v137,
                                                } = v135
                                                {
                                                    if let &Opcode::Splat = v136 {
                                                        let v183 =
                                                            constructor_put_in_vreg(ctx, v45.0);
                                                        let v353 =
                                                            constructor_put_in_vreg(ctx, v99.1);
                                                        let v354 =
                                                            constructor_put_in_xreg(ctx, v137);
                                                        let v185 = &constructor_unmasked(ctx);
                                                        let v186 = C::vstate_from_type(ctx, v12);
                                                        let v355 = constructor_rv_vmacc_vx(
                                                            ctx, v183, v353, v354, v185, v186,
                                                        );
                                                        let v356 =
                                                            constructor_output_vreg(ctx, v355);
                                                        let v357 = Some(v356);
                                                        // Rule at src\isa\riscv64\lower.isle line 269.
                                                        return v357;
                                                    }
                                                }
                                            }
                                            let v344 = C::def_inst(ctx, v99.1);
                                            if let Some(v345) = v344 {
                                                let v346 = &C::inst_data(ctx, v345);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v347,
                                                    arg: v348,
                                                } = v346
                                                {
                                                    if let &Opcode::Splat = v347 {
                                                        let v183 =
                                                            constructor_put_in_vreg(ctx, v45.0);
                                                        let v339 =
                                                            constructor_put_in_vreg(ctx, v99.0);
                                                        let v349 =
                                                            constructor_put_in_xreg(ctx, v348);
                                                        let v185 = &constructor_unmasked(ctx);
                                                        let v186 = C::vstate_from_type(ctx, v12);
                                                        let v350 = constructor_rv_vmacc_vx(
                                                            ctx, v183, v339, v349, v185, v186,
                                                        );
                                                        let v351 =
                                                            constructor_output_vreg(ctx, v350);
                                                        let v352 = Some(v351);
                                                        // Rule at src\isa\riscv64\lower.isle line 266.
                                                        return v352;
                                                    }
                                                }
                                            }
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v339 = constructor_put_in_vreg(ctx, v99.0);
                                            let v340 = constructor_put_in_vreg(ctx, v99.1);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v341 = constructor_rv_vmacc_vv(
                                                ctx, v183, v339, v340, v185, v186,
                                            );
                                            let v342 = constructor_output_vreg(ctx, v341);
                                            let v343 = Some(v342);
                                            // Rule at src\isa\riscv64\lower.isle line 263.
                                            return v343;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } => {
                                        match v78 {
                                            &Opcode::Splat => {
                                                let v194 = C::def_inst(ctx, v79);
                                                if let Some(v195) = v194 {
                                                    let v196 = &C::inst_data(ctx, v195);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v197,
                                                        arg: v198,
                                                    } = v196
                                                    {
                                                        match v197 {
                                                            &Opcode::Uextend => {
                                                                let v200 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v201) = v200 {
                                                                    let v202 =
                                                                        C::lane_type(ctx, v201);
                                                                    let v199 =
                                                                        C::value_type(ctx, v198);
                                                                    let v203 = C::ty_equal(
                                                                        ctx, v202, v199,
                                                                    );
                                                                    if v203 == true {
                                                                        let v183 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.0,
                                                                            );
                                                                        let v204 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v198,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v205 =
                                                                            C::vstate_from_type(
                                                                                ctx, v201,
                                                                            );
                                                                        let v206 = C::vstate_mf2(
                                                                            ctx, v205,
                                                                        );
                                                                        let v210 = constructor_rv_vwaddu_wx(ctx, v183, v204, v185, v206);
                                                                        let v211 =
                                                                            constructor_output_vreg(
                                                                                ctx, v210,
                                                                            );
                                                                        let v212 = Some(v211);
                                                                        // Rule at src\isa\riscv64\lower.isle line 120.
                                                                        return v212;
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Sextend => {
                                                                let v200 =
                                                                    C::ty_half_width(ctx, v12);
                                                                if let Some(v201) = v200 {
                                                                    let v202 =
                                                                        C::lane_type(ctx, v201);
                                                                    let v199 =
                                                                        C::value_type(ctx, v198);
                                                                    let v203 = C::ty_equal(
                                                                        ctx, v202, v199,
                                                                    );
                                                                    if v203 == true {
                                                                        let v183 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.0,
                                                                            );
                                                                        let v204 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v198,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v205 =
                                                                            C::vstate_from_type(
                                                                                ctx, v201,
                                                                            );
                                                                        let v206 = C::vstate_mf2(
                                                                            ctx, v205,
                                                                        );
                                                                        let v207 =
                                                                            constructor_rv_vwadd_wx(
                                                                                ctx, v183, v204,
                                                                                v185, v206,
                                                                            );
                                                                        let v208 =
                                                                            constructor_output_vreg(
                                                                                ctx, v207,
                                                                            );
                                                                        let v209 = Some(v208);
                                                                        // Rule at src\isa\riscv64\lower.isle line 115.
                                                                        return v209;
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v190 = constructor_put_in_xreg(ctx, v79);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v186 = C::vstate_from_type(ctx, v12);
                                                let v191 = constructor_rv_vadd_vx(
                                                    ctx, v183, v190, v185, v186,
                                                );
                                                let v192 = constructor_output_vreg(ctx, v191);
                                                let v193 = Some(v192);
                                                // Rule at src\isa\riscv64\lower.isle line 112.
                                                return v193;
                                            }
                                            &Opcode::Ineg => {
                                                let v194 = C::def_inst(ctx, v79);
                                                if let Some(v195) = v194 {
                                                    let v196 = &C::inst_data(ctx, v195);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v377,
                                                        args: ref v378,
                                                    } = v196
                                                    {
                                                        if let &Opcode::Imul = v377 {
                                                            let v379 =
                                                                C::unpack_value_array_2(ctx, v378);
                                                            let v396 = C::def_inst(ctx, v379.0);
                                                            if let Some(v397) = v396 {
                                                                let v398 = &C::inst_data(ctx, v397);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v399,
                                                                    arg: v400,
                                                                } = v398
                                                                {
                                                                    if let &Opcode::Splat = v399 {
                                                                        let v183 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.0,
                                                                            );
                                                                        let v401 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v379.1,
                                                                            );
                                                                        let v402 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v400,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v186 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v403 = constructor_rv_vnmsac_vx(ctx, v183, v401, v402, v185, v186);
                                                                        let v404 =
                                                                            constructor_output_vreg(
                                                                                ctx, v403,
                                                                            );
                                                                        let v405 = Some(v404);
                                                                        // Rule at src\isa\riscv64\lower.isle line 289.
                                                                        return v405;
                                                                    }
                                                                }
                                                            }
                                                            let v387 = C::def_inst(ctx, v379.1);
                                                            if let Some(v388) = v387 {
                                                                let v389 = &C::inst_data(ctx, v388);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v390,
                                                                    arg: v391,
                                                                } = v389
                                                                {
                                                                    if let &Opcode::Splat = v390 {
                                                                        let v183 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v45.0,
                                                                            );
                                                                        let v382 =
                                                                            constructor_put_in_vreg(
                                                                                ctx, v379.0,
                                                                            );
                                                                        let v392 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v391,
                                                                            );
                                                                        let v185 =
                                                                            &constructor_unmasked(
                                                                                ctx,
                                                                            );
                                                                        let v186 =
                                                                            C::vstate_from_type(
                                                                                ctx, v12,
                                                                            );
                                                                        let v393 = constructor_rv_vnmsac_vx(ctx, v183, v382, v392, v185, v186);
                                                                        let v394 =
                                                                            constructor_output_vreg(
                                                                                ctx, v393,
                                                                            );
                                                                        let v395 = Some(v394);
                                                                        // Rule at src\isa\riscv64\lower.isle line 286.
                                                                        return v395;
                                                                    }
                                                                }
                                                            }
                                                            let v183 =
                                                                constructor_put_in_vreg(ctx, v45.0);
                                                            let v382 = constructor_put_in_vreg(
                                                                ctx, v379.0,
                                                            );
                                                            let v383 = constructor_put_in_vreg(
                                                                ctx, v379.1,
                                                            );
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v186 =
                                                                C::vstate_from_type(ctx, v12);
                                                            let v384 = constructor_rv_vnmsac_vv(
                                                                ctx, v183, v382, v383, v185, v186,
                                                            );
                                                            let v385 =
                                                                constructor_output_vreg(ctx, v384);
                                                            let v386 = Some(v385);
                                                            // Rule at src\isa\riscv64\lower.isle line 283.
                                                            return v386;
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenLow => {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v242 = constructor_put_in_vreg(ctx, v79);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v80 = C::value_type(ctx, v79);
                                                let v243 = C::ty_half_lanes(ctx, v80);
                                                let v244 = v243?;
                                                let v245 = C::vstate_from_type(ctx, v244);
                                                let v246 = C::vstate_mf2(ctx, v245);
                                                let v247 = constructor_rv_vwadd_wv(
                                                    ctx, v183, v242, v185, v246,
                                                );
                                                let v248 = constructor_output_vreg(ctx, v247);
                                                let v249 = Some(v248);
                                                // Rule at src\isa\riscv64\lower.isle line 149.
                                                return v249;
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v242 = constructor_put_in_vreg(ctx, v79);
                                                let v80 = C::value_type(ctx, v79);
                                                let v273 =
                                                    constructor_gen_slidedown_half(ctx, v80, v242);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v243 = C::ty_half_lanes(ctx, v80);
                                                let v244 = v243?;
                                                let v245 = C::vstate_from_type(ctx, v244);
                                                let v246 = C::vstate_mf2(ctx, v245);
                                                let v274 = constructor_rv_vwadd_wv(
                                                    ctx, v183, v273, v185, v246,
                                                );
                                                let v275 = constructor_output_vreg(ctx, v274);
                                                let v276 = Some(v275);
                                                // Rule at src\isa\riscv64\lower.isle line 172.
                                                return v276;
                                            }
                                            &Opcode::UwidenLow => {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v242 = constructor_put_in_vreg(ctx, v79);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v80 = C::value_type(ctx, v79);
                                                let v243 = C::ty_half_lanes(ctx, v80);
                                                let v244 = v243?;
                                                let v245 = C::vstate_from_type(ctx, v244);
                                                let v246 = C::vstate_mf2(ctx, v245);
                                                let v296 = constructor_rv_vwaddu_wv(
                                                    ctx, v183, v242, v185, v246,
                                                );
                                                let v297 = constructor_output_vreg(ctx, v296);
                                                let v298 = Some(v297);
                                                // Rule at src\isa\riscv64\lower.isle line 194.
                                                return v298;
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v242 = constructor_put_in_vreg(ctx, v79);
                                                let v80 = C::value_type(ctx, v79);
                                                let v273 =
                                                    constructor_gen_slidedown_half(ctx, v80, v242);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v243 = C::ty_half_lanes(ctx, v80);
                                                let v244 = v243?;
                                                let v245 = C::vstate_from_type(ctx, v244);
                                                let v246 = C::vstate_mf2(ctx, v245);
                                                let v311 = constructor_rv_vwaddu_wv(
                                                    ctx, v183, v273, v185, v246,
                                                );
                                                let v312 = constructor_output_vreg(ctx, v311);
                                                let v313 = Some(v312);
                                                // Rule at src\isa\riscv64\lower.isle line 217.
                                                return v313;
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v187 = constructor_rv_vadd_vv(ctx, v183, v184, v185, v186);
                            let v188 = constructor_output_vreg(ctx, v187);
                            let v189 = Some(v188);
                            // Rule at src\isa\riscv64\lower.isle line 109.
                            return v189;
                        }
                        match v3 {
                            I64 => {
                                let v81 = C::has_zba(ctx);
                                if v81 == true {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Binary {
                                            opcode: ref v115,
                                            args: ref v116,
                                        } = v89
                                        {
                                            if let &Opcode::Ishl = v115 {
                                                let v117 = C::unpack_value_array_2(ctx, v116);
                                                let v120 = C::maybe_uextend(ctx, v117.1);
                                                if let Some(v121) = v120 {
                                                    let v122 = C::def_inst(ctx, v121);
                                                    if let Some(v123) = v122 {
                                                        let v124 = &C::inst_data(ctx, v123);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v125,
                                                            imm: v126,
                                                        } = v124
                                                        {
                                                            if let &Opcode::Iconst = v125 {
                                                                let v145 = C::def_inst(ctx, v117.0);
                                                                if let Some(v146) = v145 {
                                                                    let v147 =
                                                                        &C::inst_data(ctx, v146);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v148,
                                                                        arg: v149,
                                                                    } = v147 {
                                                                        if let &Opcode::Uextend = v148 {
                                                                            let v150 = C::value_type(ctx, v149);
                                                                            if v150 == I32 {
                                                                                let v151 = &constructor_match_shnadd_uw(ctx, v126);
                                                                                if let Some(v152) = v151 {
                                                                                    let v153 = C::put_in_reg(ctx, v149);
                                                                                    let v71 = C::put_in_reg(ctx, v45.1);
                                                                                    let v154 = constructor_alu_rrr(ctx, v152, v153, v71);
                                                                                    let v155 = constructor_output_reg(ctx, v154);
                                                                                    let v156 = Some(v155);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 92.
                                                                                    return v156;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v77
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v102 = C::maybe_uextend(ctx, v99.1);
                                                if let Some(v103) = v102 {
                                                    let v104 = C::def_inst(ctx, v103);
                                                    if let Some(v105) = v104 {
                                                        let v106 = &C::inst_data(ctx, v105);
                                                        if let &InstructionData::UnaryImm {
                                                            opcode: ref v107,
                                                            imm: v108,
                                                        } = v106
                                                        {
                                                            if let &Opcode::Iconst = v107 {
                                                                let v133 = C::def_inst(ctx, v99.0);
                                                                if let Some(v134) = v133 {
                                                                    let v135 =
                                                                        &C::inst_data(ctx, v134);
                                                                    if let &InstructionData::Unary {
                                                                        opcode: ref v136,
                                                                        arg: v137,
                                                                    } = v135 {
                                                                        if let &Opcode::Uextend = v136 {
                                                                            let v138 = C::value_type(ctx, v137);
                                                                            if v138 == I32 {
                                                                                let v139 = &constructor_match_shnadd_uw(ctx, v108);
                                                                                if let Some(v140) = v139 {
                                                                                    let v141 = C::put_in_reg(ctx, v137);
                                                                                    let v63 = C::put_in_reg(ctx, v45.0);
                                                                                    let v142 = constructor_alu_rrr(ctx, v140, v141, v63);
                                                                                    let v143 = constructor_output_reg(ctx, v142);
                                                                                    let v144 = Some(v143);
                                                                                    // Rule at src\isa\riscv64\lower.isle line 87.
                                                                                    return v144;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        match v89 {
                                            &InstructionData::Binary {
                                                opcode: ref v115,
                                                args: ref v116,
                                            } => {
                                                if let &Opcode::Ishl = v115 {
                                                    let v117 = C::unpack_value_array_2(ctx, v116);
                                                    let v120 = C::maybe_uextend(ctx, v117.1);
                                                    if let Some(v121) = v120 {
                                                        let v122 = C::def_inst(ctx, v121);
                                                        if let Some(v123) = v122 {
                                                            let v124 = &C::inst_data(ctx, v123);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v125,
                                                                imm: v126,
                                                            } = v124
                                                            {
                                                                if let &Opcode::Iconst = v125 {
                                                                    let v127 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v126,
                                                                        );
                                                                    if let Some(v128) = v127 {
                                                                        let v129 = C::put_in_reg(
                                                                            ctx, v117.0,
                                                                        );
                                                                        let v71 = C::put_in_reg(
                                                                            ctx, v45.1,
                                                                        );
                                                                        let v130 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v128, v129,
                                                                                v71,
                                                                            );
                                                                        let v131 =
                                                                            constructor_output_reg(
                                                                                ctx, v130,
                                                                            );
                                                                        let v132 = Some(v131);
                                                                        // Rule at src\isa\riscv64\lower.isle line 70.
                                                                        return v132;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v90,
                                                arg: v91,
                                            } => {
                                                if let &Opcode::Uextend = v90 {
                                                    let v92 = C::value_type(ctx, v91);
                                                    if v92 == I32 {
                                                        let v93 = constructor_put_in_xreg(ctx, v91);
                                                        let v49 =
                                                            constructor_put_in_xreg(ctx, v45.1);
                                                        let v94 =
                                                            constructor_rv_adduw(ctx, v93, v49);
                                                        let v95 = constructor_output_xreg(ctx, v94);
                                                        let v96 = Some(v95);
                                                        // Rule at src\isa\riscv64\lower.isle line 55.
                                                        return v96;
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        match v77 {
                                            &InstructionData::Binary {
                                                opcode: ref v97,
                                                args: ref v98,
                                            } => {
                                                if let &Opcode::Ishl = v97 {
                                                    let v99 = C::unpack_value_array_2(ctx, v98);
                                                    let v102 = C::maybe_uextend(ctx, v99.1);
                                                    if let Some(v103) = v102 {
                                                        let v104 = C::def_inst(ctx, v103);
                                                        if let Some(v105) = v104 {
                                                            let v106 = &C::inst_data(ctx, v105);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v107,
                                                                imm: v108,
                                                            } = v106
                                                            {
                                                                if let &Opcode::Iconst = v107 {
                                                                    let v109 =
                                                                        &constructor_match_shnadd(
                                                                            ctx, v108,
                                                                        );
                                                                    if let Some(v110) = v109 {
                                                                        let v111 = C::put_in_reg(
                                                                            ctx, v99.0,
                                                                        );
                                                                        let v63 = C::put_in_reg(
                                                                            ctx, v45.0,
                                                                        );
                                                                        let v112 =
                                                                            constructor_alu_rrr(
                                                                                ctx, v110, v111,
                                                                                v63,
                                                                            );
                                                                        let v113 =
                                                                            constructor_output_reg(
                                                                                ctx, v112,
                                                                            );
                                                                        let v114 = Some(v113);
                                                                        // Rule at src\isa\riscv64\lower.isle line 65.
                                                                        return v114;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &InstructionData::Unary {
                                                opcode: ref v78,
                                                arg: v79,
                                            } => {
                                                if let &Opcode::Uextend = v78 {
                                                    let v80 = C::value_type(ctx, v79);
                                                    if v80 == I32 {
                                                        let v82 = constructor_put_in_xreg(ctx, v79);
                                                        let v83 =
                                                            constructor_put_in_xreg(ctx, v45.0);
                                                        let v84 =
                                                            constructor_rv_adduw(ctx, v82, v83);
                                                        let v85 = constructor_output_xreg(ctx, v84);
                                                        let v86 = Some(v85);
                                                        // Rule at src\isa\riscv64\lower.isle line 51.
                                                        return v86;
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v157 = C::put_in_regs(ctx, v45.0);
                                let v159 = C::value_regs_get(ctx, v157, 0x0);
                                let v160 = C::xreg_new(ctx, v159);
                                let v161 = C::put_in_regs(ctx, v45.1);
                                let v162 = C::value_regs_get(ctx, v161, 0x0);
                                let v163 = C::xreg_new(ctx, v162);
                                let v164 = constructor_rv_add(ctx, v160, v163);
                                let v165 = C::put_in_regs(ctx, v45.1);
                                let v166 = C::value_regs_get(ctx, v165, 0x0);
                                let v167 = C::xreg_new(ctx, v166);
                                let v168 = constructor_rv_sltu(ctx, v164, v167);
                                let v169 = C::put_in_regs(ctx, v45.0);
                                let v171 = C::value_regs_get(ctx, v169, 0x1);
                                let v172 = C::xreg_new(ctx, v171);
                                let v173 = C::put_in_regs(ctx, v45.1);
                                let v174 = C::value_regs_get(ctx, v173, 0x1);
                                let v175 = C::xreg_new(ctx, v174);
                                let v176 = constructor_rv_add(ctx, v172, v175);
                                let v177 = constructor_rv_add(ctx, v176, v168);
                                let v178 = C::xreg_to_reg(ctx, v164);
                                let v179 = C::xreg_to_reg(ctx, v177);
                                let v180 = C::value_regs(ctx, v178, v179);
                                let v181 = C::output(ctx, v180);
                                let v182 = Some(v181);
                                // Rule at src\isa\riscv64\lower.isle line 98.
                                return v182;
                            }
                            _ => {}
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v67 = C::i64_from_iconst(ctx, v45.0);
                            if let Some(v68) = v67 {
                                let v69 = C::imm12_from_i64(ctx, v68);
                                if let Some(v70) = v69 {
                                    let v62 = &constructor_select_addi(ctx, v57);
                                    let v71 = C::put_in_reg(ctx, v45.1);
                                    let v72 = constructor_alu_rr_imm12(ctx, v62, v71, v70);
                                    let v73 = constructor_output_reg(ctx, v72);
                                    let v74 = Some(v73);
                                    // Rule at src\isa\riscv64\lower.isle line 46.
                                    return v74;
                                }
                            }
                            let v58 = C::i64_from_iconst(ctx, v45.1);
                            if let Some(v59) = v58 {
                                let v60 = C::imm12_from_i64(ctx, v59);
                                if let Some(v61) = v60 {
                                    let v62 = &constructor_select_addi(ctx, v57);
                                    let v63 = C::put_in_reg(ctx, v45.0);
                                    let v64 = constructor_alu_rr_imm12(ctx, v62, v63, v61);
                                    let v65 = constructor_output_reg(ctx, v64);
                                    let v66 = Some(v65);
                                    // Rule at src\isa\riscv64\lower.isle line 43.
                                    return v66;
                                }
                            }
                        }
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                            let v49 = constructor_put_in_xreg(ctx, v45.1);
                            let v53 = constructor_rv_add(ctx, v48, v49);
                            let v54 = constructor_output_xreg(ctx, v53);
                            let v55 = Some(v54);
                            // Rule at src\isa\riscv64\lower.isle line 39.
                            return v55;
                        }
                        let v39 = C::fits_in_32(ctx, v3);
                        if let Some(v40) = v39 {
                            let v41 = C::ty_int(ctx, v40);
                            if let Some(v42) = v41 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v49 = constructor_put_in_xreg(ctx, v45.1);
                                let v50 = constructor_rv_addw(ctx, v48, v49);
                                let v51 = constructor_output_xreg(ctx, v50);
                                let v52 = Some(v51);
                                // Rule at src\isa\riscv64\lower.isle line 36.
                                return v52;
                            }
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    match v78 {
                                        &Opcode::Splat => {
                                            let v87 = C::def_inst(ctx, v45.0);
                                            if let Some(v88) = v87 {
                                                let v89 = &C::inst_data(ctx, v88);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v90,
                                                    arg: v91,
                                                } = v89
                                                {
                                                    match v90 {
                                                        &Opcode::SwidenLow => {
                                                            let v194 = C::def_inst(ctx, v79);
                                                            if let Some(v195) = v194 {
                                                                let v196 = &C::inst_data(ctx, v195);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v197,
                                                                    arg: v198,
                                                                } = v196
                                                                {
                                                                    if let &Opcode::Sextend = v197 {
                                                                        let v92 =
                                                                            C::value_type(ctx, v91);
                                                                        let v262 =
                                                                            C::lane_type(ctx, v92);
                                                                        let v199 = C::value_type(
                                                                            ctx, v198,
                                                                        );
                                                                        let v263 = C::ty_equal(
                                                                            ctx, v262, v199,
                                                                        );
                                                                        if v263 == true {
                                                                            let v258 = constructor_put_in_vreg(ctx, v91);
                                                                            let v204 = constructor_put_in_xreg(ctx, v198);
                                                                            let v185 = &constructor_unmasked(ctx);
                                                                            let v251 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v92,
                                                                                );
                                                                            let v252 = v251?;
                                                                            let v253 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v252,
                                                                                );
                                                                            let v254 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v253,
                                                                                );
                                                                            let v503 = constructor_rv_vwsub_vx(ctx, v258, v204, v185, v254);
                                                                            let v504 = constructor_output_vreg(ctx, v503);
                                                                            let v505 = Some(v504);
                                                                            // Rule at src\isa\riscv64\lower.isle line 370.
                                                                            return v505;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v194 = C::def_inst(ctx, v79);
                                                            if let Some(v195) = v194 {
                                                                let v196 = &C::inst_data(ctx, v195);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v197,
                                                                    arg: v198,
                                                                } = v196
                                                                {
                                                                    if let &Opcode::Sextend = v197 {
                                                                        let v92 =
                                                                            C::value_type(ctx, v91);
                                                                        let v262 =
                                                                            C::lane_type(ctx, v92);
                                                                        let v199 = C::value_type(
                                                                            ctx, v198,
                                                                        );
                                                                        let v263 = C::ty_equal(
                                                                            ctx, v262, v199,
                                                                        );
                                                                        if v263 == true {
                                                                            let v258 = constructor_put_in_vreg(ctx, v91);
                                                                            let v281 = constructor_gen_slidedown_half(ctx, v92, v258);
                                                                            let v287 = constructor_put_in_xreg(ctx, v198);
                                                                            let v185 = &constructor_unmasked(ctx);
                                                                            let v251 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v92,
                                                                                );
                                                                            let v252 = v251?;
                                                                            let v253 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v252,
                                                                                );
                                                                            let v254 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v253,
                                                                                );
                                                                            let v512 = constructor_rv_vwsub_vx(ctx, v281, v287, v185, v254);
                                                                            let v513 = constructor_output_vreg(ctx, v512);
                                                                            let v514 = Some(v513);
                                                                            // Rule at src\isa\riscv64\lower.isle line 385.
                                                                            return v514;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenLow => {
                                                            let v194 = C::def_inst(ctx, v79);
                                                            if let Some(v195) = v194 {
                                                                let v196 = &C::inst_data(ctx, v195);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v197,
                                                                    arg: v198,
                                                                } = v196
                                                                {
                                                                    if let &Opcode::Uextend = v197 {
                                                                        let v92 =
                                                                            C::value_type(ctx, v91);
                                                                        let v262 =
                                                                            C::lane_type(ctx, v92);
                                                                        let v199 = C::value_type(
                                                                            ctx, v198,
                                                                        );
                                                                        let v263 = C::ty_equal(
                                                                            ctx, v262, v199,
                                                                        );
                                                                        if v263 == true {
                                                                            let v258 = constructor_put_in_vreg(ctx, v91);
                                                                            let v204 = constructor_put_in_xreg(ctx, v198);
                                                                            let v185 = &constructor_unmasked(ctx);
                                                                            let v251 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v92,
                                                                                );
                                                                            let v252 = v251?;
                                                                            let v253 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v252,
                                                                                );
                                                                            let v254 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v253,
                                                                                );
                                                                            let v521 = constructor_rv_vwsubu_vx(ctx, v258, v204, v185, v254);
                                                                            let v522 = constructor_output_vreg(ctx, v521);
                                                                            let v523 = Some(v522);
                                                                            // Rule at src\isa\riscv64\lower.isle line 399.
                                                                            return v523;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v194 = C::def_inst(ctx, v79);
                                                            if let Some(v195) = v194 {
                                                                let v196 = &C::inst_data(ctx, v195);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v197,
                                                                    arg: v198,
                                                                } = v196
                                                                {
                                                                    if let &Opcode::Uextend = v197 {
                                                                        let v92 =
                                                                            C::value_type(ctx, v91);
                                                                        let v262 =
                                                                            C::lane_type(ctx, v92);
                                                                        let v199 = C::value_type(
                                                                            ctx, v198,
                                                                        );
                                                                        let v263 = C::ty_equal(
                                                                            ctx, v262, v199,
                                                                        );
                                                                        if v263 == true {
                                                                            let v258 = constructor_put_in_vreg(ctx, v91);
                                                                            let v281 = constructor_gen_slidedown_half(ctx, v92, v258);
                                                                            let v287 = constructor_put_in_xreg(ctx, v198);
                                                                            let v185 = &constructor_unmasked(ctx);
                                                                            let v251 =
                                                                                C::ty_half_lanes(
                                                                                    ctx, v92,
                                                                                );
                                                                            let v252 = v251?;
                                                                            let v253 =
                                                                                C::vstate_from_type(
                                                                                    ctx, v252,
                                                                                );
                                                                            let v254 =
                                                                                C::vstate_mf2(
                                                                                    ctx, v253,
                                                                                );
                                                                            let v530 = constructor_rv_vwsubu_vx(ctx, v281, v287, v185, v254);
                                                                            let v531 = constructor_output_vreg(ctx, v530);
                                                                            let v532 = Some(v531);
                                                                            // Rule at src\isa\riscv64\lower.isle line 414.
                                                                            return v532;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenLow => {
                                            let v87 = C::def_inst(ctx, v45.0);
                                            if let Some(v88) = v87 {
                                                let v89 = &C::inst_data(ctx, v88);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v90,
                                                    arg: v91,
                                                } = v89
                                                {
                                                    match v90 {
                                                        &Opcode::SwidenLow => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v242 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v500 = constructor_rv_vwsub_vv(
                                                                ctx, v258, v242, v185, v254,
                                                            );
                                                            let v501 =
                                                                constructor_output_vreg(ctx, v500);
                                                            let v502 = Some(v501);
                                                            // Rule at src\isa\riscv64\lower.isle line 366.
                                                            return v502;
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v281 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v258,
                                                                );
                                                            let v282 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v536 = constructor_rv_vwsub_vv(
                                                                ctx, v281, v282, v185, v254,
                                                            );
                                                            let v537 =
                                                                constructor_output_vreg(ctx, v536);
                                                            let v538 = Some(v537);
                                                            // Rule at src\isa\riscv64\lower.isle line 425.
                                                            return v538;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v87 = C::def_inst(ctx, v45.0);
                                            if let Some(v88) = v87 {
                                                let v89 = &C::inst_data(ctx, v88);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v90,
                                                    arg: v91,
                                                } = v89
                                                {
                                                    match v90 {
                                                        &Opcode::SwidenLow => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v242 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v326 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v242,
                                                                );
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v533 = constructor_rv_vwsub_vv(
                                                                ctx, v258, v326, v185, v254,
                                                            );
                                                            let v534 =
                                                                constructor_output_vreg(ctx, v533);
                                                            let v535 = Some(v534);
                                                            // Rule at src\isa\riscv64\lower.isle line 421.
                                                            return v535;
                                                        }
                                                        &Opcode::SwidenHigh => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v281 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v258,
                                                                );
                                                            let v282 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v283 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v282,
                                                                );
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v509 = constructor_rv_vwsub_vv(
                                                                ctx, v281, v283, v185, v254,
                                                            );
                                                            let v510 =
                                                                constructor_output_vreg(ctx, v509);
                                                            let v511 = Some(v510);
                                                            // Rule at src\isa\riscv64\lower.isle line 381.
                                                            return v511;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenLow => {
                                            let v87 = C::def_inst(ctx, v45.0);
                                            if let Some(v88) = v87 {
                                                let v89 = &C::inst_data(ctx, v88);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v90,
                                                    arg: v91,
                                                } = v89
                                                {
                                                    match v90 {
                                                        &Opcode::UwidenLow => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v242 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v518 = constructor_rv_vwsubu_vv(
                                                                ctx, v258, v242, v185, v254,
                                                            );
                                                            let v519 =
                                                                constructor_output_vreg(ctx, v518);
                                                            let v520 = Some(v519);
                                                            // Rule at src\isa\riscv64\lower.isle line 395.
                                                            return v520;
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v281 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v258,
                                                                );
                                                            let v282 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v542 = constructor_rv_vwsubu_vv(
                                                                ctx, v281, v282, v185, v254,
                                                            );
                                                            let v543 =
                                                                constructor_output_vreg(ctx, v542);
                                                            let v544 = Some(v543);
                                                            // Rule at src\isa\riscv64\lower.isle line 435.
                                                            return v544;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v87 = C::def_inst(ctx, v45.0);
                                            if let Some(v88) = v87 {
                                                let v89 = &C::inst_data(ctx, v88);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v90,
                                                    arg: v91,
                                                } = v89
                                                {
                                                    match v90 {
                                                        &Opcode::UwidenLow => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v242 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v326 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v242,
                                                                );
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v539 = constructor_rv_vwsubu_vv(
                                                                ctx, v258, v326, v185, v254,
                                                            );
                                                            let v540 =
                                                                constructor_output_vreg(ctx, v539);
                                                            let v541 = Some(v540);
                                                            // Rule at src\isa\riscv64\lower.isle line 431.
                                                            return v541;
                                                        }
                                                        &Opcode::UwidenHigh => {
                                                            let v258 =
                                                                constructor_put_in_vreg(ctx, v91);
                                                            let v92 = C::value_type(ctx, v91);
                                                            let v281 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v258,
                                                                );
                                                            let v282 =
                                                                constructor_put_in_vreg(ctx, v79);
                                                            let v283 =
                                                                constructor_gen_slidedown_half(
                                                                    ctx, v92, v282,
                                                                );
                                                            let v185 = &constructor_unmasked(ctx);
                                                            let v251 = C::ty_half_lanes(ctx, v92);
                                                            let v252 = v251?;
                                                            let v253 =
                                                                C::vstate_from_type(ctx, v252);
                                                            let v254 = C::vstate_mf2(ctx, v253);
                                                            let v527 = constructor_rv_vwsubu_vv(
                                                                ctx, v281, v283, v185, v254,
                                                            );
                                                            let v528 =
                                                                constructor_output_vreg(ctx, v527);
                                                            let v529 = Some(v528);
                                                            // Rule at src\isa\riscv64\lower.isle line 410.
                                                            return v529;
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v494 = constructor_rv_vrsub_vi(ctx, v218, v238, v185, v186);
                                let v495 = constructor_output_vreg(ctx, v494);
                                let v496 = Some(v495);
                                // Rule at src\isa\riscv64\lower.isle line 356.
                                return v496;
                            }
                            let v489 = constructor_negated_replicated_imm5(ctx, v45.1);
                            if let Some(v490) = v489 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v491 = constructor_rv_vadd_vi(ctx, v183, v490, v185, v186);
                                let v492 = constructor_output_vreg(ctx, v491);
                                let v493 = Some(v492);
                                // Rule at src\isa\riscv64\lower.isle line 352.
                                return v493;
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v486 =
                                            constructor_rv_vrsub_vx(ctx, v218, v219, v185, v186);
                                        let v487 = constructor_output_vreg(ctx, v486);
                                        let v488 = Some(v487);
                                        // Rule at src\isa\riscv64\lower.isle line 349.
                                        return v488;
                                    }
                                }
                            }
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    match v78 {
                                        &Opcode::Splat => {
                                            let v194 = C::def_inst(ctx, v79);
                                            if let Some(v195) = v194 {
                                                let v196 = &C::inst_data(ctx, v195);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v197,
                                                    arg: v198,
                                                } = v196
                                                {
                                                    match v197 {
                                                        &Opcode::Uextend => {
                                                            let v200 = C::ty_half_width(ctx, v12);
                                                            if let Some(v201) = v200 {
                                                                let v202 = C::lane_type(ctx, v201);
                                                                let v199 = C::value_type(ctx, v198);
                                                                let v203 =
                                                                    C::ty_equal(ctx, v202, v199);
                                                                if v203 == true {
                                                                    let v183 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v45.0,
                                                                        );
                                                                    let v204 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v198,
                                                                        );
                                                                    let v185 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v205 = C::vstate_from_type(
                                                                        ctx, v201,
                                                                    );
                                                                    let v206 =
                                                                        C::vstate_mf2(ctx, v205);
                                                                    let v483 =
                                                                        constructor_rv_vwsubu_wx(
                                                                            ctx, v183, v204, v185,
                                                                            v206,
                                                                        );
                                                                    let v484 =
                                                                        constructor_output_vreg(
                                                                            ctx, v483,
                                                                        );
                                                                    let v485 = Some(v484);
                                                                    // Rule at src\isa\riscv64\lower.isle line 344.
                                                                    return v485;
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v200 = C::ty_half_width(ctx, v12);
                                                            if let Some(v201) = v200 {
                                                                let v202 = C::lane_type(ctx, v201);
                                                                let v199 = C::value_type(ctx, v198);
                                                                let v203 =
                                                                    C::ty_equal(ctx, v202, v199);
                                                                if v203 == true {
                                                                    let v183 =
                                                                        constructor_put_in_vreg(
                                                                            ctx, v45.0,
                                                                        );
                                                                    let v204 =
                                                                        constructor_put_in_xreg(
                                                                            ctx, v198,
                                                                        );
                                                                    let v185 =
                                                                        &constructor_unmasked(ctx);
                                                                    let v205 = C::vstate_from_type(
                                                                        ctx, v201,
                                                                    );
                                                                    let v206 =
                                                                        C::vstate_mf2(ctx, v205);
                                                                    let v480 =
                                                                        constructor_rv_vwsub_wx(
                                                                            ctx, v183, v204, v185,
                                                                            v206,
                                                                        );
                                                                    let v481 =
                                                                        constructor_output_vreg(
                                                                            ctx, v480,
                                                                        );
                                                                    let v482 = Some(v481);
                                                                    // Rule at src\isa\riscv64\lower.isle line 339.
                                                                    return v482;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v190 = constructor_put_in_xreg(ctx, v79);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v477 =
                                                constructor_rv_vsub_vx(ctx, v183, v190, v185, v186);
                                            let v478 = constructor_output_vreg(ctx, v477);
                                            let v479 = Some(v478);
                                            // Rule at src\isa\riscv64\lower.isle line 336.
                                            return v479;
                                        }
                                        &Opcode::SwidenLow => {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v242 = constructor_put_in_vreg(ctx, v79);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v80 = C::value_type(ctx, v79);
                                            let v243 = C::ty_half_lanes(ctx, v80);
                                            let v244 = v243?;
                                            let v245 = C::vstate_from_type(ctx, v244);
                                            let v246 = C::vstate_mf2(ctx, v245);
                                            let v497 = constructor_rv_vwsub_wv(
                                                ctx, v183, v242, v185, v246,
                                            );
                                            let v498 = constructor_output_vreg(ctx, v497);
                                            let v499 = Some(v498);
                                            // Rule at src\isa\riscv64\lower.isle line 363.
                                            return v499;
                                        }
                                        &Opcode::SwidenHigh => {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v242 = constructor_put_in_vreg(ctx, v79);
                                            let v80 = C::value_type(ctx, v79);
                                            let v273 =
                                                constructor_gen_slidedown_half(ctx, v80, v242);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v243 = C::ty_half_lanes(ctx, v80);
                                            let v244 = v243?;
                                            let v245 = C::vstate_from_type(ctx, v244);
                                            let v246 = C::vstate_mf2(ctx, v245);
                                            let v506 = constructor_rv_vwsub_wv(
                                                ctx, v183, v273, v185, v246,
                                            );
                                            let v507 = constructor_output_vreg(ctx, v506);
                                            let v508 = Some(v507);
                                            // Rule at src\isa\riscv64\lower.isle line 378.
                                            return v508;
                                        }
                                        &Opcode::UwidenLow => {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v242 = constructor_put_in_vreg(ctx, v79);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v80 = C::value_type(ctx, v79);
                                            let v243 = C::ty_half_lanes(ctx, v80);
                                            let v244 = v243?;
                                            let v245 = C::vstate_from_type(ctx, v244);
                                            let v246 = C::vstate_mf2(ctx, v245);
                                            let v515 = constructor_rv_vwsubu_wv(
                                                ctx, v183, v242, v185, v246,
                                            );
                                            let v516 = constructor_output_vreg(ctx, v515);
                                            let v517 = Some(v516);
                                            // Rule at src\isa\riscv64\lower.isle line 392.
                                            return v517;
                                        }
                                        &Opcode::UwidenHigh => {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v242 = constructor_put_in_vreg(ctx, v79);
                                            let v80 = C::value_type(ctx, v79);
                                            let v273 =
                                                constructor_gen_slidedown_half(ctx, v80, v242);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v243 = C::ty_half_lanes(ctx, v80);
                                            let v244 = v243?;
                                            let v245 = C::vstate_from_type(ctx, v244);
                                            let v246 = C::vstate_mf2(ctx, v245);
                                            let v524 = constructor_rv_vwsubu_wv(
                                                ctx, v183, v273, v185, v246,
                                            );
                                            let v525 = constructor_output_vreg(ctx, v524);
                                            let v526 = Some(v525);
                                            // Rule at src\isa\riscv64\lower.isle line 407.
                                            return v526;
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v474 = constructor_rv_vsub_vv(ctx, v183, v184, v185, v186);
                            let v475 = constructor_output_vreg(ctx, v474);
                            let v476 = Some(v475);
                            // Rule at src\isa\riscv64\lower.isle line 333.
                            return v476;
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v469 = constructor_imm12_from_negated_value(ctx, v45.1);
                            if let Some(v470) = v469 {
                                let v62 = &constructor_select_addi(ctx, v57);
                                let v63 = C::put_in_reg(ctx, v45.0);
                                let v471 = constructor_alu_rr_imm12(ctx, v62, v63, v470);
                                let v472 = constructor_output_reg(ctx, v471);
                                let v473 = Some(v472);
                                // Rule at src\isa\riscv64\lower.isle line 328.
                                return v473;
                            }
                        }
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v49 = constructor_put_in_xreg(ctx, v45.1);
                                let v462 = constructor_rv_sub(ctx, v48, v49);
                                let v463 = constructor_output_xreg(ctx, v462);
                                let v464 = Some(v463);
                                // Rule at src\isa\riscv64\lower.isle line 321.
                                return v464;
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v157 = C::put_in_regs(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v466 = constructor_i128_sub(ctx, v157, v465);
                                let v467 = C::output(ctx, v466);
                                let v468 = Some(v467);
                                // Rule at src\isa\riscv64\lower.isle line 324.
                                return v468;
                            }
                            _ => {}
                        }
                        let v39 = C::fits_in_32(ctx, v3);
                        if let Some(v40) = v39 {
                            let v41 = C::ty_int(ctx, v40);
                            if let Some(v42) = v41 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v49 = constructor_put_in_xreg(ctx, v45.1);
                                let v459 = constructor_rv_subw(ctx, v48, v49);
                                let v460 = constructor_output_xreg(ctx, v459);
                                let v461 = Some(v460);
                                // Rule at src\isa\riscv64\lower.isle line 318.
                                return v461;
                            }
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v586 =
                                            constructor_rv_vmul_vx(ctx, v183, v190, v185, v186);
                                        let v587 = constructor_output_vreg(ctx, v586);
                                        let v588 = Some(v587);
                                        // Rule at src\isa\riscv64\lower.isle line 490.
                                        return v588;
                                    }
                                }
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v583 =
                                            constructor_rv_vmul_vx(ctx, v218, v219, v185, v186);
                                        let v584 = constructor_output_vreg(ctx, v583);
                                        let v585 = Some(v584);
                                        // Rule at src\isa\riscv64\lower.isle line 487.
                                        return v585;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v580 = constructor_rv_vmul_vv(ctx, v183, v184, v185, v186);
                            let v581 = constructor_output_vreg(ctx, v580);
                            let v582 = Some(v581);
                            // Rule at src\isa\riscv64\lower.isle line 484.
                            return v582;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v157 = C::put_in_regs(ctx, v45.0);
                            let v159 = C::value_regs_get(ctx, v157, 0x0);
                            let v160 = C::xreg_new(ctx, v159);
                            let v563 = C::value_regs_get(ctx, v157, 0x1);
                            let v564 = C::xreg_new(ctx, v563);
                            let v565 = C::put_in_regs(ctx, v45.1);
                            let v566 = C::value_regs_get(ctx, v565, 0x0);
                            let v567 = C::xreg_new(ctx, v566);
                            let v568 = C::value_regs_get(ctx, v565, 0x1);
                            let v569 = C::xreg_new(ctx, v568);
                            let v570 = constructor_rv_mulhu(ctx, v160, v567);
                            let v571 = constructor_madd(ctx, v160, v569, v570);
                            let v572 = constructor_madd(ctx, v564, v567, v571);
                            let v573 = C::zero_reg(ctx);
                            let v574 = constructor_madd(ctx, v160, v567, v573);
                            let v575 = C::xreg_to_reg(ctx, v574);
                            let v576 = C::xreg_to_reg(ctx, v572);
                            let v577 = C::value_regs(ctx, v575, v576);
                            let v578 = C::output(ctx, v577);
                            let v579 = Some(v578);
                            // Rule at src\isa\riscv64\lower.isle line 458.
                            return v579;
                        }
                        let v39 = C::fits_in_32(ctx, v3);
                        if let Some(v40) = v39 {
                            let v41 = C::ty_int(ctx, v40);
                            if let Some(v42) = v41 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v49 = constructor_put_in_xreg(ctx, v45.1);
                                let v560 = constructor_rv_mulw(ctx, v48, v49);
                                let v561 = constructor_output_xreg(ctx, v560);
                                let v562 = Some(v561);
                                // Rule at src\isa\riscv64\lower.isle line 454.
                                return v562;
                            }
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                            let v49 = constructor_put_in_xreg(ctx, v45.1);
                            let v557 = constructor_rv_mul(ctx, v48, v49);
                            let v558 = constructor_output_xreg(ctx, v557);
                            let v559 = Some(v558);
                            // Rule at src\isa\riscv64\lower.isle line 451.
                            return v559;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v618 =
                                            constructor_rv_vmulhu_vx(ctx, v183, v190, v185, v186);
                                        let v619 = constructor_output_vreg(ctx, v618);
                                        let v620 = Some(v619);
                                        // Rule at src\isa\riscv64\lower.isle line 520.
                                        return v620;
                                    }
                                }
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v615 =
                                            constructor_rv_vmulhu_vx(ctx, v218, v219, v185, v186);
                                        let v616 = constructor_output_vreg(ctx, v615);
                                        let v617 = Some(v616);
                                        // Rule at src\isa\riscv64\lower.isle line 517.
                                        return v617;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v612 = constructor_rv_vmulhu_vv(ctx, v183, v184, v185, v186);
                            let v613 = constructor_output_vreg(ctx, v612);
                            let v614 = Some(v613);
                            // Rule at src\isa\riscv64\lower.isle line 514.
                            return v614;
                        }
                        if v3 == I64 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                            let v49 = constructor_put_in_xreg(ctx, v45.1);
                            let v609 = constructor_rv_mulhu(ctx, v48, v49);
                            let v610 = constructor_output_xreg(ctx, v609);
                            let v611 = Some(v610);
                            // Rule at src\isa\riscv64\lower.isle line 511.
                            return v611;
                        }
                        let v39 = C::fits_in_32(ctx, v3);
                        if let Some(v40) = v39 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v603 = constructor_zext(ctx, v45.0);
                            let v604 = constructor_zext(ctx, v45.1);
                            let v605 = constructor_rv_mul(ctx, v603, v604);
                            let v444 = C::ty_bits(ctx, v40);
                            let v445 = C::u8_as_i32(ctx, v444);
                            let v446 = C::imm12_const(ctx, v445);
                            let v606 = constructor_rv_srli(ctx, v605, v446);
                            let v607 = constructor_output_xreg(ctx, v606);
                            let v608 = Some(v607);
                            // Rule at src\isa\riscv64\lower.isle line 507.
                            return v608;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v600 =
                                            constructor_rv_vmulh_vx(ctx, v183, v190, v185, v186);
                                        let v601 = constructor_output_vreg(ctx, v600);
                                        let v602 = Some(v601);
                                        // Rule at src\isa\riscv64\lower.isle line 503.
                                        return v602;
                                    }
                                }
                            }
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v597 =
                                            constructor_rv_vmulh_vx(ctx, v218, v219, v185, v186);
                                        let v598 = constructor_output_vreg(ctx, v597);
                                        let v599 = Some(v598);
                                        // Rule at src\isa\riscv64\lower.isle line 500.
                                        return v599;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v594 = constructor_rv_vmulh_vv(ctx, v183, v184, v185, v186);
                            let v595 = constructor_output_vreg(ctx, v594);
                            let v596 = Some(v595);
                            // Rule at src\isa\riscv64\lower.isle line 497.
                            return v596;
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v589 = constructor_sext(ctx, v45.0);
                            let v590 = constructor_sext(ctx, v45.1);
                            let v591 = constructor_lower_smlhi(ctx, v57, v589, v590);
                            let v592 = constructor_output_xreg(ctx, v591);
                            let v593 = Some(v592);
                            // Rule at src\isa\riscv64\lower.isle line 494.
                            return v593;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v219 = constructor_put_in_xreg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2730 =
                                            constructor_rv_vsmul_vx(ctx, v218, v219, v185, v186);
                                        let v2731 = constructor_output_vreg(ctx, v2730);
                                        let v2732 = Some(v2731);
                                        // Rule at src\isa\riscv64\lower.isle line 2919.
                                        return v2732;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v190 = constructor_put_in_xreg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2727 =
                                            constructor_rv_vsmul_vx(ctx, v183, v190, v185, v186);
                                        let v2728 = constructor_output_vreg(ctx, v2727);
                                        let v2729 = Some(v2728);
                                        // Rule at src\isa\riscv64\lower.isle line 2916.
                                        return v2729;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2724 = constructor_rv_vsmul_vv(ctx, v183, v184, v185, v186);
                            let v2725 = constructor_output_vreg(ctx, v2724);
                            let v2726 = Some(v2725);
                            // Rule at src\isa\riscv64\lower.isle line 2913.
                            return v2726;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v623 = C::has_m(ctx);
                        if v623 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v639 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v629);
                                                if let Some(v640) = v639 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v641 = constructor_rv_divuw(ctx, v48, v49);
                                                    let v642 = constructor_output_xreg(ctx, v641);
                                                    let v643 = Some(v642);
                                                    // Rule at src\isa\riscv64\lower.isle line 538.
                                                    return v643;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v604 = constructor_zext(ctx, v45.1);
                                    let v624 = constructor_nonzero_divisor(ctx, v604);
                                    let v635 = constructor_rv_divuw(ctx, v48, v624);
                                    let v636 = constructor_output_xreg(ctx, v635);
                                    let v637 = Some(v636);
                                    // Rule at src\isa\riscv64\lower.isle line 534.
                                    return v637;
                                }
                                I64 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v649 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v629);
                                                if let Some(v650) = v649 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v651 = constructor_rv_divu(ctx, v48, v49);
                                                    let v652 = constructor_output_xreg(ctx, v651);
                                                    let v653 = Some(v652);
                                                    // Rule at src\isa\riscv64\lower.isle line 547.
                                                    return v653;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                    let v644 = constructor_nonzero_divisor(ctx, v49);
                                    let v645 = constructor_rv_divu(ctx, v48, v644);
                                    let v646 = constructor_output_xreg(ctx, v645);
                                    let v647 = Some(v646);
                                    // Rule at src\isa\riscv64\lower.isle line 543.
                                    return v647;
                                }
                                _ => {}
                            }
                            let v621 = C::fits_in_16(ctx, v3);
                            if let Some(v622) = v621 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v628,
                                        imm: v629,
                                    } = v77
                                    {
                                        if let &Opcode::Iconst = v628 {
                                            let v630 = C::safe_divisor_from_imm64(ctx, v622, v629);
                                            if let Some(v631) = v630 {
                                                let v603 = constructor_zext(ctx, v45.0);
                                                let v604 = constructor_zext(ctx, v45.1);
                                                let v632 = constructor_rv_divuw(ctx, v603, v604);
                                                let v633 = constructor_output_xreg(ctx, v632);
                                                let v634 = Some(v633);
                                                // Rule at src\isa\riscv64\lower.isle line 529.
                                                return v634;
                                            }
                                        }
                                    }
                                }
                                let v603 = constructor_zext(ctx, v45.0);
                                let v604 = constructor_zext(ctx, v45.1);
                                let v624 = constructor_nonzero_divisor(ctx, v604);
                                let v625 = constructor_rv_divuw(ctx, v603, v624);
                                let v626 = constructor_output_xreg(ctx, v625);
                                let v627 = Some(v626);
                                // Rule at src\isa\riscv64\lower.isle line 525.
                                return v627;
                            }
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v623 = C::has_m(ctx);
                        if v623 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v639 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v629);
                                                if let Some(v640) = v639 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v665 = constructor_rv_divw(ctx, v48, v49);
                                                    let v666 = constructor_output_xreg(ctx, v665);
                                                    let v667 = Some(v666);
                                                    // Rule at src\isa\riscv64\lower.isle line 575.
                                                    return v667;
                                                }
                                            }
                                        }
                                    }
                                    let v589 = constructor_sext(ctx, v45.0);
                                    let v590 = constructor_sext(ctx, v45.1);
                                    let v661 = constructor_safe_sdiv_divisor(ctx, I32, v589, v590);
                                    let v662 = constructor_rv_divw(ctx, v589, v661);
                                    let v663 = constructor_output_xreg(ctx, v662);
                                    let v664 = Some(v663);
                                    // Rule at src\isa\riscv64\lower.isle line 570.
                                    return v664;
                                }
                                I64 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v649 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v629);
                                                if let Some(v650) = v649 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v673 = constructor_rv_div(ctx, v48, v49);
                                                    let v674 = constructor_output_xreg(ctx, v673);
                                                    let v675 = Some(v674);
                                                    // Rule at src\isa\riscv64\lower.isle line 584.
                                                    return v675;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v83 = constructor_put_in_xreg(ctx, v45.0);
                                    let v668 = constructor_put_in_xreg(ctx, v45.1);
                                    let v669 = constructor_safe_sdiv_divisor(ctx, I64, v83, v668);
                                    let v670 = constructor_rv_div(ctx, v48, v669);
                                    let v671 = constructor_output_xreg(ctx, v670);
                                    let v672 = Some(v671);
                                    // Rule at src\isa\riscv64\lower.isle line 580.
                                    return v672;
                                }
                                _ => {}
                            }
                            let v621 = C::fits_in_16(ctx, v3);
                            if let Some(v622) = v621 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v628,
                                        imm: v629,
                                    } = v77
                                    {
                                        if let &Opcode::Iconst = v628 {
                                            let v630 = C::safe_divisor_from_imm64(ctx, v622, v629);
                                            if let Some(v631) = v630 {
                                                let v589 = constructor_sext(ctx, v45.0);
                                                let v590 = constructor_sext(ctx, v45.1);
                                                let v658 = constructor_rv_divw(ctx, v589, v590);
                                                let v659 = constructor_output_xreg(ctx, v658);
                                                let v660 = Some(v659);
                                                // Rule at src\isa\riscv64\lower.isle line 565.
                                                return v660;
                                            }
                                        }
                                    }
                                }
                                let v589 = constructor_sext(ctx, v45.0);
                                let v590 = constructor_sext(ctx, v45.1);
                                let v654 = constructor_safe_sdiv_divisor(ctx, v622, v589, v590);
                                let v655 = constructor_rv_divw(ctx, v589, v654);
                                let v656 = constructor_output_xreg(ctx, v655);
                                let v657 = Some(v656);
                                // Rule at src\isa\riscv64\lower.isle line 560.
                                return v657;
                            }
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v623 = C::has_m(ctx);
                        if v623 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v639 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v629);
                                                if let Some(v640) = v639 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v685 = constructor_rv_remuw(ctx, v48, v49);
                                                    let v686 = constructor_output_xreg(ctx, v685);
                                                    let v687 = Some(v686);
                                                    // Rule at src\isa\riscv64\lower.isle line 622.
                                                    return v687;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v604 = constructor_zext(ctx, v45.1);
                                    let v624 = constructor_nonzero_divisor(ctx, v604);
                                    let v682 = constructor_rv_remuw(ctx, v48, v624);
                                    let v683 = constructor_output_xreg(ctx, v682);
                                    let v684 = Some(v683);
                                    // Rule at src\isa\riscv64\lower.isle line 618.
                                    return v684;
                                }
                                I64 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v649 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v629);
                                                if let Some(v650) = v649 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v691 = constructor_rv_remu(ctx, v48, v49);
                                                    let v692 = constructor_output_xreg(ctx, v691);
                                                    let v693 = Some(v692);
                                                    // Rule at src\isa\riscv64\lower.isle line 631.
                                                    return v693;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                    let v644 = constructor_nonzero_divisor(ctx, v49);
                                    let v688 = constructor_rv_remu(ctx, v48, v644);
                                    let v689 = constructor_output_xreg(ctx, v688);
                                    let v690 = Some(v689);
                                    // Rule at src\isa\riscv64\lower.isle line 627.
                                    return v690;
                                }
                                _ => {}
                            }
                            let v621 = C::fits_in_16(ctx, v3);
                            if let Some(v622) = v621 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v628,
                                        imm: v629,
                                    } = v77
                                    {
                                        if let &Opcode::Iconst = v628 {
                                            let v630 = C::safe_divisor_from_imm64(ctx, v622, v629);
                                            if let Some(v631) = v630 {
                                                let v603 = constructor_zext(ctx, v45.0);
                                                let v604 = constructor_zext(ctx, v45.1);
                                                let v679 = constructor_rv_remuw(ctx, v603, v604);
                                                let v680 = constructor_output_xreg(ctx, v679);
                                                let v681 = Some(v680);
                                                // Rule at src\isa\riscv64\lower.isle line 613.
                                                return v681;
                                            }
                                        }
                                    }
                                }
                                let v603 = constructor_zext(ctx, v45.0);
                                let v604 = constructor_zext(ctx, v45.1);
                                let v624 = constructor_nonzero_divisor(ctx, v604);
                                let v676 = constructor_rv_remuw(ctx, v603, v624);
                                let v677 = constructor_output_xreg(ctx, v676);
                                let v678 = Some(v677);
                                // Rule at src\isa\riscv64\lower.isle line 609.
                                return v678;
                            }
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v623 = C::has_m(ctx);
                        if v623 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v639 =
                                                    C::safe_divisor_from_imm64(ctx, I32, v629);
                                                if let Some(v640) = v639 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v704 = constructor_rv_remw(ctx, v48, v49);
                                                    let v705 = constructor_output_xreg(ctx, v704);
                                                    let v706 = Some(v705);
                                                    // Rule at src\isa\riscv64\lower.isle line 651.
                                                    return v706;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v590 = constructor_sext(ctx, v45.1);
                                    let v694 = constructor_nonzero_divisor(ctx, v590);
                                    let v701 = constructor_rv_remw(ctx, v48, v694);
                                    let v702 = constructor_output_xreg(ctx, v701);
                                    let v703 = Some(v702);
                                    // Rule at src\isa\riscv64\lower.isle line 647.
                                    return v703;
                                }
                                I64 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v649 =
                                                    C::safe_divisor_from_imm64(ctx, I64, v629);
                                                if let Some(v650) = v649 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v710 = constructor_rv_rem(ctx, v48, v49);
                                                    let v711 = constructor_output_xreg(ctx, v710);
                                                    let v712 = Some(v711);
                                                    // Rule at src\isa\riscv64\lower.isle line 660.
                                                    return v712;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v49 = constructor_put_in_xreg(ctx, v45.1);
                                    let v644 = constructor_nonzero_divisor(ctx, v49);
                                    let v707 = constructor_rv_rem(ctx, v48, v644);
                                    let v708 = constructor_output_xreg(ctx, v707);
                                    let v709 = Some(v708);
                                    // Rule at src\isa\riscv64\lower.isle line 656.
                                    return v709;
                                }
                                _ => {}
                            }
                            let v621 = C::fits_in_16(ctx, v3);
                            if let Some(v622) = v621 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v628,
                                        imm: v629,
                                    } = v77
                                    {
                                        if let &Opcode::Iconst = v628 {
                                            let v630 = C::safe_divisor_from_imm64(ctx, v622, v629);
                                            if let Some(v631) = v630 {
                                                let v589 = constructor_sext(ctx, v45.0);
                                                let v590 = constructor_sext(ctx, v45.1);
                                                let v698 = constructor_rv_remw(ctx, v589, v590);
                                                let v699 = constructor_output_xreg(ctx, v698);
                                                let v700 = Some(v699);
                                                // Rule at src\isa\riscv64\lower.isle line 642.
                                                return v700;
                                            }
                                        }
                                    }
                                }
                                let v589 = constructor_sext(ctx, v45.0);
                                let v590 = constructor_sext(ctx, v45.1);
                                let v694 = constructor_nonzero_divisor(ctx, v590);
                                let v695 = constructor_rv_remw(ctx, v589, v694);
                                let v696 = constructor_output_xreg(ctx, v695);
                                let v697 = Some(v696);
                                // Rule at src\isa\riscv64\lower.isle line 638.
                                return v697;
                            }
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v805 = C::has_zbs(ctx);
                        if v805 == true {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                match v89 {
                                    &InstructionData::Binary {
                                        opcode: ref v115,
                                        args: ref v116,
                                    } => {
                                        match v115 {
                                            &Opcode::Ushr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v75 = C::def_inst(ctx, v45.1);
                                                        if let Some(v76) = v75 {
                                                            let v77 = &C::inst_data(ctx, v76);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v628,
                                                                imm: v629,
                                                            } = v77
                                                            {
                                                                if let &Opcode::Iconst = v628 {
                                                                    let v828 = C::u64_from_imm64(
                                                                        ctx, v629,
                                                                    );
                                                                    if v828 == 0x1 {
                                                                        let v117 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v116,
                                                                            );
                                                                        let v862 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v117.1,
                                                                            );
                                                                        if let Some(v863) = v862 {
                                                                            let v864 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v863,
                                                                                );
                                                                            if let Some(v865) = v864
                                                                            {
                                                                                let v842 = constructor_put_in_xreg(ctx, v117.0);
                                                                                let v867 =
                                                                                    C::imm12_and(
                                                                                        ctx, v865,
                                                                                        0x1F,
                                                                                    );
                                                                                let v868 = constructor_rv_bexti(ctx, v842, v867);
                                                                                let v869 = constructor_output_xreg(ctx, v868);
                                                                                let v870 =
                                                                                    Some(v869);
                                                                                // Rule at src\isa\riscv64\lower.isle line 783.
                                                                                return v870;
                                                                            }
                                                                        }
                                                                        let v842 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.0,
                                                                            );
                                                                        let v843 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.1,
                                                                            );
                                                                        let v845 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v846 =
                                                                            constructor_rv_andi(
                                                                                ctx, v843, v845,
                                                                            );
                                                                        let v847 =
                                                                            constructor_rv_bext(
                                                                                ctx, v842, v846,
                                                                            );
                                                                        let v848 =
                                                                            constructor_output_xreg(
                                                                                ctx, v847,
                                                                            );
                                                                        let v849 = Some(v848);
                                                                        // Rule at src\isa\riscv64\lower.isle line 757.
                                                                        return v849;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v75 = C::def_inst(ctx, v45.1);
                                                        if let Some(v76) = v75 {
                                                            let v77 = &C::inst_data(ctx, v76);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v628,
                                                                imm: v629,
                                                            } = v77
                                                            {
                                                                if let &Opcode::Iconst = v628 {
                                                                    let v828 = C::u64_from_imm64(
                                                                        ctx, v629,
                                                                    );
                                                                    if v828 == 0x1 {
                                                                        let v117 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v116,
                                                                            );
                                                                        let v862 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v117.1,
                                                                            );
                                                                        if let Some(v863) = v862 {
                                                                            let v864 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v863,
                                                                                );
                                                                            if let Some(v865) = v864
                                                                            {
                                                                                let v842 = constructor_put_in_xreg(ctx, v117.0);
                                                                                let v872 =
                                                                                    C::imm12_and(
                                                                                        ctx, v865,
                                                                                        0x3F,
                                                                                    );
                                                                                let v873 = constructor_rv_bexti(ctx, v842, v872);
                                                                                let v874 = constructor_output_xreg(ctx, v873);
                                                                                let v875 =
                                                                                    Some(v874);
                                                                                // Rule at src\isa\riscv64\lower.isle line 789.
                                                                                return v875;
                                                                            }
                                                                        }
                                                                        let v842 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.0,
                                                                            );
                                                                        let v843 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.1,
                                                                            );
                                                                        let v856 =
                                                                            constructor_rv_bext(
                                                                                ctx, v842, v843,
                                                                            );
                                                                        let v857 =
                                                                            constructor_output_xreg(
                                                                                ctx, v856,
                                                                            );
                                                                        let v858 = Some(v857);
                                                                        // Rule at src\isa\riscv64\lower.isle line 770.
                                                                        return v858;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            &Opcode::Sshr => {
                                                let v3 = C::value_type(ctx, v2);
                                                match v3 {
                                                    I32 => {
                                                        let v75 = C::def_inst(ctx, v45.1);
                                                        if let Some(v76) = v75 {
                                                            let v77 = &C::inst_data(ctx, v76);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v628,
                                                                imm: v629,
                                                            } = v77
                                                            {
                                                                if let &Opcode::Iconst = v628 {
                                                                    let v828 = C::u64_from_imm64(
                                                                        ctx, v629,
                                                                    );
                                                                    if v828 == 0x1 {
                                                                        let v117 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v116,
                                                                            );
                                                                        let v862 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v117.1,
                                                                            );
                                                                        if let Some(v863) = v862 {
                                                                            let v864 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v863,
                                                                                );
                                                                            if let Some(v865) = v864
                                                                            {
                                                                                let v842 = constructor_put_in_xreg(ctx, v117.0);
                                                                                let v867 =
                                                                                    C::imm12_and(
                                                                                        ctx, v865,
                                                                                        0x1F,
                                                                                    );
                                                                                let v868 = constructor_rv_bexti(ctx, v842, v867);
                                                                                let v869 = constructor_output_xreg(ctx, v868);
                                                                                let v870 =
                                                                                    Some(v869);
                                                                                // Rule at src\isa\riscv64\lower.isle line 786.
                                                                                return v870;
                                                                            }
                                                                        }
                                                                        let v842 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.0,
                                                                            );
                                                                        let v843 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.1,
                                                                            );
                                                                        let v845 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v846 =
                                                                            constructor_rv_andi(
                                                                                ctx, v843, v845,
                                                                            );
                                                                        let v847 =
                                                                            constructor_rv_bext(
                                                                                ctx, v842, v846,
                                                                            );
                                                                        let v848 =
                                                                            constructor_output_xreg(
                                                                                ctx, v847,
                                                                            );
                                                                        let v849 = Some(v848);
                                                                        // Rule at src\isa\riscv64\lower.isle line 760.
                                                                        return v849;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    I64 => {
                                                        let v75 = C::def_inst(ctx, v45.1);
                                                        if let Some(v76) = v75 {
                                                            let v77 = &C::inst_data(ctx, v76);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v628,
                                                                imm: v629,
                                                            } = v77
                                                            {
                                                                if let &Opcode::Iconst = v628 {
                                                                    let v828 = C::u64_from_imm64(
                                                                        ctx, v629,
                                                                    );
                                                                    if v828 == 0x1 {
                                                                        let v117 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v116,
                                                                            );
                                                                        let v862 =
                                                                            C::i64_from_iconst(
                                                                                ctx, v117.1,
                                                                            );
                                                                        if let Some(v863) = v862 {
                                                                            let v864 =
                                                                                C::imm12_from_i64(
                                                                                    ctx, v863,
                                                                                );
                                                                            if let Some(v865) = v864
                                                                            {
                                                                                let v842 = constructor_put_in_xreg(ctx, v117.0);
                                                                                let v872 =
                                                                                    C::imm12_and(
                                                                                        ctx, v865,
                                                                                        0x3F,
                                                                                    );
                                                                                let v873 = constructor_rv_bexti(ctx, v842, v872);
                                                                                let v874 = constructor_output_xreg(ctx, v873);
                                                                                let v875 =
                                                                                    Some(v874);
                                                                                // Rule at src\isa\riscv64\lower.isle line 792.
                                                                                return v875;
                                                                            }
                                                                        }
                                                                        let v842 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.0,
                                                                            );
                                                                        let v843 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v117.1,
                                                                            );
                                                                        let v856 =
                                                                            constructor_rv_bext(
                                                                                ctx, v842, v843,
                                                                            );
                                                                        let v857 =
                                                                            constructor_output_xreg(
                                                                                ctx, v856,
                                                                            );
                                                                        let v858 = Some(v857);
                                                                        // Rule at src\isa\riscv64\lower.isle line 773.
                                                                        return v858;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v834,
                                        imm: v835,
                                    } => {
                                        if let &Opcode::Iconst = v834 {
                                            let v3 = C::value_type(ctx, v2);
                                            match v3 {
                                                I32 => {
                                                    let v75 = C::def_inst(ctx, v45.1);
                                                    if let Some(v76) = v75 {
                                                        let v77 = &C::inst_data(ctx, v76);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v97,
                                                            args: ref v98,
                                                        } = v77
                                                        {
                                                            match v97 {
                                                                &Opcode::Ushr => {
                                                                    let v836 = C::u64_from_imm64(
                                                                        ctx, v835,
                                                                    );
                                                                    if v836 == 0x1 {
                                                                        let v99 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v98,
                                                                            );
                                                                        let v850 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.0,
                                                                            );
                                                                        let v851 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.1,
                                                                            );
                                                                        let v845 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v852 =
                                                                            constructor_rv_andi(
                                                                                ctx, v851, v845,
                                                                            );
                                                                        let v853 =
                                                                            constructor_rv_bext(
                                                                                ctx, v850, v852,
                                                                            );
                                                                        let v854 =
                                                                            constructor_output_xreg(
                                                                                ctx, v853,
                                                                            );
                                                                        let v855 = Some(v854);
                                                                        // Rule at src\isa\riscv64\lower.isle line 763.
                                                                        return v855;
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v836 = C::u64_from_imm64(
                                                                        ctx, v835,
                                                                    );
                                                                    if v836 == 0x1 {
                                                                        let v99 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v98,
                                                                            );
                                                                        let v850 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.0,
                                                                            );
                                                                        let v851 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.1,
                                                                            );
                                                                        let v845 = C::imm12_const(
                                                                            ctx, 0x1F,
                                                                        );
                                                                        let v852 =
                                                                            constructor_rv_andi(
                                                                                ctx, v851, v845,
                                                                            );
                                                                        let v853 =
                                                                            constructor_rv_bext(
                                                                                ctx, v850, v852,
                                                                            );
                                                                        let v854 =
                                                                            constructor_output_xreg(
                                                                                ctx, v853,
                                                                            );
                                                                        let v855 = Some(v854);
                                                                        // Rule at src\isa\riscv64\lower.isle line 766.
                                                                        return v855;
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                I64 => {
                                                    let v75 = C::def_inst(ctx, v45.1);
                                                    if let Some(v76) = v75 {
                                                        let v77 = &C::inst_data(ctx, v76);
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v97,
                                                            args: ref v98,
                                                        } = v77
                                                        {
                                                            match v97 {
                                                                &Opcode::Ushr => {
                                                                    let v836 = C::u64_from_imm64(
                                                                        ctx, v835,
                                                                    );
                                                                    if v836 == 0x1 {
                                                                        let v99 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v98,
                                                                            );
                                                                        let v850 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.0,
                                                                            );
                                                                        let v851 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.1,
                                                                            );
                                                                        let v859 =
                                                                            constructor_rv_bext(
                                                                                ctx, v850, v851,
                                                                            );
                                                                        let v860 =
                                                                            constructor_output_xreg(
                                                                                ctx, v859,
                                                                            );
                                                                        let v861 = Some(v860);
                                                                        // Rule at src\isa\riscv64\lower.isle line 776.
                                                                        return v861;
                                                                    }
                                                                }
                                                                &Opcode::Sshr => {
                                                                    let v836 = C::u64_from_imm64(
                                                                        ctx, v835,
                                                                    );
                                                                    if v836 == 0x1 {
                                                                        let v99 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v98,
                                                                            );
                                                                        let v850 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.0,
                                                                            );
                                                                        let v851 =
                                                                            constructor_put_in_xreg(
                                                                                ctx, v99.1,
                                                                            );
                                                                        let v859 =
                                                                            constructor_rv_bext(
                                                                                ctx, v850, v851,
                                                                            );
                                                                        let v860 =
                                                                            constructor_output_xreg(
                                                                                ctx, v859,
                                                                            );
                                                                        let v861 = Some(v860);
                                                                        // Rule at src\isa\riscv64\lower.isle line 779.
                                                                        return v861;
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v713 = C::fits_in_64(ctx, v3);
                                            if let Some(v714) = v713 {
                                                let v836 = C::u64_from_imm64(ctx, v835);
                                                let v837 = C::bclr_imm(ctx, v714, v836);
                                                if let Some(v838) = v837 {
                                                    let v736 = constructor_put_in_xreg(ctx, v45.1);
                                                    let v839 =
                                                        constructor_rv_bclri(ctx, v736, v838);
                                                    let v840 = constructor_output_xreg(ctx, v839);
                                                    let v841 = Some(v840);
                                                    // Rule at src\isa\riscv64\lower.isle line 747.
                                                    return v841;
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v628,
                                    imm: v629,
                                } = v77
                                {
                                    if let &Opcode::Iconst = v628 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v713 = C::fits_in_64(ctx, v3);
                                        if let Some(v714) = v713 {
                                            let v828 = C::u64_from_imm64(ctx, v629);
                                            let v829 = C::bclr_imm(ctx, v714, v828);
                                            if let Some(v830) = v829 {
                                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                let v831 = constructor_rv_bclri(ctx, v48, v830);
                                                let v832 = constructor_output_xreg(ctx, v831);
                                                let v833 = Some(v832);
                                                // Rule at src\isa\riscv64\lower.isle line 743.
                                                return v833;
                                            }
                                        }
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I64 {
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Bnot = v90 {
                                            let v223 = C::def_inst(ctx, v91);
                                            if let Some(v224) = v223 {
                                                let v225 = &C::inst_data(ctx, v224);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v406,
                                                    args: ref v407,
                                                } = v225
                                                {
                                                    if let &Opcode::Ishl = v406 {
                                                        let v408 =
                                                            C::unpack_value_array_2(ctx, v407);
                                                        let v815 = C::i64_from_iconst(ctx, v408.0);
                                                        if let Some(v816) = v815 {
                                                            if v816 == 0x1 {
                                                                let v736 = constructor_put_in_xreg(
                                                                    ctx, v45.1,
                                                                );
                                                                let v817 = constructor_put_in_xreg(
                                                                    ctx, v408.1,
                                                                );
                                                                let v825 = constructor_rv_bclr(
                                                                    ctx, v736, v817,
                                                                );
                                                                let v826 = constructor_output_xreg(
                                                                    ctx, v825,
                                                                );
                                                                let v827 = Some(v826);
                                                                // Rule at src\isa\riscv64\lower.isle line 739.
                                                                return v827;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v194 = C::def_inst(ctx, v79);
                                            if let Some(v195) = v194 {
                                                let v196 = &C::inst_data(ctx, v195);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v377,
                                                    args: ref v378,
                                                } = v196
                                                {
                                                    if let &Opcode::Ishl = v377 {
                                                        let v379 =
                                                            C::unpack_value_array_2(ctx, v378);
                                                        let v803 = C::i64_from_iconst(ctx, v379.0);
                                                        if let Some(v804) = v803 {
                                                            if v804 == 0x1 {
                                                                let v48 = constructor_put_in_xreg(
                                                                    ctx, v45.0,
                                                                );
                                                                let v806 = constructor_put_in_xreg(
                                                                    ctx, v379.1,
                                                                );
                                                                let v822 = constructor_rv_bclr(
                                                                    ctx, v48, v806,
                                                                );
                                                                let v823 = constructor_output_xreg(
                                                                    ctx, v822,
                                                                );
                                                                let v824 = Some(v823);
                                                                // Rule at src\isa\riscv64\lower.isle line 736.
                                                                return v824;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v39 = C::fits_in_32(ctx, v3);
                            if let Some(v40) = v39 {
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Bnot = v90 {
                                            let v223 = C::def_inst(ctx, v91);
                                            if let Some(v224) = v223 {
                                                let v225 = &C::inst_data(ctx, v224);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v406,
                                                    args: ref v407,
                                                } = v225
                                                {
                                                    if let &Opcode::Ishl = v406 {
                                                        let v408 =
                                                            C::unpack_value_array_2(ctx, v407);
                                                        let v815 = C::i64_from_iconst(ctx, v408.0);
                                                        if let Some(v816) = v815 {
                                                            if v816 == 0x1 {
                                                                let v736 = constructor_put_in_xreg(
                                                                    ctx, v45.1,
                                                                );
                                                                let v817 = constructor_put_in_xreg(
                                                                    ctx, v408.1,
                                                                );
                                                                let v444 = C::ty_bits(ctx, v40);
                                                                let v808 =
                                                                    C::u8_sub(ctx, v444, 0x1);
                                                                let v809 = C::u8_as_i32(ctx, v808);
                                                                let v810 =
                                                                    C::imm12_const(ctx, v809);
                                                                let v818 = constructor_rv_andi(
                                                                    ctx, v817, v810,
                                                                );
                                                                let v819 = constructor_rv_bclr(
                                                                    ctx, v736, v818,
                                                                );
                                                                let v820 = constructor_output_xreg(
                                                                    ctx, v819,
                                                                );
                                                                let v821 = Some(v820);
                                                                // Rule at src\isa\riscv64\lower.isle line 732.
                                                                return v821;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v194 = C::def_inst(ctx, v79);
                                            if let Some(v195) = v194 {
                                                let v196 = &C::inst_data(ctx, v195);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v377,
                                                    args: ref v378,
                                                } = v196
                                                {
                                                    if let &Opcode::Ishl = v377 {
                                                        let v379 =
                                                            C::unpack_value_array_2(ctx, v378);
                                                        let v803 = C::i64_from_iconst(ctx, v379.0);
                                                        if let Some(v804) = v803 {
                                                            if v804 == 0x1 {
                                                                let v48 = constructor_put_in_xreg(
                                                                    ctx, v45.0,
                                                                );
                                                                let v806 = constructor_put_in_xreg(
                                                                    ctx, v379.1,
                                                                );
                                                                let v444 = C::ty_bits(ctx, v40);
                                                                let v808 =
                                                                    C::u8_sub(ctx, v444, 0x1);
                                                                let v809 = C::u8_as_i32(ctx, v808);
                                                                let v810 =
                                                                    C::imm12_const(ctx, v809);
                                                                let v811 = constructor_rv_andi(
                                                                    ctx, v806, v810,
                                                                );
                                                                let v812 = constructor_rv_bclr(
                                                                    ctx, v48, v811,
                                                                );
                                                                let v813 = constructor_output_xreg(
                                                                    ctx, v812,
                                                                );
                                                                let v814 = Some(v813);
                                                                // Rule at src\isa\riscv64\lower.isle line 729.
                                                                return v814;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v800 = constructor_rv_vand_vi(ctx, v218, v238, v185, v186);
                                let v801 = constructor_output_vreg(ctx, v800);
                                let v802 = Some(v801);
                                // Rule at src\isa\riscv64\lower.isle line 723.
                                return v802;
                            }
                            let v213 = constructor_replicated_imm5(ctx, v45.1);
                            if let Some(v214) = v213 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v797 = constructor_rv_vand_vi(ctx, v183, v214, v185, v186);
                                let v798 = constructor_output_vreg(ctx, v797);
                                let v799 = Some(v798);
                                // Rule at src\isa\riscv64\lower.isle line 719.
                                return v799;
                            }
                            let v789 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v790) = v789 {
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Splat = v90 {
                                            let v218 = constructor_put_in_vreg(ctx, v45.1);
                                            let v219 = constructor_put_in_xreg(ctx, v91);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v794 =
                                                constructor_rv_vand_vx(ctx, v218, v219, v185, v186);
                                            let v795 = constructor_output_vreg(ctx, v794);
                                            let v796 = Some(v795);
                                            // Rule at src\isa\riscv64\lower.isle line 715.
                                            return v796;
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Splat = v78 {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v190 = constructor_put_in_xreg(ctx, v79);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v791 =
                                                constructor_rv_vand_vx(ctx, v183, v190, v185, v186);
                                            let v792 = constructor_output_vreg(ctx, v791);
                                            let v793 = Some(v792);
                                            // Rule at src\isa\riscv64\lower.isle line 711.
                                            return v793;
                                        }
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v786 = constructor_rv_vand_vv(ctx, v183, v184, v185, v186);
                            let v787 = constructor_output_vreg(ctx, v786);
                            let v788 = Some(v787);
                            // Rule at src\isa\riscv64\lower.isle line 708.
                            return v788;
                        }
                        let v748 = C::has_zbb(ctx);
                        if v748 == true {
                            if v3 == I128 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Bnot = v90 {
                                            let v768 = C::put_in_regs(ctx, v45.1);
                                            let v769 = C::value_regs_get(ctx, v768, 0x0);
                                            let v770 = C::xreg_new(ctx, v769);
                                            let v771 = C::put_in_regs(ctx, v91);
                                            let v772 = C::value_regs_get(ctx, v771, 0x0);
                                            let v773 = C::xreg_new(ctx, v772);
                                            let v774 = constructor_rv_andn(ctx, v770, v773);
                                            let v165 = C::put_in_regs(ctx, v45.1);
                                            let v775 = C::value_regs_get(ctx, v165, 0x1);
                                            let v776 = C::xreg_new(ctx, v775);
                                            let v777 = C::put_in_regs(ctx, v91);
                                            let v778 = C::value_regs_get(ctx, v777, 0x1);
                                            let v779 = C::xreg_new(ctx, v778);
                                            let v780 = constructor_rv_andn(ctx, v776, v779);
                                            let v781 = C::xreg_to_reg(ctx, v774);
                                            let v782 = C::xreg_to_reg(ctx, v780);
                                            let v783 = C::value_regs(ctx, v781, v782);
                                            let v784 = C::output(ctx, v783);
                                            let v785 = Some(v784);
                                            // Rule at src\isa\riscv64\lower.isle line 702.
                                            return v785;
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v157 = C::put_in_regs(ctx, v45.0);
                                            let v159 = C::value_regs_get(ctx, v157, 0x0);
                                            let v160 = C::xreg_new(ctx, v159);
                                            let v755 = C::put_in_regs(ctx, v79);
                                            let v756 = C::value_regs_get(ctx, v755, 0x0);
                                            let v757 = C::xreg_new(ctx, v756);
                                            let v758 = constructor_rv_andn(ctx, v160, v757);
                                            let v720 = C::put_in_regs(ctx, v45.0);
                                            let v721 = C::value_regs_get(ctx, v720, 0x1);
                                            let v722 = C::xreg_new(ctx, v721);
                                            let v759 = C::put_in_regs(ctx, v79);
                                            let v760 = C::value_regs_get(ctx, v759, 0x1);
                                            let v761 = C::xreg_new(ctx, v760);
                                            let v762 = constructor_rv_andn(ctx, v722, v761);
                                            let v763 = C::xreg_to_reg(ctx, v758);
                                            let v764 = C::xreg_to_reg(ctx, v762);
                                            let v765 = C::value_regs(ctx, v763, v764);
                                            let v766 = C::output(ctx, v765);
                                            let v767 = Some(v766);
                                            // Rule at src\isa\riscv64\lower.isle line 696.
                                            return v767;
                                        }
                                    }
                                }
                            }
                            let v713 = C::fits_in_64(ctx, v3);
                            if let Some(v714) = v713 {
                                let v731 = C::ty_int(ctx, v714);
                                if let Some(v732) = v731 {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Unary {
                                            opcode: ref v90,
                                            arg: v91,
                                        } = v89
                                        {
                                            if let &Opcode::Bnot = v90 {
                                                let v736 = constructor_put_in_xreg(ctx, v45.1);
                                                let v219 = constructor_put_in_xreg(ctx, v91);
                                                let v752 = constructor_rv_andn(ctx, v736, v219);
                                                let v753 = constructor_output_xreg(ctx, v752);
                                                let v754 = Some(v753);
                                                // Rule at src\isa\riscv64\lower.isle line 692.
                                                return v754;
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Unary {
                                            opcode: ref v78,
                                            arg: v79,
                                        } = v77
                                        {
                                            if let &Opcode::Bnot = v78 {
                                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                let v190 = constructor_put_in_xreg(ctx, v79);
                                                let v749 = constructor_rv_andn(ctx, v48, v190);
                                                let v750 = constructor_output_xreg(ctx, v749);
                                                let v751 = Some(v750);
                                                // Rule at src\isa\riscv64\lower.isle line 688.
                                                return v751;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v745 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::And,
                                v743,
                                v744,
                                v741,
                            );
                            let v746 = constructor_output_freg(ctx, v745);
                            let v747 = Some(v746);
                            // Rule at src\isa\riscv64\lower.isle line 681.
                            return v747;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v731 = C::ty_int(ctx, v714);
                            if let Some(v732) = v731 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v67 = C::i64_from_iconst(ctx, v45.0);
                                if let Some(v68) = v67 {
                                    let v69 = C::imm12_from_i64(ctx, v68);
                                    if let Some(v70) = v69 {
                                        let v736 = constructor_put_in_xreg(ctx, v45.1);
                                        let v737 = constructor_rv_andi(ctx, v736, v70);
                                        let v738 = constructor_output_xreg(ctx, v737);
                                        let v739 = Some(v738);
                                        // Rule at src\isa\riscv64\lower.isle line 678.
                                        return v739;
                                    }
                                }
                                let v58 = C::i64_from_iconst(ctx, v45.1);
                                if let Some(v59) = v58 {
                                    let v60 = C::imm12_from_i64(ctx, v59);
                                    if let Some(v61) = v60 {
                                        let v48 = constructor_put_in_xreg(ctx, v45.0);
                                        let v733 = constructor_rv_andi(ctx, v48, v61);
                                        let v734 = constructor_output_xreg(ctx, v733);
                                        let v735 = Some(v734);
                                        // Rule at src\isa\riscv64\lower.isle line 675.
                                        return v735;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v157 = C::put_in_regs(ctx, v45.0);
                            let v159 = C::value_regs_get(ctx, v157, 0x0);
                            let v160 = C::xreg_new(ctx, v159);
                            let v161 = C::put_in_regs(ctx, v45.1);
                            let v162 = C::value_regs_get(ctx, v161, 0x0);
                            let v163 = C::xreg_new(ctx, v162);
                            let v718 = constructor_rv_and(ctx, v160, v163);
                            let v720 = C::put_in_regs(ctx, v45.0);
                            let v721 = C::value_regs_get(ctx, v720, 0x1);
                            let v722 = C::xreg_new(ctx, v721);
                            let v723 = C::put_in_regs(ctx, v45.1);
                            let v724 = C::value_regs_get(ctx, v723, 0x1);
                            let v725 = C::xreg_new(ctx, v724);
                            let v726 = constructor_rv_and(ctx, v722, v725);
                            let v719 = C::xreg_to_reg(ctx, v718);
                            let v727 = C::xreg_to_reg(ctx, v726);
                            let v728 = C::value_regs(ctx, v719, v727);
                            let v729 = C::output(ctx, v728);
                            let v730 = Some(v729);
                            // Rule at src\isa\riscv64\lower.isle line 669.
                            return v730;
                        }
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                            let v49 = constructor_put_in_xreg(ctx, v45.1);
                            let v715 = constructor_rv_and(ctx, v48, v49);
                            let v716 = constructor_output_xreg(ctx, v715);
                            let v717 = Some(v716);
                            // Rule at src\isa\riscv64\lower.isle line 666.
                            return v717;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v805 = C::has_zbs(ctx);
                        if v805 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v713 = C::fits_in_64(ctx, v3);
                            if let Some(v714) = v713 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v834,
                                        imm: v835,
                                    } = v89
                                    {
                                        if let &Opcode::Iconst = v834 {
                                            let v836 = C::u64_from_imm64(ctx, v835);
                                            let v945 = C::bseti_imm(ctx, v836);
                                            if let Some(v946) = v945 {
                                                let v736 = constructor_put_in_xreg(ctx, v45.1);
                                                let v947 = constructor_rv_bseti(ctx, v736, v946);
                                                let v948 = constructor_output_xreg(ctx, v947);
                                                let v949 = Some(v948);
                                                // Rule at src\isa\riscv64\lower.isle line 873.
                                                return v949;
                                            }
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v628,
                                        imm: v629,
                                    } = v77
                                    {
                                        if let &Opcode::Iconst = v628 {
                                            let v828 = C::u64_from_imm64(ctx, v629);
                                            let v940 = C::bseti_imm(ctx, v828);
                                            if let Some(v941) = v940 {
                                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                let v942 = constructor_rv_bseti(ctx, v48, v941);
                                                let v943 = constructor_output_xreg(ctx, v942);
                                                let v944 = Some(v943);
                                                // Rule at src\isa\riscv64\lower.isle line 869.
                                                return v944;
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Binary {
                                            opcode: ref v115,
                                            args: ref v116,
                                        } = v89
                                        {
                                            if let &Opcode::Ishl = v115 {
                                                let v117 = C::unpack_value_array_2(ctx, v116);
                                                let v929 = C::i64_from_iconst(ctx, v117.0);
                                                if let Some(v930) = v929 {
                                                    if v930 == 0x1 {
                                                        let v736 =
                                                            constructor_put_in_xreg(ctx, v45.1);
                                                        let v843 =
                                                            constructor_put_in_xreg(ctx, v117.1);
                                                        let v845 = C::imm12_const(ctx, 0x1F);
                                                        let v846 =
                                                            constructor_rv_andi(ctx, v843, v845);
                                                        let v931 =
                                                            constructor_rv_bset(ctx, v736, v846);
                                                        let v932 =
                                                            constructor_output_xreg(ctx, v931);
                                                        let v933 = Some(v932);
                                                        // Rule at src\isa\riscv64\lower.isle line 858.
                                                        return v933;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v77
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v924 = C::i64_from_iconst(ctx, v99.0);
                                                if let Some(v925) = v924 {
                                                    if v925 == 0x1 {
                                                        let v48 =
                                                            constructor_put_in_xreg(ctx, v45.0);
                                                        let v851 =
                                                            constructor_put_in_xreg(ctx, v99.1);
                                                        let v845 = C::imm12_const(ctx, 0x1F);
                                                        let v852 =
                                                            constructor_rv_andi(ctx, v851, v845);
                                                        let v926 =
                                                            constructor_rv_bset(ctx, v48, v852);
                                                        let v927 =
                                                            constructor_output_xreg(ctx, v926);
                                                        let v928 = Some(v927);
                                                        // Rule at src\isa\riscv64\lower.isle line 855.
                                                        return v928;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Binary {
                                            opcode: ref v115,
                                            args: ref v116,
                                        } = v89
                                        {
                                            if let &Opcode::Ishl = v115 {
                                                let v117 = C::unpack_value_array_2(ctx, v116);
                                                let v929 = C::i64_from_iconst(ctx, v117.0);
                                                if let Some(v930) = v929 {
                                                    if v930 == 0x1 {
                                                        let v736 =
                                                            constructor_put_in_xreg(ctx, v45.1);
                                                        let v843 =
                                                            constructor_put_in_xreg(ctx, v117.1);
                                                        let v937 =
                                                            constructor_rv_bset(ctx, v736, v843);
                                                        let v938 =
                                                            constructor_output_xreg(ctx, v937);
                                                        let v939 = Some(v938);
                                                        // Rule at src\isa\riscv64\lower.isle line 865.
                                                        return v939;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v77
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v924 = C::i64_from_iconst(ctx, v99.0);
                                                if let Some(v925) = v924 {
                                                    if v925 == 0x1 {
                                                        let v48 =
                                                            constructor_put_in_xreg(ctx, v45.0);
                                                        let v851 =
                                                            constructor_put_in_xreg(ctx, v99.1);
                                                        let v934 =
                                                            constructor_rv_bset(ctx, v48, v851);
                                                        let v935 =
                                                            constructor_output_xreg(ctx, v934);
                                                        let v936 = Some(v935);
                                                        // Rule at src\isa\riscv64\lower.isle line 862.
                                                        return v936;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v921 = constructor_rv_vor_vi(ctx, v218, v238, v185, v186);
                                let v922 = constructor_output_vreg(ctx, v921);
                                let v923 = Some(v922);
                                // Rule at src\isa\riscv64\lower.isle line 849.
                                return v923;
                            }
                            let v213 = constructor_replicated_imm5(ctx, v45.1);
                            if let Some(v214) = v213 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v918 = constructor_rv_vor_vi(ctx, v183, v214, v185, v186);
                                let v919 = constructor_output_vreg(ctx, v918);
                                let v920 = Some(v919);
                                // Rule at src\isa\riscv64\lower.isle line 845.
                                return v920;
                            }
                            let v789 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v790) = v789 {
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Splat = v90 {
                                            let v218 = constructor_put_in_vreg(ctx, v45.1);
                                            let v219 = constructor_put_in_xreg(ctx, v91);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v915 =
                                                constructor_rv_vor_vx(ctx, v218, v219, v185, v186);
                                            let v916 = constructor_output_vreg(ctx, v915);
                                            let v917 = Some(v916);
                                            // Rule at src\isa\riscv64\lower.isle line 841.
                                            return v917;
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Splat = v78 {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v190 = constructor_put_in_xreg(ctx, v79);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v912 =
                                                constructor_rv_vor_vx(ctx, v183, v190, v185, v186);
                                            let v913 = constructor_output_vreg(ctx, v912);
                                            let v914 = Some(v913);
                                            // Rule at src\isa\riscv64\lower.isle line 837.
                                            return v914;
                                        }
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v909 = constructor_rv_vor_vv(ctx, v183, v184, v185, v186);
                            let v910 = constructor_output_vreg(ctx, v909);
                            let v911 = Some(v910);
                            // Rule at src\isa\riscv64\lower.isle line 834.
                            return v911;
                        }
                        let v748 = C::has_zbb(ctx);
                        if v748 == true {
                            if v3 == I128 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Bnot = v90 {
                                            let v768 = C::put_in_regs(ctx, v45.1);
                                            let v769 = C::value_regs_get(ctx, v768, 0x0);
                                            let v770 = C::xreg_new(ctx, v769);
                                            let v771 = C::put_in_regs(ctx, v91);
                                            let v772 = C::value_regs_get(ctx, v771, 0x0);
                                            let v773 = C::xreg_new(ctx, v772);
                                            let v902 = constructor_rv_orn(ctx, v770, v773);
                                            let v165 = C::put_in_regs(ctx, v45.1);
                                            let v775 = C::value_regs_get(ctx, v165, 0x1);
                                            let v776 = C::xreg_new(ctx, v775);
                                            let v777 = C::put_in_regs(ctx, v91);
                                            let v778 = C::value_regs_get(ctx, v777, 0x1);
                                            let v779 = C::xreg_new(ctx, v778);
                                            let v903 = constructor_rv_orn(ctx, v776, v779);
                                            let v904 = C::xreg_to_reg(ctx, v902);
                                            let v905 = C::xreg_to_reg(ctx, v903);
                                            let v906 = C::value_regs(ctx, v904, v905);
                                            let v907 = C::output(ctx, v906);
                                            let v908 = Some(v907);
                                            // Rule at src\isa\riscv64\lower.isle line 828.
                                            return v908;
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Bnot = v78 {
                                            let v157 = C::put_in_regs(ctx, v45.0);
                                            let v159 = C::value_regs_get(ctx, v157, 0x0);
                                            let v160 = C::xreg_new(ctx, v159);
                                            let v755 = C::put_in_regs(ctx, v79);
                                            let v756 = C::value_regs_get(ctx, v755, 0x0);
                                            let v757 = C::xreg_new(ctx, v756);
                                            let v895 = constructor_rv_orn(ctx, v160, v757);
                                            let v720 = C::put_in_regs(ctx, v45.0);
                                            let v721 = C::value_regs_get(ctx, v720, 0x1);
                                            let v722 = C::xreg_new(ctx, v721);
                                            let v759 = C::put_in_regs(ctx, v79);
                                            let v760 = C::value_regs_get(ctx, v759, 0x1);
                                            let v761 = C::xreg_new(ctx, v760);
                                            let v896 = constructor_rv_orn(ctx, v722, v761);
                                            let v897 = C::xreg_to_reg(ctx, v895);
                                            let v898 = C::xreg_to_reg(ctx, v896);
                                            let v899 = C::value_regs(ctx, v897, v898);
                                            let v900 = C::output(ctx, v899);
                                            let v901 = Some(v900);
                                            // Rule at src\isa\riscv64\lower.isle line 822.
                                            return v901;
                                        }
                                    }
                                }
                            }
                            let v713 = C::fits_in_64(ctx, v3);
                            if let Some(v714) = v713 {
                                let v731 = C::ty_int(ctx, v714);
                                if let Some(v732) = v731 {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Unary {
                                            opcode: ref v90,
                                            arg: v91,
                                        } = v89
                                        {
                                            if let &Opcode::Bnot = v90 {
                                                let v736 = constructor_put_in_xreg(ctx, v45.1);
                                                let v219 = constructor_put_in_xreg(ctx, v91);
                                                let v892 = constructor_rv_orn(ctx, v736, v219);
                                                let v893 = constructor_output_xreg(ctx, v892);
                                                let v894 = Some(v893);
                                                // Rule at src\isa\riscv64\lower.isle line 818.
                                                return v894;
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Unary {
                                            opcode: ref v78,
                                            arg: v79,
                                        } = v77
                                        {
                                            if let &Opcode::Bnot = v78 {
                                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                let v190 = constructor_put_in_xreg(ctx, v79);
                                                let v889 = constructor_rv_orn(ctx, v48, v190);
                                                let v890 = constructor_output_xreg(ctx, v889);
                                                let v891 = Some(v890);
                                                // Rule at src\isa\riscv64\lower.isle line 814.
                                                return v891;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v886 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Or,
                                v743,
                                v744,
                                v741,
                            );
                            let v887 = constructor_output_freg(ctx, v886);
                            let v888 = Some(v887);
                            // Rule at src\isa\riscv64\lower.isle line 807.
                            return v888;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v731 = C::ty_int(ctx, v714);
                            if let Some(v732) = v731 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v67 = C::i64_from_iconst(ctx, v45.0);
                                if let Some(v68) = v67 {
                                    let v69 = C::imm12_from_i64(ctx, v68);
                                    if let Some(v70) = v69 {
                                        let v736 = constructor_put_in_xreg(ctx, v45.1);
                                        let v882 = constructor_rv_ori(ctx, v736, v70);
                                        let v883 = constructor_output_xreg(ctx, v882);
                                        let v884 = Some(v883);
                                        // Rule at src\isa\riscv64\lower.isle line 804.
                                        return v884;
                                    }
                                }
                                let v58 = C::i64_from_iconst(ctx, v45.1);
                                if let Some(v59) = v58 {
                                    let v60 = C::imm12_from_i64(ctx, v59);
                                    if let Some(v61) = v60 {
                                        let v48 = constructor_put_in_xreg(ctx, v45.0);
                                        let v879 = constructor_rv_ori(ctx, v48, v61);
                                        let v880 = constructor_output_xreg(ctx, v879);
                                        let v881 = Some(v880);
                                        // Rule at src\isa\riscv64\lower.isle line 801.
                                        return v881;
                                    }
                                }
                            }
                        }
                        let v545 = C::ty_int(ctx, v3);
                        if let Some(v546) = v545 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v157 = C::put_in_regs(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v876 = constructor_gen_or(ctx, v546, v157, v465);
                            let v877 = C::output(ctx, v876);
                            let v878 = Some(v877);
                            // Rule at src\isa\riscv64\lower.isle line 797.
                            return v878;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v805 = C::has_zbs(ctx);
                        if v805 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v713 = C::fits_in_64(ctx, v3);
                            if let Some(v714) = v713 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v834,
                                        imm: v835,
                                    } = v89
                                    {
                                        if let &Opcode::Iconst = v834 {
                                            let v836 = C::u64_from_imm64(ctx, v835);
                                            let v998 = C::binvi_imm(ctx, v836);
                                            if let Some(v999) = v998 {
                                                let v736 = constructor_put_in_xreg(ctx, v45.1);
                                                let v1000 = constructor_rv_binvi(ctx, v736, v999);
                                                let v1001 = constructor_output_xreg(ctx, v1000);
                                                let v1002 = Some(v1001);
                                                // Rule at src\isa\riscv64\lower.isle line 937.
                                                return v1002;
                                            }
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v628,
                                        imm: v629,
                                    } = v77
                                    {
                                        if let &Opcode::Iconst = v628 {
                                            let v828 = C::u64_from_imm64(ctx, v629);
                                            let v993 = C::binvi_imm(ctx, v828);
                                            if let Some(v994) = v993 {
                                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                let v995 = constructor_rv_binvi(ctx, v48, v994);
                                                let v996 = constructor_output_xreg(ctx, v995);
                                                let v997 = Some(v996);
                                                // Rule at src\isa\riscv64\lower.isle line 933.
                                                return v997;
                                            }
                                        }
                                    }
                                }
                            }
                            match v3 {
                                I32 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Binary {
                                            opcode: ref v115,
                                            args: ref v116,
                                        } = v89
                                        {
                                            if let &Opcode::Ishl = v115 {
                                                let v117 = C::unpack_value_array_2(ctx, v116);
                                                let v929 = C::i64_from_iconst(ctx, v117.0);
                                                if let Some(v930) = v929 {
                                                    if v930 == 0x1 {
                                                        let v736 =
                                                            constructor_put_in_xreg(ctx, v45.1);
                                                        let v843 =
                                                            constructor_put_in_xreg(ctx, v117.1);
                                                        let v845 = C::imm12_const(ctx, 0x1F);
                                                        let v846 =
                                                            constructor_rv_andi(ctx, v843, v845);
                                                        let v984 =
                                                            constructor_rv_binv(ctx, v736, v846);
                                                        let v985 =
                                                            constructor_output_xreg(ctx, v984);
                                                        let v986 = Some(v985);
                                                        // Rule at src\isa\riscv64\lower.isle line 922.
                                                        return v986;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v77
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v924 = C::i64_from_iconst(ctx, v99.0);
                                                if let Some(v925) = v924 {
                                                    if v925 == 0x1 {
                                                        let v48 =
                                                            constructor_put_in_xreg(ctx, v45.0);
                                                        let v851 =
                                                            constructor_put_in_xreg(ctx, v99.1);
                                                        let v845 = C::imm12_const(ctx, 0x1F);
                                                        let v852 =
                                                            constructor_rv_andi(ctx, v851, v845);
                                                        let v981 =
                                                            constructor_rv_binv(ctx, v48, v852);
                                                        let v982 =
                                                            constructor_output_xreg(ctx, v981);
                                                        let v983 = Some(v982);
                                                        // Rule at src\isa\riscv64\lower.isle line 919.
                                                        return v983;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                I64 => {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v87 = C::def_inst(ctx, v45.0);
                                    if let Some(v88) = v87 {
                                        let v89 = &C::inst_data(ctx, v88);
                                        if let &InstructionData::Binary {
                                            opcode: ref v115,
                                            args: ref v116,
                                        } = v89
                                        {
                                            if let &Opcode::Ishl = v115 {
                                                let v117 = C::unpack_value_array_2(ctx, v116);
                                                let v929 = C::i64_from_iconst(ctx, v117.0);
                                                if let Some(v930) = v929 {
                                                    if v930 == 0x1 {
                                                        let v736 =
                                                            constructor_put_in_xreg(ctx, v45.1);
                                                        let v843 =
                                                            constructor_put_in_xreg(ctx, v117.1);
                                                        let v990 =
                                                            constructor_rv_binv(ctx, v736, v843);
                                                        let v991 =
                                                            constructor_output_xreg(ctx, v990);
                                                        let v992 = Some(v991);
                                                        // Rule at src\isa\riscv64\lower.isle line 929.
                                                        return v992;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::Binary {
                                            opcode: ref v97,
                                            args: ref v98,
                                        } = v77
                                        {
                                            if let &Opcode::Ishl = v97 {
                                                let v99 = C::unpack_value_array_2(ctx, v98);
                                                let v924 = C::i64_from_iconst(ctx, v99.0);
                                                if let Some(v925) = v924 {
                                                    if v925 == 0x1 {
                                                        let v48 =
                                                            constructor_put_in_xreg(ctx, v45.0);
                                                        let v851 =
                                                            constructor_put_in_xreg(ctx, v99.1);
                                                        let v987 =
                                                            constructor_rv_binv(ctx, v48, v851);
                                                        let v988 =
                                                            constructor_output_xreg(ctx, v987);
                                                        let v989 = Some(v988);
                                                        // Rule at src\isa\riscv64\lower.isle line 926.
                                                        return v989;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v237 = constructor_replicated_imm5(ctx, v45.0);
                            if let Some(v238) = v237 {
                                let v218 = constructor_put_in_vreg(ctx, v45.1);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v978 = constructor_rv_vxor_vi(ctx, v218, v238, v185, v186);
                                let v979 = constructor_output_vreg(ctx, v978);
                                let v980 = Some(v979);
                                // Rule at src\isa\riscv64\lower.isle line 913.
                                return v980;
                            }
                            let v213 = constructor_replicated_imm5(ctx, v45.1);
                            if let Some(v214) = v213 {
                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                let v185 = &constructor_unmasked(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v975 = constructor_rv_vxor_vi(ctx, v183, v214, v185, v186);
                                let v976 = constructor_output_vreg(ctx, v975);
                                let v977 = Some(v976);
                                // Rule at src\isa\riscv64\lower.isle line 909.
                                return v977;
                            }
                            let v789 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v790) = v789 {
                                let v87 = C::def_inst(ctx, v45.0);
                                if let Some(v88) = v87 {
                                    let v89 = &C::inst_data(ctx, v88);
                                    if let &InstructionData::Unary {
                                        opcode: ref v90,
                                        arg: v91,
                                    } = v89
                                    {
                                        if let &Opcode::Splat = v90 {
                                            let v218 = constructor_put_in_vreg(ctx, v45.1);
                                            let v219 = constructor_put_in_xreg(ctx, v91);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v972 =
                                                constructor_rv_vxor_vx(ctx, v218, v219, v185, v186);
                                            let v973 = constructor_output_vreg(ctx, v972);
                                            let v974 = Some(v973);
                                            // Rule at src\isa\riscv64\lower.isle line 905.
                                            return v974;
                                        }
                                    }
                                }
                                let v75 = C::def_inst(ctx, v45.1);
                                if let Some(v76) = v75 {
                                    let v77 = &C::inst_data(ctx, v76);
                                    if let &InstructionData::Unary {
                                        opcode: ref v78,
                                        arg: v79,
                                    } = v77
                                    {
                                        if let &Opcode::Splat = v78 {
                                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                                            let v190 = constructor_put_in_xreg(ctx, v79);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v969 =
                                                constructor_rv_vxor_vx(ctx, v183, v190, v185, v186);
                                            let v970 = constructor_output_vreg(ctx, v969);
                                            let v971 = Some(v970);
                                            // Rule at src\isa\riscv64\lower.isle line 901.
                                            return v971;
                                        }
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v966 = constructor_rv_vxor_vv(ctx, v183, v184, v185, v186);
                            let v967 = constructor_output_vreg(ctx, v966);
                            let v968 = Some(v967);
                            // Rule at src\isa\riscv64\lower.isle line 898.
                            return v968;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v963 = constructor_lower_float_binary(
                                ctx,
                                &AluOPRRR::Xor,
                                v743,
                                v744,
                                v741,
                            );
                            let v964 = constructor_output_freg(ctx, v963);
                            let v965 = Some(v964);
                            // Rule at src\isa\riscv64\lower.isle line 895.
                            return v965;
                        }
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v157 = C::put_in_regs(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v960 =
                                constructor_lower_b128_binary(ctx, &AluOPRRR::Xor, v157, v465);
                            let v961 = C::output(ctx, v960);
                            let v962 = Some(v961);
                            // Rule at src\isa\riscv64\lower.isle line 892.
                            return v962;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v731 = C::ty_int(ctx, v714);
                            if let Some(v732) = v731 {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v67 = C::i64_from_iconst(ctx, v45.0);
                                if let Some(v68) = v67 {
                                    let v69 = C::imm12_from_i64(ctx, v68);
                                    if let Some(v70) = v69 {
                                        let v736 = constructor_put_in_xreg(ctx, v45.1);
                                        let v956 = constructor_rv_xori(ctx, v736, v70);
                                        let v957 = constructor_output_xreg(ctx, v956);
                                        let v958 = Some(v957);
                                        // Rule at src\isa\riscv64\lower.isle line 889.
                                        return v958;
                                    }
                                }
                                let v58 = C::i64_from_iconst(ctx, v45.1);
                                if let Some(v59) = v58 {
                                    let v60 = C::imm12_from_i64(ctx, v59);
                                    if let Some(v61) = v60 {
                                        let v48 = constructor_put_in_xreg(ctx, v45.0);
                                        let v953 = constructor_rv_xori(ctx, v48, v61);
                                        let v954 = constructor_output_xreg(ctx, v953);
                                        let v955 = Some(v954);
                                        // Rule at src\isa\riscv64\lower.isle line 886.
                                        return v955;
                                    }
                                }
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v49 = constructor_put_in_xreg(ctx, v45.1);
                                let v950 = constructor_rv_xor(ctx, v48, v49);
                                let v951 = constructor_output_xreg(ctx, v950);
                                let v952 = Some(v951);
                                // Rule at src\isa\riscv64\lower.isle line 882.
                                return v952;
                            }
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v748 = C::has_zbb(ctx);
                                if v748 == true {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v828 = C::u64_from_imm64(ctx, v629);
                                                let v1487 = C::u64_and(ctx, v828, 0x1F);
                                                let v1488 = C::u64_sub(ctx, 0x20, v1487);
                                                let v1489 = C::imm12_from_u64(ctx, v1488);
                                                if let Some(v1490) = v1489 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v1491 =
                                                        constructor_rv_roriw(ctx, v48, v1490);
                                                    let v1492 = constructor_output_xreg(ctx, v1491);
                                                    let v1493 = Some(v1492);
                                                    // Rule at src\isa\riscv64\lower.isle line 1414.
                                                    return v1493;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1483 = constructor_rv_rolw(ctx, v48, v1273);
                                    let v1484 = constructor_output_xreg(ctx, v1483);
                                    let v1485 = Some(v1484);
                                    // Rule at src\isa\riscv64\lower.isle line 1410.
                                    return v1485;
                                }
                            }
                            I64 => {
                                let v748 = C::has_zbb(ctx);
                                if v748 == true {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v75 = C::def_inst(ctx, v45.1);
                                    if let Some(v76) = v75 {
                                        let v77 = &C::inst_data(ctx, v76);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v628,
                                            imm: v629,
                                        } = v77
                                        {
                                            if let &Opcode::Iconst = v628 {
                                                let v828 = C::u64_from_imm64(ctx, v629);
                                                let v1497 = C::u64_and(ctx, v828, 0x3F);
                                                let v1498 = C::u64_sub(ctx, 0x40, v1497);
                                                let v1499 = C::imm12_from_u64(ctx, v1498);
                                                if let Some(v1500) = v1499 {
                                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                                    let v1501 =
                                                        constructor_rv_rori(ctx, v48, v1500);
                                                    let v1502 = constructor_output_xreg(ctx, v1501);
                                                    let v1503 = Some(v1502);
                                                    // Rule at src\isa\riscv64\lower.isle line 1423.
                                                    return v1503;
                                                }
                                            }
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1494 = constructor_rv_rol(ctx, v48, v1273);
                                    let v1495 = constructor_output_xreg(ctx, v1494);
                                    let v1496 = Some(v1495);
                                    // Rule at src\isa\riscv64\lower.isle line 1419.
                                    return v1496;
                                }
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v768 = C::put_in_regs(ctx, v45.1);
                                let v769 = C::value_regs_get(ctx, v768, 0x0);
                                let v770 = C::xreg_new(ctx, v769);
                                let v1306 = C::gen_shamt(ctx, I128, v770);
                                let v1307 = C::value_regs_get(ctx, v1306, 0x0);
                                let v1308 = C::xreg_new(ctx, v1307);
                                let v1309 = C::value_regs_get(ctx, v1306, 0x1);
                                let v1310 = C::xreg_new(ctx, v1309);
                                let v1311 = C::put_in_regs(ctx, v45.0);
                                let v1312 = C::value_regs_get(ctx, v1311, 0x0);
                                let v1313 = C::xreg_new(ctx, v1312);
                                let v1314 = constructor_rv_sll(ctx, v1313, v1308);
                                let v1315 = C::put_in_regs(ctx, v45.0);
                                let v1504 = C::value_regs_get(ctx, v1315, 0x1);
                                let v1505 = C::xreg_new(ctx, v1504);
                                let v1506 = constructor_rv_srl(ctx, v1505, v1310);
                                let v1319 = constructor_cmp_eqz(ctx, v1308);
                                let v1320 = C::zero_reg(ctx);
                                let v1507 = constructor_gen_select_xreg(ctx, v1319, v1320, v1506);
                                let v1508 = constructor_rv_or(ctx, v1314, v1507);
                                let v1509 = C::put_in_regs(ctx, v45.0);
                                let v1510 = C::value_regs_get(ctx, v1509, 0x1);
                                let v1511 = C::xreg_new(ctx, v1510);
                                let v1512 = constructor_rv_sll(ctx, v1511, v1308);
                                let v1513 = C::put_in_regs(ctx, v45.0);
                                let v1514 = C::value_regs_get(ctx, v1513, 0x0);
                                let v1515 = C::xreg_new(ctx, v1514);
                                let v1516 = constructor_rv_srl(ctx, v1515, v1310);
                                let v1517 = constructor_cmp_eqz(ctx, v1308);
                                let v1518 = C::zero_reg(ctx);
                                let v1519 = constructor_gen_select_xreg(ctx, v1517, v1518, v1516);
                                let v1520 = constructor_rv_or(ctx, v1512, v1519);
                                let v1521 = constructor_imm(ctx, I64, 0x40);
                                let v1522 = C::xreg_new(ctx, v1521);
                                let v1523 = C::put_in_regs(ctx, v45.1);
                                let v1524 = C::value_regs_get(ctx, v1523, 0x0);
                                let v1525 = C::xreg_new(ctx, v1524);
                                let v1334 = C::imm12_const(ctx, 0x7F);
                                let v1526 = constructor_rv_andi(ctx, v1525, v1334);
                                let v1527 = constructor_cmp_geu(ctx, v1526, v1522);
                                let v1528 = C::xreg_to_reg(ctx, v1520);
                                let v1529 = C::xreg_to_reg(ctx, v1508);
                                let v1530 = C::value_regs(ctx, v1528, v1529);
                                let v1531 = C::value_regs(ctx, v1529, v1528);
                                let v1532 = constructor_gen_select_regs(ctx, v1527, v1530, v1531);
                                let v1533 = C::output(ctx, v1532);
                                let v1534 = Some(v1533);
                                // Rule at src\isa\riscv64\lower.isle line 1428.
                                return v1534;
                            }
                            _ => {}
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v603 = constructor_zext(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v1272 = C::value_regs_get(ctx, v465, 0x0);
                            let v1273 = C::xreg_new(ctx, v1272);
                            let v1464 = C::gen_shamt(ctx, v714, v1273);
                            let v1465 = C::value_regs_get(ctx, v1464, 0x0);
                            let v1466 = C::xreg_new(ctx, v1465);
                            let v1467 = C::value_regs_get(ctx, v1464, 0x1);
                            let v1468 = constructor_rv_sll(ctx, v603, v1466);
                            let v1470 = C::xreg_new(ctx, v1467);
                            let v1471 = constructor_rv_srl(ctx, v603, v1470);
                            let v1473 = constructor_cmp_eqz(ctx, v1466);
                            let v1474 = C::zero_reg(ctx);
                            let v1472 = C::xreg_to_reg(ctx, v1471);
                            let v1475 = C::xreg_new(ctx, v1472);
                            let v1476 = constructor_gen_select_xreg(ctx, v1473, v1474, v1475);
                            let v1469 = C::xreg_to_reg(ctx, v1468);
                            let v1478 = C::xreg_new(ctx, v1469);
                            let v1477 = C::xreg_to_reg(ctx, v1476);
                            let v1479 = C::xreg_new(ctx, v1477);
                            let v1480 = constructor_rv_or(ctx, v1478, v1479);
                            let v1481 = constructor_output_xreg(ctx, v1480);
                            let v1482 = Some(v1481);
                            // Rule at src\isa\riscv64\lower.isle line 1398.
                            return v1482;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v748 = C::has_zbb(ctx);
                                if v748 == true {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v58 = C::i64_from_iconst(ctx, v45.1);
                                    if let Some(v59) = v58 {
                                        let v60 = C::imm12_from_i64(ctx, v59);
                                        if let Some(v61) = v60 {
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1545 = constructor_rv_roriw(ctx, v48, v61);
                                            let v1546 = constructor_output_xreg(ctx, v1545);
                                            let v1547 = Some(v1546);
                                            // Rule at src\isa\riscv64\lower.isle line 1470.
                                            return v1547;
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1542 = constructor_rv_rorw(ctx, v48, v1273);
                                    let v1543 = constructor_output_xreg(ctx, v1542);
                                    let v1544 = Some(v1543);
                                    // Rule at src\isa\riscv64\lower.isle line 1466.
                                    return v1544;
                                }
                            }
                            I64 => {
                                let v748 = C::has_zbb(ctx);
                                if v748 == true {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v58 = C::i64_from_iconst(ctx, v45.1);
                                    if let Some(v59) = v58 {
                                        let v60 = C::imm12_from_i64(ctx, v59);
                                        if let Some(v61) = v60 {
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1551 = constructor_rv_rori(ctx, v48, v61);
                                            let v1552 = constructor_output_xreg(ctx, v1551);
                                            let v1553 = Some(v1552);
                                            // Rule at src\isa\riscv64\lower.isle line 1478.
                                            return v1553;
                                        }
                                    }
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1548 = constructor_rv_ror(ctx, v48, v1273);
                                    let v1549 = constructor_output_xreg(ctx, v1548);
                                    let v1550 = Some(v1549);
                                    // Rule at src\isa\riscv64\lower.isle line 1474.
                                    return v1550;
                                }
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v768 = C::put_in_regs(ctx, v45.1);
                                let v769 = C::value_regs_get(ctx, v768, 0x0);
                                let v770 = C::xreg_new(ctx, v769);
                                let v1306 = C::gen_shamt(ctx, I128, v770);
                                let v1307 = C::value_regs_get(ctx, v1306, 0x0);
                                let v1308 = C::xreg_new(ctx, v1307);
                                let v1309 = C::value_regs_get(ctx, v1306, 0x1);
                                let v1310 = C::xreg_new(ctx, v1309);
                                let v1311 = C::put_in_regs(ctx, v45.0);
                                let v1312 = C::value_regs_get(ctx, v1311, 0x0);
                                let v1313 = C::xreg_new(ctx, v1312);
                                let v1554 = constructor_rv_srl(ctx, v1313, v1308);
                                let v1315 = C::put_in_regs(ctx, v45.0);
                                let v1504 = C::value_regs_get(ctx, v1315, 0x1);
                                let v1505 = C::xreg_new(ctx, v1504);
                                let v1555 = constructor_rv_sll(ctx, v1505, v1310);
                                let v1319 = constructor_cmp_eqz(ctx, v1308);
                                let v1320 = C::zero_reg(ctx);
                                let v1556 = constructor_gen_select_xreg(ctx, v1319, v1320, v1555);
                                let v1557 = constructor_rv_or(ctx, v1554, v1556);
                                let v1509 = C::put_in_regs(ctx, v45.0);
                                let v1510 = C::value_regs_get(ctx, v1509, 0x1);
                                let v1511 = C::xreg_new(ctx, v1510);
                                let v1558 = constructor_rv_srl(ctx, v1511, v1308);
                                let v1513 = C::put_in_regs(ctx, v45.0);
                                let v1514 = C::value_regs_get(ctx, v1513, 0x0);
                                let v1515 = C::xreg_new(ctx, v1514);
                                let v1559 = constructor_rv_sll(ctx, v1515, v1310);
                                let v1517 = constructor_cmp_eqz(ctx, v1308);
                                let v1518 = C::zero_reg(ctx);
                                let v1560 = constructor_gen_select_xreg(ctx, v1517, v1518, v1559);
                                let v1561 = constructor_rv_or(ctx, v1558, v1560);
                                let v1521 = constructor_imm(ctx, I64, 0x40);
                                let v1522 = C::xreg_new(ctx, v1521);
                                let v1523 = C::put_in_regs(ctx, v45.1);
                                let v1524 = C::value_regs_get(ctx, v1523, 0x0);
                                let v1525 = C::xreg_new(ctx, v1524);
                                let v1334 = C::imm12_const(ctx, 0x7F);
                                let v1526 = constructor_rv_andi(ctx, v1525, v1334);
                                let v1527 = constructor_cmp_geu(ctx, v1526, v1522);
                                let v1562 = C::xreg_to_reg(ctx, v1561);
                                let v1563 = C::xreg_to_reg(ctx, v1557);
                                let v1564 = C::value_regs(ctx, v1562, v1563);
                                let v1565 = C::value_regs(ctx, v1563, v1562);
                                let v1566 = constructor_gen_select_regs(ctx, v1527, v1564, v1565);
                                let v1567 = C::output(ctx, v1566);
                                let v1568 = Some(v1567);
                                // Rule at src\isa\riscv64\lower.isle line 1482.
                                return v1568;
                            }
                            _ => {}
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v603 = constructor_zext(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v1272 = C::value_regs_get(ctx, v465, 0x0);
                            let v1273 = C::xreg_new(ctx, v1272);
                            let v1464 = C::gen_shamt(ctx, v714, v1273);
                            let v1465 = C::value_regs_get(ctx, v1464, 0x0);
                            let v1466 = C::xreg_new(ctx, v1465);
                            let v1467 = C::value_regs_get(ctx, v1464, 0x1);
                            let v1535 = C::xreg_new(ctx, v1467);
                            let v1536 = constructor_rv_srl(ctx, v603, v1466);
                            let v1537 = constructor_rv_sll(ctx, v603, v1535);
                            let v1473 = constructor_cmp_eqz(ctx, v1466);
                            let v1474 = C::zero_reg(ctx);
                            let v1538 = constructor_gen_select_xreg(ctx, v1473, v1474, v1537);
                            let v1539 = constructor_rv_or(ctx, v1536, v1538);
                            let v1540 = constructor_output_xreg(ctx, v1539);
                            let v1541 = Some(v1540);
                            // Rule at src\isa\riscv64\lower.isle line 1454.
                            return v1541;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1286 = C::maybe_uextend(ctx, v45.1);
                            if let Some(v1287) = v1286 {
                                let v1349 = C::def_inst(ctx, v1287);
                                if let Some(v1350) = v1349 {
                                    let v1351 = &C::inst_data(ctx, v1350);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1352,
                                        imm: v1353,
                                    } = v1351
                                    {
                                        if let &Opcode::Iconst = v1352 {
                                            let v1354 = C::u64_from_imm64(ctx, v1353);
                                            let v1355 = C::uimm5_from_u64(ctx, v1354);
                                            if let Some(v1356) = v1355 {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v186 = C::vstate_from_type(ctx, v12);
                                                let v1357 = constructor_rv_vsll_vi(
                                                    ctx, v183, v1356, v185, v186,
                                                );
                                                let v1358 = constructor_output_vreg(ctx, v1357);
                                                let v1359 = Some(v1358);
                                                // Rule at src\isa\riscv64\lower.isle line 1277.
                                                return v1359;
                                            }
                                        }
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v1272 = C::value_regs_get(ctx, v465, 0x0);
                            let v1273 = C::xreg_new(ctx, v1272);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1346 = constructor_rv_vsll_vx(ctx, v183, v1273, v185, v186);
                            let v1347 = constructor_output_vreg(ctx, v1346);
                            let v1348 = Some(v1347);
                            // Rule at src\isa\riscv64\lower.isle line 1274.
                            return v1348;
                        }
                        match v3 {
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v1286 = C::maybe_uextend(ctx, v45.1);
                                if let Some(v1287) = v1286 {
                                    let v1288 = C::i64_from_iconst(ctx, v1287);
                                    if let Some(v1289) = v1288 {
                                        let v1290 = C::imm12_from_i64(ctx, v1289);
                                        if let Some(v1291) = v1290 {
                                            let v81 = C::has_zba(ctx);
                                            if v81 == true {
                                                let v87 = C::def_inst(ctx, v45.0);
                                                if let Some(v88) = v87 {
                                                    let v89 = &C::inst_data(ctx, v88);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v90,
                                                        arg: v91,
                                                    } = v89
                                                    {
                                                        if let &Opcode::Uextend = v90 {
                                                            let v92 = C::value_type(ctx, v91);
                                                            if v92 == I32 {
                                                                let v93 = constructor_put_in_xreg(
                                                                    ctx, v91,
                                                                );
                                                                let v1302 = constructor_rv_slliuw(
                                                                    ctx, v93, v1291,
                                                                );
                                                                let v1303 = constructor_output_xreg(
                                                                    ctx, v1302,
                                                                );
                                                                let v1304 = Some(v1303);
                                                                // Rule at src\isa\riscv64\lower.isle line 1246.
                                                                return v1304;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1297 = constructor_ty_shift_mask(ctx, v3);
                                            let v1298 = C::imm12_and(ctx, v1291, v1297);
                                            let v1299 = constructor_rv_slli(ctx, v48, v1298);
                                            let v1300 = constructor_output_xreg(ctx, v1299);
                                            let v1301 = Some(v1300);
                                            // Rule at src\isa\riscv64\lower.isle line 1242.
                                            return v1301;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v768 = C::put_in_regs(ctx, v45.1);
                                let v769 = C::value_regs_get(ctx, v768, 0x0);
                                let v770 = C::xreg_new(ctx, v769);
                                let v1306 = C::gen_shamt(ctx, I128, v770);
                                let v1307 = C::value_regs_get(ctx, v1306, 0x0);
                                let v1308 = C::xreg_new(ctx, v1307);
                                let v1309 = C::value_regs_get(ctx, v1306, 0x1);
                                let v1310 = C::xreg_new(ctx, v1309);
                                let v1311 = C::put_in_regs(ctx, v45.0);
                                let v1312 = C::value_regs_get(ctx, v1311, 0x0);
                                let v1313 = C::xreg_new(ctx, v1312);
                                let v1314 = constructor_rv_sll(ctx, v1313, v1308);
                                let v1315 = C::put_in_regs(ctx, v45.0);
                                let v1316 = C::value_regs_get(ctx, v1315, 0x0);
                                let v1317 = C::xreg_new(ctx, v1316);
                                let v1318 = constructor_rv_srl(ctx, v1317, v1310);
                                let v1319 = constructor_cmp_eqz(ctx, v1308);
                                let v1320 = C::zero_reg(ctx);
                                let v1321 = constructor_gen_select_xreg(ctx, v1319, v1320, v1318);
                                let v1322 = C::put_in_regs(ctx, v45.0);
                                let v1323 = C::value_regs_get(ctx, v1322, 0x1);
                                let v1324 = C::xreg_new(ctx, v1323);
                                let v1325 = constructor_rv_sll(ctx, v1324, v1308);
                                let v1326 = constructor_rv_or(ctx, v1321, v1325);
                                let v1328 = constructor_imm(ctx, I64, 0x40);
                                let v1329 = C::xreg_new(ctx, v1328);
                                let v1330 = C::put_in_regs(ctx, v45.1);
                                let v1331 = C::value_regs_get(ctx, v1330, 0x0);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1334 = C::imm12_const(ctx, 0x7F);
                                let v1335 = constructor_rv_andi(ctx, v1332, v1334);
                                let v1336 = constructor_cmp_geu(ctx, v1335, v1329);
                                let v1337 = C::zero_reg(ctx);
                                let v1338 = C::xreg_to_reg(ctx, v1337);
                                let v1339 = C::xreg_to_reg(ctx, v1314);
                                let v1340 = C::value_regs(ctx, v1338, v1339);
                                let v1341 = C::xreg_to_reg(ctx, v1326);
                                let v1342 = C::value_regs(ctx, v1339, v1341);
                                let v1343 = constructor_gen_select_regs(ctx, v1336, v1340, v1342);
                                let v1344 = C::output(ctx, v1343);
                                let v1345 = Some(v1344);
                                // Rule at src\isa\riscv64\lower.isle line 1251.
                                return v1345;
                            }
                            _ => {}
                        }
                        let v1284 = C::int_fits_in_32(ctx, v3);
                        if let Some(v1285) = v1284 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1286 = C::maybe_uextend(ctx, v45.1);
                            if let Some(v1287) = v1286 {
                                let v1288 = C::i64_from_iconst(ctx, v1287);
                                if let Some(v1289) = v1288 {
                                    let v1290 = C::imm12_from_i64(ctx, v1289);
                                    if let Some(v1291) = v1290 {
                                        let v48 = constructor_put_in_xreg(ctx, v45.0);
                                        let v1292 = constructor_ty_shift_mask(ctx, v1285);
                                        let v1293 = C::imm12_and(ctx, v1291, v1292);
                                        let v1294 = constructor_rv_slliw(ctx, v48, v1293);
                                        let v1295 = constructor_output_xreg(ctx, v1294);
                                        let v1296 = Some(v1295);
                                        // Rule at src\isa\riscv64\lower.isle line 1237.
                                        return v1296;
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                let v1273 = C::xreg_new(ctx, v1272);
                                let v1278 = constructor_rv_sllw(ctx, v48, v1273);
                                let v1279 = constructor_output_xreg(ctx, v1278);
                                let v1280 = Some(v1279);
                                // Rule at src\isa\riscv64\lower.isle line 1229.
                                return v1280;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                let v1273 = C::xreg_new(ctx, v1272);
                                let v1281 = constructor_rv_sll(ctx, v48, v1273);
                                let v1282 = constructor_output_xreg(ctx, v1281);
                                let v1283 = Some(v1282);
                                // Rule at src\isa\riscv64\lower.isle line 1233.
                                return v1283;
                            }
                            _ => {}
                        }
                        let v545 = C::ty_int(ctx, v3);
                        if let Some(v546) = v545 {
                            let v1267 = C::ty_8_or_16(ctx, v546);
                            if let Some(v1268) = v1267 {
                                let v1269 = constructor_ty_shift_mask(ctx, v1268);
                                let v1270 = constructor_u64_to_imm12(ctx, v1269);
                                if let Some(v1271) = v1270 {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v48 = constructor_put_in_xreg(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1274 = constructor_rv_andi(ctx, v1273, v1271);
                                    let v1275 = constructor_rv_sllw(ctx, v48, v1274);
                                    let v1276 = constructor_output_xreg(ctx, v1275);
                                    let v1277 = Some(v1276);
                                    // Rule at src\isa\riscv64\lower.isle line 1224.
                                    return v1277;
                                }
                            }
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1286 = C::maybe_uextend(ctx, v45.1);
                            if let Some(v1287) = v1286 {
                                let v1349 = C::def_inst(ctx, v1287);
                                if let Some(v1350) = v1349 {
                                    let v1351 = &C::inst_data(ctx, v1350);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1352,
                                        imm: v1353,
                                    } = v1351
                                    {
                                        if let &Opcode::Iconst = v1352 {
                                            let v1354 = C::u64_from_imm64(ctx, v1353);
                                            let v1355 = C::uimm5_from_u64(ctx, v1354);
                                            if let Some(v1356) = v1355 {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v186 = C::vstate_from_type(ctx, v12);
                                                let v1412 = constructor_rv_vsrl_vi(
                                                    ctx, v183, v1356, v185, v186,
                                                );
                                                let v1413 = constructor_output_vreg(ctx, v1412);
                                                let v1414 = Some(v1413);
                                                // Rule at src\isa\riscv64\lower.isle line 1332.
                                                return v1414;
                                            }
                                        }
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v1272 = C::value_regs_get(ctx, v465, 0x0);
                            let v1273 = C::xreg_new(ctx, v1272);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1409 = constructor_rv_vsrl_vx(ctx, v183, v1273, v185, v186);
                            let v1410 = constructor_output_vreg(ctx, v1409);
                            let v1411 = Some(v1410);
                            // Rule at src\isa\riscv64\lower.isle line 1329.
                            return v1411;
                        }
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v1286 = C::maybe_uextend(ctx, v45.1);
                                if let Some(v1287) = v1286 {
                                    let v1288 = C::i64_from_iconst(ctx, v1287);
                                    if let Some(v1289) = v1288 {
                                        let v1290 = C::imm12_from_i64(ctx, v1289);
                                        if let Some(v1291) = v1290 {
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1379 = constructor_rv_srliw(ctx, v48, v1291);
                                            let v1380 = constructor_output_xreg(ctx, v1379);
                                            let v1381 = Some(v1380);
                                            // Rule at src\isa\riscv64\lower.isle line 1300.
                                            return v1381;
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v1286 = C::maybe_uextend(ctx, v45.1);
                                if let Some(v1287) = v1286 {
                                    let v1288 = C::i64_from_iconst(ctx, v1287);
                                    if let Some(v1289) = v1288 {
                                        let v1290 = C::imm12_from_i64(ctx, v1289);
                                        if let Some(v1291) = v1290 {
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1382 = constructor_rv_srli(ctx, v48, v1291);
                                            let v1383 = constructor_output_xreg(ctx, v1382);
                                            let v1384 = Some(v1383);
                                            // Rule at src\isa\riscv64\lower.isle line 1303.
                                            return v1384;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v768 = C::put_in_regs(ctx, v45.1);
                                let v769 = C::value_regs_get(ctx, v768, 0x0);
                                let v770 = C::xreg_new(ctx, v769);
                                let v1306 = C::gen_shamt(ctx, I128, v770);
                                let v1307 = C::value_regs_get(ctx, v1306, 0x0);
                                let v1308 = C::xreg_new(ctx, v1307);
                                let v1309 = C::value_regs_get(ctx, v1306, 0x1);
                                let v1310 = C::xreg_new(ctx, v1309);
                                let v1311 = C::put_in_regs(ctx, v45.0);
                                let v1385 = C::value_regs_get(ctx, v1311, 0x1);
                                let v1386 = C::xreg_new(ctx, v1385);
                                let v1387 = constructor_rv_sll(ctx, v1386, v1310);
                                let v1388 = constructor_cmp_eqz(ctx, v1308);
                                let v573 = C::zero_reg(ctx);
                                let v1389 = constructor_gen_select_xreg(ctx, v1388, v573, v1387);
                                let v1390 = C::put_in_regs(ctx, v45.0);
                                let v1391 = C::value_regs_get(ctx, v1390, 0x0);
                                let v1392 = C::xreg_new(ctx, v1391);
                                let v1393 = constructor_rv_srl(ctx, v1392, v1308);
                                let v1394 = constructor_rv_or(ctx, v1389, v1393);
                                let v1395 = constructor_imm(ctx, I64, 0x40);
                                let v1396 = C::xreg_new(ctx, v1395);
                                let v1397 = C::put_in_regs(ctx, v45.0);
                                let v1398 = C::value_regs_get(ctx, v1397, 0x1);
                                let v1399 = C::xreg_new(ctx, v1398);
                                let v1400 = constructor_rv_srl(ctx, v1399, v1308);
                                let v1330 = C::put_in_regs(ctx, v45.1);
                                let v1331 = C::value_regs_get(ctx, v1330, 0x0);
                                let v1332 = C::xreg_new(ctx, v1331);
                                let v1334 = C::imm12_const(ctx, 0x7F);
                                let v1335 = constructor_rv_andi(ctx, v1332, v1334);
                                let v1401 = constructor_cmp_geu(ctx, v1335, v1396);
                                let v1337 = C::zero_reg(ctx);
                                let v1402 = C::xreg_to_reg(ctx, v1400);
                                let v1338 = C::xreg_to_reg(ctx, v1337);
                                let v1403 = C::value_regs(ctx, v1402, v1338);
                                let v1404 = C::xreg_to_reg(ctx, v1394);
                                let v1405 = C::value_regs(ctx, v1404, v1402);
                                let v1406 = constructor_gen_select_regs(ctx, v1401, v1403, v1405);
                                let v1407 = C::output(ctx, v1406);
                                let v1408 = Some(v1407);
                                // Rule at src\isa\riscv64\lower.isle line 1306.
                                return v1408;
                            }
                            _ => {}
                        }
                        let v545 = C::ty_int(ctx, v3);
                        if let Some(v546) = v545 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1286 = C::maybe_uextend(ctx, v45.1);
                            if let Some(v1287) = v1286 {
                                let v1288 = C::i64_from_iconst(ctx, v1287);
                                if let Some(v1289) = v1288 {
                                    let v1290 = C::imm12_from_i64(ctx, v1289);
                                    if let Some(v1291) = v1290 {
                                        let v1360 = C::fits_in_16(ctx, v546);
                                        if let Some(v1361) = v1360 {
                                            let v603 = constructor_zext(ctx, v45.0);
                                            let v1362 = constructor_ty_shift_mask(ctx, v1361);
                                            let v1375 = C::imm12_and(ctx, v1291, v1362);
                                            let v1376 = constructor_rv_srliw(ctx, v603, v1375);
                                            let v1377 = constructor_output_xreg(ctx, v1376);
                                            let v1378 = Some(v1377);
                                            // Rule at src\isa\riscv64\lower.isle line 1297.
                                            return v1378;
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                let v1273 = C::xreg_new(ctx, v1272);
                                let v1369 = constructor_rv_srlw(ctx, v48, v1273);
                                let v1370 = constructor_output_xreg(ctx, v1369);
                                let v1371 = Some(v1370);
                                // Rule at src\isa\riscv64\lower.isle line 1289.
                                return v1371;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                let v1273 = C::xreg_new(ctx, v1272);
                                let v1372 = constructor_rv_srl(ctx, v48, v1273);
                                let v1373 = constructor_output_xreg(ctx, v1372);
                                let v1374 = Some(v1373);
                                // Rule at src\isa\riscv64\lower.isle line 1293.
                                return v1374;
                            }
                            _ => {}
                        }
                        if let Some(v546) = v545 {
                            let v1360 = C::fits_in_16(ctx, v546);
                            if let Some(v1361) = v1360 {
                                let v1362 = constructor_ty_shift_mask(ctx, v1361);
                                let v1363 = constructor_u64_to_imm12(ctx, v1362);
                                if let Some(v1364) = v1363 {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v603 = constructor_zext(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1365 = constructor_rv_andi(ctx, v1273, v1364);
                                    let v1366 = constructor_rv_srlw(ctx, v603, v1365);
                                    let v1367 = constructor_output_xreg(ctx, v1366);
                                    let v1368 = Some(v1367);
                                    // Rule at src\isa\riscv64\lower.isle line 1284.
                                    return v1368;
                                }
                            }
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1286 = C::maybe_uextend(ctx, v45.1);
                            if let Some(v1287) = v1286 {
                                let v1349 = C::def_inst(ctx, v1287);
                                if let Some(v1350) = v1349 {
                                    let v1351 = &C::inst_data(ctx, v1350);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1352,
                                        imm: v1353,
                                    } = v1351
                                    {
                                        if let &Opcode::Iconst = v1352 {
                                            let v1354 = C::u64_from_imm64(ctx, v1353);
                                            let v1355 = C::uimm5_from_u64(ctx, v1354);
                                            if let Some(v1356) = v1355 {
                                                let v183 = constructor_put_in_vreg(ctx, v45.0);
                                                let v185 = &constructor_unmasked(ctx);
                                                let v186 = C::vstate_from_type(ctx, v12);
                                                let v1461 = constructor_rv_vsra_vi(
                                                    ctx, v183, v1356, v185, v186,
                                                );
                                                let v1462 = constructor_output_vreg(ctx, v1461);
                                                let v1463 = Some(v1462);
                                                // Rule at src\isa\riscv64\lower.isle line 1392.
                                                return v1463;
                                            }
                                        }
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v465 = C::put_in_regs(ctx, v45.1);
                            let v1272 = C::value_regs_get(ctx, v465, 0x0);
                            let v1273 = C::xreg_new(ctx, v1272);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1458 = constructor_rv_vsra_vx(ctx, v183, v1273, v185, v186);
                            let v1459 = constructor_output_vreg(ctx, v1458);
                            let v1460 = Some(v1459);
                            // Rule at src\isa\riscv64\lower.isle line 1389.
                            return v1460;
                        }
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v1286 = C::maybe_uextend(ctx, v45.1);
                                if let Some(v1287) = v1286 {
                                    let v1288 = C::i64_from_iconst(ctx, v1287);
                                    if let Some(v1289) = v1288 {
                                        let v1290 = C::imm12_from_i64(ctx, v1289);
                                        if let Some(v1291) = v1290 {
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1427 = constructor_rv_sraiw(ctx, v48, v1291);
                                            let v1428 = constructor_output_xreg(ctx, v1427);
                                            let v1429 = Some(v1428);
                                            // Rule at src\isa\riscv64\lower.isle line 1355.
                                            return v1429;
                                        }
                                    }
                                }
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v1286 = C::maybe_uextend(ctx, v45.1);
                                if let Some(v1287) = v1286 {
                                    let v1288 = C::i64_from_iconst(ctx, v1287);
                                    if let Some(v1289) = v1288 {
                                        let v1290 = C::imm12_from_i64(ctx, v1289);
                                        if let Some(v1291) = v1290 {
                                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                                            let v1430 = constructor_rv_srai(ctx, v48, v1291);
                                            let v1431 = constructor_output_xreg(ctx, v1430);
                                            let v1432 = Some(v1431);
                                            // Rule at src\isa\riscv64\lower.isle line 1358.
                                            return v1432;
                                        }
                                    }
                                }
                            }
                            I128 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v768 = C::put_in_regs(ctx, v45.1);
                                let v769 = C::value_regs_get(ctx, v768, 0x0);
                                let v770 = C::xreg_new(ctx, v769);
                                let v1306 = C::gen_shamt(ctx, I128, v770);
                                let v1307 = C::value_regs_get(ctx, v1306, 0x0);
                                let v1308 = C::xreg_new(ctx, v1307);
                                let v1309 = C::value_regs_get(ctx, v1306, 0x1);
                                let v1310 = C::xreg_new(ctx, v1309);
                                let v1311 = C::put_in_regs(ctx, v45.0);
                                let v1385 = C::value_regs_get(ctx, v1311, 0x1);
                                let v1386 = C::xreg_new(ctx, v1385);
                                let v1387 = constructor_rv_sll(ctx, v1386, v1310);
                                let v1388 = constructor_cmp_eqz(ctx, v1308);
                                let v573 = C::zero_reg(ctx);
                                let v1389 = constructor_gen_select_xreg(ctx, v1388, v573, v1387);
                                let v1390 = C::put_in_regs(ctx, v45.0);
                                let v1391 = C::value_regs_get(ctx, v1390, 0x0);
                                let v1392 = C::xreg_new(ctx, v1391);
                                let v1393 = constructor_rv_srl(ctx, v1392, v1308);
                                let v1394 = constructor_rv_or(ctx, v1389, v1393);
                                let v1395 = constructor_imm(ctx, I64, 0x40);
                                let v1396 = C::xreg_new(ctx, v1395);
                                let v1397 = C::put_in_regs(ctx, v45.0);
                                let v1398 = C::value_regs_get(ctx, v1397, 0x1);
                                let v1399 = C::xreg_new(ctx, v1398);
                                let v1433 = constructor_rv_sra(ctx, v1399, v1308);
                                let v1435 = C::i64_as_u64(ctx, -0x1);
                                let v1436 = constructor_imm(ctx, I64, v1435);
                                let v1437 = C::xreg_new(ctx, v1436);
                                let v1438 = C::put_in_regs(ctx, v45.0);
                                let v1439 = C::value_regs_get(ctx, v1438, 0x1);
                                let v1440 = C::xreg_new(ctx, v1439);
                                let v1441 = constructor_cmp_ltz(ctx, v1440);
                                let v1442 = C::zero_reg(ctx);
                                let v1443 = constructor_gen_select_xreg(ctx, v1441, v1437, v1442);
                                let v1444 = constructor_imm(ctx, I64, 0x40);
                                let v1445 = C::xreg_new(ctx, v1444);
                                let v1446 = C::put_in_regs(ctx, v45.1);
                                let v1447 = C::value_regs_get(ctx, v1446, 0x0);
                                let v1448 = C::xreg_new(ctx, v1447);
                                let v1334 = C::imm12_const(ctx, 0x7F);
                                let v1449 = constructor_rv_andi(ctx, v1448, v1334);
                                let v1450 = constructor_cmp_geu(ctx, v1449, v1445);
                                let v1451 = C::xreg_to_reg(ctx, v1433);
                                let v1452 = C::xreg_to_reg(ctx, v1443);
                                let v1453 = C::value_regs(ctx, v1451, v1452);
                                let v1404 = C::xreg_to_reg(ctx, v1394);
                                let v1454 = C::value_regs(ctx, v1404, v1451);
                                let v1455 = constructor_gen_select_regs(ctx, v1450, v1453, v1454);
                                let v1456 = C::output(ctx, v1455);
                                let v1457 = Some(v1456);
                                // Rule at src\isa\riscv64\lower.isle line 1361.
                                return v1457;
                            }
                            _ => {}
                        }
                        let v545 = C::ty_int(ctx, v3);
                        if let Some(v546) = v545 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1286 = C::maybe_uextend(ctx, v45.1);
                            if let Some(v1287) = v1286 {
                                let v1288 = C::i64_from_iconst(ctx, v1287);
                                if let Some(v1289) = v1288 {
                                    let v1290 = C::imm12_from_i64(ctx, v1289);
                                    if let Some(v1291) = v1290 {
                                        let v1360 = C::fits_in_16(ctx, v546);
                                        if let Some(v1361) = v1360 {
                                            let v589 = constructor_sext(ctx, v45.0);
                                            let v1362 = constructor_ty_shift_mask(ctx, v1361);
                                            let v1375 = C::imm12_and(ctx, v1291, v1362);
                                            let v1424 = constructor_rv_sraiw(ctx, v589, v1375);
                                            let v1425 = constructor_output_xreg(ctx, v1424);
                                            let v1426 = Some(v1425);
                                            // Rule at src\isa\riscv64\lower.isle line 1352.
                                            return v1426;
                                        }
                                    }
                                }
                            }
                        }
                        match v3 {
                            I32 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                let v1273 = C::xreg_new(ctx, v1272);
                                let v1418 = constructor_rv_sraw(ctx, v48, v1273);
                                let v1419 = constructor_output_xreg(ctx, v1418);
                                let v1420 = Some(v1419);
                                // Rule at src\isa\riscv64\lower.isle line 1344.
                                return v1420;
                            }
                            I64 => {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v48 = constructor_put_in_xreg(ctx, v45.0);
                                let v465 = C::put_in_regs(ctx, v45.1);
                                let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                let v1273 = C::xreg_new(ctx, v1272);
                                let v1421 = constructor_rv_sra(ctx, v48, v1273);
                                let v1422 = constructor_output_xreg(ctx, v1421);
                                let v1423 = Some(v1422);
                                // Rule at src\isa\riscv64\lower.isle line 1348.
                                return v1423;
                            }
                            _ => {}
                        }
                        if let Some(v546) = v545 {
                            let v1360 = C::fits_in_16(ctx, v546);
                            if let Some(v1361) = v1360 {
                                let v1362 = constructor_ty_shift_mask(ctx, v1361);
                                let v1363 = constructor_u64_to_imm12(ctx, v1362);
                                if let Some(v1364) = v1363 {
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v589 = constructor_sext(ctx, v45.0);
                                    let v465 = C::put_in_regs(ctx, v45.1);
                                    let v1272 = C::value_regs_get(ctx, v465, 0x0);
                                    let v1273 = C::xreg_new(ctx, v1272);
                                    let v1365 = constructor_rv_andi(ctx, v1273, v1364);
                                    let v1415 = constructor_rv_sraw(ctx, v589, v1365);
                                    let v1416 = constructor_output_xreg(ctx, v1415);
                                    let v1417 = Some(v1416);
                                    // Rule at src\isa\riscv64\lower.isle line 1339.
                                    return v1417;
                                }
                            }
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v1737 = constructor_put_in_freg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1738 =
                                            constructor_rv_vfadd_vf(ctx, v218, v1737, v185, v186);
                                        let v1739 = constructor_output_vreg(ctx, v1738);
                                        let v1740 = Some(v1739);
                                        // Rule at src\isa\riscv64\lower.isle line 1733.
                                        return v1740;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v1587 = constructor_put_in_freg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1734 =
                                            constructor_rv_vfadd_vf(ctx, v183, v1587, v185, v186);
                                        let v1735 = constructor_output_vreg(ctx, v1734);
                                        let v1736 = Some(v1735);
                                        // Rule at src\isa\riscv64\lower.isle line 1730.
                                        return v1736;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1731 = constructor_rv_vfadd_vv(ctx, v183, v184, v185, v186);
                            let v1732 = constructor_output_vreg(ctx, v1731);
                            let v1733 = Some(v1732);
                            // Rule at src\isa\riscv64\lower.isle line 1727.
                            return v1733;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1728 = constructor_rv_fadd(ctx, v741, &FRM::RNE, v743, v744);
                            let v1729 = constructor_output_freg(ctx, v1728);
                            let v1730 = Some(v1729);
                            // Rule at src\isa\riscv64\lower.isle line 1724.
                            return v1730;
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v1737 = constructor_put_in_freg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1750 =
                                            constructor_rv_vfrsub_vf(ctx, v218, v1737, v185, v186);
                                        let v1751 = constructor_output_vreg(ctx, v1750);
                                        let v1752 = Some(v1751);
                                        // Rule at src\isa\riscv64\lower.isle line 1747.
                                        return v1752;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v1587 = constructor_put_in_freg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1747 =
                                            constructor_rv_vfsub_vf(ctx, v183, v1587, v185, v186);
                                        let v1748 = constructor_output_vreg(ctx, v1747);
                                        let v1749 = Some(v1748);
                                        // Rule at src\isa\riscv64\lower.isle line 1744.
                                        return v1749;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1744 = constructor_rv_vfsub_vv(ctx, v183, v184, v185, v186);
                            let v1745 = constructor_output_vreg(ctx, v1744);
                            let v1746 = Some(v1745);
                            // Rule at src\isa\riscv64\lower.isle line 1741.
                            return v1746;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1741 = constructor_rv_fsub(ctx, v741, &FRM::RNE, v743, v744);
                            let v1742 = constructor_output_freg(ctx, v1741);
                            let v1743 = Some(v1742);
                            // Rule at src\isa\riscv64\lower.isle line 1738.
                            return v1743;
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v1737 = constructor_put_in_freg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1762 =
                                            constructor_rv_vfmul_vf(ctx, v218, v1737, v185, v186);
                                        let v1763 = constructor_output_vreg(ctx, v1762);
                                        let v1764 = Some(v1763);
                                        // Rule at src\isa\riscv64\lower.isle line 1760.
                                        return v1764;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v1587 = constructor_put_in_freg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1759 =
                                            constructor_rv_vfmul_vf(ctx, v183, v1587, v185, v186);
                                        let v1760 = constructor_output_vreg(ctx, v1759);
                                        let v1761 = Some(v1760);
                                        // Rule at src\isa\riscv64\lower.isle line 1757.
                                        return v1761;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1756 = constructor_rv_vfmul_vv(ctx, v183, v184, v185, v186);
                            let v1757 = constructor_output_vreg(ctx, v1756);
                            let v1758 = Some(v1757);
                            // Rule at src\isa\riscv64\lower.isle line 1754.
                            return v1758;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1753 = constructor_rv_fmul(ctx, v741, &FRM::RNE, v743, v744);
                            let v1754 = constructor_output_freg(ctx, v1753);
                            let v1755 = Some(v1754);
                            // Rule at src\isa\riscv64\lower.isle line 1751.
                            return v1755;
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v87 = C::def_inst(ctx, v45.0);
                            if let Some(v88) = v87 {
                                let v89 = &C::inst_data(ctx, v88);
                                if let &InstructionData::Unary {
                                    opcode: ref v90,
                                    arg: v91,
                                } = v89
                                {
                                    if let &Opcode::Splat = v90 {
                                        let v218 = constructor_put_in_vreg(ctx, v45.1);
                                        let v1737 = constructor_put_in_freg(ctx, v91);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1774 =
                                            constructor_rv_vfrdiv_vf(ctx, v218, v1737, v185, v186);
                                        let v1775 = constructor_output_vreg(ctx, v1774);
                                        let v1776 = Some(v1775);
                                        // Rule at src\isa\riscv64\lower.isle line 1774.
                                        return v1776;
                                    }
                                }
                            }
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v1587 = constructor_put_in_freg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1771 =
                                            constructor_rv_vfdiv_vf(ctx, v183, v1587, v185, v186);
                                        let v1772 = constructor_output_vreg(ctx, v1771);
                                        let v1773 = Some(v1772);
                                        // Rule at src\isa\riscv64\lower.isle line 1771.
                                        return v1773;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1768 = constructor_rv_vfdiv_vv(ctx, v183, v184, v185, v186);
                            let v1769 = constructor_output_vreg(ctx, v1768);
                            let v1770 = Some(v1769);
                            // Rule at src\isa\riscv64\lower.isle line 1768.
                            return v1770;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1765 = constructor_rv_fdiv(ctx, v741, &FRM::RNE, v743, v744);
                            let v1766 = constructor_output_freg(ctx, v1765);
                            let v1767 = Some(v1766);
                            // Rule at src\isa\riscv64\lower.isle line 1765.
                            return v1767;
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v75 = C::def_inst(ctx, v45.1);
                            if let Some(v76) = v75 {
                                let v77 = &C::inst_data(ctx, v76);
                                if let &InstructionData::Unary {
                                    opcode: ref v78,
                                    arg: v79,
                                } = v77
                                {
                                    if let &Opcode::Splat = v78 {
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v1587 = constructor_put_in_freg(ctx, v79);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1588 =
                                            constructor_rv_vfsgnj_vf(ctx, v183, v1587, v185, v186);
                                        let v1589 = constructor_output_vreg(ctx, v1588);
                                        let v1590 = Some(v1589);
                                        // Rule at src\isa\riscv64\lower.isle line 1527.
                                        return v1590;
                                    }
                                }
                            }
                            let v183 = constructor_put_in_vreg(ctx, v45.0);
                            let v184 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1584 = constructor_rv_vfsgnj_vv(ctx, v183, v184, v185, v186);
                            let v1585 = constructor_output_vreg(ctx, v1584);
                            let v1586 = Some(v1585);
                            // Rule at src\isa\riscv64\lower.isle line 1524.
                            return v1586;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1581 = constructor_rv_fsgnj(ctx, v741, v743, v744);
                            let v1582 = constructor_output_freg(ctx, v1581);
                            let v1583 = Some(v1582);
                            // Rule at src\isa\riscv64\lower.isle line 1521.
                            return v1583;
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1793 = constructor_gen_fcmp_mask(
                                ctx,
                                v12,
                                &FloatCC::Ordered,
                                v45.0,
                                v45.1,
                            );
                            let v1227 = C::lane_type(ctx, v12);
                            let v1794 = constructor_canonical_nan_u64(ctx, v1227);
                            let v1795 = constructor_imm(ctx, I64, v1794);
                            let v1796 = C::xreg_new(ctx, v1795);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1797 = constructor_rv_vmv_vx(ctx, v1796, v186);
                            let v1798 = constructor_put_in_vreg(ctx, v45.0);
                            let v1799 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v1800 = constructor_rv_vfmin_vv(ctx, v1798, v1799, v185, v186);
                            let v1801 = constructor_rv_vmerge_vvm(ctx, v1797, v1800, v1793, v186);
                            let v1802 = constructor_output_vreg(ctx, v1801);
                            let v1803 = Some(v1802);
                            // Rule at src\isa\riscv64\lower.isle line 1802.
                            return v1803;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1789 = C::has_zfa(ctx);
                            if v1789 == true {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v743 = constructor_put_in_freg(ctx, v45.0);
                                let v744 = constructor_put_in_freg(ctx, v45.1);
                                let v1790 = constructor_rv_fminm(ctx, v741, v743, v744);
                                let v1791 = constructor_output_freg(ctx, v1790);
                                let v1792 = Some(v1791);
                                // Rule at src\isa\riscv64\lower.isle line 1792.
                                return v1792;
                            }
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1778 = &constructor_fcmp_to_float_compare(
                                ctx,
                                &FloatCC::Ordered,
                                v741,
                                v743,
                                v744,
                            );
                            let v1779 = constructor_put_in_freg(ctx, v45.0);
                            let v1780 = constructor_put_in_freg(ctx, v45.1);
                            let v1781 = constructor_rv_fadd(ctx, v741, &FRM::RNE, v1779, v1780);
                            let v1782 = constructor_put_in_freg(ctx, v45.0);
                            let v1783 = constructor_put_in_freg(ctx, v45.1);
                            let v1784 = constructor_rv_fmin(ctx, v741, v1782, v1783);
                            let v1785 = constructor_float_to_int_compare(ctx, v1778);
                            let v1786 = constructor_gen_select_freg(ctx, v1785, v1784, v1781);
                            let v1787 = constructor_output_freg(ctx, v1786);
                            let v1788 = Some(v1787);
                            // Rule at src\isa\riscv64\lower.isle line 1782.
                            return v1788;
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v1793 = constructor_gen_fcmp_mask(
                                ctx,
                                v12,
                                &FloatCC::Ordered,
                                v45.0,
                                v45.1,
                            );
                            let v1227 = C::lane_type(ctx, v12);
                            let v1794 = constructor_canonical_nan_u64(ctx, v1227);
                            let v1795 = constructor_imm(ctx, I64, v1794);
                            let v1796 = C::xreg_new(ctx, v1795);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1797 = constructor_rv_vmv_vx(ctx, v1796, v186);
                            let v1798 = constructor_put_in_vreg(ctx, v45.0);
                            let v1799 = constructor_put_in_vreg(ctx, v45.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v1811 = constructor_rv_vfmax_vv(ctx, v1798, v1799, v185, v186);
                            let v1812 = constructor_rv_vmerge_vvm(ctx, v1797, v1811, v1793, v186);
                            let v1813 = constructor_output_vreg(ctx, v1812);
                            let v1814 = Some(v1813);
                            // Rule at src\isa\riscv64\lower.isle line 1834.
                            return v1814;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1789 = C::has_zfa(ctx);
                            if v1789 == true {
                                let v45 = C::unpack_value_array_2(ctx, v44);
                                let v743 = constructor_put_in_freg(ctx, v45.0);
                                let v744 = constructor_put_in_freg(ctx, v45.1);
                                let v1808 = constructor_rv_fmaxm(ctx, v741, v743, v744);
                                let v1809 = constructor_output_freg(ctx, v1808);
                                let v1810 = Some(v1809);
                                // Rule at src\isa\riscv64\lower.isle line 1824.
                                return v1810;
                            }
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v743 = constructor_put_in_freg(ctx, v45.0);
                            let v744 = constructor_put_in_freg(ctx, v45.1);
                            let v1778 = &constructor_fcmp_to_float_compare(
                                ctx,
                                &FloatCC::Ordered,
                                v741,
                                v743,
                                v744,
                            );
                            let v1779 = constructor_put_in_freg(ctx, v45.0);
                            let v1780 = constructor_put_in_freg(ctx, v45.1);
                            let v1781 = constructor_rv_fadd(ctx, v741, &FRM::RNE, v1779, v1780);
                            let v1782 = constructor_put_in_freg(ctx, v45.0);
                            let v1783 = constructor_put_in_freg(ctx, v45.1);
                            let v1804 = constructor_rv_fmax(ctx, v741, v1782, v1783);
                            let v1785 = constructor_float_to_int_compare(ctx, v1778);
                            let v1805 = constructor_gen_select_freg(ctx, v1785, v1804, v1781);
                            let v1806 = constructor_output_freg(ctx, v1805);
                            let v1807 = Some(v1806);
                            // Rule at src\isa\riscv64\lower.isle line 1814.
                            return v1807;
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2622 = C::ty_lane_count(ctx, v12);
                            let v2675 = C::u64_udiv(ctx, v2622, 0x2);
                            if let Some(v2676) = v2675 {
                                let v2677 = constructor_u64_to_uimm5(ctx, v2676);
                                if let Some(v2678) = v2677 {
                                    let v2734 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2735) = v2734 {
                                        let v45 = C::unpack_value_array_2(ctx, v44);
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v2736 = C::ty_half_lanes(ctx, v12);
                                        let v2737 = v2736?;
                                        let v2738 = C::vstate_from_type(ctx, v2737);
                                        let v2739 = C::vstate_mf2(ctx, v2738);
                                        let v2740 =
                                            constructor_rv_vnclip_wi(ctx, v183, v2735, v185, v2739);
                                        let v2741 = constructor_put_in_vreg(ctx, v45.1);
                                        let v2742 = constructor_rv_vnclip_wi(
                                            ctx, v2741, v2735, v185, v2739,
                                        );
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2743 = constructor_rv_vslideup_vvi(
                                            ctx, v2740, v2742, v2678, v185, v186,
                                        );
                                        let v2744 = constructor_output_vreg(ctx, v2743);
                                        let v2745 = Some(v2744);
                                        // Rule at src\isa\riscv64\lower.isle line 2924.
                                        return v2745;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2622 = C::ty_lane_count(ctx, v12);
                            let v2675 = C::u64_udiv(ctx, v2622, 0x2);
                            if let Some(v2676) = v2675 {
                                let v2677 = constructor_u64_to_uimm5(ctx, v2676);
                                if let Some(v2678) = v2677 {
                                    let v2734 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2735) = v2734 {
                                        let v45 = C::unpack_value_array_2(ctx, v44);
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v1833 = C::zero_reg(ctx);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v2733 = C::value_type(ctx, v45.0);
                                        let v2751 = C::vstate_from_type(ctx, v2733);
                                        let v2752 =
                                            constructor_rv_vmax_vx(ctx, v183, v1833, v185, v2751);
                                        let v2682 = constructor_put_in_vreg(ctx, v45.1);
                                        let v2753 = C::zero_reg(ctx);
                                        let v2754 =
                                            constructor_rv_vmax_vx(ctx, v2682, v2753, v185, v2751);
                                        let v2736 = C::ty_half_lanes(ctx, v12);
                                        let v2737 = v2736?;
                                        let v2738 = C::vstate_from_type(ctx, v2737);
                                        let v2739 = C::vstate_mf2(ctx, v2738);
                                        let v2755 = constructor_rv_vnclipu_wi(
                                            ctx, v2752, v2735, v185, v2739,
                                        );
                                        let v2756 = constructor_rv_vnclipu_wi(
                                            ctx, v2754, v2735, v185, v2739,
                                        );
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2757 = constructor_rv_vslideup_vvi(
                                            ctx, v2755, v2756, v2678, v185, v186,
                                        );
                                        let v2758 = constructor_output_vreg(ctx, v2757);
                                        let v2759 = Some(v2758);
                                        // Rule at src\isa\riscv64\lower.isle line 2946.
                                        return v2759;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2622 = C::ty_lane_count(ctx, v12);
                            let v2675 = C::u64_udiv(ctx, v2622, 0x2);
                            if let Some(v2676) = v2675 {
                                let v2677 = constructor_u64_to_uimm5(ctx, v2676);
                                if let Some(v2678) = v2677 {
                                    let v2734 = constructor_u64_to_uimm5(ctx, 0x0);
                                    if let Some(v2735) = v2734 {
                                        let v45 = C::unpack_value_array_2(ctx, v44);
                                        let v183 = constructor_put_in_vreg(ctx, v45.0);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v2736 = C::ty_half_lanes(ctx, v12);
                                        let v2737 = v2736?;
                                        let v2738 = C::vstate_from_type(ctx, v2737);
                                        let v2739 = C::vstate_mf2(ctx, v2738);
                                        let v2746 = constructor_rv_vnclipu_wi(
                                            ctx, v183, v2735, v185, v2739,
                                        );
                                        let v2741 = constructor_put_in_vreg(ctx, v45.1);
                                        let v2747 = constructor_rv_vnclipu_wi(
                                            ctx, v2741, v2735, v185, v2739,
                                        );
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2748 = constructor_rv_vslideup_vvi(
                                            ctx, v2746, v2747, v2678, v185, v186,
                                        );
                                        let v2749 = constructor_output_vreg(ctx, v2748);
                                        let v2750 = Some(v2749);
                                        // Rule at src\isa\riscv64\lower.isle line 2933.
                                        return v2750;
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2622 = C::ty_lane_count(ctx, v12);
                            let v2675 = C::u64_udiv(ctx, v2622, 0x2);
                            if let Some(v2676) = v2675 {
                                let v2677 = constructor_u64_to_uimm5(ctx, v2676);
                                if let Some(v2678) = v2677 {
                                    let v2679 = constructor_gen_vec_mask(ctx, 0x5555555555555555);
                                    let v45 = C::unpack_value_array_2(ctx, v44);
                                    let v2680 = constructor_put_in_vreg(ctx, v45.0);
                                    let v186 = C::vstate_from_type(ctx, v12);
                                    let v2681 =
                                        constructor_rv_vcompress_vm(ctx, v2680, v2679, v186);
                                    let v2682 = constructor_put_in_vreg(ctx, v45.1);
                                    let v2683 =
                                        constructor_rv_vcompress_vm(ctx, v2682, v2679, v186);
                                    let v185 = &constructor_unmasked(ctx);
                                    let v2684 = constructor_rv_vslideup_vvi(
                                        ctx, v2681, v2683, v2678, v185, v186,
                                    );
                                    let v2686 = constructor_gen_vec_mask(ctx, 0xAAAAAAAAAAAAAAAA);
                                    let v2687 = constructor_put_in_vreg(ctx, v45.0);
                                    let v2688 =
                                        constructor_rv_vcompress_vm(ctx, v2687, v2686, v186);
                                    let v2689 = constructor_put_in_vreg(ctx, v45.1);
                                    let v2690 =
                                        constructor_rv_vcompress_vm(ctx, v2689, v2686, v186);
                                    let v2691 = constructor_rv_vslideup_vvi(
                                        ctx, v2688, v2690, v2678, v185, v186,
                                    );
                                    let v2692 =
                                        constructor_rv_vadd_vv(ctx, v2684, v2691, v185, v186);
                                    let v2693 = constructor_output_vreg(ctx, v2692);
                                    let v2694 = Some(v2693);
                                    // Rule at src\isa\riscv64\lower.isle line 2853.
                                    return v2694;
                                }
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v45 = C::unpack_value_array_2(ctx, v44);
                            let v48 = constructor_put_in_xreg(ctx, v45.0);
                            let v49 = constructor_put_in_xreg(ctx, v45.1);
                            let v1952 = C::xreg_to_reg(ctx, v48);
                            let v1953 = C::xreg_to_reg(ctx, v49);
                            let v1954 = C::value_regs(ctx, v1952, v1953);
                            let v1955 = C::output(ctx, v1954);
                            let v1956 = Some(v1955);
                            // Rule at src\isa\riscv64\lower.isle line 1941.
                            return v1956;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v2458,
            arg: v2459,
            imm: v2460,
        } => {
            if let &Opcode::Extractlane = v2458 {
                let v2463 = constructor_put_in_vreg(ctx, v2459);
                let v2461 = C::value_type(ctx, v2459);
                let v2462 = C::u8_from_uimm8(ctx, v2460);
                let v2464 = constructor_gen_extractlane(ctx, v2461, v2463, v2462);
                let v2465 = constructor_output_reg(ctx, v2464);
                let v2466 = Some(v2465);
                // Rule at src\isa\riscv64\lower.isle line 2613.
                return v2466;
            }
        }
        &InstructionData::Call {
            opcode: ref v2434,
            args: v2435,
            func_ref: v2436,
        } => {
            match v2434 {
                &Opcode::Call => {
                    let v2438 = C::func_ref_data(ctx, v2436);
                    let v2437 = C::value_list_slice(ctx, v2435);
                    let v2442 = C::gen_call(ctx, v2438.0, v2438.1, v2438.2, v2437);
                    let v2443 = Some(v2442);
                    // Rule at src\isa\riscv64\lower.isle line 2596.
                    return v2443;
                }
                &Opcode::ReturnCall => {
                    let v2438 = C::func_ref_data(ctx, v2436);
                    let v2437 = C::value_list_slice(ctx, v2435);
                    let v2454 = C::gen_return_call(ctx, v2438.0, v2438.1, v2438.2, v2437);
                    let v2455 = Some(v2454);
                    // Rule at src\isa\riscv64\lower.isle line 2604.
                    return v2455;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2444,
            args: v2445,
            sig_ref: v2446,
        } => {
            match v2444 {
                &Opcode::CallIndirect => {
                    let v2447 = C::value_list_slice(ctx, v2445);
                    let v2448 = C::value_slice_unwrap(ctx, v2447);
                    if let Some(v2449) = v2448 {
                        let v2452 = C::gen_call_indirect(ctx, v2446, v2449.0, v2449.1);
                        let v2453 = Some(v2452);
                        // Rule at src\isa\riscv64\lower.isle line 2599.
                        return v2453;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2447 = C::value_list_slice(ctx, v2445);
                    let v2448 = C::value_slice_unwrap(ctx, v2447);
                    if let Some(v2449) = v2448 {
                        let v2456 = C::gen_return_call_indirect(ctx, v2446, v2449.0, v2449.1);
                        let v2457 = Some(v2456);
                        // Rule at src\isa\riscv64\lower.isle line 2607.
                        return v2457;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v2168,
            args: ref v2169,
            cond: ref v2170,
        } => {
            if let &Opcode::Fcmp = v2168 {
                let v2171 = C::unpack_value_array_2(ctx, v2169);
                let v2174 = C::value_type(ctx, v2171.0);
                let v2183 = C::ty_vec_fits_in_register(ctx, v2174);
                if let Some(v2184) = v2183 {
                    let v2185 = constructor_gen_fcmp_mask(ctx, v2184, v2170, v2171.0, v2171.1);
                    let v2186 = constructor_gen_expand_mask(ctx, v2184, v2185);
                    let v2187 = constructor_output_vreg(ctx, v2186);
                    let v2188 = Some(v2187);
                    // Rule at src\isa\riscv64\lower.isle line 2302.
                    return v2188;
                }
                let v2175 = C::ty_scalar_float(ctx, v2174);
                if let Some(v2176) = v2175 {
                    let v2177 = constructor_put_in_freg(ctx, v2171.0);
                    let v2178 = constructor_put_in_freg(ctx, v2171.1);
                    let v2179 = &constructor_fcmp_to_float_compare(ctx, v2170, v2176, v2177, v2178);
                    let v2180 = constructor_lower_float_compare(ctx, v2179);
                    let v2181 = constructor_output_xreg(ctx, v2180);
                    let v2182 = Some(v2181);
                    // Rule at src\isa\riscv64\lower.isle line 2295.
                    return v2182;
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v2189,
            func_ref: v2190,
        } => {
            if let &Opcode::FuncAddr = v2189 {
                let v2191 = C::func_ref_data(ctx, v2190);
                let v2196 = C::load_ext_name(ctx, v2191.1, 0x0);
                let v2197 = constructor_output_reg(ctx, v2196);
                let v2198 = Some(v2197);
                // Rule at src\isa\riscv64\lower.isle line 2307.
                return v2198;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v435,
            args: ref v436,
            code: ref v437,
        } => {
            if let &Opcode::UaddOverflowTrap = v435 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I64 {
                        let v438 = C::unpack_value_array_2(ctx, v436);
                        let v451 = constructor_put_in_xreg(ctx, v438.0);
                        let v452 = constructor_put_in_xreg(ctx, v438.1);
                        let v453 = constructor_rv_add(ctx, v451, v452);
                        let v455 = constructor_put_in_xreg(ctx, v438.0);
                        let v456 =
                            constructor_gen_trapif(ctx, &IntCC::UnsignedLessThan, v453, v455, v437);
                        let v457 = constructor_output_xreg(ctx, v453);
                        let v458 = Some(v457);
                        // Rule at src\isa\riscv64\lower.isle line 310.
                        return v458;
                    }
                    let v39 = C::fits_in_32(ctx, v3);
                    if let Some(v40) = v39 {
                        let v438 = C::unpack_value_array_2(ctx, v436);
                        let v441 = constructor_zext(ctx, v438.0);
                        let v442 = constructor_zext(ctx, v438.1);
                        let v443 = constructor_rv_add(ctx, v441, v442);
                        let v444 = C::ty_bits(ctx, v40);
                        let v445 = C::u8_as_i32(ctx, v444);
                        let v446 = C::imm12_const(ctx, v445);
                        let v447 = constructor_rv_srli(ctx, v443, v446);
                        let v448 = constructor_gen_trapnz(ctx, v447, v437);
                        let v449 = constructor_output_xreg(ctx, v443);
                        let v450 = Some(v449);
                        // Rule at src\isa\riscv64\lower.isle line 302.
                        return v450;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v2145,
            args: ref v2146,
            cond: ref v2147,
        } => {
            if let &Opcode::Icmp = v2145 {
                let v2148 = C::unpack_value_array_2(ctx, v2146);
                let v2151 = C::value_type(ctx, v2148.0);
                let v2162 = C::ty_vec_fits_in_register(ctx, v2151);
                if let Some(v2163) = v2162 {
                    let v2164 = constructor_gen_icmp_mask(ctx, v2163, v2147, v2148.0, v2148.1);
                    let v2165 = constructor_gen_expand_mask(ctx, v2163, v2164);
                    let v2166 = constructor_output_vreg(ctx, v2165);
                    let v2167 = Some(v2166);
                    // Rule at src\isa\riscv64\lower.isle line 2291.
                    return v2167;
                }
                if v2151 == I128 {
                    let v2157 = C::put_in_regs(ctx, v2148.0);
                    let v2158 = C::put_in_regs(ctx, v2148.1);
                    let v2159 = constructor_lower_icmp_i128(ctx, v2147, v2157, v2158);
                    let v2160 = constructor_output_xreg(ctx, v2159);
                    let v2161 = Some(v2160);
                    // Rule at src\isa\riscv64\lower.isle line 2246.
                    return v2161;
                }
                let v2152 = C::fits_in_64(ctx, v2151);
                if let Some(v2153) = v2152 {
                    let v2154 = constructor_lower_icmp(ctx, v2147, v2148.0, v2148.1);
                    let v2155 = constructor_output_xreg(ctx, v2154);
                    let v2156 = Some(v2155);
                    // Rule at src\isa\riscv64\lower.isle line 2157.
                    return v2156;
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v2043,
            arg: v2044,
            flags: v2045,
            offset: v2046,
        } => {
            match v2043 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2047 = C::offset32_to_i32(ctx, v2046);
                            let v2048 = constructor_amode(ctx, v2044, v2047);
                            let v2091 = &constructor_element_width_from_type(ctx, v12);
                            let v2092 = VecAMode::UnitStride { base: v2048 };
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2093 = constructor_vec_load(ctx, v2091, &v2092, v2045, v185, v186);
                            let v2094 = constructor_output_reg(ctx, v2093);
                            let v2095 = Some(v2094);
                            // Rule at src\isa\riscv64\lower.isle line 2074.
                            return v2095;
                        }
                        if v3 == I128 {
                            let v2047 = C::offset32_to_i32(ctx, v2046);
                            let v2078 = C::s32_add_fallible(ctx, v2047, 0x8);
                            if let Some(v2079) = v2078 {
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2081 = constructor_gen_load(ctx, v2048, &LoadOP::Ld, v2045);
                                let v2082 = C::xreg_new(ctx, v2081);
                                let v2083 = constructor_amode(ctx, v2044, v2079);
                                let v2084 = constructor_gen_load(ctx, v2083, &LoadOP::Ld, v2045);
                                let v2085 = C::xreg_new(ctx, v2084);
                                let v2086 = C::xreg_to_reg(ctx, v2082);
                                let v2087 = C::xreg_to_reg(ctx, v2085);
                                let v2088 = C::value_regs(ctx, v2086, v2087);
                                let v2089 = C::output(ctx, v2088);
                                let v2090 = Some(v2089);
                                // Rule at src\isa\riscv64\lower.isle line 2068.
                                return v2090;
                            }
                        }
                        let v2047 = C::offset32_to_i32(ctx, v2046);
                        let v2048 = constructor_amode(ctx, v2044, v2047);
                        let v2073 = &C::load_op(ctx, v3);
                        let v2074 = constructor_gen_load(ctx, v2048, v2073, v2045);
                        let v2075 = constructor_output_reg(ctx, v2074);
                        let v2076 = Some(v2075);
                        // Rule at src\isa\riscv64\lower.isle line 2065.
                        return v2076;
                    }
                }
                &Opcode::Uload8 => {
                    let v2047 = C::offset32_to_i32(ctx, v2046);
                    let v2048 = constructor_amode(ctx, v2044, v2047);
                    let v2050 = constructor_gen_load(ctx, v2048, &LoadOP::Lbu, v2045);
                    let v2051 = constructor_output_reg(ctx, v2050);
                    let v2052 = Some(v2051);
                    // Rule at src\isa\riscv64\lower.isle line 2041.
                    return v2052;
                }
                &Opcode::Sload8 => {
                    let v2047 = C::offset32_to_i32(ctx, v2046);
                    let v2048 = constructor_amode(ctx, v2044, v2047);
                    let v2054 = constructor_gen_load(ctx, v2048, &LoadOP::Lb, v2045);
                    let v2055 = constructor_output_reg(ctx, v2054);
                    let v2056 = Some(v2055);
                    // Rule at src\isa\riscv64\lower.isle line 2045.
                    return v2056;
                }
                &Opcode::Uload16 => {
                    let v2047 = C::offset32_to_i32(ctx, v2046);
                    let v2048 = constructor_amode(ctx, v2044, v2047);
                    let v2058 = constructor_gen_load(ctx, v2048, &LoadOP::Lhu, v2045);
                    let v2059 = constructor_output_reg(ctx, v2058);
                    let v2060 = Some(v2059);
                    // Rule at src\isa\riscv64\lower.isle line 2049.
                    return v2060;
                }
                &Opcode::Sload16 => {
                    let v2047 = C::offset32_to_i32(ctx, v2046);
                    let v2048 = constructor_amode(ctx, v2044, v2047);
                    let v2062 = constructor_gen_load(ctx, v2048, &LoadOP::Lh, v2045);
                    let v2063 = constructor_output_reg(ctx, v2062);
                    let v2064 = Some(v2063);
                    // Rule at src\isa\riscv64\lower.isle line 2053.
                    return v2064;
                }
                &Opcode::Uload32 => {
                    let v2047 = C::offset32_to_i32(ctx, v2046);
                    let v2048 = constructor_amode(ctx, v2044, v2047);
                    let v2066 = constructor_gen_load(ctx, v2048, &LoadOP::Lwu, v2045);
                    let v2067 = constructor_output_reg(ctx, v2066);
                    let v2068 = Some(v2067);
                    // Rule at src\isa\riscv64\lower.isle line 2057.
                    return v2068;
                }
                &Opcode::Sload32 => {
                    let v2047 = C::offset32_to_i32(ctx, v2046);
                    let v2048 = constructor_amode(ctx, v2044, v2047);
                    let v2070 = constructor_gen_load(ctx, v2048, &LoadOP::Lw, v2045);
                    let v2071 = constructor_output_reg(ctx, v2070);
                    let v2072 = Some(v2071);
                    // Rule at src\isa\riscv64\lower.isle line 2061.
                    return v2072;
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I16X8 {
                                let v2047 = C::offset32_to_i32(ctx, v2046);
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2097 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Zero,
                                    v2045,
                                    v2048,
                                );
                                let v2098 = constructor_output_vreg(ctx, v2097);
                                let v2099 = Some(v2098);
                                // Rule at src\isa\riscv64\lower.isle line 2101.
                                return v2099;
                            }
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I16X8 {
                                let v2047 = C::offset32_to_i32(ctx, v2046);
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2101 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Signed,
                                    v2045,
                                    v2048,
                                );
                                let v2102 = constructor_output_vreg(ctx, v2101);
                                let v2103 = Some(v2102);
                                // Rule at src\isa\riscv64\lower.isle line 2113.
                                return v2103;
                            }
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I32X4 {
                                let v2047 = C::offset32_to_i32(ctx, v2046);
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2097 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Zero,
                                    v2045,
                                    v2048,
                                );
                                let v2098 = constructor_output_vreg(ctx, v2097);
                                let v2099 = Some(v2098);
                                // Rule at src\isa\riscv64\lower.isle line 2105.
                                return v2099;
                            }
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I32X4 {
                                let v2047 = C::offset32_to_i32(ctx, v2046);
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2101 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Signed,
                                    v2045,
                                    v2048,
                                );
                                let v2102 = constructor_output_vreg(ctx, v2101);
                                let v2103 = Some(v2102);
                                // Rule at src\isa\riscv64\lower.isle line 2117.
                                return v2103;
                            }
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I64X2 {
                                let v2047 = C::offset32_to_i32(ctx, v2046);
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2097 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Zero,
                                    v2045,
                                    v2048,
                                );
                                let v2098 = constructor_output_vreg(ctx, v2097);
                                let v2099 = Some(v2098);
                                // Rule at src\isa\riscv64\lower.isle line 2109.
                                return v2099;
                            }
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == I64X2 {
                                let v2047 = C::offset32_to_i32(ctx, v2046);
                                let v2048 = constructor_amode(ctx, v2044, v2047);
                                let v2101 = constructor_gen_load64_extend(
                                    ctx,
                                    v12,
                                    &ExtendOp::Signed,
                                    v2045,
                                    v2048,
                                );
                                let v2102 = constructor_output_vreg(ctx, v2101);
                                let v2103 = Some(v2102);
                                // Rule at src\isa\riscv64\lower.isle line 2121.
                                return v2103;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1665,
            arg: v1666,
            flags: v1667,
        } => {
            match v1665 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v2314 = C::value_type(ctx, v1666);
                            let v2315 = C::ty_vec_fits_in_register(ctx, v2314);
                            if let Some(v2316) = v2315 {
                                let v2318 = constructor_put_in_vreg(ctx, v1666);
                                let v2320 = constructor_gen_extractlane(ctx, I64X2, v2318, 0x0);
                                let v2321 = constructor_put_in_vreg(ctx, v1666);
                                let v2322 = constructor_gen_extractlane(ctx, I64X2, v2321, 0x1);
                                let v2323 = C::value_regs(ctx, v2320, v2322);
                                let v2324 = C::output(ctx, v2323);
                                let v2325 = Some(v2324);
                                // Rule at src\isa\riscv64\lower.isle line 2478.
                                return v2325;
                            }
                        }
                        let v2314 = C::value_type(ctx, v1666);
                        if v2314 == I128 {
                            let v11 = C::ty_vec_fits_in_register(ctx, v3);
                            if let Some(v12) = v11 {
                                let v2326 = C::put_in_regs(ctx, v1666);
                                let v2327 = C::value_regs_get(ctx, v2326, 0x0);
                                let v2328 = C::xreg_new(ctx, v2327);
                                let v2329 = C::put_in_regs(ctx, v1666);
                                let v2330 = C::value_regs_get(ctx, v2329, 0x1);
                                let v2331 = C::xreg_new(ctx, v2330);
                                let v2332 = C::vstate_from_type(ctx, I64X2);
                                let v2333 = constructor_rv_vmv_sx(ctx, v2331, v2332);
                                let v185 = &constructor_unmasked(ctx);
                                let v2334 = constructor_rv_vslide1up_vx(
                                    ctx, v2333, v2333, v2328, v185, v2332,
                                );
                                let v2335 = constructor_output_vreg(ctx, v2334);
                                let v2336 = Some(v2335);
                                // Rule at src\isa\riscv64\lower.isle line 2485.
                                return v2336;
                            }
                            if v3 == I128 {
                                let v2337 = constructor_output_value(ctx, v1666);
                                let v2338 = Some(v2337);
                                // Rule at src\isa\riscv64\lower.isle line 2494.
                                return v2338;
                            }
                        }
                        let v1668 = C::put_in_reg(ctx, v1666);
                        let v2339 = constructor_gen_bitcast(ctx, v1668, v2314, v3);
                        let v2340 = constructor_output_reg(ctx, v2339);
                        let v2341 = Some(v2340);
                        // Rule at src\isa\riscv64\lower.isle line 2497.
                        return v2341;
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1616 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1617) = v1616 {
                            let v1668 = C::put_in_reg(ctx, v1666);
                            let v1669 = constructor_gen_atomic_load(ctx, v1668, v1617);
                            let v1670 = constructor_output_reg(ctx, v1669);
                            let v1671 = Some(v1670);
                            // Rule at src\isa\riscv64\lower.isle line 1656.
                            return v1671;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2410,
            args: v2411,
        } => {
            if let &Opcode::Return = v2410 {
                let v2412 = C::value_list_slice(ctx, v2411);
                let v2413 = constructor_lower_return(ctx, v2412);
                let v2414 = Some(v2413);
                // Rule at src\isa\riscv64\lower.isle line 2561.
                return v2414;
            }
        }
        &InstructionData::NullAry { opcode: ref v34 } => {
            match v34 {
                &Opcode::Debugtrap => {
                    let v2031 = SideEffectNoResult::Inst {
                        inst: MInst::EBreak,
                    };
                    let v2032 = constructor_side_effect(ctx, &v2031);
                    let v2033 = Some(v2032);
                    // Rule at src\isa\riscv64\lower.isle line 2027.
                    return v2033;
                }
                &Opcode::GetFramePointer => {
                    let v2415 = C::fp_reg(ctx);
                    let v2416 = constructor_gen_mov_from_preg(ctx, v2415);
                    let v2417 = constructor_output_reg(ctx, v2416);
                    let v2418 = Some(v2417);
                    // Rule at src\isa\riscv64\lower.isle line 2566.
                    return v2418;
                }
                &Opcode::GetStackPointer => {
                    let v2419 = C::sp_reg(ctx);
                    let v2420 = constructor_gen_mov_from_preg(ctx, v2419);
                    let v2421 = constructor_output_reg(ctx, v2420);
                    let v2422 = Some(v2421);
                    // Rule at src\isa\riscv64\lower.isle line 2569.
                    return v2422;
                }
                &Opcode::GetReturnAddress => {
                    let v2423 = C::load_ra(ctx);
                    let v2424 = constructor_output_reg(ctx, v2423);
                    let v2425 = Some(v2424);
                    // Rule at src\isa\riscv64\lower.isle line 2572.
                    return v2425;
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v36 = constructor_imm(ctx, v3, 0x0);
                        let v37 = constructor_output_reg(ctx, v36);
                        let v38 = Some(v37);
                        // Rule at src\isa\riscv64\lower.isle line 29.
                        return v38;
                    }
                }
                &Opcode::Fence => {
                    let v2035 = MInst::Fence {
                        pred: 0xF,
                        succ: 0xF,
                    };
                    let v2036 = SideEffectNoResult::Inst { inst: v2035 };
                    let v2037 = constructor_side_effect(ctx, &v2036);
                    let v2038 = Some(v2037);
                    // Rule at src\isa\riscv64\lower.isle line 2032.
                    return v2038;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v2594,
            args: ref v2595,
            imm: v2596,
        } => {
            if let &Opcode::Shuffle = v2594 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v11 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v12) = v11 {
                        if v12 == I8X16 {
                            let v2600 = C::vconst_from_immediate(ctx, v2596);
                            if let Some(v2601) = v2600 {
                                let v2603 = C::i8_to_imm5(ctx, -0x10);
                                if let Some(v2604) = v2603 {
                                    let v2605 = constructor_gen_constant(ctx, v12, v2601);
                                    let v2597 = C::unpack_value_array_2(ctx, v2595);
                                    let v2606 = constructor_put_in_vreg(ctx, v2597.0);
                                    let v185 = &constructor_unmasked(ctx);
                                    let v186 = C::vstate_from_type(ctx, v12);
                                    let v2607 =
                                        constructor_rv_vrgather_vv(ctx, v2606, v2605, v185, v186);
                                    let v2608 =
                                        constructor_rv_vadd_vi(ctx, v2605, v2604, v185, v186);
                                    let v2609 = constructor_put_in_vreg(ctx, v2597.1);
                                    let v2610 =
                                        constructor_rv_vrgather_vv(ctx, v2609, v2608, v185, v186);
                                    let v2611 =
                                        constructor_rv_vor_vv(ctx, v2607, v2610, v185, v186);
                                    let v2612 = constructor_output_vreg(ctx, v2611);
                                    let v2613 = Some(v2612);
                                    // Rule at src\isa\riscv64\lower.isle line 2780.
                                    return v2613;
                                }
                            }
                        }
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1815,
            stack_slot: v1816,
            offset: v1817,
        } => {
            if let &Opcode::StackAddr = v1815 {
                let v1818 = C::gen_stack_addr(ctx, v1816, v1817);
                let v1819 = constructor_output_reg(ctx, v1818);
                let v1820 = Some(v1819);
                // Rule at src\isa\riscv64\lower.isle line 1843.
                return v1820;
            }
        }
        &InstructionData::Store {
            opcode: ref v2104,
            args: ref v2105,
            flags: v2106,
            offset: v2107,
        } => {
            match v2104 {
                &Opcode::Store => {
                    let v2108 = C::unpack_value_array_2(ctx, v2105);
                    let v2123 = C::value_type(ctx, v2108.0);
                    let v2137 = C::ty_vec_fits_in_register(ctx, v2123);
                    if let Some(v2138) = v2137 {
                        let v2111 = C::offset32_to_i32(ctx, v2107);
                        let v2112 = constructor_amode(ctx, v2108.1, v2111);
                        let v2141 = constructor_put_in_vreg(ctx, v2108.0);
                        let v2139 = &constructor_element_width_from_type(ctx, v2138);
                        let v2140 = VecAMode::UnitStride { base: v2112 };
                        let v185 = &constructor_unmasked(ctx);
                        let v2142 = C::vstate_from_type(ctx, v2138);
                        let v2143 =
                            constructor_vec_store(ctx, v2139, &v2140, v2141, v2106, v185, v2142);
                        let v2144 = Some(v2143);
                        // Rule at src\isa\riscv64\lower.isle line 2145.
                        return v2144;
                    }
                    if v2123 == I128 {
                        let v2111 = C::offset32_to_i32(ctx, v2107);
                        let v2126 = C::s32_add_fallible(ctx, v2111, 0x8);
                        if let Some(v2127) = v2126 {
                            let v2112 = constructor_amode(ctx, v2108.1, v2111);
                            let v2129 = C::put_in_regs(ctx, v2108.0);
                            let v2130 = C::value_regs_get(ctx, v2129, 0x0);
                            let v2131 =
                                constructor_rv_store(ctx, v2112, &StoreOP::Sd, v2106, v2130);
                            let v2132 = constructor_amode(ctx, v2108.1, v2127);
                            let v2133 = C::put_in_regs(ctx, v2108.0);
                            let v2134 = C::value_regs_get(ctx, v2133, 0x1);
                            let v2135 =
                                constructor_rv_store(ctx, v2132, &StoreOP::Sd, v2106, v2134);
                            let v2136 = Some(v2135);
                            // Rule at src\isa\riscv64\lower.isle line 2140.
                            return v2136;
                        }
                    }
                    let v2111 = C::offset32_to_i32(ctx, v2107);
                    let v2112 = constructor_amode(ctx, v2108.1, v2111);
                    let v2124 = constructor_gen_store(ctx, v2112, v2106, v2108.0);
                    let v2125 = Some(v2124);
                    // Rule at src\isa\riscv64\lower.isle line 2137.
                    return v2125;
                }
                &Opcode::Istore8 => {
                    let v2108 = C::unpack_value_array_2(ctx, v2105);
                    let v2111 = C::offset32_to_i32(ctx, v2107);
                    let v2112 = constructor_amode(ctx, v2108.1, v2111);
                    let v2114 = C::put_in_reg(ctx, v2108.0);
                    let v2115 = constructor_rv_store(ctx, v2112, &StoreOP::Sb, v2106, v2114);
                    let v2116 = Some(v2115);
                    // Rule at src\isa\riscv64\lower.isle line 2125.
                    return v2116;
                }
                &Opcode::Istore16 => {
                    let v2108 = C::unpack_value_array_2(ctx, v2105);
                    let v2111 = C::offset32_to_i32(ctx, v2107);
                    let v2112 = constructor_amode(ctx, v2108.1, v2111);
                    let v2114 = C::put_in_reg(ctx, v2108.0);
                    let v2118 = constructor_rv_store(ctx, v2112, &StoreOP::Sh, v2106, v2114);
                    let v2119 = Some(v2118);
                    // Rule at src\isa\riscv64\lower.isle line 2129.
                    return v2119;
                }
                &Opcode::Istore32 => {
                    let v2108 = C::unpack_value_array_2(ctx, v2105);
                    let v2111 = C::offset32_to_i32(ctx, v2107);
                    let v2112 = constructor_amode(ctx, v2108.1, v2111);
                    let v2114 = C::put_in_reg(ctx, v2108.0);
                    let v2121 = constructor_rv_store(ctx, v2112, &StoreOP::Sw, v2106, v2114);
                    let v2122 = Some(v2121);
                    // Rule at src\isa\riscv64\lower.isle line 2133.
                    return v2122;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1672,
            args: ref v1673,
            flags: v1674,
        } => {
            if let &Opcode::AtomicStore = v1672 {
                let v1675 = C::unpack_value_array_2(ctx, v1673);
                let v1678 = C::value_type(ctx, v1675.0);
                let v1679 = C::valid_atomic_transaction(ctx, v1678);
                if let Some(v1680) = v1679 {
                    let v1681 = C::put_in_reg(ctx, v1675.1);
                    let v1682 = C::put_in_reg(ctx, v1675.0);
                    let v1683 = constructor_gen_atomic_store(ctx, v1681, v1680, v1682);
                    let v1684 = Some(v1683);
                    // Rule at src\isa\riscv64\lower.isle line 1662.
                    return v1684;
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v1591,
            args: ref v1592,
        } => {
            match v1591 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1830 = C::i64_from_iconst(ctx, v1593.1);
                            if let Some(v1831) = v1830 {
                                if v1831 == 0x0 {
                                    let v1832 = constructor_is_nonzero_cmp(ctx, v1593.0);
                                    let v1833 = C::zero_reg(ctx);
                                    let v1834 = constructor_put_in_xreg(ctx, v1593.2);
                                    let v1835 =
                                        constructor_gen_select_xreg(ctx, v1832, v1833, v1834);
                                    let v1836 = constructor_output_xreg(ctx, v1835);
                                    let v1837 = Some(v1836);
                                    // Rule at src\isa\riscv64\lower.isle line 1864.
                                    return v1837;
                                }
                            }
                            let v1838 = C::i64_from_iconst(ctx, v1593.2);
                            if let Some(v1839) = v1838 {
                                if v1839 == 0x0 {
                                    let v1832 = constructor_is_nonzero_cmp(ctx, v1593.0);
                                    let v1840 = constructor_put_in_xreg(ctx, v1593.1);
                                    let v1841 = C::zero_reg(ctx);
                                    let v1842 =
                                        constructor_gen_select_xreg(ctx, v1832, v1840, v1841);
                                    let v1843 = constructor_output_xreg(ctx, v1842);
                                    let v1844 = Some(v1843);
                                    // Rule at src\isa\riscv64\lower.isle line 1867.
                                    return v1844;
                                }
                            }
                            let v1832 = constructor_is_nonzero_cmp(ctx, v1593.0);
                            let v1840 = constructor_put_in_xreg(ctx, v1593.1);
                            let v1834 = constructor_put_in_xreg(ctx, v1593.2);
                            let v1845 = constructor_gen_select_xreg(ctx, v1832, v1840, v1834);
                            let v1846 = constructor_output_xreg(ctx, v1845);
                            let v1847 = Some(v1846);
                            // Rule at src\isa\riscv64\lower.isle line 1870.
                            return v1847;
                        }
                        if v3 == I128 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1832 = constructor_is_nonzero_cmp(ctx, v1593.0);
                            let v1848 = C::put_in_regs(ctx, v1593.1);
                            let v1849 = C::put_in_regs(ctx, v1593.2);
                            let v1850 = constructor_gen_select_regs(ctx, v1832, v1848, v1849);
                            let v1851 = C::output(ctx, v1850);
                            let v1852 = Some(v1851);
                            // Rule at src\isa\riscv64\lower.isle line 1873.
                            return v1852;
                        }
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1832 = constructor_is_nonzero_cmp(ctx, v1593.0);
                            let v1853 = constructor_put_in_vreg(ctx, v1593.1);
                            let v1854 = constructor_put_in_vreg(ctx, v1593.2);
                            let v1855 = constructor_gen_select_vreg(ctx, v1832, v1853, v1854);
                            let v1856 = constructor_output_vreg(ctx, v1855);
                            let v1857 = Some(v1856);
                            // Rule at src\isa\riscv64\lower.isle line 1876.
                            return v1857;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1832 = constructor_is_nonzero_cmp(ctx, v1593.0);
                            let v1858 = constructor_put_in_freg(ctx, v1593.1);
                            let v1859 = constructor_put_in_freg(ctx, v1593.2);
                            let v1860 = constructor_gen_select_freg(ctx, v1832, v1858, v1859);
                            let v1861 = constructor_output_freg(ctx, v1860);
                            let v1862 = Some(v1861);
                            // Rule at src\isa\riscv64\lower.isle line 1879.
                            return v1862;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1838 = C::i64_from_iconst(ctx, v1593.2);
                            if let Some(v1839) = v1838 {
                                if v1839 == 0x0 {
                                    let v2403 = constructor_put_in_xreg(ctx, v1593.1);
                                    let v2399 = constructor_gen_bmask(ctx, v1593.0);
                                    let v2404 = constructor_rv_and(ctx, v2403, v2399);
                                    let v2405 = constructor_output_xreg(ctx, v2404);
                                    let v2406 = Some(v2405);
                                    // Rule at src\isa\riscv64\lower.isle line 2552.
                                    return v2406;
                                }
                            }
                            let v1830 = C::i64_from_iconst(ctx, v1593.1);
                            if let Some(v1831) = v1830 {
                                if v1831 == 0x0 {
                                    let v2398 = constructor_put_in_xreg(ctx, v1593.2);
                                    let v2399 = constructor_gen_bmask(ctx, v1593.0);
                                    let v2400 = constructor_rv_andn(ctx, v2398, v2399);
                                    let v2401 = constructor_output_xreg(ctx, v2400);
                                    let v2402 = Some(v2401);
                                    // Rule at src\isa\riscv64\lower.isle line 2550.
                                    return v2402;
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v2369 = constructor_gen_bmask(ctx, v1593.0);
                            let v1848 = C::put_in_regs(ctx, v1593.1);
                            let v2376 = C::value_regs_get(ctx, v1848, 0x0);
                            let v2377 = C::xreg_new(ctx, v2376);
                            let v2378 = constructor_rv_and(ctx, v2369, v2377);
                            let v2379 = C::put_in_regs(ctx, v1593.2);
                            let v2380 = C::value_regs_get(ctx, v2379, 0x0);
                            let v2381 = C::xreg_new(ctx, v2380);
                            let v2382 = constructor_rv_andn(ctx, v2381, v2369);
                            let v2383 = constructor_rv_or(ctx, v2378, v2382);
                            let v2385 = C::put_in_regs(ctx, v1593.1);
                            let v2386 = C::value_regs_get(ctx, v2385, 0x1);
                            let v2387 = C::xreg_new(ctx, v2386);
                            let v2388 = constructor_rv_and(ctx, v2369, v2387);
                            let v2389 = C::put_in_regs(ctx, v1593.2);
                            let v2390 = C::value_regs_get(ctx, v2389, 0x1);
                            let v2391 = C::xreg_new(ctx, v2390);
                            let v2392 = constructor_rv_andn(ctx, v2391, v2369);
                            let v2393 = constructor_rv_or(ctx, v2388, v2392);
                            let v2384 = C::xreg_to_reg(ctx, v2383);
                            let v2394 = C::xreg_to_reg(ctx, v2393);
                            let v2395 = C::value_regs(ctx, v2384, v2394);
                            let v2396 = C::output(ctx, v2395);
                            let v2397 = Some(v2396);
                            // Rule at src\isa\riscv64\lower.isle line 2542.
                            return v2397;
                        }
                        if let Some(v714) = v713 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v2369 = constructor_gen_bmask(ctx, v1593.0);
                            let v1840 = constructor_put_in_xreg(ctx, v1593.1);
                            let v2370 = constructor_rv_and(ctx, v2369, v1840);
                            let v2371 = constructor_put_in_xreg(ctx, v1593.2);
                            let v2372 = constructor_rv_andn(ctx, v2371, v2369);
                            let v2373 = constructor_rv_or(ctx, v2370, v2372);
                            let v2374 = constructor_output_xreg(ctx, v2373);
                            let v2375 = Some(v2374);
                            // Rule at src\isa\riscv64\lower.isle line 2539.
                            return v2375;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1881 = C::def_inst(ctx, v1593.0);
                            if let Some(v1882) = v1881 {
                                let v1883 = &C::inst_data(ctx, v1882);
                                match v1883 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1900,
                                        args: ref v1901,
                                        cond: ref v1902,
                                    } => {
                                        if let &Opcode::Fcmp = v1900 {
                                            let v1903 = C::unpack_value_array_2(ctx, v1901);
                                            let v1906 = C::value_type(ctx, v1903.0);
                                            let v1907 = C::ty_vec_fits_in_register(ctx, v1906);
                                            if let Some(v1908) = v1907 {
                                                let v1909 = constructor_gen_fcmp_mask(
                                                    ctx, v1908, v1902, v1903.0, v1903.1,
                                                );
                                                let v1894 = constructor_put_in_vreg(ctx, v1593.2);
                                                let v1895 = constructor_put_in_vreg(ctx, v1593.1);
                                                let v1910 = C::vstate_from_type(ctx, v1908);
                                                let v1911 = constructor_rv_vmerge_vvm(
                                                    ctx, v1894, v1895, v1909, v1910,
                                                );
                                                let v1912 = constructor_output_vreg(ctx, v1911);
                                                let v1913 = Some(v1912);
                                                // Rule at src\isa\riscv64\lower.isle line 1918.
                                                return v1913;
                                            }
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1884,
                                        args: ref v1885,
                                        cond: ref v1886,
                                    } => {
                                        if let &Opcode::Icmp = v1884 {
                                            let v1887 = C::unpack_value_array_2(ctx, v1885);
                                            let v1890 = C::value_type(ctx, v1887.0);
                                            let v1891 = C::ty_vec_fits_in_register(ctx, v1890);
                                            if let Some(v1892) = v1891 {
                                                let v1893 = constructor_gen_icmp_mask(
                                                    ctx, v1892, v1886, v1887.0, v1887.1,
                                                );
                                                let v1894 = constructor_put_in_vreg(ctx, v1593.2);
                                                let v1895 = constructor_put_in_vreg(ctx, v1593.1);
                                                let v1896 = C::vstate_from_type(ctx, v1892);
                                                let v1897 = constructor_rv_vmerge_vvm(
                                                    ctx, v1894, v1895, v1893, v1896,
                                                );
                                                let v1898 = constructor_output_vreg(ctx, v1897);
                                                let v1899 = Some(v1898);
                                                // Rule at src\isa\riscv64\lower.isle line 1914.
                                                return v1899;
                                            }
                                        }
                                    }
                                    &InstructionData::LoadNoOffset {
                                        opcode: ref v1914,
                                        arg: v1915,
                                        flags: v1916,
                                    } => {
                                        if let &Opcode::Bitcast = v1914 {
                                            let v1917 = C::def_inst(ctx, v1915);
                                            if let Some(v1918) = v1917 {
                                                let v1919 = &C::inst_data(ctx, v1918);
                                                match v1919 {
                                                    &InstructionData::FloatCompare {
                                                        opcode: ref v1920,
                                                        args: ref v1921,
                                                        cond: ref v1922,
                                                    } => {
                                                        if let &Opcode::Fcmp = v1920 {
                                                            let v1923 =
                                                                C::unpack_value_array_2(ctx, v1921);
                                                            let v1926 = C::value_type(ctx, v1923.0);
                                                            let v1927 = C::ty_vec_fits_in_register(
                                                                ctx, v1926,
                                                            );
                                                            if let Some(v1928) = v1927 {
                                                                let v1929 =
                                                                    constructor_gen_fcmp_mask(
                                                                        ctx, v1928, v1922, v1923.0,
                                                                        v1923.1,
                                                                    );
                                                                let v1894 = constructor_put_in_vreg(
                                                                    ctx, v1593.2,
                                                                );
                                                                let v1895 = constructor_put_in_vreg(
                                                                    ctx, v1593.1,
                                                                );
                                                                let v1930 =
                                                                    C::vstate_from_type(ctx, v1928);
                                                                let v1931 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1894, v1895, v1929,
                                                                        v1930,
                                                                    );
                                                                let v1932 = constructor_output_vreg(
                                                                    ctx, v1931,
                                                                );
                                                                let v1933 = Some(v1932);
                                                                // Rule at src\isa\riscv64\lower.isle line 1922.
                                                                return v1933;
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::IntCompare {
                                                        opcode: ref v1934,
                                                        args: ref v1935,
                                                        cond: ref v1936,
                                                    } => {
                                                        if let &Opcode::Icmp = v1934 {
                                                            let v1937 =
                                                                C::unpack_value_array_2(ctx, v1935);
                                                            let v1940 = C::value_type(ctx, v1937.0);
                                                            let v1941 = C::ty_vec_fits_in_register(
                                                                ctx, v1940,
                                                            );
                                                            if let Some(v1942) = v1941 {
                                                                let v1943 =
                                                                    constructor_gen_icmp_mask(
                                                                        ctx, v1942, v1936, v1937.0,
                                                                        v1937.1,
                                                                    );
                                                                let v1894 = constructor_put_in_vreg(
                                                                    ctx, v1593.2,
                                                                );
                                                                let v1895 = constructor_put_in_vreg(
                                                                    ctx, v1593.1,
                                                                );
                                                                let v1944 =
                                                                    C::vstate_from_type(ctx, v1942);
                                                                let v1945 =
                                                                    constructor_rv_vmerge_vvm(
                                                                        ctx, v1894, v1895, v1943,
                                                                        v1944,
                                                                    );
                                                                let v1946 = constructor_output_vreg(
                                                                    ctx, v1945,
                                                                );
                                                                let v1947 = Some(v1946);
                                                                // Rule at src\isa\riscv64\lower.isle line 1926.
                                                                return v1947;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v1872 = constructor_put_in_vreg(ctx, v1593.0);
                            let v1853 = constructor_put_in_vreg(ctx, v1593.1);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1873 = constructor_rv_vand_vv(ctx, v1872, v1853, v185, v186);
                            let v1874 = constructor_put_in_vreg(ctx, v1593.0);
                            let v1875 = constructor_rv_vnot_v(ctx, v1874, v185, v186);
                            let v1876 = constructor_put_in_vreg(ctx, v1593.2);
                            let v1877 = constructor_rv_vand_vv(ctx, v1875, v1876, v185, v186);
                            let v1878 = constructor_rv_vor_vv(ctx, v1873, v1877, v185, v186);
                            let v1879 = constructor_output_vreg(ctx, v1878);
                            let v1880 = Some(v1879);
                            // Rule at src\isa\riscv64\lower.isle line 1896.
                            return v1880;
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v1593 = C::unpack_value_array_3(ctx, v1592);
                            let v1863 = constructor_put_in_xreg(ctx, v1593.0);
                            let v1840 = constructor_put_in_xreg(ctx, v1593.1);
                            let v1864 = constructor_rv_and(ctx, v1863, v1840);
                            let v1865 = constructor_put_in_xreg(ctx, v1593.0);
                            let v1866 = constructor_rv_not(ctx, v1865);
                            let v1867 = constructor_put_in_xreg(ctx, v1593.2);
                            let v1868 = constructor_rv_and(ctx, v1866, v1867);
                            let v1869 = constructor_rv_or(ctx, v1864, v1868);
                            let v1870 = constructor_output_xreg(ctx, v1869);
                            let v1871 = Some(v1870);
                            // Rule at src\isa\riscv64\lower.isle line 1885.
                            return v1871;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1593 = C::unpack_value_array_3(ctx, v1592);
                        let v1597 = &constructor_is_fneg(ctx, v1593.0);
                        let v1603 = constructor_is_fneg_neg(ctx, v1597);
                        let v1598 = &constructor_is_fneg(ctx, v1593.1);
                        let v1604 = constructor_is_fneg_neg(ctx, v1598);
                        let v1605 = C::u64_xor(ctx, v1603, v1604);
                        let v1599 = &constructor_is_fneg(ctx, v1593.2);
                        let v1606 = constructor_is_fneg_neg(ctx, v1599);
                        let v1600 = constructor_get_fneg_value(ctx, v1597);
                        let v1601 = constructor_get_fneg_value(ctx, v1598);
                        let v1602 = constructor_get_fneg_value(ctx, v1599);
                        let v1607 = constructor_rv_fma(ctx, v3, v1605, v1606, v1600, v1601, v1602);
                        let v1608 = Some(v1607);
                        // Rule at src\isa\riscv64\lower.isle line 1563.
                        return v1608;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v2467,
            args: ref v2468,
            imm: v2469,
        } => {
            if let &Opcode::Insertlane = v2467 {
                let v2470 = C::unpack_value_array_2(ctx, v2468);
                let v2473 = C::value_type(ctx, v2470.0);
                let v2474 = C::ty_vec_fits_in_register(ctx, v2473);
                if let Some(v2475) = v2474 {
                    let v2495 = C::i64_from_iconst(ctx, v2470.1);
                    if let Some(v2496) = v2495 {
                        let v2497 = C::imm5_from_i64(ctx, v2496);
                        if let Some(v2498) = v2497 {
                            let v2479 = C::u8_from_uimm8(ctx, v2469);
                            let v2480 = C::u8_as_u64(ctx, v2479);
                            let v2481 = C::u64_shl(ctx, 0x1, v2480);
                            let v2482 = constructor_gen_vec_mask(ctx, v2481);
                            let v2483 = constructor_put_in_vreg(ctx, v2470.0);
                            let v2485 = C::vstate_from_type(ctx, v2475);
                            let v2499 = constructor_rv_vmerge_vim(ctx, v2483, v2498, v2482, v2485);
                            let v2500 = constructor_output_vreg(ctx, v2499);
                            let v2501 = Some(v2500);
                            // Rule at src\isa\riscv64\lower.isle line 2636.
                            return v2501;
                        }
                    }
                    let v2476 = C::value_type(ctx, v2470.1);
                    let v2489 = C::ty_scalar_float(ctx, v2476);
                    if let Some(v2490) = v2489 {
                        let v2479 = C::u8_from_uimm8(ctx, v2469);
                        let v2480 = C::u8_as_u64(ctx, v2479);
                        let v2481 = C::u64_shl(ctx, 0x1, v2480);
                        let v2482 = constructor_gen_vec_mask(ctx, v2481);
                        let v2483 = constructor_put_in_vreg(ctx, v2470.0);
                        let v2491 = constructor_put_in_freg(ctx, v2470.1);
                        let v2485 = C::vstate_from_type(ctx, v2475);
                        let v2492 = constructor_rv_vfmerge_vfm(ctx, v2483, v2491, v2482, v2485);
                        let v2493 = constructor_output_vreg(ctx, v2492);
                        let v2494 = Some(v2493);
                        // Rule at src\isa\riscv64\lower.isle line 2628.
                        return v2494;
                    }
                    let v2477 = C::ty_int(ctx, v2476);
                    if let Some(v2478) = v2477 {
                        let v2479 = C::u8_from_uimm8(ctx, v2469);
                        let v2480 = C::u8_as_u64(ctx, v2479);
                        let v2481 = C::u64_shl(ctx, 0x1, v2480);
                        let v2482 = constructor_gen_vec_mask(ctx, v2481);
                        let v2483 = constructor_put_in_vreg(ctx, v2470.0);
                        let v2484 = constructor_put_in_xreg(ctx, v2470.1);
                        let v2485 = C::vstate_from_type(ctx, v2475);
                        let v2486 = constructor_rv_vmerge_vxm(ctx, v2483, v2484, v2482, v2485);
                        let v2487 = constructor_output_vreg(ctx, v2486);
                        let v2488 = Some(v2487);
                        // Rule at src\isa\riscv64\lower.isle line 2621.
                        return v2488;
                    }
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v2039,
            code: ref v2040,
        } => {
            if let &Opcode::Trap = v2039 {
                let v2041 = constructor_udf(ctx, v2040);
                let v2042 = Some(v2041);
                // Rule at src\isa\riscv64\lower.isle line 2037.
                return v2042;
            }
        }
        &InstructionData::Unary {
            opcode: ref v547,
            arg: v548,
        } => {
            match v547 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1029 = C::def_inst(ctx, v548);
                        if let Some(v1030) = v1029 {
                            let v1031 = &C::inst_data(ctx, v1030);
                            if let &InstructionData::UnaryImm {
                                opcode: ref v2511,
                                imm: v2512,
                            } = v1031
                            {
                                if let &Opcode::Iconst = v2511 {
                                    let v2513 = C::u64_from_imm64(ctx, v2512);
                                    let v2514 = C::imm5_from_u64(ctx, v2513);
                                    if let Some(v2515) = v2514 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v2502 = C::vstate_from_type(ctx, v3);
                                        let v2516 = constructor_rv_vmv_vi(ctx, v2515, v2502);
                                        let v2517 = constructor_output_vreg(ctx, v2516);
                                        let v2518 = Some(v2517);
                                        // Rule at src\isa\riscv64\lower.isle line 2650.
                                        return v2518;
                                    }
                                }
                            }
                        }
                        let v1172 = C::value_type(ctx, v548);
                        let v2506 = C::ty_int_ref_scalar_64_extract(ctx, v1172);
                        if let Some(v2507) = v2506 {
                            let v1003 = constructor_put_in_xreg(ctx, v548);
                            let v3 = C::value_type(ctx, v2);
                            let v2502 = C::vstate_from_type(ctx, v3);
                            let v2508 = constructor_rv_vmv_vx(ctx, v1003, v2502);
                            let v2509 = constructor_output_vreg(ctx, v2508);
                            let v2510 = Some(v2509);
                            // Rule at src\isa\riscv64\lower.isle line 2647.
                            return v2510;
                        }
                        let v2234 = C::ty_scalar_float(ctx, v1172);
                        if let Some(v2235) = v2234 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v3 = C::value_type(ctx, v2);
                            let v2502 = C::vstate_from_type(ctx, v3);
                            let v2503 = constructor_rv_vfmv_vf(ctx, v1007, v2502);
                            let v2504 = constructor_output_vreg(ctx, v2503);
                            let v2505 = Some(v2504);
                            // Rule at src\isa\riscv64\lower.isle line 2644.
                            return v2505;
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1172 = C::value_type(ctx, v548);
                    let v2561 = C::ty_vec_fits_in_register(ctx, v1172);
                    if let Some(v2562) = v2561 {
                        let v553 = constructor_put_in_vreg(ctx, v548);
                        let v2240 = constructor_put_in_vreg(ctx, v548);
                        let v185 = &constructor_unmasked(ctx);
                        let v2566 = C::vstate_from_type(ctx, v2562);
                        let v2572 = constructor_rv_vredmaxu_vs(ctx, v553, v2240, v185, v2566);
                        let v2573 = constructor_rv_vmv_xs(ctx, v2572, v2566);
                        let v2574 = constructor_rv_snez(ctx, v2573);
                        let v2575 = constructor_output_xreg(ctx, v2574);
                        let v2576 = Some(v2575);
                        // Rule at src\isa\riscv64\lower.isle line 2735.
                        return v2576;
                    }
                }
                &Opcode::VallTrue => {
                    let v1172 = C::value_type(ctx, v548);
                    let v2561 = C::ty_vec_fits_in_register(ctx, v1172);
                    if let Some(v2562) = v2561 {
                        let v2564 = C::i8_to_imm5(ctx, 0x1);
                        if let Some(v2565) = v2564 {
                            let v2566 = C::vstate_from_type(ctx, v2562);
                            let v2567 = constructor_rv_vmv_vi(ctx, v2565, v2566);
                            let v2240 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v2568 = constructor_rv_vredminu_vs(ctx, v2240, v2567, v185, v2566);
                            let v2569 = constructor_rv_vmv_xs(ctx, v2568, v2566);
                            let v2570 = constructor_output_xreg(ctx, v2569);
                            let v2571 = Some(v2570);
                            // Rule at src\isa\riscv64\lower.isle line 2721.
                            return v2571;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1172 = C::value_type(ctx, v548);
                    let v2561 = C::ty_vec_fits_in_register(ctx, v1172);
                    if let Some(v2562) = v2561 {
                        let v553 = constructor_put_in_vreg(ctx, v548);
                        let v1833 = C::zero_reg(ctx);
                        let v185 = &constructor_unmasked(ctx);
                        let v2566 = C::vstate_from_type(ctx, v2562);
                        let v2577 = constructor_rv_vmslt_vx(ctx, v553, v1833, v185, v2566);
                        let v2332 = C::vstate_from_type(ctx, I64X2);
                        let v2578 = constructor_rv_vmv_xs(ctx, v2577, v2332);
                        let v2579 = C::ty_lane_mask(ctx, v2562);
                        let v2580 = constructor_gen_andi(ctx, v2578, v2579);
                        let v2581 = constructor_output_xreg(ctx, v2580);
                        let v2582 = Some(v2581);
                        // Rule at src\isa\riscv64\lower.isle line 2751.
                        return v2582;
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v554 = constructor_rv_vneg_v(ctx, v553, v185, v186);
                            let v555 = constructor_output_vreg(ctx, v554);
                            let v556 = Some(v555);
                            // Rule at src\isa\riscv64\lower.isle line 445.
                            return v556;
                        }
                        let v545 = C::ty_int(ctx, v3);
                        if let Some(v546) = v545 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v550 = constructor_neg(ctx, v546, v549);
                            let v551 = C::output(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src\isa\riscv64\lower.isle line 442.
                            return v552;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v554 = constructor_rv_vneg_v(ctx, v553, v185, v186);
                            let v1233 = constructor_put_in_vreg(ctx, v548);
                            let v2431 = constructor_rv_vmax_vv(ctx, v1233, v554, v185, v186);
                            let v2432 = constructor_output_vreg(ctx, v2431);
                            let v2433 = Some(v2432);
                            // Rule at src\isa\riscv64\lower.isle line 2590.
                            return v2433;
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v1118 = constructor_sext(ctx, v548);
                            let v2426 = constructor_rv_neg(ctx, v1118);
                            let v2427 = constructor_cmp_gt(ctx, v1118, v2426);
                            let v2428 = constructor_gen_select_xreg(ctx, v2427, v1118, v2426);
                            let v2429 = constructor_output_xreg(ctx, v2428);
                            let v2430 = Some(v2429);
                            // Rule at src\isa\riscv64\lower.isle line 2582.
                            return v2430;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v748 = C::has_zbb(ctx);
                            if v748 == true {
                                let v1029 = C::def_inst(ctx, v548);
                                if let Some(v1030) = v1029 {
                                    let v1031 = &C::inst_data(ctx, v1030);
                                    if let &InstructionData::Binary {
                                        opcode: ref v1032,
                                        args: ref v1033,
                                    } = v1031
                                    {
                                        if let &Opcode::Bxor = v1032 {
                                            let v1034 = C::unpack_value_array_2(ctx, v1033);
                                            let v1037 = constructor_put_in_xreg(ctx, v1034.0);
                                            let v1038 = constructor_put_in_xreg(ctx, v1034.1);
                                            let v1039 = constructor_rv_xnor(ctx, v1037, v1038);
                                            let v1040 = constructor_output_xreg(ctx, v1039);
                                            let v1041 = Some(v1040);
                                            // Rule at src\isa\riscv64\lower.isle line 961.
                                            return v1041;
                                        }
                                    }
                                }
                            }
                        }
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1026 = constructor_rv_vnot_v(ctx, v553, v185, v186);
                            let v1027 = constructor_output_vreg(ctx, v1026);
                            let v1028 = Some(v1027);
                            // Rule at src\isa\riscv64\lower.isle line 958.
                            return v1028;
                        }
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1014 = C::value_regs_get(ctx, v549, 0x0);
                            let v1015 = C::xreg_new(ctx, v1014);
                            let v1016 = constructor_rv_not(ctx, v1015);
                            let v1018 = C::put_in_regs(ctx, v548);
                            let v1019 = C::value_regs_get(ctx, v1018, 0x1);
                            let v1020 = C::xreg_new(ctx, v1019);
                            let v1021 = constructor_rv_not(ctx, v1020);
                            let v1017 = C::xreg_to_reg(ctx, v1016);
                            let v1022 = C::xreg_to_reg(ctx, v1021);
                            let v1023 = C::value_regs(ctx, v1017, v1022);
                            let v1024 = C::output(ctx, v1023);
                            let v1025 = Some(v1024);
                            // Rule at src\isa\riscv64\lower.isle line 953.
                            return v1025;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v1008 = constructor_move_f_to_x(ctx, v1007, v741);
                            let v1009 = constructor_rv_not(ctx, v1008);
                            let v1010 = constructor_float_int_of_same_size(ctx, v741);
                            let v1011 = constructor_move_x_to_f(ctx, v1009, v1010);
                            let v1012 = constructor_output_freg(ctx, v1011);
                            let v1013 = Some(v1012);
                            // Rule at src\isa\riscv64\lower.isle line 950.
                            return v1013;
                        }
                        if let Some(v57) = v56 {
                            let v1003 = constructor_put_in_xreg(ctx, v548);
                            let v1004 = constructor_rv_not(ctx, v1003);
                            let v1005 = constructor_output_xreg(ctx, v1004);
                            let v1006 = Some(v1005);
                            // Rule at src\isa\riscv64\lower.isle line 947.
                            return v1006;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1045 = C::value_regs_get(ctx, v549, 0x1);
                            let v1046 = C::xreg_new(ctx, v1045);
                            let v1047 = constructor_gen_bitrev(ctx, I64, v1046);
                            let v1018 = C::put_in_regs(ctx, v548);
                            let v1049 = C::value_regs_get(ctx, v1018, 0x0);
                            let v1050 = C::xreg_new(ctx, v1049);
                            let v1051 = constructor_gen_bitrev(ctx, I64, v1050);
                            let v1048 = C::xreg_to_reg(ctx, v1047);
                            let v1052 = C::xreg_to_reg(ctx, v1051);
                            let v1053 = C::value_regs(ctx, v1048, v1052);
                            let v1054 = C::output(ctx, v1053);
                            let v1055 = Some(v1054);
                            // Rule at src\isa\riscv64\lower.isle line 970.
                            return v1055;
                        }
                        let v56 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v57) = v56 {
                            let v1003 = constructor_put_in_xreg(ctx, v548);
                            let v1042 = constructor_gen_bitrev(ctx, v57, v1003);
                            let v1043 = constructor_output_xreg(ctx, v1042);
                            let v1044 = Some(v1043);
                            // Rule at src\isa\riscv64\lower.isle line 967.
                            return v1044;
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v748 = C::has_zbb(ctx);
                        if v748 == true {
                            let v3 = C::value_type(ctx, v2);
                            match v3 {
                                I32 => {
                                    let v1003 = constructor_put_in_xreg(ctx, v548);
                                    let v1112 = constructor_rv_clzw(ctx, v1003);
                                    let v1113 = constructor_output_xreg(ctx, v1112);
                                    let v1114 = Some(v1113);
                                    // Rule at src\isa\riscv64\lower.isle line 1071.
                                    return v1114;
                                }
                                I64 => {
                                    let v1003 = constructor_put_in_xreg(ctx, v548);
                                    let v1115 = constructor_rv_clz(ctx, v1003);
                                    let v1116 = constructor_output_xreg(ctx, v1115);
                                    let v1117 = Some(v1116);
                                    // Rule at src\isa\riscv64\lower.isle line 1075.
                                    return v1117;
                                }
                                _ => {}
                            }
                            let v621 = C::fits_in_16(ctx, v3);
                            if let Some(v622) = v621 {
                                let v1103 = constructor_zext(ctx, v548);
                                let v1104 = constructor_rv_clz(ctx, v1103);
                                let v1105 = C::ty_bits(ctx, v622);
                                let v1106 = C::u8_as_i32(ctx, v1105);
                                let v1108 = C::imm12_const_add(ctx, v1106, -0x40);
                                let v1109 = constructor_rv_addi(ctx, v1104, v1108);
                                let v1110 = constructor_output_xreg(ctx, v1109);
                                let v1111 = Some(v1110);
                                // Rule at src\isa\riscv64\lower.isle line 1064.
                                return v1111;
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1014 = C::value_regs_get(ctx, v549, 0x0);
                            let v1015 = C::xreg_new(ctx, v1014);
                            let v1070 = C::put_in_regs(ctx, v548);
                            let v1071 = C::value_regs_get(ctx, v1070, 0x1);
                            let v1072 = C::xreg_new(ctx, v1071);
                            let v1092 = constructor_gen_clz(ctx, v1072);
                            let v1093 = constructor_gen_clz(ctx, v1015);
                            let v1094 = constructor_cmp_eqz(ctx, v1072);
                            let v1095 = C::zero_reg(ctx);
                            let v1096 = constructor_gen_select_xreg(ctx, v1094, v1093, v1095);
                            let v1097 = constructor_rv_add(ctx, v1092, v1096);
                            let v1099 = constructor_imm(ctx, I64, 0x0);
                            let v1098 = C::xreg_to_reg(ctx, v1097);
                            let v1100 = C::value_regs(ctx, v1098, v1099);
                            let v1101 = C::output(ctx, v1100);
                            let v1102 = Some(v1101);
                            // Rule at src\isa\riscv64\lower.isle line 1054.
                            return v1102;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1003 = constructor_put_in_xreg(ctx, v548);
                            let v1089 = constructor_gen_cltz(ctx, true, v1003, v714);
                            let v1090 = constructor_output_xreg(ctx, v1089);
                            let v1091 = Some(v1090);
                            // Rule at src\isa\riscv64\lower.isle line 1051.
                            return v1091;
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1014 = C::value_regs_get(ctx, v549, 0x0);
                            let v1015 = C::xreg_new(ctx, v1014);
                            let v1070 = C::put_in_regs(ctx, v548);
                            let v1071 = C::value_regs_get(ctx, v1070, 0x1);
                            let v1072 = C::xreg_new(ctx, v1071);
                            let v1130 = constructor_cmp_ltz(ctx, v1072);
                            let v1131 = constructor_rv_not(ctx, v1015);
                            let v1132 = constructor_gen_select_xreg(ctx, v1130, v1131, v1015);
                            let v1133 = constructor_cmp_ltz(ctx, v1072);
                            let v1134 = constructor_rv_not(ctx, v1072);
                            let v1135 = constructor_gen_select_xreg(ctx, v1133, v1134, v1072);
                            let v1136 = constructor_gen_clz(ctx, v1135);
                            let v1137 = constructor_gen_clz(ctx, v1132);
                            let v1138 = constructor_cmp_eqz(ctx, v1135);
                            let v1139 = C::zero_reg(ctx);
                            let v1140 = constructor_gen_select_xreg(ctx, v1138, v1137, v1139);
                            let v1141 = constructor_rv_add(ctx, v1136, v1140);
                            let v1143 = C::imm12_const(ctx, -0x1);
                            let v1144 = constructor_rv_addi(ctx, v1141, v1143);
                            let v1146 = constructor_imm(ctx, I64, 0x0);
                            let v1145 = C::xreg_to_reg(ctx, v1144);
                            let v1147 = C::value_regs(ctx, v1145, v1146);
                            let v1148 = C::output(ctx, v1147);
                            let v1149 = Some(v1148);
                            // Rule at src\isa\riscv64\lower.isle line 1099.
                            return v1149;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1118 = constructor_sext(ctx, v548);
                            let v1119 = constructor_cmp_ltz(ctx, v1118);
                            let v1120 = constructor_rv_not(ctx, v1118);
                            let v1121 = constructor_gen_select_xreg(ctx, v1119, v1120, v1118);
                            let v1122 = constructor_gen_clz(ctx, v1121);
                            let v1123 = C::ty_bits(ctx, v714);
                            let v1124 = C::u8_as_i32(ctx, v1123);
                            let v1126 = C::imm12_const_add(ctx, v1124, -0x41);
                            let v1127 = constructor_rv_addi(ctx, v1122, v1126);
                            let v1128 = constructor_output_xreg(ctx, v1127);
                            let v1129 = Some(v1128);
                            // Rule at src\isa\riscv64\lower.isle line 1088.
                            return v1129;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1014 = C::value_regs_get(ctx, v549, 0x0);
                            let v1015 = C::xreg_new(ctx, v1014);
                            let v1070 = C::put_in_regs(ctx, v548);
                            let v1071 = C::value_regs_get(ctx, v1070, 0x1);
                            let v1072 = C::xreg_new(ctx, v1071);
                            let v1073 = C::xreg_to_reg(ctx, v1072);
                            let v1074 = constructor_lower_ctz(ctx, I64, v1073);
                            let v1075 = C::xreg_new(ctx, v1074);
                            let v1076 = C::xreg_to_reg(ctx, v1015);
                            let v1077 = constructor_lower_ctz(ctx, I64, v1076);
                            let v1078 = C::xreg_new(ctx, v1077);
                            let v1079 = constructor_cmp_eqz(ctx, v1015);
                            let v1080 = C::zero_reg(ctx);
                            let v1081 = constructor_gen_select_xreg(ctx, v1079, v1075, v1080);
                            let v1082 = constructor_rv_add(ctx, v1078, v1081);
                            let v1084 = constructor_imm(ctx, I64, 0x0);
                            let v1083 = C::xreg_to_reg(ctx, v1082);
                            let v1085 = C::value_regs(ctx, v1083, v1084);
                            let v1086 = C::output(ctx, v1085);
                            let v1087 = Some(v1086);
                            // Rule at src\isa\riscv64\lower.isle line 1039.
                            return v1087;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1066 = C::put_in_reg(ctx, v548);
                            let v1067 = constructor_lower_ctz(ctx, v714, v1066);
                            let v1068 = constructor_output_reg(ctx, v1067);
                            let v1069 = Some(v1068);
                            // Rule at src\isa\riscv64\lower.isle line 1036.
                            return v1069;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1045 = C::value_regs_get(ctx, v549, 0x1);
                            let v1046 = C::xreg_new(ctx, v1045);
                            let v1059 = constructor_gen_bswap(ctx, I64, v1046);
                            let v1018 = C::put_in_regs(ctx, v548);
                            let v1049 = C::value_regs_get(ctx, v1018, 0x0);
                            let v1050 = C::xreg_new(ctx, v1049);
                            let v1061 = constructor_gen_bswap(ctx, I64, v1050);
                            let v1060 = C::xreg_to_reg(ctx, v1059);
                            let v1062 = C::xreg_to_reg(ctx, v1061);
                            let v1063 = C::value_regs(ctx, v1060, v1062);
                            let v1064 = C::output(ctx, v1063);
                            let v1065 = Some(v1064);
                            // Rule at src\isa\riscv64\lower.isle line 996.
                            return v1065;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v731 = C::ty_int(ctx, v714);
                            if let Some(v732) = v731 {
                                let v1003 = constructor_put_in_xreg(ctx, v548);
                                let v1056 = constructor_gen_bswap(ctx, v732, v1003);
                                let v1057 = constructor_output_xreg(ctx, v1056);
                                let v1058 = Some(v1057);
                                // Rule at src\isa\riscv64\lower.isle line 993.
                                return v1058;
                            }
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1219 = constructor_u64_to_uimm5(ctx, 0x1);
                            if let Some(v1220) = v1219 {
                                let v1222 = constructor_u64_to_uimm5(ctx, 0x2);
                                if let Some(v1223) = v1222 {
                                    let v1225 = constructor_u64_to_uimm5(ctx, 0x4);
                                    if let Some(v1226) = v1225 {
                                        let v1227 = C::lane_type(ctx, v12);
                                        let v1229 = C::ty_mask(ctx, v1227);
                                        let v1230 = C::u64_and(ctx, 0x5555555555555555, v1229);
                                        let v1231 = constructor_imm(ctx, v1227, v1230);
                                        let v1232 = C::xreg_new(ctx, v1231);
                                        let v1233 = constructor_put_in_vreg(ctx, v548);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v1234 =
                                            constructor_rv_vsrl_vi(ctx, v1233, v1220, v185, v186);
                                        let v1235 =
                                            constructor_rv_vand_vx(ctx, v1234, v1232, v185, v186);
                                        let v1236 = constructor_put_in_vreg(ctx, v548);
                                        let v1237 =
                                            constructor_rv_vsub_vv(ctx, v1236, v1235, v185, v186);
                                        let v1239 = C::u64_and(ctx, 0x3333333333333333, v1229);
                                        let v1240 = constructor_imm(ctx, v1227, v1239);
                                        let v1241 = C::xreg_new(ctx, v1240);
                                        let v1242 =
                                            constructor_rv_vsrl_vi(ctx, v1237, v1223, v185, v186);
                                        let v1243 =
                                            constructor_rv_vand_vx(ctx, v1242, v1241, v185, v186);
                                        let v1244 =
                                            constructor_rv_vand_vx(ctx, v1237, v1241, v185, v186);
                                        let v1245 =
                                            constructor_rv_vadd_vv(ctx, v1244, v1243, v185, v186);
                                        let v1247 = C::u64_and(ctx, 0xF0F0F0F0F0F0F0F, v1229);
                                        let v1248 = constructor_imm(ctx, v1227, v1247);
                                        let v1249 = C::xreg_new(ctx, v1248);
                                        let v1250 =
                                            constructor_rv_vsrl_vi(ctx, v1245, v1226, v185, v186);
                                        let v1251 =
                                            constructor_rv_vadd_vv(ctx, v1245, v1250, v185, v186);
                                        let v1252 =
                                            constructor_rv_vand_vx(ctx, v1251, v1249, v185, v186);
                                        let v1254 = C::u64_and(ctx, 0x101010101010101, v1229);
                                        let v1255 = constructor_imm(ctx, v1227, v1254);
                                        let v1256 = C::xreg_new(ctx, v1255);
                                        let v1257 =
                                            constructor_rv_vmul_vx(ctx, v1252, v1256, v185, v186);
                                        let v1258 = C::ty_bits(ctx, v1227);
                                        let v1259 = C::u8_as_u64(ctx, v1258);
                                        let v1261 = C::u64_sub(ctx, v1259, 0x8);
                                        let v1262 = constructor_imm(ctx, I64, v1261);
                                        let v1263 = C::xreg_new(ctx, v1262);
                                        let v1264 =
                                            constructor_rv_vsrl_vx(ctx, v1257, v1263, v185, v186);
                                        let v1265 = constructor_output_vreg(ctx, v1264);
                                        let v1266 = Some(v1265);
                                        // Rule at src\isa\riscv64\lower.isle line 1190.
                                        return v1266;
                                    }
                                }
                            }
                        }
                        let v748 = C::has_zbb(ctx);
                        if v748 == true {
                            match v3 {
                                I32 => {
                                    let v1003 = constructor_put_in_xreg(ctx, v548);
                                    let v1205 = constructor_rv_cpopw(ctx, v1003);
                                    let v1206 = constructor_output_xreg(ctx, v1205);
                                    let v1207 = Some(v1206);
                                    // Rule at src\isa\riscv64\lower.isle line 1165.
                                    return v1207;
                                }
                                I128 => {
                                    let v549 = C::put_in_regs(ctx, v548);
                                    let v1014 = C::value_regs_get(ctx, v549, 0x0);
                                    let v1015 = C::xreg_new(ctx, v1014);
                                    let v1208 = constructor_rv_cpop(ctx, v1015);
                                    let v1209 = C::value_regs_get(ctx, v549, 0x1);
                                    let v1210 = C::xreg_new(ctx, v1209);
                                    let v1211 = constructor_rv_cpop(ctx, v1210);
                                    let v1212 = constructor_rv_add(ctx, v1208, v1211);
                                    let v1214 = constructor_imm(ctx, I64, 0x0);
                                    let v1213 = C::xreg_to_reg(ctx, v1212);
                                    let v1215 = C::value_regs(ctx, v1213, v1214);
                                    let v1216 = C::output(ctx, v1215);
                                    let v1217 = Some(v1216);
                                    // Rule at src\isa\riscv64\lower.isle line 1169.
                                    return v1217;
                                }
                                _ => {}
                            }
                            let v713 = C::fits_in_64(ctx, v3);
                            if let Some(v714) = v713 {
                                let v1103 = constructor_zext(ctx, v548);
                                let v1202 = constructor_rv_cpop(ctx, v1103);
                                let v1203 = constructor_output_xreg(ctx, v1202);
                                let v1204 = Some(v1203);
                                // Rule at src\isa\riscv64\lower.isle line 1161.
                                return v1204;
                            }
                        }
                        if v3 == I128 {
                            let v549 = C::put_in_regs(ctx, v548);
                            let v1014 = C::value_regs_get(ctx, v549, 0x0);
                            let v1015 = C::xreg_new(ctx, v1014);
                            let v1190 = constructor_gen_popcnt(ctx, v1015);
                            let v1191 = C::xreg_new(ctx, v1190);
                            let v1192 = C::value_regs_get(ctx, v549, 0x1);
                            let v1193 = C::xreg_new(ctx, v1192);
                            let v1194 = constructor_gen_popcnt(ctx, v1193);
                            let v1195 = C::xreg_new(ctx, v1194);
                            let v1196 = constructor_rv_add(ctx, v1191, v1195);
                            let v1198 = constructor_imm(ctx, I64, 0x0);
                            let v1197 = C::xreg_to_reg(ctx, v1196);
                            let v1199 = C::value_regs(ctx, v1197, v1198);
                            let v1200 = C::output(ctx, v1199);
                            let v1201 = Some(v1200);
                            // Rule at src\isa\riscv64\lower.isle line 1153.
                            return v1201;
                        }
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1103 = constructor_zext(ctx, v548);
                            let v1187 = constructor_gen_popcnt(ctx, v1103);
                            let v1188 = constructor_output_reg(ctx, v1187);
                            let v1189 = Some(v1188);
                            // Rule at src\isa\riscv64\lower.isle line 1150.
                            return v1189;
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1613 = constructor_rv_vfsqrt_v(ctx, v553, v185, v186);
                            let v1614 = constructor_output_vreg(ctx, v1613);
                            let v1615 = Some(v1614);
                            // Rule at src\isa\riscv64\lower.isle line 1596.
                            return v1615;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v1610 = constructor_rv_fsqrt(ctx, v741, &FRM::RNE, v1007);
                            let v1611 = constructor_output_freg(ctx, v1610);
                            let v1612 = Some(v1611);
                            // Rule at src\isa\riscv64\lower.isle line 1593.
                            return v1612;
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1578 = constructor_rv_vfneg_v(ctx, v553, v185, v186);
                            let v1579 = constructor_output_vreg(ctx, v1578);
                            let v1580 = Some(v1579);
                            // Rule at src\isa\riscv64\lower.isle line 1517.
                            return v1580;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v1575 = constructor_rv_fneg(ctx, v741, v1007);
                            let v1576 = constructor_output_freg(ctx, v1575);
                            let v1577 = Some(v1576);
                            // Rule at src\isa\riscv64\lower.isle line 1514.
                            return v1577;
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v1572 = constructor_rv_vfabs_v(ctx, v553, v185, v186);
                            let v1573 = constructor_output_vreg(ctx, v1572);
                            let v1574 = Some(v1573);
                            // Rule at src\isa\riscv64\lower.isle line 1510.
                            return v1574;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v1569 = constructor_rv_fabs(ctx, v741, v1007);
                            let v1570 = constructor_output_freg(ctx, v1569);
                            let v1571 = Some(v1570);
                            // Rule at src\isa\riscv64\lower.isle line 1507.
                            return v1571;
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v2346 = constructor_gen_vec_round(ctx, v553, &FRM::RUP, v12);
                            let v2347 = constructor_output_vreg(ctx, v2346);
                            let v2348 = Some(v2347);
                            // Rule at src\isa\riscv64\lower.isle line 2504.
                            return v2348;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v2343 = constructor_gen_float_round(ctx, &FRM::RUP, v1007, v741);
                            let v2344 = constructor_output_freg(ctx, v2343);
                            let v2345 = Some(v2344);
                            // Rule at src\isa\riscv64\lower.isle line 2501.
                            return v2345;
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v2353 = constructor_gen_vec_round(ctx, v553, &FRM::RDN, v12);
                            let v2354 = constructor_output_vreg(ctx, v2353);
                            let v2355 = Some(v2354);
                            // Rule at src\isa\riscv64\lower.isle line 2511.
                            return v2355;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v2350 = constructor_gen_float_round(ctx, &FRM::RDN, v1007, v741);
                            let v2351 = constructor_output_freg(ctx, v2350);
                            let v2352 = Some(v2351);
                            // Rule at src\isa\riscv64\lower.isle line 2508.
                            return v2352;
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v2360 = constructor_gen_vec_round(ctx, v553, &FRM::RTZ, v12);
                            let v2361 = constructor_output_vreg(ctx, v2360);
                            let v2362 = Some(v2361);
                            // Rule at src\isa\riscv64\lower.isle line 2518.
                            return v2362;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v2357 = constructor_gen_float_round(ctx, &FRM::RTZ, v1007, v741);
                            let v2358 = constructor_output_freg(ctx, v2357);
                            let v2359 = Some(v2358);
                            // Rule at src\isa\riscv64\lower.isle line 2515.
                            return v2359;
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v2366 = constructor_gen_vec_round(ctx, v553, &FRM::RNE, v12);
                            let v2367 = constructor_output_vreg(ctx, v2366);
                            let v2368 = Some(v2367);
                            // Rule at src\isa\riscv64\lower.isle line 2525.
                            return v2368;
                        }
                        let v740 = C::ty_scalar_float(ctx, v3);
                        if let Some(v741) = v740 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v2363 = constructor_gen_float_round(ctx, &FRM::RNE, v1007, v741);
                            let v2364 = constructor_output_freg(ctx, v2363);
                            let v2365 = Some(v2364);
                            // Rule at src\isa\riscv64\lower.isle line 2522.
                            return v2365;
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v1003 = constructor_put_in_xreg(ctx, v548);
                    let v1821 = constructor_rv_seqz(ctx, v1003);
                    let v1822 = constructor_output_xreg(ctx, v1821);
                    let v1823 = Some(v1822);
                    // Rule at src\isa\riscv64\lower.isle line 1849.
                    return v1823;
                }
                &Opcode::IsInvalid => {
                    let v1003 = constructor_put_in_xreg(ctx, v548);
                    let v1825 = C::imm12_const(ctx, 0x1);
                    let v1826 = constructor_rv_addi(ctx, v1003, v1825);
                    let v1827 = constructor_rv_seqz(ctx, v1826);
                    let v1828 = constructor_output_xreg(ctx, v1827);
                    let v1829 = Some(v1828);
                    // Rule at src\isa\riscv64\lower.isle line 1855.
                    return v1829;
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v2717 = C::i64_from_iconst(ctx, v548);
                            if let Some(v2718) = v2717 {
                                let v2719 = C::imm5_from_i64(ctx, v2718);
                                if let Some(v2720) = v2719 {
                                    let v2704 = C::zero_reg(ctx);
                                    let v186 = C::vstate_from_type(ctx, v12);
                                    let v2705 = constructor_rv_vmv_vx(ctx, v2704, v186);
                                    let v2712 = constructor_gen_vec_mask(ctx, 0x1);
                                    let v2721 =
                                        constructor_rv_vmerge_vim(ctx, v2705, v2720, v2712, v186);
                                    let v2722 = constructor_output_vreg(ctx, v2721);
                                    let v2723 = Some(v2722);
                                    // Rule at src\isa\riscv64\lower.isle line 2906.
                                    return v2723;
                                }
                            }
                            let v789 = C::ty_vector_not_float(ctx, v12);
                            if let Some(v790) = v789 {
                                let v2704 = C::zero_reg(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2705 = constructor_rv_vmv_vx(ctx, v2704, v186);
                                let v2712 = constructor_gen_vec_mask(ctx, 0x1);
                                let v2713 = constructor_put_in_xreg(ctx, v548);
                                let v2714 =
                                    constructor_rv_vmerge_vxm(ctx, v2705, v2713, v2712, v186);
                                let v2715 = constructor_output_vreg(ctx, v2714);
                                let v2716 = Some(v2715);
                                // Rule at src\isa\riscv64\lower.isle line 2900.
                                return v2716;
                            }
                            let v2702 = C::ty_vector_float(ctx, v12);
                            if let Some(v2703) = v2702 {
                                let v2704 = C::zero_reg(ctx);
                                let v186 = C::vstate_from_type(ctx, v12);
                                let v2705 = constructor_rv_vmv_vx(ctx, v2704, v186);
                                let v2706 = constructor_put_in_freg(ctx, v548);
                                let v2707 = constructor_rv_vfmv_sf(ctx, v2706, v186);
                                let v2708 = constructor_gen_vec_mask(ctx, 0x1);
                                let v2709 =
                                    constructor_rv_vmerge_vvm(ctx, v2705, v2707, v2708, v186);
                                let v2710 = constructor_output_vreg(ctx, v2709);
                                let v2711 = Some(v2710);
                                // Rule at src\isa\riscv64\lower.isle line 2893.
                                return v2711;
                            }
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2407 = constructor_lower_bmask(ctx, v548, v3);
                        let v2408 = C::output(ctx, v2407);
                        let v2409 = Some(v2408);
                        // Rule at src\isa\riscv64\lower.isle line 2557.
                        return v2409;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v549 = C::put_in_regs(ctx, v548);
                        let v1014 = C::value_regs_get(ctx, v549, 0x0);
                        let v1707 = constructor_output_reg(ctx, v1014);
                        let v1708 = Some(v1707);
                        // Rule at src\isa\riscv64\lower.isle line 1691.
                        return v1708;
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1029 = C::def_inst(ctx, v548);
                            if let Some(v1030) = v1029 {
                                let v1031 = &C::inst_data(ctx, v1030);
                                if let &InstructionData::Unary {
                                    opcode: ref v2618,
                                    arg: v2619,
                                } = v1031
                                {
                                    if let &Opcode::SwidenLow = v2618 {
                                        let v2632 = C::def_inst(ctx, v2619);
                                        if let Some(v2633) = v2632 {
                                            let v2634 = &C::inst_data(ctx, v2633);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2635,
                                                arg: v2636,
                                            } = v2634
                                            {
                                                if let &Opcode::SwidenLow = v2635 {
                                                    let v2642 = constructor_put_in_vreg(ctx, v2636);
                                                    let v185 = &constructor_unmasked(ctx);
                                                    let v186 = C::vstate_from_type(ctx, v12);
                                                    let v2663 = constructor_rv_vsext_vf8(
                                                        ctx, v2642, v185, v186,
                                                    );
                                                    let v2664 = constructor_output_vreg(ctx, v2663);
                                                    let v2665 = Some(v2664);
                                                    // Rule at src\isa\riscv64\lower.isle line 2824.
                                                    return v2665;
                                                }
                                            }
                                        }
                                        let v2626 = constructor_put_in_vreg(ctx, v2619);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2660 =
                                            constructor_rv_vsext_vf4(ctx, v2626, v185, v186);
                                        let v2661 = constructor_output_vreg(ctx, v2660);
                                        let v2662 = Some(v2661);
                                        // Rule at src\isa\riscv64\lower.isle line 2821.
                                        return v2662;
                                    }
                                }
                            }
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2657 = constructor_rv_vsext_vf2(ctx, v553, v185, v186);
                            let v2658 = constructor_output_vreg(ctx, v2657);
                            let v2659 = Some(v2658);
                            // Rule at src\isa\riscv64\lower.isle line 2818.
                            return v2659;
                        }
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1029 = C::def_inst(ctx, v548);
                            if let Some(v1030) = v1029 {
                                let v1031 = &C::inst_data(ctx, v1030);
                                if let &InstructionData::Unary {
                                    opcode: ref v2618,
                                    arg: v2619,
                                } = v1031
                                {
                                    if let &Opcode::SwidenHigh = v2618 {
                                        let v2632 = C::def_inst(ctx, v2619);
                                        if let Some(v2633) = v2632 {
                                            let v2634 = &C::inst_data(ctx, v2633);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2635,
                                                arg: v2636,
                                            } = v2634
                                            {
                                                if let &Opcode::SwidenHigh = v2635 {
                                                    let v2637 = C::value_type(ctx, v2636);
                                                    let v2638 = C::ty_lane_count(ctx, v2637);
                                                    let v2622 = C::ty_lane_count(ctx, v12);
                                                    let v2639 = C::u64_sub(ctx, v2638, v2622);
                                                    let v2640 = C::uimm5_from_u64(ctx, v2639);
                                                    if let Some(v2641) = v2640 {
                                                        let v2642 =
                                                            constructor_put_in_vreg(ctx, v2636);
                                                        let v185 = &constructor_unmasked(ctx);
                                                        let v2643 = C::vstate_from_type(ctx, v2637);
                                                        let v2644 = constructor_rv_vslidedown_vi(
                                                            ctx, v2642, v2641, v185, v2643,
                                                        );
                                                        let v186 = C::vstate_from_type(ctx, v12);
                                                        let v2645 = constructor_rv_vsext_vf8(
                                                            ctx, v2644, v185, v186,
                                                        );
                                                        let v2646 =
                                                            constructor_output_vreg(ctx, v2645);
                                                        let v2647 = Some(v2646);
                                                        // Rule at src\isa\riscv64\lower.isle line 2798.
                                                        return v2647;
                                                    }
                                                }
                                            }
                                        }
                                        let v2620 = C::value_type(ctx, v2619);
                                        let v2621 = C::ty_lane_count(ctx, v2620);
                                        let v2622 = C::ty_lane_count(ctx, v12);
                                        let v2623 = C::u64_sub(ctx, v2621, v2622);
                                        let v2624 = C::uimm5_from_u64(ctx, v2623);
                                        if let Some(v2625) = v2624 {
                                            let v2626 = constructor_put_in_vreg(ctx, v2619);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v2627 = C::vstate_from_type(ctx, v2620);
                                            let v2628 = constructor_rv_vslidedown_vi(
                                                ctx, v2626, v2625, v185, v2627,
                                            );
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v2629 =
                                                constructor_rv_vsext_vf4(ctx, v2628, v185, v186);
                                            let v2630 = constructor_output_vreg(ctx, v2629);
                                            let v2631 = Some(v2630);
                                            // Rule at src\isa\riscv64\lower.isle line 2794.
                                            return v2631;
                                        }
                                    }
                                }
                            }
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v1172 = C::value_type(ctx, v548);
                            let v2614 = constructor_gen_slidedown_half(ctx, v1172, v553);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2615 = constructor_rv_vsext_vf2(ctx, v2614, v185, v186);
                            let v2616 = constructor_output_vreg(ctx, v2615);
                            let v2617 = Some(v2616);
                            // Rule at src\isa\riscv64\lower.isle line 2791.
                            return v2617;
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1029 = C::def_inst(ctx, v548);
                            if let Some(v1030) = v1029 {
                                let v1031 = &C::inst_data(ctx, v1030);
                                if let &InstructionData::Unary {
                                    opcode: ref v2618,
                                    arg: v2619,
                                } = v1031
                                {
                                    if let &Opcode::UwidenLow = v2618 {
                                        let v2632 = C::def_inst(ctx, v2619);
                                        if let Some(v2633) = v2632 {
                                            let v2634 = &C::inst_data(ctx, v2633);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2635,
                                                arg: v2636,
                                            } = v2634
                                            {
                                                if let &Opcode::UwidenLow = v2635 {
                                                    let v2642 = constructor_put_in_vreg(ctx, v2636);
                                                    let v185 = &constructor_unmasked(ctx);
                                                    let v186 = C::vstate_from_type(ctx, v12);
                                                    let v2672 = constructor_rv_vzext_vf8(
                                                        ctx, v2642, v185, v186,
                                                    );
                                                    let v2673 = constructor_output_vreg(ctx, v2672);
                                                    let v2674 = Some(v2673);
                                                    // Rule at src\isa\riscv64\lower.isle line 2835.
                                                    return v2674;
                                                }
                                            }
                                        }
                                        let v2626 = constructor_put_in_vreg(ctx, v2619);
                                        let v185 = &constructor_unmasked(ctx);
                                        let v186 = C::vstate_from_type(ctx, v12);
                                        let v2669 =
                                            constructor_rv_vzext_vf4(ctx, v2626, v185, v186);
                                        let v2670 = constructor_output_vreg(ctx, v2669);
                                        let v2671 = Some(v2670);
                                        // Rule at src\isa\riscv64\lower.isle line 2832.
                                        return v2671;
                                    }
                                }
                            }
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2666 = constructor_rv_vzext_vf2(ctx, v553, v185, v186);
                            let v2667 = constructor_output_vreg(ctx, v2666);
                            let v2668 = Some(v2667);
                            // Rule at src\isa\riscv64\lower.isle line 2829.
                            return v2668;
                        }
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1029 = C::def_inst(ctx, v548);
                            if let Some(v1030) = v1029 {
                                let v1031 = &C::inst_data(ctx, v1030);
                                if let &InstructionData::Unary {
                                    opcode: ref v2618,
                                    arg: v2619,
                                } = v1031
                                {
                                    if let &Opcode::UwidenHigh = v2618 {
                                        let v2632 = C::def_inst(ctx, v2619);
                                        if let Some(v2633) = v2632 {
                                            let v2634 = &C::inst_data(ctx, v2633);
                                            if let &InstructionData::Unary {
                                                opcode: ref v2635,
                                                arg: v2636,
                                            } = v2634
                                            {
                                                if let &Opcode::UwidenHigh = v2635 {
                                                    let v2637 = C::value_type(ctx, v2636);
                                                    let v2638 = C::ty_lane_count(ctx, v2637);
                                                    let v2622 = C::ty_lane_count(ctx, v12);
                                                    let v2639 = C::u64_sub(ctx, v2638, v2622);
                                                    let v2640 = C::uimm5_from_u64(ctx, v2639);
                                                    if let Some(v2641) = v2640 {
                                                        let v2642 =
                                                            constructor_put_in_vreg(ctx, v2636);
                                                        let v185 = &constructor_unmasked(ctx);
                                                        let v2643 = C::vstate_from_type(ctx, v2637);
                                                        let v2644 = constructor_rv_vslidedown_vi(
                                                            ctx, v2642, v2641, v185, v2643,
                                                        );
                                                        let v186 = C::vstate_from_type(ctx, v12);
                                                        let v2654 = constructor_rv_vzext_vf8(
                                                            ctx, v2644, v185, v186,
                                                        );
                                                        let v2655 =
                                                            constructor_output_vreg(ctx, v2654);
                                                        let v2656 = Some(v2655);
                                                        // Rule at src\isa\riscv64\lower.isle line 2812.
                                                        return v2656;
                                                    }
                                                }
                                            }
                                        }
                                        let v2620 = C::value_type(ctx, v2619);
                                        let v2621 = C::ty_lane_count(ctx, v2620);
                                        let v2622 = C::ty_lane_count(ctx, v12);
                                        let v2623 = C::u64_sub(ctx, v2621, v2622);
                                        let v2624 = C::uimm5_from_u64(ctx, v2623);
                                        if let Some(v2625) = v2624 {
                                            let v2626 = constructor_put_in_vreg(ctx, v2619);
                                            let v185 = &constructor_unmasked(ctx);
                                            let v2627 = C::vstate_from_type(ctx, v2620);
                                            let v2628 = constructor_rv_vslidedown_vi(
                                                ctx, v2626, v2625, v185, v2627,
                                            );
                                            let v186 = C::vstate_from_type(ctx, v12);
                                            let v2651 =
                                                constructor_rv_vzext_vf4(ctx, v2628, v185, v186);
                                            let v2652 = constructor_output_vreg(ctx, v2651);
                                            let v2653 = Some(v2652);
                                            // Rule at src\isa\riscv64\lower.isle line 2808.
                                            return v2653;
                                        }
                                    }
                                }
                            }
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v1172 = C::value_type(ctx, v548);
                            let v2614 = constructor_gen_slidedown_half(ctx, v1172, v553);
                            let v185 = &constructor_unmasked(ctx);
                            let v186 = C::vstate_from_type(ctx, v12);
                            let v2648 = constructor_rv_vzext_vf2(ctx, v2614, v185, v186);
                            let v2649 = constructor_output_vreg(ctx, v2648);
                            let v2650 = Some(v2649);
                            // Rule at src\isa\riscv64\lower.isle line 2805.
                            return v2650;
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1029 = C::def_inst(ctx, v548);
                            if let Some(v1030) = v1029 {
                                let v1031 = &C::inst_data(ctx, v1030);
                                if let &InstructionData::Load {
                                    opcode: ref v1157,
                                    arg: v1158,
                                    flags: v1159,
                                    offset: v1160,
                                } = v1031
                                {
                                    if let &Opcode::Load = v1157 {
                                        let v1161 = C::sinkable_inst(ctx, v548);
                                        if let Some(v1162) = v1161 {
                                            let v1163 = C::first_result(ctx, v1162);
                                            if let Some(v1164) = v1163 {
                                                let v1166 = C::offset32_to_i32(ctx, v1160);
                                                let v1167 = constructor_amode(ctx, v1158, v1166);
                                                let v1165 = C::value_type(ctx, v1164);
                                                let v1168 =
                                                    &constructor_uextend_load_op(ctx, v1165);
                                                let v1169 = constructor_gen_sunk_load(
                                                    ctx, v1162, v1167, v1168, v1159,
                                                );
                                                let v1170 = constructor_output_reg(ctx, v1169);
                                                let v1171 = Some(v1170);
                                                // Rule at src\isa\riscv64\lower.isle line 1123.
                                                return v1171;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1103 = constructor_zext(ctx, v548);
                            let v1153 = constructor_imm(ctx, I64, 0x0);
                            let v1152 = C::xreg_to_reg(ctx, v1103);
                            let v1154 = C::value_regs(ctx, v1152, v1153);
                            let v1155 = C::output(ctx, v1154);
                            let v1156 = Some(v1155);
                            // Rule at src\isa\riscv64\lower.isle line 1119.
                            return v1156;
                        }
                        if let Some(v714) = v713 {
                            let v1103 = constructor_zext(ctx, v548);
                            let v1150 = constructor_output_xreg(ctx, v1103);
                            let v1151 = Some(v1150);
                            // Rule at src\isa\riscv64\lower.isle line 1116.
                            return v1151;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v713 = C::fits_in_64(ctx, v3);
                        if let Some(v714) = v713 {
                            let v1029 = C::def_inst(ctx, v548);
                            if let Some(v1030) = v1029 {
                                let v1031 = &C::inst_data(ctx, v1030);
                                if let &InstructionData::Load {
                                    opcode: ref v1157,
                                    arg: v1158,
                                    flags: v1159,
                                    offset: v1160,
                                } = v1031
                                {
                                    if let &Opcode::Load = v1157 {
                                        let v1161 = C::sinkable_inst(ctx, v548);
                                        if let Some(v1162) = v1161 {
                                            let v1163 = C::first_result(ctx, v1162);
                                            if let Some(v1164) = v1163 {
                                                let v1166 = C::offset32_to_i32(ctx, v1160);
                                                let v1167 = constructor_amode(ctx, v1158, v1166);
                                                let v1165 = C::value_type(ctx, v1164);
                                                let v1183 =
                                                    &constructor_sextend_load_op(ctx, v1165);
                                                let v1184 = constructor_gen_sunk_load(
                                                    ctx, v1162, v1167, v1183, v1159,
                                                );
                                                let v1185 = constructor_output_reg(ctx, v1184);
                                                let v1186 = Some(v1185);
                                                // Rule at src\isa\riscv64\lower.isle line 1140.
                                                return v1186;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v1118 = constructor_sext(ctx, v548);
                            let v1177 = C::imm12_const(ctx, 0x3F);
                            let v1178 = constructor_rv_srai(ctx, v1118, v1177);
                            let v1175 = C::xreg_to_reg(ctx, v1118);
                            let v1179 = C::xreg_to_reg(ctx, v1178);
                            let v1180 = C::value_regs(ctx, v1175, v1179);
                            let v1181 = C::output(ctx, v1180);
                            let v1182 = Some(v1181);
                            // Rule at src\isa\riscv64\lower.isle line 1135.
                            return v1182;
                        }
                        if let Some(v714) = v713 {
                            let v1118 = constructor_sext(ctx, v548);
                            let v1173 = constructor_output_xreg(ctx, v1118);
                            let v1174 = Some(v1173);
                            // Rule at src\isa\riscv64\lower.isle line 1132.
                            return v1174;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1007 = constructor_put_in_freg(ctx, v548);
                    let v1709 = constructor_rv_fcvtds(ctx, v1007);
                    let v1710 = constructor_output_freg(ctx, v1709);
                    let v1711 = Some(v1710);
                    // Rule at src\isa\riscv64\lower.isle line 1695.
                    return v1711;
                }
                &Opcode::Fdemote => {
                    let v1007 = constructor_put_in_freg(ctx, v548);
                    let v1715 = constructor_rv_fcvtsd(ctx, &FRM::RNE, v1007);
                    let v1716 = constructor_output_freg(ctx, v1715);
                    let v1717 = Some(v1716);
                    // Rule at src\isa\riscv64\lower.isle line 1705.
                    return v1717;
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            if v12 == F32X4 {
                                let v1719 = C::i8_to_imm5(ctx, 0x0);
                                if let Some(v1720) = v1719 {
                                    let v553 = constructor_put_in_vreg(ctx, v548);
                                    let v185 = &constructor_unmasked(ctx);
                                    let v186 = C::vstate_from_type(ctx, v12);
                                    let v1721 = C::vstate_mf2(ctx, v186);
                                    let v1722 = constructor_rv_vfncvt_f_f_w(ctx, v553, v185, v1721);
                                    let v1724 = constructor_gen_vec_mask(ctx, 0xC);
                                    let v1725 =
                                        constructor_rv_vmerge_vim(ctx, v1722, v1720, v1724, v186);
                                    let v1726 = constructor_output_vreg(ctx, v1725);
                                    let v1727 = Some(v1726);
                                    // Rule at src\isa\riscv64\lower.isle line 1712.
                                    return v1727;
                                }
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v200 = C::ty_half_width(ctx, v12);
                            if let Some(v201) = v200 {
                                let v553 = constructor_put_in_vreg(ctx, v548);
                                let v185 = &constructor_unmasked(ctx);
                                let v205 = C::vstate_from_type(ctx, v201);
                                let v206 = C::vstate_mf2(ctx, v205);
                                let v1712 = constructor_rv_vfwcvt_f_f_v(ctx, v553, v185, v206);
                                let v1713 = constructor_output_vreg(ctx, v1712);
                                let v1714 = Some(v1713);
                                // Rule at src\isa\riscv64\lower.isle line 1700.
                                return v1714;
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1007 = constructor_put_in_freg(ctx, v548);
                        let v2199 = constructor_put_in_freg(ctx, v548);
                        let v1172 = C::value_type(ctx, v548);
                        let v2200 = constructor_rv_feq(ctx, v1172, v1007, v2199);
                        let v2202 =
                            constructor_gen_trapz(ctx, v2200, &TrapCode::BadConversionToInteger);
                        let v2204 = C::fcvt_umin_bound(ctx, v1172, false);
                        let v2205 = constructor_imm(ctx, v1172, v2204);
                        let v2206 = C::freg_new(ctx, v2205);
                        let v2207 = constructor_put_in_freg(ctx, v548);
                        let v2208 = constructor_rv_fle(ctx, v1172, v2207, v2206);
                        let v2210 = constructor_gen_trapnz(ctx, v2208, &TrapCode::IntegerOverflow);
                        let v3 = C::value_type(ctx, v2);
                        let v2211 = C::fcvt_umax_bound(ctx, v1172, v3, false);
                        let v2212 = constructor_imm(ctx, v1172, v2211);
                        let v2213 = C::freg_new(ctx, v2212);
                        let v2214 = constructor_put_in_freg(ctx, v548);
                        let v2215 = constructor_rv_fge(ctx, v1172, v2214, v2213);
                        let v2216 = constructor_gen_trapnz(ctx, v2215, &TrapCode::IntegerOverflow);
                        let v2217 = constructor_put_in_freg(ctx, v548);
                        let v2218 = constructor_lower_inbounds_fcvt_to_uint(ctx, v3, v1172, v2217);
                        let v2219 = constructor_output_xreg(ctx, v2218);
                        let v2220 = Some(v2219);
                        // Rule at src\isa\riscv64\lower.isle line 2319.
                        return v2220;
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1007 = constructor_put_in_freg(ctx, v548);
                        let v2199 = constructor_put_in_freg(ctx, v548);
                        let v1172 = C::value_type(ctx, v548);
                        let v2200 = constructor_rv_feq(ctx, v1172, v1007, v2199);
                        let v2202 =
                            constructor_gen_trapz(ctx, v2200, &TrapCode::BadConversionToInteger);
                        let v3 = C::value_type(ctx, v2);
                        let v2221 = C::fcvt_smin_bound(ctx, v1172, v3, false);
                        let v2222 = constructor_imm(ctx, v1172, v2221);
                        let v2223 = C::freg_new(ctx, v2222);
                        let v2207 = constructor_put_in_freg(ctx, v548);
                        let v2224 = constructor_rv_fle(ctx, v1172, v2207, v2223);
                        let v2225 = constructor_gen_trapnz(ctx, v2224, &TrapCode::IntegerOverflow);
                        let v2226 = C::fcvt_smax_bound(ctx, v1172, v3, false);
                        let v2227 = constructor_imm(ctx, v1172, v2226);
                        let v2228 = C::freg_new(ctx, v2227);
                        let v2214 = constructor_put_in_freg(ctx, v548);
                        let v2229 = constructor_rv_fge(ctx, v1172, v2214, v2228);
                        let v2230 = constructor_gen_trapnz(ctx, v2229, &TrapCode::IntegerOverflow);
                        let v2217 = constructor_put_in_freg(ctx, v548);
                        let v2231 = constructor_lower_inbounds_fcvt_to_sint(ctx, v3, v1172, v2217);
                        let v2232 = constructor_output_xreg(ctx, v2231);
                        let v2233 = Some(v2232);
                        // Rule at src\isa\riscv64\lower.isle line 2336.
                        return v2233;
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1719 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1720) = v1719 {
                                let v553 = constructor_put_in_vreg(ctx, v548);
                                let v2240 = constructor_put_in_vreg(ctx, v548);
                                let v185 = &constructor_unmasked(ctx);
                                let v1172 = C::value_type(ctx, v548);
                                let v2241 = C::vstate_from_type(ctx, v1172);
                                let v2242 = constructor_rv_vmfne_vv(ctx, v553, v2240, v185, v2241);
                                let v2243 = constructor_put_in_vreg(ctx, v548);
                                let v2252 =
                                    constructor_rv_vfcvt_rtz_xu_f_v(ctx, v2243, v185, v2241);
                                let v2253 =
                                    constructor_rv_vmerge_vim(ctx, v2252, v1720, v2242, v2241);
                                let v2254 = constructor_output_vreg(ctx, v2253);
                                let v2255 = Some(v2254);
                                // Rule at src\isa\riscv64\lower.isle line 2414.
                                return v2255;
                            }
                        }
                        let v1172 = C::value_type(ctx, v548);
                        let v2234 = C::ty_scalar_float(ctx, v1172);
                        if let Some(v2235) = v2234 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v2199 = constructor_put_in_freg(ctx, v548);
                            let v2248 = constructor_lower_fcvt_to_uint_sat(ctx, v2235, v3, v2199);
                            let v2249 =
                                constructor_handle_fcvt_to_int_nan(ctx, v2235, v1007, v2248);
                            let v2250 = constructor_output_xreg(ctx, v2249);
                            let v2251 = Some(v2250);
                            // Rule at src\isa\riscv64\lower.isle line 2395.
                            return v2251;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v1719 = C::i8_to_imm5(ctx, 0x0);
                            if let Some(v1720) = v1719 {
                                let v553 = constructor_put_in_vreg(ctx, v548);
                                let v2240 = constructor_put_in_vreg(ctx, v548);
                                let v185 = &constructor_unmasked(ctx);
                                let v1172 = C::value_type(ctx, v548);
                                let v2241 = C::vstate_from_type(ctx, v1172);
                                let v2242 = constructor_rv_vmfne_vv(ctx, v553, v2240, v185, v2241);
                                let v2243 = constructor_put_in_vreg(ctx, v548);
                                let v2244 = constructor_rv_vfcvt_rtz_x_f_v(ctx, v2243, v185, v2241);
                                let v2245 =
                                    constructor_rv_vmerge_vim(ctx, v2244, v1720, v2242, v2241);
                                let v2246 = constructor_output_vreg(ctx, v2245);
                                let v2247 = Some(v2246);
                                // Rule at src\isa\riscv64\lower.isle line 2387.
                                return v2247;
                            }
                        }
                        let v1172 = C::value_type(ctx, v548);
                        let v2234 = C::ty_scalar_float(ctx, v1172);
                        if let Some(v2235) = v2234 {
                            let v1007 = constructor_put_in_freg(ctx, v548);
                            let v2199 = constructor_put_in_freg(ctx, v548);
                            let v2236 = constructor_lower_fcvt_to_sint_sat(ctx, v2235, v3, v2199);
                            let v2237 =
                                constructor_handle_fcvt_to_int_nan(ctx, v2235, v1007, v2236);
                            let v2238 = constructor_output_xreg(ctx, v2237);
                            let v2239 = Some(v2238);
                            // Rule at src\isa\riscv64\lower.isle line 2352.
                            return v2239;
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v1172 = C::value_type(ctx, v548);
                            let v2241 = C::vstate_from_type(ctx, v1172);
                            let v2297 = constructor_rv_vfcvt_f_xu_v(ctx, v553, v185, v2241);
                            let v2298 = constructor_output_vreg(ctx, v2297);
                            let v2299 = Some(v2298);
                            // Rule at src\isa\riscv64\lower.isle line 2461.
                            return v2299;
                        }
                        match v3 {
                            F32 => {
                                let v1172 = C::value_type(ctx, v548);
                                match v1172 {
                                    I32 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2282 = constructor_rv_fcvtswu(ctx, &FRM::RNE, v1003);
                                        let v2283 = constructor_output_freg(ctx, v2282);
                                        let v2284 = Some(v2283);
                                        // Rule at src\isa\riscv64\lower.isle line 2446.
                                        return v2284;
                                    }
                                    I64 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2285 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v1003);
                                        let v2286 = constructor_output_freg(ctx, v2285);
                                        let v2287 = Some(v2286);
                                        // Rule at src\isa\riscv64\lower.isle line 2449.
                                        return v2287;
                                    }
                                    _ => {}
                                }
                                let v2256 = C::fits_in_16(ctx, v1172);
                                if let Some(v2257) = v2256 {
                                    let v1103 = constructor_zext(ctx, v548);
                                    let v2279 = constructor_rv_fcvtslu(ctx, &FRM::RNE, v1103);
                                    let v2280 = constructor_output_freg(ctx, v2279);
                                    let v2281 = Some(v2280);
                                    // Rule at src\isa\riscv64\lower.isle line 2443.
                                    return v2281;
                                }
                            }
                            F64 => {
                                let v1172 = C::value_type(ctx, v548);
                                match v1172 {
                                    I32 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2291 = constructor_rv_fcvtdwu(ctx, v1003);
                                        let v2292 = constructor_output_freg(ctx, v2291);
                                        let v2293 = Some(v2292);
                                        // Rule at src\isa\riscv64\lower.isle line 2455.
                                        return v2293;
                                    }
                                    I64 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2294 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v1003);
                                        let v2295 = constructor_output_freg(ctx, v2294);
                                        let v2296 = Some(v2295);
                                        // Rule at src\isa\riscv64\lower.isle line 2458.
                                        return v2296;
                                    }
                                    _ => {}
                                }
                                let v2256 = C::fits_in_16(ctx, v1172);
                                if let Some(v2257) = v2256 {
                                    let v1103 = constructor_zext(ctx, v548);
                                    let v2288 = constructor_rv_fcvtdlu(ctx, &FRM::RNE, v1103);
                                    let v2289 = constructor_output_freg(ctx, v2288);
                                    let v2290 = Some(v2289);
                                    // Rule at src\isa\riscv64\lower.isle line 2452.
                                    return v2290;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v11 = C::ty_vec_fits_in_register(ctx, v3);
                        if let Some(v12) = v11 {
                            let v553 = constructor_put_in_vreg(ctx, v548);
                            let v185 = &constructor_unmasked(ctx);
                            let v1172 = C::value_type(ctx, v548);
                            let v2241 = C::vstate_from_type(ctx, v1172);
                            let v2276 = constructor_rv_vfcvt_f_x_v(ctx, v553, v185, v2241);
                            let v2277 = constructor_output_vreg(ctx, v2276);
                            let v2278 = Some(v2277);
                            // Rule at src\isa\riscv64\lower.isle line 2439.
                            return v2278;
                        }
                        match v3 {
                            F32 => {
                                let v1172 = C::value_type(ctx, v548);
                                match v1172 {
                                    I32 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2261 = constructor_rv_fcvtsw(ctx, &FRM::RNE, v1003);
                                        let v2262 = constructor_output_freg(ctx, v2261);
                                        let v2263 = Some(v2262);
                                        // Rule at src\isa\riscv64\lower.isle line 2424.
                                        return v2263;
                                    }
                                    I64 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2264 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v1003);
                                        let v2265 = constructor_output_freg(ctx, v2264);
                                        let v2266 = Some(v2265);
                                        // Rule at src\isa\riscv64\lower.isle line 2427.
                                        return v2266;
                                    }
                                    _ => {}
                                }
                                let v2256 = C::fits_in_16(ctx, v1172);
                                if let Some(v2257) = v2256 {
                                    let v1118 = constructor_sext(ctx, v548);
                                    let v2258 = constructor_rv_fcvtsl(ctx, &FRM::RNE, v1118);
                                    let v2259 = constructor_output_freg(ctx, v2258);
                                    let v2260 = Some(v2259);
                                    // Rule at src\isa\riscv64\lower.isle line 2421.
                                    return v2260;
                                }
                            }
                            F64 => {
                                let v1172 = C::value_type(ctx, v548);
                                match v1172 {
                                    I32 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2270 = constructor_rv_fcvtdw(ctx, v1003);
                                        let v2271 = constructor_output_freg(ctx, v2270);
                                        let v2272 = Some(v2271);
                                        // Rule at src\isa\riscv64\lower.isle line 2433.
                                        return v2272;
                                    }
                                    I64 => {
                                        let v1003 = constructor_put_in_xreg(ctx, v548);
                                        let v2273 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v1003);
                                        let v2274 = constructor_output_freg(ctx, v2273);
                                        let v2275 = Some(v2274);
                                        // Rule at src\isa\riscv64\lower.isle line 2436.
                                        return v2275;
                                    }
                                    _ => {}
                                }
                                let v2256 = C::fits_in_16(ctx, v1172);
                                if let Some(v2257) = v2256 {
                                    let v1118 = constructor_sext(ctx, v548);
                                    let v2267 = constructor_rv_fcvtdl(ctx, &FRM::RNE, v1118);
                                    let v2268 = constructor_output_freg(ctx, v2267);
                                    let v2269 = Some(v2268);
                                    // Rule at src\isa\riscv64\lower.isle line 2430.
                                    return v2269;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v549 = C::put_in_regs(ctx, v548);
                    let v1014 = C::value_regs_get(ctx, v549, 0x0);
                    let v1015 = C::xreg_new(ctx, v1014);
                    let v1070 = C::put_in_regs(ctx, v548);
                    let v1071 = C::value_regs_get(ctx, v1070, 0x1);
                    let v1072 = C::xreg_new(ctx, v1071);
                    let v1076 = C::xreg_to_reg(ctx, v1015);
                    let v1948 = C::value_reg(ctx, v1076);
                    let v1073 = C::xreg_to_reg(ctx, v1072);
                    let v1949 = C::value_reg(ctx, v1073);
                    let v1950 = C::output_pair(ctx, v1948, v1949);
                    let v1951 = Some(v1950);
                    // Rule at src\isa\riscv64\lower.isle line 1933.
                    return v1951;
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v13,
            constant_handle: v14,
        } => {
            if let &Opcode::Vconst = v13 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v11 = C::ty_vec_fits_in_register(ctx, v3);
                    if let Some(v12) = v11 {
                        let v15 = C::const_to_vconst(ctx, v14);
                        let v16 = constructor_gen_constant(ctx, v12, v15);
                        let v17 = constructor_output_vreg(ctx, v16);
                        let v18 = Some(v17);
                        // Rule at src\isa\riscv64\lower.isle line 14.
                        return v18;
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v2300,
            global_value: v2301,
        } => {
            match v2300 {
                &Opcode::SymbolValue => {
                    let v2302 = C::symbol_value_data(ctx, v2301);
                    if let Some(v2303) = v2302 {
                        let v2307 = C::load_ext_name(ctx, v2303.0, v2303.2);
                        let v2308 = constructor_output_reg(ctx, v2307);
                        let v2309 = Some(v2308);
                        // Rule at src\isa\riscv64\lower.isle line 2466.
                        return v2309;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2302 = C::symbol_value_data(ctx, v2301);
                        if let Some(v2303) = v2302 {
                            let v3 = C::value_type(ctx, v2);
                            let v2310 = &C::tls_model(ctx, v3);
                            if let &TlsModel::ElfGd = v2310 {
                                let v2311 = constructor_elf_tls_get_addr(ctx, v2303.0);
                                let v2312 = constructor_output_reg(ctx, v2311);
                                let v2313 = Some(v2312);
                                // Rule at src\isa\riscv64\lower.isle line 2471.
                                return v2313;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v19,
            imm: v20,
        } => {
            if let &Opcode::F32const = v19 {
                let v21 = C::u32_from_ieee32(ctx, v20);
                let v23 = C::u32_as_u64(ctx, v21);
                let v24 = constructor_imm(ctx, F32, v23);
                let v25 = constructor_output_reg(ctx, v24);
                let v26 = Some(v25);
                // Rule at src\isa\riscv64\lower.isle line 19.
                return v26;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v27,
            imm: v28,
        } => {
            if let &Opcode::F64const = v27 {
                let v29 = C::u64_from_ieee64(ctx, v28);
                let v31 = constructor_imm(ctx, F64, v29);
                let v32 = constructor_output_reg(ctx, v31);
                let v33 = Some(v32);
                // Rule at src\isa\riscv64\lower.isle line 24.
                return v33;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    let v10 = Some(v9);
                    // Rule at src\isa\riscv64\lower.isle line 9.
                    return v10;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd.
pub fn constructor_match_shnadd<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            let v3 = Some(AluOPRRR::Sh1add);
            // Rule at src\isa\riscv64\lower.isle line 61.
            return v3;
        }
        0x2 => {
            let v5 = Some(AluOPRRR::Sh2add);
            // Rule at src\isa\riscv64\lower.isle line 62.
            return v5;
        }
        0x3 => {
            let v7 = Some(AluOPRRR::Sh3add);
            // Rule at src\isa\riscv64\lower.isle line 63.
            return v7;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term match_shnadd_uw.
pub fn constructor_match_shnadd_uw<C: Context>(ctx: &mut C, arg0: Imm64) -> Option<AluOPRRR> {
    let v1 = C::u64_from_imm64(ctx, arg0);
    match v1 {
        0x1 => {
            let v3 = Some(AluOPRRR::Sh1adduw);
            // Rule at src\isa\riscv64\lower.isle line 83.
            return v3;
        }
        0x2 => {
            let v5 = Some(AluOPRRR::Sh2adduw);
            // Rule at src\isa\riscv64\lower.isle line 84.
            return v5;
        }
        0x3 => {
            let v7 = Some(AluOPRRR::Sh3adduw);
            // Rule at src\isa\riscv64\lower.isle line 85.
            return v7;
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term nonzero_divisor.
pub fn constructor_nonzero_divisor<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v2 = C::zero_reg(ctx);
    let v4 = constructor_gen_trapif(
        ctx,
        &IntCC::Equal,
        arg0,
        v2,
        &TrapCode::IntegerDivisionByZero,
    );
    // Rule at src\isa\riscv64\lower.isle line 554.
    return arg0;
}

// Generated as internal constructor for term safe_sdiv_divisor.
pub fn constructor_safe_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: XReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_nonzero_divisor(ctx, arg2);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_as_u64(ctx, v6);
    let v9 = C::u64_sub(ctx, v7, 0x1);
    let v10 = C::u64_shl(ctx, 0xFFFFFFFFFFFFFFFF, v9);
    let v11 = constructor_imm(ctx, I64, v10);
    let v12 = C::xreg_new(ctx, v11);
    let v13 = constructor_rv_xor(ctx, arg1, v12);
    let v14 = constructor_rv_not(ctx, v3);
    let v15 = constructor_rv_or(ctx, v13, v14);
    let v17 = C::zero_reg(ctx);
    let v19 = constructor_gen_trapif(ctx, &IntCC::Equal, v15, v17, &TrapCode::IntegerOverflow);
    // Rule at src\isa\riscv64\lower.isle line 594.
    return v3;
}

// Generated as internal constructor for term gen_bitrev.
pub fn constructor_gen_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    match arg0 {
        I8 => {
            let v15 = C::xreg_to_reg(ctx, arg1);
            let v17 = constructor_gen_brev8(ctx, v15, I8);
            let v18 = C::xreg_new(ctx, v17);
            // Rule at src\isa\riscv64\lower.isle line 984.
            return v18;
        }
        I64 => {
            let v19 = constructor_gen_bswap(ctx, I64, arg1);
            let v20 = C::xreg_to_reg(ctx, v19);
            let v21 = constructor_gen_brev8(ctx, v20, I64);
            let v22 = C::xreg_new(ctx, v21);
            // Rule at src\isa\riscv64\lower.isle line 987.
            return v22;
        }
        _ => {}
    }
    let v1 = C::ty_16_or_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::ty_int(ctx, v2);
        if let Some(v4) = v3 {
            let v7 = C::ty_bits(ctx, v4);
            let v8 = C::u8_as_u64(ctx, v7);
            let v9 = C::u64_sub(ctx, 0x40, v8);
            let v10 = constructor_u64_to_imm12(ctx, v9);
            if let Some(v11) = v10 {
                let v13 = constructor_gen_bitrev(ctx, I64, arg1);
                let v14 = constructor_rv_srli(ctx, v13, v11);
                // Rule at src\isa\riscv64\lower.isle line 980.
                return v14;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bitrev", "src\\isa\\riscv64\\lower.isle line 978"
    )
}

// Generated as internal constructor for term gen_bswap.
pub fn constructor_gen_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: XReg) -> XReg {
    let v24 = C::has_zbb(ctx);
    if v24 == true {
        if arg0 == I64 {
            let v30 = constructor_rv_rev8(ctx, arg1);
            // Rule at src\isa\riscv64\lower.isle line 1031.
            return v30;
        }
        let v20 = C::ty_16_or_32(ctx, arg0);
        if let Some(v21) = v20 {
            let v22 = C::ty_int(ctx, v21);
            if let Some(v23) = v22 {
                let v25 = C::ty_bits(ctx, v23);
                let v26 = C::u8_as_u64(ctx, v25);
                let v27 = C::u64_sub(ctx, 0x40, v26);
                let v28 = constructor_u64_to_imm12(ctx, v27);
                if let Some(v29) = v28 {
                    let v30 = constructor_rv_rev8(ctx, arg1);
                    let v31 = constructor_rv_srli(ctx, v30, v29);
                    // Rule at src\isa\riscv64\lower.isle line 1026.
                    return v31;
                }
            }
        }
    }
    let v2 = C::ty_int_ref_16_to_64(ctx, arg0);
    if let Some(v3) = v2 {
        let v4 = C::ty_half_width(ctx, v3);
        if let Some(v5) = v4 {
            let v6 = C::ty_bits(ctx, v5);
            let v7 = C::u8_as_u64(ctx, v6);
            let v8 = constructor_u64_to_imm12(ctx, v7);
            if let Some(v9) = v8 {
                let v10 = constructor_gen_bswap(ctx, v5, arg1);
                let v11 = constructor_rv_slli(ctx, v10, v9);
                let v12 = constructor_rv_srli(ctx, arg1, v9);
                let v13 = constructor_gen_bswap(ctx, v5, v12);
                let v15 = C::u64_sub(ctx, 0x40, v7);
                let v16 = C::imm_from_bits(ctx, v15);
                let v17 = constructor_rv_slli(ctx, v13, v16);
                let v18 = constructor_rv_srli(ctx, v17, v16);
                let v19 = constructor_rv_or(ctx, v11, v18);
                // Rule at src\isa\riscv64\lower.isle line 1007.
                return v19;
            }
        }
    }
    if arg0 == I8 {
        // Rule at src\isa\riscv64\lower.isle line 1006.
        return arg1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_bswap", "src\\isa\\riscv64\\lower.isle line 1003"
    )
}

// Generated as internal constructor for term gen_clz.
pub fn constructor_gen_clz<C: Context>(ctx: &mut C, arg0: XReg) -> XReg {
    let v4 = C::has_zbb(ctx);
    if v4 == true {
        let v5 = constructor_rv_clz(ctx, arg0);
        // Rule at src\isa\riscv64\lower.isle line 1082.
        return v5;
    }
    let v3 = constructor_gen_cltz(ctx, true, arg0, I64);
    // Rule at src\isa\riscv64\lower.isle line 1080.
    return v3;
}

// Generated as internal constructor for term uextend_load_op.
pub fn constructor_uextend_load_op<C: Context>(ctx: &mut C, arg0: Type) -> LoadOP {
    match arg0 {
        I8 => {
            // Rule at src\isa\riscv64\lower.isle line 1127.
            return LoadOP::Lbu;
        }
        I16 => {
            // Rule at src\isa\riscv64\lower.isle line 1128.
            return LoadOP::Lhu;
        }
        I32 => {
            // Rule at src\isa\riscv64\lower.isle line 1129.
            return LoadOP::Lwu;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uextend_load_op", "src\\isa\\riscv64\\lower.isle line 1126"
    )
}

// Generated as internal constructor for term sextend_load_op.
pub fn constructor_sextend_load_op<C: Context>(ctx: &mut C, arg0: Type) -> LoadOP {
    match arg0 {
        I8 => {
            // Rule at src\isa\riscv64\lower.isle line 1144.
            return LoadOP::Lb;
        }
        I16 => {
            // Rule at src\isa\riscv64\lower.isle line 1145.
            return LoadOP::Lh;
        }
        I32 => {
            // Rule at src\isa\riscv64\lower.isle line 1146.
            return LoadOP::Lw;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sextend_load_op", "src\\isa\\riscv64\\lower.isle line 1143"
    )
}

// Generated as internal constructor for term is_fneg.
pub fn constructor_is_fneg<C: Context>(ctx: &mut C, arg0: Value) -> IsFneg {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Unary {
            opcode: ref v4,
            arg: v5,
        } = v3
        {
            if let &Opcode::Fneg = v4 {
                let v7 = IsFneg::Result {
                    negate: 0x1,
                    value: v5,
                };
                // Rule at src\isa\riscv64\lower.isle line 1554.
                return v7;
            }
        }
    }
    let v9 = IsFneg::Result {
        negate: 0x0,
        value: arg0,
    };
    // Rule at src\isa\riscv64\lower.isle line 1555.
    return v9;
}

// Generated as internal constructor for term is_fneg_neg.
pub fn constructor_is_fneg_neg<C: Context>(ctx: &mut C, arg0: &IsFneg) -> u64 {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src\isa\riscv64\lower.isle line 1558.
        return v1;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "is_fneg_neg", "src\\isa\\riscv64\\lower.isle line 1557"
    )
}

// Generated as internal constructor for term get_fneg_value.
pub fn constructor_get_fneg_value<C: Context>(ctx: &mut C, arg0: &IsFneg) -> Value {
    if let &IsFneg::Result {
        negate: v1,
        value: v2,
    } = arg0
    {
        // Rule at src\isa\riscv64\lower.isle line 1561.
        return v2;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "get_fneg_value", "src\\isa\\riscv64\\lower.isle line 1560"
    )
}

// Generated as internal constructor for term rv_fma.
pub fn constructor_rv_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: u64,
    arg3: Value,
    arg4: Value,
    arg5: Value,
) -> InstOutput {
    match arg1 {
        0x0 => {
            match arg2 {
                0x0 => {
                    let v20 = C::ty_vec_fits_in_register(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v56 =
                                        constructor_rv_vfmacc_vf(ctx, v22, v54, v55, v25, v26);
                                    let v57 = constructor_output_vreg(ctx, v56);
                                    // Rule at src\isa\riscv64\lower.isle line 1587.
                                    return v57;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v41 =
                                        constructor_rv_vfmacc_vf(ctx, v22, v23, v40, v25, v26);
                                    let v42 = constructor_output_vreg(ctx, v41);
                                    // Rule at src\isa\riscv64\lower.isle line 1583.
                                    return v42;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v27 = constructor_rv_vfmacc_vv(ctx, v22, v23, v24, v25, v26);
                        let v28 = constructor_output_vreg(ctx, v27);
                        // Rule at src\isa\riscv64\lower.isle line 1579.
                        return v28;
                    }
                    let v1 = C::ty_scalar_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v12 = constructor_rv_fmadd(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v13 = constructor_output_freg(ctx, v12);
                        // Rule at src\isa\riscv64\lower.isle line 1575.
                        return v13;
                    }
                }
                0x1 => {
                    let v20 = C::ty_vec_fits_in_register(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v58 =
                                        constructor_rv_vfmsac_vf(ctx, v22, v54, v55, v25, v26);
                                    let v59 = constructor_output_vreg(ctx, v58);
                                    // Rule at src\isa\riscv64\lower.isle line 1588.
                                    return v59;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v43 =
                                        constructor_rv_vfmsac_vf(ctx, v22, v23, v40, v25, v26);
                                    let v44 = constructor_output_vreg(ctx, v43);
                                    // Rule at src\isa\riscv64\lower.isle line 1584.
                                    return v44;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v29 = constructor_rv_vfmsac_vv(ctx, v22, v23, v24, v25, v26);
                        let v30 = constructor_output_vreg(ctx, v29);
                        // Rule at src\isa\riscv64\lower.isle line 1580.
                        return v30;
                    }
                    let v1 = C::ty_scalar_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v14 = constructor_rv_fmsub(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v15 = constructor_output_freg(ctx, v14);
                        // Rule at src\isa\riscv64\lower.isle line 1576.
                        return v15;
                    }
                }
                _ => {}
            }
        }
        0x1 => {
            match arg2 {
                0x0 => {
                    let v20 = C::ty_vec_fits_in_register(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v60 =
                                        constructor_rv_vfnmsac_vf(ctx, v22, v54, v55, v25, v26);
                                    let v61 = constructor_output_vreg(ctx, v60);
                                    // Rule at src\isa\riscv64\lower.isle line 1589.
                                    return v61;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v45 =
                                        constructor_rv_vfnmsac_vf(ctx, v22, v23, v40, v25, v26);
                                    let v46 = constructor_output_vreg(ctx, v45);
                                    // Rule at src\isa\riscv64\lower.isle line 1585.
                                    return v46;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v31 = constructor_rv_vfnmsac_vv(ctx, v22, v23, v24, v25, v26);
                        let v32 = constructor_output_vreg(ctx, v31);
                        // Rule at src\isa\riscv64\lower.isle line 1581.
                        return v32;
                    }
                    let v1 = C::ty_scalar_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v16 = constructor_rv_fnmsub(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v17 = constructor_output_freg(ctx, v16);
                        // Rule at src\isa\riscv64\lower.isle line 1577.
                        return v17;
                    }
                }
                0x1 => {
                    let v20 = C::ty_vec_fits_in_register(ctx, arg0);
                    if let Some(v21) = v20 {
                        let v49 = C::def_inst(ctx, arg4);
                        if let Some(v50) = v49 {
                            let v51 = &C::inst_data(ctx, v50);
                            if let &InstructionData::Unary {
                                opcode: ref v52,
                                arg: v53,
                            } = v51
                            {
                                if let &Opcode::Splat = v52 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v54 = constructor_put_in_vreg(ctx, arg3);
                                    let v55 = constructor_put_in_freg(ctx, v53);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v62 =
                                        constructor_rv_vfnmacc_vf(ctx, v22, v54, v55, v25, v26);
                                    let v63 = constructor_output_vreg(ctx, v62);
                                    // Rule at src\isa\riscv64\lower.isle line 1590.
                                    return v63;
                                }
                            }
                        }
                        let v35 = C::def_inst(ctx, arg3);
                        if let Some(v36) = v35 {
                            let v37 = &C::inst_data(ctx, v36);
                            if let &InstructionData::Unary {
                                opcode: ref v38,
                                arg: v39,
                            } = v37
                            {
                                if let &Opcode::Splat = v38 {
                                    let v22 = constructor_put_in_vreg(ctx, arg5);
                                    let v23 = constructor_put_in_vreg(ctx, arg4);
                                    let v40 = constructor_put_in_freg(ctx, v39);
                                    let v25 = &constructor_unmasked(ctx);
                                    let v26 = C::vstate_from_type(ctx, v21);
                                    let v47 =
                                        constructor_rv_vfnmacc_vf(ctx, v22, v23, v40, v25, v26);
                                    let v48 = constructor_output_vreg(ctx, v47);
                                    // Rule at src\isa\riscv64\lower.isle line 1586.
                                    return v48;
                                }
                            }
                        }
                        let v22 = constructor_put_in_vreg(ctx, arg5);
                        let v23 = constructor_put_in_vreg(ctx, arg4);
                        let v24 = constructor_put_in_vreg(ctx, arg3);
                        let v25 = &constructor_unmasked(ctx);
                        let v26 = C::vstate_from_type(ctx, v21);
                        let v33 = constructor_rv_vfnmacc_vv(ctx, v22, v23, v24, v25, v26);
                        let v34 = constructor_output_vreg(ctx, v33);
                        // Rule at src\isa\riscv64\lower.isle line 1582.
                        return v34;
                    }
                    let v1 = C::ty_scalar_float(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v9 = constructor_put_in_freg(ctx, arg3);
                        let v10 = constructor_put_in_freg(ctx, arg4);
                        let v11 = constructor_put_in_freg(ctx, arg5);
                        let v18 = constructor_rv_fnmadd(ctx, v2, &FRM::RNE, v9, v10, v11);
                        let v19 = constructor_output_freg(ctx, v18);
                        // Rule at src\isa\riscv64\lower.isle line 1578.
                        return v19;
                    }
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "rv_fma", "src\\isa\\riscv64\\lower.isle line 1574"
    )
}

// Generated as internal constructor for term gen_atomic_rmw_loop.
pub fn constructor_gen_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: Type,
    arg2: XReg,
    arg3: XReg,
) -> XReg {
    let v4 = constructor_temp_writable_xreg(ctx);
    let v5 = constructor_temp_writable_xreg(ctx);
    let v6 = constructor_gen_atomic_offset(ctx, arg2, arg1);
    let v9 = constructor_gen_atomic_p(ctx, arg2, arg1);
    let v7 = C::xreg_to_reg(ctx, v6);
    let v8 = C::writable_xreg_to_writable_reg(ctx, v4);
    let v10 = C::xreg_to_reg(ctx, v9);
    let v11 = C::xreg_to_reg(ctx, arg3);
    let v12 = C::writable_xreg_to_writable_reg(ctx, v5);
    let v13 = MInst::AtomicRmwLoop {
        offset: v7,
        op: arg0.clone(),
        dst: v8,
        ty: arg1,
        p: v10,
        x: v11,
        t0: v12,
    };
    let v14 = C::emit(ctx, &v13);
    let v15 = C::writable_reg_to_reg(ctx, v8);
    let v16 = C::xreg_new(ctx, v15);
    // Rule at src\isa\riscv64\lower.isle line 1638.
    return v16;
}

// Generated as internal constructor for term gen_atomic_offset.
pub fn constructor_gen_atomic_offset<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, 0x3);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        let v7 = constructor_rv_slli(ctx, v6, v5);
        // Rule at src\isa\riscv64\lower.isle line 1666.
        return v7;
    }
    let v8 = C::zero_reg(ctx);
    // Rule at src\isa\riscv64\lower.isle line 1669.
    return v8;
}

// Generated as internal constructor for term gen_atomic_p.
pub fn constructor_gen_atomic_p<C: Context>(ctx: &mut C, arg0: XReg, arg1: Type) -> XReg {
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::imm12_const(ctx, -0x4);
        let v6 = constructor_rv_andi(ctx, arg0, v5);
        // Rule at src\isa\riscv64\lower.isle line 1673.
        return v6;
    }
    // Rule at src\isa\riscv64\lower.isle line 1676.
    return arg0;
}

// Generated as internal constructor for term gen_load64_extend.
pub fn constructor_gen_load64_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ExtendOp,
    arg2: MemFlags,
    arg3: AMode,
) -> VReg {
    match arg1 {
        &ExtendOp::Zero => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v13 = constructor_rv_vzext_vf2(ctx, v10, v8, v11);
            // Rule at src\isa\riscv64\lower.isle line 2094.
            return v13;
        }
        &ExtendOp::Signed => {
            let v5 = &constructor_element_width_from_type(ctx, I64);
            let v7 = VecAMode::UnitStride { base: arg3 };
            let v8 = &constructor_unmasked(ctx);
            let v6 = C::vstate_from_type(ctx, I64);
            let v9 = constructor_vec_load(ctx, v5, &v7, arg2, v8, v6);
            let v10 = C::vreg_new(ctx, v9);
            let v11 = C::vstate_from_type(ctx, arg0);
            let v12 = constructor_rv_vsext_vf2(ctx, v10, v8, v11);
            // Rule at src\isa\riscv64\lower.isle line 2088.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "gen_load64_extend", "src\\isa\\riscv64\\lower.isle line 2086"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> XReg {
    match arg0 {
        &IntCC::Equal => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v20 = constructor_rv_seqz(ctx, v19);
                        // Rule at src\isa\riscv64\lower.isle line 2168.
                        return v20;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v12 = constructor_rv_seqz(ctx, v11);
                        // Rule at src\isa\riscv64\lower.isle line 2165.
                        return v12;
                    }
                }
            }
        }
        &IntCC::NotEqual => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v19 = constructor_rv_xori(ctx, v18, v17);
                        let v22 = constructor_rv_snez(ctx, v19);
                        // Rule at src\isa\riscv64\lower.isle line 2176.
                        return v22;
                    }
                }
            }
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v11 = constructor_rv_xori(ctx, v10, v9);
                        let v21 = constructor_rv_snez(ctx, v11);
                        // Rule at src\isa\riscv64\lower.isle line 2173.
                        return v21;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThan => {
            let v13 = C::i64_from_iconst(ctx, arg1);
            if let Some(v14) = v13 {
                let v15 = C::i64_is_zero(ctx, v14);
                if v15 == false {
                    let v16 = C::imm12_from_i64(ctx, v14);
                    if let Some(v17) = v16 {
                        let v18 = constructor_sext(ctx, arg2);
                        let v24 = constructor_rv_slti(ctx, v18, v17);
                        // Rule at src\isa\riscv64\lower.isle line 2184.
                        return v24;
                    }
                }
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v47 = &C::intcc_complement(ctx, arg0);
                        let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                        let v50 = C::imm12_const(ctx, 0x1);
                        let v51 = constructor_rv_xori(ctx, v48, v50);
                        // Rule at src\isa\riscv64\lower.isle line 2195.
                        return v51;
                    }
                }
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::i64_from_iconst(ctx, arg2);
            if let Some(v6) = v5 {
                let v7 = C::i64_is_zero(ctx, v6);
                if v7 == false {
                    let v8 = C::imm12_from_i64(ctx, v6);
                    if let Some(v9) = v8 {
                        let v10 = constructor_sext(ctx, arg1);
                        let v23 = constructor_rv_slti(ctx, v10, v9);
                        // Rule at src\isa\riscv64\lower.isle line 2181.
                        return v23;
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v36 = C::def_inst(ctx, arg1);
            if let Some(v37) = v36 {
                let v38 = &C::inst_data(ctx, v37);
                if let &InstructionData::UnaryImm {
                    opcode: ref v39,
                    imm: v40,
                } = v38
                {
                    if let &Opcode::Iconst = v39 {
                        let v41 = C::u64_from_imm64(ctx, v40);
                        let v42 = C::u64_is_zero(ctx, v41);
                        if v42 == false {
                            let v43 = C::imm12_from_u64(ctx, v41);
                            if let Some(v44) = v43 {
                                let v45 = constructor_zext(ctx, arg2);
                                let v46 = constructor_rv_sltiu(ctx, v45, v44);
                                // Rule at src\isa\riscv64\lower.isle line 2190.
                                return v46;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27
                {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v47 = &C::intcc_complement(ctx, arg0);
                                let v48 = constructor_lower_icmp(ctx, v47, arg1, arg2);
                                let v50 = C::imm12_const(ctx, 0x1);
                                let v51 = constructor_rv_xori(ctx, v48, v50);
                                // Rule at src\isa\riscv64\lower.isle line 2198.
                                return v51;
                            }
                        }
                    }
                }
            }
        }
        &IntCC::UnsignedLessThan => {
            let v25 = C::def_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::UnaryImm {
                    opcode: ref v28,
                    imm: v29,
                } = v27
                {
                    if let &Opcode::Iconst = v28 {
                        let v30 = C::u64_from_imm64(ctx, v29);
                        let v31 = C::u64_is_zero(ctx, v30);
                        if v31 == false {
                            let v32 = C::imm12_from_u64(ctx, v30);
                            if let Some(v33) = v32 {
                                let v34 = constructor_zext(ctx, arg1);
                                let v35 = constructor_rv_sltiu(ctx, v34, v33);
                                // Rule at src\isa\riscv64\lower.isle line 2187.
                                return v35;
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    let v3 = constructor_icmp_to_int_compare(ctx, arg0, arg1, arg2);
    let v4 = constructor_lower_int_compare(ctx, v3);
    // Rule at src\isa\riscv64\lower.isle line 2161.
    return v4;
}

// Generated as internal constructor for term lower_int_compare.
pub fn constructor_lower_int_compare<C: Context>(ctx: &mut C, arg0: IntegerCompare) -> XReg {
    let v1 = C::int_compare_decompose(ctx, arg0);
    match &v1.0 {
        &IntCC::Equal => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v12 = constructor_rv_seqz(ctx, v1.2);
                // Rule at src\isa\riscv64\lower.isle line 2211.
                return v12;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v9 = constructor_rv_seqz(ctx, v1.1);
                // Rule at src\isa\riscv64\lower.isle line 2209.
                return v9;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v6 = constructor_rv_seqz(ctx, v5);
            // Rule at src\isa\riscv64\lower.isle line 2207.
            return v6;
        }
        &IntCC::NotEqual => {
            let v10 = C::is_zero_reg(ctx, v1.1);
            if let Some(v11) = v10 {
                let v15 = constructor_rv_snez(ctx, v1.2);
                // Rule at src\isa\riscv64\lower.isle line 2218.
                return v15;
            }
            let v7 = C::is_zero_reg(ctx, v1.2);
            if let Some(v8) = v7 {
                let v14 = constructor_rv_snez(ctx, v1.1);
                // Rule at src\isa\riscv64\lower.isle line 2216.
                return v14;
            }
            let v5 = constructor_rv_xor(ctx, v1.1, v1.2);
            let v13 = constructor_rv_snez(ctx, v5);
            // Rule at src\isa\riscv64\lower.isle line 2214.
            return v13;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            // Rule at src\isa\riscv64\lower.isle line 2226.
            return v18;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v16, v21);
            // Rule at src\isa\riscv64\lower.isle line 2236.
            return v24;
        }
        &IntCC::SignedLessThan => {
            let v16 = constructor_rv_slt(ctx, v1.1, v1.2);
            // Rule at src\isa\riscv64\lower.isle line 2221.
            return v16;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v18 = constructor_rv_slt(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 0x1);
            let v22 = constructor_rv_xori(ctx, v18, v21);
            // Rule at src\isa\riscv64\lower.isle line 2231.
            return v22;
        }
        &IntCC::UnsignedGreaterThan => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            // Rule at src\isa\riscv64\lower.isle line 2228.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            let v21 = C::imm12_const(ctx, 0x1);
            let v25 = constructor_rv_xori(ctx, v17, v21);
            // Rule at src\isa\riscv64\lower.isle line 2238.
            return v25;
        }
        &IntCC::UnsignedLessThan => {
            let v17 = constructor_rv_sltu(ctx, v1.1, v1.2);
            // Rule at src\isa\riscv64\lower.isle line 2223.
            return v17;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v19 = constructor_rv_sltu(ctx, v1.2, v1.1);
            let v21 = C::imm12_const(ctx, 0x1);
            let v23 = constructor_rv_xori(ctx, v19, v21);
            // Rule at src\isa\riscv64\lower.isle line 2233.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_int_compare", "src\\isa\\riscv64\\lower.isle line 2204"
    )
}

// Generated as internal constructor for term lower_icmp_i128.
pub fn constructor_lower_icmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: ValueRegs,
    arg2: ValueRegs,
) -> XReg {
    let v25 = &C::intcc_unsigned(ctx, arg0);
    if let &IntCC::UnsignedLessThan = v25 {
        let v4 = C::value_regs_get(ctx, arg1, 0x0);
        let v26 = C::value_regs_get(ctx, arg1, 0x1);
        let v6 = C::value_regs_get(ctx, arg2, 0x0);
        let v27 = C::value_regs_get(ctx, arg2, 0x1);
        let v28 = C::xreg_new(ctx, v26);
        let v29 = C::xreg_new(ctx, v27);
        let v30 = C::int_compare(ctx, arg0, v28, v29);
        let v31 = constructor_lower_int_compare(ctx, v30);
        let v32 = C::xreg_new(ctx, v4);
        let v33 = C::xreg_new(ctx, v6);
        let v34 = constructor_rv_sltu(ctx, v32, v33);
        let v35 = C::xreg_new(ctx, v26);
        let v36 = C::xreg_new(ctx, v27);
        let v37 = constructor_rv_xor(ctx, v35, v36);
        let v38 = constructor_cmp_eqz(ctx, v37);
        let v39 = constructor_gen_select_xreg(ctx, v38, v34, v31);
        // Rule at src\isa\riscv64\lower.isle line 2279.
        return v39;
    }
    match arg0 {
        &IntCC::Equal => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v16 = constructor_rv_seqz(ctx, v15);
            // Rule at src\isa\riscv64\lower.isle line 2250.
            return v16;
        }
        &IntCC::NotEqual => {
            let v4 = C::value_regs_get(ctx, arg1, 0x0);
            let v5 = C::xreg_new(ctx, v4);
            let v6 = C::value_regs_get(ctx, arg2, 0x0);
            let v7 = C::xreg_new(ctx, v6);
            let v8 = constructor_rv_xor(ctx, v5, v7);
            let v10 = C::value_regs_get(ctx, arg1, 0x1);
            let v11 = C::xreg_new(ctx, v10);
            let v12 = C::value_regs_get(ctx, arg2, 0x1);
            let v13 = C::xreg_new(ctx, v12);
            let v14 = constructor_rv_xor(ctx, v11, v13);
            let v15 = constructor_rv_or(ctx, v8, v14);
            let v17 = constructor_rv_snez(ctx, v15);
            // Rule at src\isa\riscv64\lower.isle line 2254.
            return v17;
        }
        &IntCC::SignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src\isa\riscv64\lower.isle line 2260.
            return v19;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2268.
            return v24;
        }
        &IntCC::SignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2266.
            return v24;
        }
        &IntCC::UnsignedGreaterThan => {
            let v18 = &C::intcc_swap_args(ctx, arg0);
            let v19 = constructor_lower_icmp_i128(ctx, v18, arg2, arg1);
            // Rule at src\isa\riscv64\lower.isle line 2262.
            return v19;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2272.
            return v24;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v20 = &C::intcc_complement(ctx, arg0);
            let v21 = constructor_lower_icmp_i128(ctx, v20, arg1, arg2);
            let v23 = C::imm12_const(ctx, 0x1);
            let v24 = constructor_rv_xori(ctx, v21, v23);
            // Rule at src\isa\riscv64\lower.isle line 2270.
            return v24;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_i128", "src\\isa\\riscv64\\lower.isle line 2249"
    )
}

// Generated as internal constructor for term lower_float_compare.
pub fn constructor_lower_float_compare<C: Context>(ctx: &mut C, arg0: &FloatCompare) -> XReg {
    match arg0 {
        &FloatCompare::One { r: v1 } => {
            // Rule at src\isa\riscv64\lower.isle line 2299.
            return v1;
        }
        &FloatCompare::Zero { r: v2 } => {
            let v3 = constructor_rv_seqz(ctx, v2);
            // Rule at src\isa\riscv64\lower.isle line 2300.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_float_compare", "src\\isa\\riscv64\\lower.isle line 2298"
    )
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_uint.
pub fn constructor_lower_inbounds_fcvt_to_uint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtlu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2330.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtwu(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2328.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_inbounds_fcvt_to_uint", "src\\isa\\riscv64\\lower.isle line 2327"
    )
}

// Generated as internal constructor for term lower_inbounds_fcvt_to_sint.
pub fn constructor_lower_inbounds_fcvt_to_sint<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    if arg0 == I64 {
        let v7 = constructor_rv_fcvtl(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2347.
        return v7;
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_rv_fcvtw(ctx, arg1, &FRM::RTZ, arg2);
        // Rule at src\isa\riscv64\lower.isle line 2345.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_inbounds_fcvt_to_sint", "src\\isa\\riscv64\\lower.isle line 2344"
    )
}

// Generated as internal constructor for term lower_fcvt_to_sint_sat.
pub fn constructor_lower_fcvt_to_sint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v16 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2363.
            return v16;
        }
        I64 => {
            let v17 = constructor_rv_fcvtl(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2364.
            return v17;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::fcvt_smax_bound(ctx, arg0, v3, true);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::fcvt_smin_bound(ctx, arg0, v3, true);
        let v10 = constructor_imm(ctx, arg0, v9);
        let v11 = C::freg_new(ctx, v10);
        let v12 = constructor_rv_fmax(ctx, arg0, v11, arg2);
        let v13 = constructor_rv_fmin(ctx, arg0, v8, v12);
        let v15 = constructor_rv_fcvtw(ctx, arg0, &FRM::RTZ, v13);
        // Rule at src\isa\riscv64\lower.isle line 2358.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcvt_to_sint_sat", "src\\isa\\riscv64\\lower.isle line 2357"
    )
}

// Generated as internal constructor for term handle_fcvt_to_int_nan.
pub fn constructor_handle_fcvt_to_int_nan<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: FReg,
    arg2: XReg,
) -> XReg {
    let v3 = constructor_rv_feq(ctx, arg0, arg1, arg1);
    let v4 = constructor_rv_neg(ctx, v3);
    let v5 = constructor_rv_and(ctx, arg2, v4);
    // Rule at src\isa\riscv64\lower.isle line 2382.
    return v5;
}

// Generated as internal constructor for term lower_fcvt_to_uint_sat.
pub fn constructor_lower_fcvt_to_uint_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: FReg,
) -> XReg {
    match arg1 {
        I32 => {
            let v15 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2406.
            return v15;
        }
        I64 => {
            let v16 = constructor_rv_fcvtlu(ctx, arg0, &FRM::RTZ, arg2);
            // Rule at src\isa\riscv64\lower.isle line 2407.
            return v16;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::fcvt_umax_bound(ctx, arg0, v3, true);
        let v7 = constructor_imm(ctx, arg0, v6);
        let v8 = C::freg_new(ctx, v7);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_rv_fmvdx(ctx, v9);
        let v11 = constructor_rv_fmax(ctx, arg0, v10, arg2);
        let v12 = constructor_rv_fmin(ctx, arg0, v8, v11);
        let v14 = constructor_rv_fcvtwu(ctx, arg0, &FRM::RTZ, v12);
        // Rule at src\isa\riscv64\lower.isle line 2401.
        return v14;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_fcvt_to_uint_sat", "src\\isa\\riscv64\\lower.isle line 2400"
    )
}
